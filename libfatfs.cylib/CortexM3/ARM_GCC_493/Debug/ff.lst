ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ld_word,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	ld_word, %function
  23              	ld_word:
  24              	.LFB0:
  25              		.file 1 ".\\ff.c"
   1:.\ff.c        **** /*----------------------------------------------------------------------------/
   2:.\ff.c        **** /  FatFs - Generic FAT file system module  R0.12b                             /
   3:.\ff.c        **** /-----------------------------------------------------------------------------/
   4:.\ff.c        **** /
   5:.\ff.c        **** / Copyright (C) 2016, ChaN, all right reserved.
   6:.\ff.c        **** /
   7:.\ff.c        **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:.\ff.c        **** / source and binary forms, with or without modification, are permitted provided
   9:.\ff.c        **** / that the following condition is met:
  10:.\ff.c        **** 
  11:.\ff.c        **** / 1. Redistributions of source code must retain the above copyright notice,
  12:.\ff.c        **** /    this condition and the following disclaimer.
  13:.\ff.c        **** /
  14:.\ff.c        **** / This software is provided by the copyright holder and contributors "AS IS"
  15:.\ff.c        **** / and any warranties related to this software are DISCLAIMED.
  16:.\ff.c        **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:.\ff.c        **** / by use of this software.
  18:.\ff.c        **** /----------------------------------------------------------------------------*/
  19:.\ff.c        **** 
  20:.\ff.c        **** 
  21:.\ff.c        **** #include "ff.h"			/* Declarations of FatFs API */
  22:.\ff.c        **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:.\ff.c        **** 
  24:.\ff.c        **** 
  25:.\ff.c        **** /*--------------------------------------------------------------------------
  26:.\ff.c        **** 
  27:.\ff.c        ****    Module Private Definitions
  28:.\ff.c        **** 
  29:.\ff.c        **** ---------------------------------------------------------------------------*/
  30:.\ff.c        **** 
  31:.\ff.c        **** #if _FATFS != 68020	/* Revision ID */
  32:.\ff.c        **** #error Wrong include file (ff.h).
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 2


  33:.\ff.c        **** #endif
  34:.\ff.c        **** 
  35:.\ff.c        **** 
  36:.\ff.c        **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
  37:.\ff.c        **** 
  38:.\ff.c        **** 
  39:.\ff.c        **** /* Reentrancy related */
  40:.\ff.c        **** #if _FS_REENTRANT
  41:.\ff.c        **** #if _USE_LFN == 1
  42:.\ff.c        **** #error Static LFN work area cannot be used at thread-safe configuration
  43:.\ff.c        **** #endif
  44:.\ff.c        **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
  45:.\ff.c        **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
  46:.\ff.c        **** #else
  47:.\ff.c        **** #define	ENTER_FF(fs)
  48:.\ff.c        **** #define LEAVE_FF(fs, res)	return res
  49:.\ff.c        **** #endif
  50:.\ff.c        **** 
  51:.\ff.c        **** 
  52:.\ff.c        **** 
  53:.\ff.c        **** /* Definitions of sector size */
  54:.\ff.c        **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
  55:.\ff.c        **** #error Wrong sector size configuration
  56:.\ff.c        **** #endif
  57:.\ff.c        **** #if _MAX_SS == _MIN_SS
  58:.\ff.c        **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
  59:.\ff.c        **** #else
  60:.\ff.c        **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
  61:.\ff.c        **** #endif
  62:.\ff.c        **** 
  63:.\ff.c        **** 
  64:.\ff.c        **** /* Timestamp */
  65:.\ff.c        **** #if _FS_NORTC == 1
  66:.\ff.c        **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
  67:.\ff.c        **** #error Invalid _FS_NORTC settings
  68:.\ff.c        **** #endif
  69:.\ff.c        **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
  70:.\ff.c        **** #else
  71:.\ff.c        **** #define GET_FATTIME()	get_fattime()
  72:.\ff.c        **** #endif
  73:.\ff.c        **** 
  74:.\ff.c        **** 
  75:.\ff.c        **** /* File lock controls */
  76:.\ff.c        **** #if _FS_LOCK != 0
  77:.\ff.c        **** #if _FS_READONLY
  78:.\ff.c        **** #error _FS_LOCK must be 0 at read-only configuration
  79:.\ff.c        **** #endif
  80:.\ff.c        **** typedef struct {
  81:.\ff.c        **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
  82:.\ff.c        **** 	DWORD clu;		/* Object ID 2, directory (0:root) */
  83:.\ff.c        **** 	DWORD ofs;		/* Object ID 3, directory offset */
  84:.\ff.c        **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
  85:.\ff.c        **** } FILESEM;
  86:.\ff.c        **** #endif
  87:.\ff.c        **** 
  88:.\ff.c        **** 
  89:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 3


  90:.\ff.c        **** /* DBCS code ranges and SBCS upper conversion tables */
  91:.\ff.c        **** 
  92:.\ff.c        **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  93:.\ff.c        **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  94:.\ff.c        **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  95:.\ff.c        **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  96:.\ff.c        **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  97:.\ff.c        **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  98:.\ff.c        **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  99:.\ff.c        **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 100:.\ff.c        **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 101:.\ff.c        **** 
 102:.\ff.c        **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 103:.\ff.c        **** #define _DF1S	0x81
 104:.\ff.c        **** #define _DF1E	0xFE
 105:.\ff.c        **** #define _DS1S	0x40
 106:.\ff.c        **** #define _DS1E	0x7E
 107:.\ff.c        **** #define _DS2S	0x80
 108:.\ff.c        **** #define _DS2E	0xFE
 109:.\ff.c        **** 
 110:.\ff.c        **** #elif _CODE_PAGE == 949	/* Korean */
 111:.\ff.c        **** #define _DF1S	0x81
 112:.\ff.c        **** #define _DF1E	0xFE
 113:.\ff.c        **** #define _DS1S	0x41
 114:.\ff.c        **** #define _DS1E	0x5A
 115:.\ff.c        **** #define _DS2S	0x61
 116:.\ff.c        **** #define _DS2E	0x7A
 117:.\ff.c        **** #define _DS3S	0x81
 118:.\ff.c        **** #define _DS3E	0xFE
 119:.\ff.c        **** 
 120:.\ff.c        **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 121:.\ff.c        **** #define _DF1S	0x81
 122:.\ff.c        **** #define _DF1E	0xFE
 123:.\ff.c        **** #define _DS1S	0x40
 124:.\ff.c        **** #define _DS1E	0x7E
 125:.\ff.c        **** #define _DS2S	0xA1
 126:.\ff.c        **** #define _DS2E	0xFE
 127:.\ff.c        **** 
 128:.\ff.c        **** #elif _CODE_PAGE == 437	/* U.S. */
 129:.\ff.c        **** #define _DF1S	0
 130:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 131:.\ff.c        **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 132:.\ff.c        **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 133:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 134:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 135:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 136:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 137:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 138:.\ff.c        **** 
 139:.\ff.c        **** #elif _CODE_PAGE == 720	/* Arabic */
 140:.\ff.c        **** #define _DF1S	0
 141:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 142:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 143:.\ff.c        **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 144:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 145:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 146:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 4


 147:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 148:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 149:.\ff.c        **** 
 150:.\ff.c        **** #elif _CODE_PAGE == 737	/* Greek */
 151:.\ff.c        **** #define _DF1S	0
 152:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 153:.\ff.c        **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 154:.\ff.c        **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 155:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 156:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 157:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 158:.\ff.c        **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 159:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 160:.\ff.c        **** 
 161:.\ff.c        **** #elif _CODE_PAGE == 771	/* KBL */
 162:.\ff.c        **** #define _DF1S	0
 163:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 164:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 165:.\ff.c        **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 166:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 167:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 168:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 169:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 170:.\ff.c        **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 171:.\ff.c        **** 
 172:.\ff.c        **** #elif _CODE_PAGE == 775	/* Baltic */
 173:.\ff.c        **** #define _DF1S	0
 174:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 175:.\ff.c        **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 176:.\ff.c        **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 177:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 178:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 179:.\ff.c        **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 180:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 181:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 182:.\ff.c        **** 
 183:.\ff.c        **** #elif _CODE_PAGE == 850	/* Latin 1 */
 184:.\ff.c        **** #define _DF1S	0
 185:.\ff.c        **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 186:.\ff.c        **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 187:.\ff.c        **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 188:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 189:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 190:.\ff.c        **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 191:.\ff.c        **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 192:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 193:.\ff.c        **** 
 194:.\ff.c        **** #elif _CODE_PAGE == 852	/* Latin 2 */
 195:.\ff.c        **** #define _DF1S	0
 196:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 197:.\ff.c        **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 198:.\ff.c        **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 199:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 200:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 201:.\ff.c        **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 202:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 203:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 5


 204:.\ff.c        **** 
 205:.\ff.c        **** #elif _CODE_PAGE == 855	/* Cyrillic */
 206:.\ff.c        **** #define _DF1S	0
 207:.\ff.c        **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 208:.\ff.c        **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 209:.\ff.c        **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 210:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 211:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 212:.\ff.c        **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 213:.\ff.c        **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 214:.\ff.c        **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 215:.\ff.c        **** 
 216:.\ff.c        **** #elif _CODE_PAGE == 857	/* Turkish */
 217:.\ff.c        **** #define _DF1S	0
 218:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 219:.\ff.c        **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 220:.\ff.c        **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 221:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 222:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 223:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 224:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 225:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 226:.\ff.c        **** 
 227:.\ff.c        **** #elif _CODE_PAGE == 860	/* Portuguese */
 228:.\ff.c        **** #define _DF1S	0
 229:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 230:.\ff.c        **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 231:.\ff.c        **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 232:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 233:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 234:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 235:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 236:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 237:.\ff.c        **** 
 238:.\ff.c        **** #elif _CODE_PAGE == 861	/* Icelandic */
 239:.\ff.c        **** #define _DF1S	0
 240:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 241:.\ff.c        **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 242:.\ff.c        **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 243:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 244:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 245:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 246:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 247:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 248:.\ff.c        **** 
 249:.\ff.c        **** #elif _CODE_PAGE == 862	/* Hebrew */
 250:.\ff.c        **** #define _DF1S	0
 251:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 252:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 253:.\ff.c        **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 254:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 255:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 256:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 257:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 258:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 259:.\ff.c        **** 
 260:.\ff.c        **** #elif _CODE_PAGE == 863	/* Canadian-French */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 6


 261:.\ff.c        **** #define _DF1S	0
 262:.\ff.c        **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 263:.\ff.c        **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 264:.\ff.c        **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 265:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 266:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 267:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 268:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 269:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 270:.\ff.c        **** 
 271:.\ff.c        **** #elif _CODE_PAGE == 864	/* Arabic */
 272:.\ff.c        **** #define _DF1S	0
 273:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 274:.\ff.c        **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 275:.\ff.c        **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 276:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 277:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 278:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 279:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 280:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 281:.\ff.c        **** 
 282:.\ff.c        **** #elif _CODE_PAGE == 865	/* Nordic */
 283:.\ff.c        **** #define _DF1S	0
 284:.\ff.c        **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 285:.\ff.c        **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 286:.\ff.c        **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 287:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 288:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 289:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 290:.\ff.c        **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 291:.\ff.c        **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 292:.\ff.c        **** 
 293:.\ff.c        **** #elif _CODE_PAGE == 866	/* Russian */
 294:.\ff.c        **** #define _DF1S	0
 295:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 296:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 297:.\ff.c        **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 298:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 299:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 300:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 301:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 302:.\ff.c        **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 303:.\ff.c        **** 
 304:.\ff.c        **** #elif _CODE_PAGE == 869	/* Greek 2 */
 305:.\ff.c        **** #define _DF1S	0
 306:.\ff.c        **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 307:.\ff.c        **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 308:.\ff.c        **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 309:.\ff.c        **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 310:.\ff.c        **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 311:.\ff.c        **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 312:.\ff.c        **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 313:.\ff.c        **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 314:.\ff.c        **** 
 315:.\ff.c        **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 316:.\ff.c        **** #if _USE_LFN != 0
 317:.\ff.c        **** #error Cannot enable LFN without valid code page.
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 7


 318:.\ff.c        **** #endif
 319:.\ff.c        **** #define _DF1S	0
 320:.\ff.c        **** 
 321:.\ff.c        **** #else
 322:.\ff.c        **** #error Unknown code page
 323:.\ff.c        **** 
 324:.\ff.c        **** #endif
 325:.\ff.c        **** 
 326:.\ff.c        **** 
 327:.\ff.c        **** /* Character code support macros */
 328:.\ff.c        **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 329:.\ff.c        **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 330:.\ff.c        **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 331:.\ff.c        **** 
 332:.\ff.c        **** #if _DF1S != 0	/* Code page is DBCS */
 333:.\ff.c        **** 
 334:.\ff.c        **** #ifdef _DF2S	/* Two 1st byte areas */
 335:.\ff.c        **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 336:.\ff.c        **** #else			/* One 1st byte area */
 337:.\ff.c        **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 338:.\ff.c        **** #endif
 339:.\ff.c        **** 
 340:.\ff.c        **** #ifdef _DS3S	/* Three 2nd byte areas */
 341:.\ff.c        **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 342:.\ff.c        **** #else			/* Two 2nd byte areas */
 343:.\ff.c        **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 344:.\ff.c        **** #endif
 345:.\ff.c        **** 
 346:.\ff.c        **** #else			/* Code page is SBCS */
 347:.\ff.c        **** 
 348:.\ff.c        **** #define IsDBCS1(c)	0
 349:.\ff.c        **** #define IsDBCS2(c)	0
 350:.\ff.c        **** 
 351:.\ff.c        **** #endif /* _DF1S */
 352:.\ff.c        **** 
 353:.\ff.c        **** 
 354:.\ff.c        **** /* File attribute bits (internal use) */
 355:.\ff.c        **** #define	AM_VOL		0x08	/* Volume label */
 356:.\ff.c        **** #define AM_LFN		0x0F	/* LFN entry */
 357:.\ff.c        **** #define AM_MASK		0x3F	/* Mask of defined bits */
 358:.\ff.c        **** 
 359:.\ff.c        **** 
 360:.\ff.c        **** /* File access control and file status flags (internal use) */
 361:.\ff.c        **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 362:.\ff.c        **** #define FA_MODIFIED	0x40	/* File has been modified */
 363:.\ff.c        **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 364:.\ff.c        **** 
 365:.\ff.c        **** 
 366:.\ff.c        **** /* Name status flags */
 367:.\ff.c        **** #define NSFLAG		11		/* Index of name status byte in fn[] */
 368:.\ff.c        **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 369:.\ff.c        **** #define NS_LFN		0x02	/* Force to create LFN entry */
 370:.\ff.c        **** #define NS_LAST		0x04	/* Last segment */
 371:.\ff.c        **** #define NS_BODY		0x08	/* Lower case flag (body) */
 372:.\ff.c        **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 373:.\ff.c        **** #define NS_DOT		0x20	/* Dot entry */
 374:.\ff.c        **** #define NS_NOLFN	0x40	/* Do not find LFN */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 8


 375:.\ff.c        **** #define NS_NONAME	0x80	/* Not followed */
 376:.\ff.c        **** 
 377:.\ff.c        **** 
 378:.\ff.c        **** /* Limits and boundaries (differ from specs but correct for real DOS/Windows) */
 379:.\ff.c        **** #define MAX_FAT12	0xFF5			/* Maximum number of FAT12 clusters */
 380:.\ff.c        **** #define	MAX_FAT16	0xFFF5			/* Maximum number of FAT16 clusters */
 381:.\ff.c        **** #define	MAX_FAT32	0xFFFFFF5		/* Maximum number of FAT32 clusters */
 382:.\ff.c        **** #define	MAX_EXFAT	0x7FFFFFFD		/* Maximum number of exFAT clusters (limited by implementation) */
 383:.\ff.c        **** #define MAX_DIR		0x200000		/* Maximum size of FAT directory */
 384:.\ff.c        **** #define MAX_DIR_EX	0x10000000		/* Maximum size of exFAT directory */
 385:.\ff.c        **** 
 386:.\ff.c        **** 
 387:.\ff.c        **** /* FatFs refers the members in the FAT structures as byte array instead of
 388:.\ff.c        **** / structure members because the structure is not binary compatible between
 389:.\ff.c        **** / different platforms */
 390:.\ff.c        **** 
 391:.\ff.c        **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 392:.\ff.c        **** #define BS_OEMName			3		/* OEM name (8-byte) */
 393:.\ff.c        **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 394:.\ff.c        **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 395:.\ff.c        **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 396:.\ff.c        **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 397:.\ff.c        **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 398:.\ff.c        **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 399:.\ff.c        **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 400:.\ff.c        **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 401:.\ff.c        **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 402:.\ff.c        **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 403:.\ff.c        **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 404:.\ff.c        **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 405:.\ff.c        **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 406:.\ff.c        **** #define BS_NTres			37		/* Error flag (BYTE) */
 407:.\ff.c        **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 408:.\ff.c        **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 409:.\ff.c        **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 410:.\ff.c        **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 411:.\ff.c        **** #define BS_BootCode			62		/* Boot code (448-byte) */
 412:.\ff.c        **** #define BS_55AA				510		/* Signature word (WORD) */
 413:.\ff.c        **** 
 414:.\ff.c        **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 415:.\ff.c        **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 416:.\ff.c        **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 417:.\ff.c        **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 418:.\ff.c        **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 419:.\ff.c        **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 420:.\ff.c        **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 421:.\ff.c        **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 422:.\ff.c        **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 423:.\ff.c        **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 424:.\ff.c        **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 425:.\ff.c        **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 426:.\ff.c        **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 427:.\ff.c        **** 
 428:.\ff.c        **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 429:.\ff.c        **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 430:.\ff.c        **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 431:.\ff.c        **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 9


 432:.\ff.c        **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 433:.\ff.c        **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 434:.\ff.c        **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 435:.\ff.c        **** #define BPB_RootClusEx		96		/* exFAT: Root directory cluster (DWORD) */
 436:.\ff.c        **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 437:.\ff.c        **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
 438:.\ff.c        **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 439:.\ff.c        **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 440:.\ff.c        **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in byte (BYTE) */
 441:.\ff.c        **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in sector (BYTE) */
 442:.\ff.c        **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 443:.\ff.c        **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 444:.\ff.c        **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 445:.\ff.c        **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 446:.\ff.c        **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 447:.\ff.c        **** 
 448:.\ff.c        **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 449:.\ff.c        **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 450:.\ff.c        **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 451:.\ff.c        **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 452:.\ff.c        **** 
 453:.\ff.c        **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 454:.\ff.c        **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 455:.\ff.c        **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 456:.\ff.c        **** #define PTE_StHead			1		/* MBR PTE: Start head */
 457:.\ff.c        **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 458:.\ff.c        **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 459:.\ff.c        **** #define PTE_System			4		/* MBR PTE: System ID */
 460:.\ff.c        **** #define PTE_EdHead			5		/* MBR PTE: End head */
 461:.\ff.c        **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 462:.\ff.c        **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 463:.\ff.c        **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 464:.\ff.c        **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 465:.\ff.c        **** 
 466:.\ff.c        **** #define	DIR_Name			0		/* Short file name (11-byte) */
 467:.\ff.c        **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 468:.\ff.c        **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 469:.\ff.c        **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 470:.\ff.c        **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 471:.\ff.c        **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 472:.\ff.c        **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 473:.\ff.c        **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 474:.\ff.c        **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 475:.\ff.c        **** #define	DIR_FileSize		28		/* File size (DWORD) */
 476:.\ff.c        **** #define	LDIR_Ord			0		/* LFN entry order and LLE flag (BYTE) */
 477:.\ff.c        **** #define	LDIR_Attr			11		/* LFN attribute (BYTE) */
 478:.\ff.c        **** #define	LDIR_Type			12		/* LFN type (BYTE) */
 479:.\ff.c        **** #define	LDIR_Chksum			13		/* Checksum of the SFN entry (BYTE) */
 480:.\ff.c        **** #define	LDIR_FstClusLO		26		/* Must be zero (WORD) */
 481:.\ff.c        **** #define	XDIR_Type			0		/* Type of exFAT directory entry (BYTE) */
 482:.\ff.c        **** #define	XDIR_NumLabel		1		/* Number of volume label characters (BYTE) */
 483:.\ff.c        **** #define	XDIR_Label			2		/* Volume label (11-WORD) */
 484:.\ff.c        **** #define	XDIR_CaseSum		4		/* Sum of case conversion table (DWORD) */
 485:.\ff.c        **** #define	XDIR_NumSec			1		/* Number of secondary entries (BYTE) */
 486:.\ff.c        **** #define	XDIR_SetSum			2		/* Sum of the set of directory entries (WORD) */
 487:.\ff.c        **** #define	XDIR_Attr			4		/* File attribute (WORD) */
 488:.\ff.c        **** #define	XDIR_CrtTime		8		/* Created time (DWORD) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 10


 489:.\ff.c        **** #define	XDIR_ModTime		12		/* Modified time (DWORD) */
 490:.\ff.c        **** #define	XDIR_AccTime		16		/* Last accessed time (DWORD) */
 491:.\ff.c        **** #define	XDIR_CrtTime10		20		/* Created time subsecond (BYTE) */
 492:.\ff.c        **** #define	XDIR_ModTime10		21		/* Modified time subsecond (BYTE) */
 493:.\ff.c        **** #define	XDIR_CrtTZ			22		/* Created timezone (BYTE) */
 494:.\ff.c        **** #define	XDIR_ModTZ			23		/* Modified timezone (BYTE) */
 495:.\ff.c        **** #define	XDIR_AccTZ			24		/* Last accessed timezone (BYTE) */
 496:.\ff.c        **** #define	XDIR_GenFlags		33		/* Gneral secondary flags (WORD) */
 497:.\ff.c        **** #define	XDIR_NumName		35		/* Number of file name characters (BYTE) */
 498:.\ff.c        **** #define	XDIR_NameHash		36		/* Hash of file name (WORD) */
 499:.\ff.c        **** #define XDIR_ValidFileSize	40		/* Valid file size (QWORD) */
 500:.\ff.c        **** #define	XDIR_FstClus		52		/* First cluster of the file data (DWORD) */
 501:.\ff.c        **** #define	XDIR_FileSize		56		/* File/Directory size (QWORD) */
 502:.\ff.c        **** 
 503:.\ff.c        **** #define	SZDIRE				32		/* Size of a directory entry */
 504:.\ff.c        **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 505:.\ff.c        **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 506:.\ff.c        **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 507:.\ff.c        **** 
 508:.\ff.c        **** 
 509:.\ff.c        **** 
 510:.\ff.c        **** 
 511:.\ff.c        **** 
 512:.\ff.c        **** /*--------------------------------------------------------------------------
 513:.\ff.c        **** 
 514:.\ff.c        ****    Module Private Work Area
 515:.\ff.c        **** 
 516:.\ff.c        **** ---------------------------------------------------------------------------*/
 517:.\ff.c        **** 
 518:.\ff.c        **** /* Remark: Variables here without initial value shall be guaranteed zero/null
 519:.\ff.c        **** /  at start-up. If not, either the linker or start-up routine being used is
 520:.\ff.c        **** /  not compliance with C standard. */
 521:.\ff.c        **** 
 522:.\ff.c        **** #if _VOLUMES < 1 || _VOLUMES > 9
 523:.\ff.c        **** #error Wrong _VOLUMES setting
 524:.\ff.c        **** #endif
 525:.\ff.c        **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 526:.\ff.c        **** static WORD Fsid;				/* File system mount ID */
 527:.\ff.c        **** 
 528:.\ff.c        **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 529:.\ff.c        **** static BYTE CurrVol;			/* Current drive */
 530:.\ff.c        **** #endif
 531:.\ff.c        **** 
 532:.\ff.c        **** #if _FS_LOCK != 0
 533:.\ff.c        **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 534:.\ff.c        **** #endif
 535:.\ff.c        **** 
 536:.\ff.c        **** #if _USE_LFN == 0			/* Non-LFN configuration */
 537:.\ff.c        **** #define	DEF_NAMBUF
 538:.\ff.c        **** #define INIT_NAMBUF(fs)
 539:.\ff.c        **** #define	FREE_NAMBUF()
 540:.\ff.c        **** #else
 541:.\ff.c        **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 542:.\ff.c        **** #error Wrong _MAX_LFN setting
 543:.\ff.c        **** #endif
 544:.\ff.c        **** 
 545:.\ff.c        **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 11


 546:.\ff.c        **** #if _FS_EXFAT
 547:.\ff.c        **** static BYTE	DirBuf[SZDIRE*19];	/* Directory entry block scratchpad buffer (19 entries in size) */
 548:.\ff.c        **** #endif
 549:.\ff.c        **** static WCHAR LfnBuf[_MAX_LFN+1];	/* LFN enabled with static working buffer */
 550:.\ff.c        **** #define	DEF_NAMBUF
 551:.\ff.c        **** #define INIT_NAMBUF(fs)
 552:.\ff.c        **** #define	FREE_NAMBUF()
 553:.\ff.c        **** 
 554:.\ff.c        **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 555:.\ff.c        **** #if _FS_EXFAT
 556:.\ff.c        **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[SZDIRE*19];
 557:.\ff.c        **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 558:.\ff.c        **** #define	FREE_NAMBUF()
 559:.\ff.c        **** #else
 560:.\ff.c        **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 561:.\ff.c        **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 562:.\ff.c        **** #define	FREE_NAMBUF()
 563:.\ff.c        **** #endif
 564:.\ff.c        **** 
 565:.\ff.c        **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 566:.\ff.c        **** #if _FS_EXFAT
 567:.\ff.c        **** #define	DEF_NAMBUF		WCHAR *lfn;
 568:.\ff.c        **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + SZDIRE*19); if (!lfn) LEAVE_FF(fs, FR_
 569:.\ff.c        **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 570:.\ff.c        **** #else
 571:.\ff.c        **** #define	DEF_NAMBUF		WCHAR *lfn;
 572:.\ff.c        **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 573:.\ff.c        **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 574:.\ff.c        **** #endif
 575:.\ff.c        **** 
 576:.\ff.c        **** #else
 577:.\ff.c        **** #error Wrong _USE_LFN setting
 578:.\ff.c        **** #endif
 579:.\ff.c        **** #endif
 580:.\ff.c        **** 
 581:.\ff.c        **** #ifdef _EXCVT
 582:.\ff.c        **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 583:.\ff.c        **** #endif
 584:.\ff.c        **** 
 585:.\ff.c        **** 
 586:.\ff.c        **** 
 587:.\ff.c        **** 
 588:.\ff.c        **** 
 589:.\ff.c        **** 
 590:.\ff.c        **** /*--------------------------------------------------------------------------
 591:.\ff.c        **** 
 592:.\ff.c        ****    Module Private Functions
 593:.\ff.c        **** 
 594:.\ff.c        **** ---------------------------------------------------------------------------*/
 595:.\ff.c        **** 
 596:.\ff.c        **** 
 597:.\ff.c        **** /*-----------------------------------------------------------------------*/
 598:.\ff.c        **** /* Load/Store multi-byte word in the FAT structure                       */
 599:.\ff.c        **** /*-----------------------------------------------------------------------*/
 600:.\ff.c        **** 
 601:.\ff.c        **** static
 602:.\ff.c        **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 12


 603:.\ff.c        **** {
  26              		.loc 1 603 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 604:.\ff.c        **** 	WORD rv;
 605:.\ff.c        **** 
 606:.\ff.c        **** 	rv = ptr[1];
  32              		.loc 1 606 0
  33 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  34              	.LVL1:
 607:.\ff.c        **** 	rv = rv << 8 | ptr[0];
  35              		.loc 1 607 0
  36 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  37              	.LVL2:
 608:.\ff.c        **** 	return rv;
 609:.\ff.c        **** }
  38              		.loc 1 609 0
  39 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  40              	.LVL3:
  41 0008 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE0:
  44              		.size	ld_word, .-ld_word
  45 000a 00BF     		.section	.text.ld_dword,"ax",%progbits
  46              		.align	2
  47              		.thumb
  48              		.thumb_func
  49              		.type	ld_dword, %function
  50              	ld_dword:
  51              	.LFB1:
 610:.\ff.c        **** 
 611:.\ff.c        **** static
 612:.\ff.c        **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 613:.\ff.c        **** {
  52              		.loc 1 613 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.LVL4:
 614:.\ff.c        **** 	DWORD rv;
 615:.\ff.c        **** 
 616:.\ff.c        **** 	rv = ptr[3];
  58              		.loc 1 616 0
  59 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  60              	.LVL5:
 617:.\ff.c        **** 	rv = rv << 8 | ptr[2];
  61              		.loc 1 617 0
  62 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  63 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  64              	.LVL6:
 618:.\ff.c        **** 	rv = rv << 8 | ptr[1];
  65              		.loc 1 618 0
  66 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 13


  67 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  68              	.LVL7:
 619:.\ff.c        **** 	rv = rv << 8 | ptr[0];
  69              		.loc 1 619 0
  70 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  71              	.LVL8:
 620:.\ff.c        **** 	return rv;
 621:.\ff.c        **** }
  72              		.loc 1 621 0
  73 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  74              	.LVL9:
  75 0014 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1:
  78              		.size	ld_dword, .-ld_dword
  79 0016 00BF     		.section	.text.st_word,"ax",%progbits
  80              		.align	2
  81              		.thumb
  82              		.thumb_func
  83              		.type	st_word, %function
  84              	st_word:
  85              	.LFB2:
 622:.\ff.c        **** 
 623:.\ff.c        **** #if _FS_EXFAT
 624:.\ff.c        **** static
 625:.\ff.c        **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 626:.\ff.c        **** {
 627:.\ff.c        **** 	QWORD rv;
 628:.\ff.c        **** 
 629:.\ff.c        **** 	rv = ptr[7];
 630:.\ff.c        **** 	rv = rv << 8 | ptr[6];
 631:.\ff.c        **** 	rv = rv << 8 | ptr[5];
 632:.\ff.c        **** 	rv = rv << 8 | ptr[4];
 633:.\ff.c        **** 	rv = rv << 8 | ptr[3];
 634:.\ff.c        **** 	rv = rv << 8 | ptr[2];
 635:.\ff.c        **** 	rv = rv << 8 | ptr[1];
 636:.\ff.c        **** 	rv = rv << 8 | ptr[0];
 637:.\ff.c        **** 	return rv;
 638:.\ff.c        **** }
 639:.\ff.c        **** #endif
 640:.\ff.c        **** 
 641:.\ff.c        **** #if !_FS_READONLY
 642:.\ff.c        **** static
 643:.\ff.c        **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 644:.\ff.c        **** {
  86              		.loc 1 644 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL10:
 645:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
  92              		.loc 1 645 0
  93 0000 0170     		strb	r1, [r0]
  94              	.LVL11:
 646:.\ff.c        **** 	*ptr++ = (BYTE)val;
  95              		.loc 1 646 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 14


  96 0002 090A     		lsrs	r1, r1, #8
  97              	.LVL12:
  98 0004 4170     		strb	r1, [r0, #1]
  99 0006 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE2:
 102              		.size	st_word, .-st_word
 103              		.section	.text.st_dword,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 107              		.type	st_dword, %function
 108              	st_dword:
 109              	.LFB3:
 647:.\ff.c        **** }
 648:.\ff.c        **** 
 649:.\ff.c        **** static
 650:.\ff.c        **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 651:.\ff.c        **** {
 110              		.loc 1 651 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL13:
 652:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 116              		.loc 1 652 0
 117 0000 0170     		strb	r1, [r0]
 118              	.LVL14:
 653:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 119              		.loc 1 653 0
 120 0002 C1F30723 		ubfx	r3, r1, #8, #8
 121 0006 4370     		strb	r3, [r0, #1]
 122              	.LVL15:
 654:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 123              		.loc 1 654 0
 124 0008 C1F30743 		ubfx	r3, r1, #16, #8
 125 000c 8370     		strb	r3, [r0, #2]
 126              	.LVL16:
 655:.\ff.c        **** 	*ptr++ = (BYTE)val;
 127              		.loc 1 655 0
 128 000e 090E     		lsrs	r1, r1, #24
 129              	.LVL17:
 130 0010 C170     		strb	r1, [r0, #3]
 131 0012 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE3:
 134              		.size	st_dword, .-st_dword
 135              		.section	.text.mem_cpy,"ax",%progbits
 136              		.align	2
 137              		.thumb
 138              		.thumb_func
 139              		.type	mem_cpy, %function
 140              	mem_cpy:
 141              	.LFB4:
 656:.\ff.c        **** }
 657:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 15


 658:.\ff.c        **** #if _FS_EXFAT
 659:.\ff.c        **** static
 660:.\ff.c        **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 661:.\ff.c        **** {
 662:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 663:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 664:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 665:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 666:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 667:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 668:.\ff.c        **** 	*ptr++ = (BYTE)val; val >>= 8;
 669:.\ff.c        **** 	*ptr++ = (BYTE)val;
 670:.\ff.c        **** }
 671:.\ff.c        **** #endif
 672:.\ff.c        **** #endif	/* !_FS_READONLY */
 673:.\ff.c        **** 
 674:.\ff.c        **** 
 675:.\ff.c        **** 
 676:.\ff.c        **** /*-----------------------------------------------------------------------*/
 677:.\ff.c        **** /* String functions                                                      */
 678:.\ff.c        **** /*-----------------------------------------------------------------------*/
 679:.\ff.c        **** 
 680:.\ff.c        **** /* Copy memory to memory */
 681:.\ff.c        **** static
 682:.\ff.c        **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 142              		.loc 1 682 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL18:
 683:.\ff.c        **** 	BYTE *d = (BYTE*)dst;
 684:.\ff.c        **** 	const BYTE *s = (const BYTE*)src;
 685:.\ff.c        **** 
 686:.\ff.c        **** 	if (cnt) {
 148              		.loc 1 686 0
 149 0000 1346     		mov	r3, r2
 150 0002 2AB1     		cbz	r2, .L5
 151              	.LVL19:
 152              	.L7:
 687:.\ff.c        **** 		do *d++ = *s++; while (--cnt);
 153              		.loc 1 687 0 discriminator 1
 154 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 155 0006 0270     		strb	r2, [r0]
 156              	.LVL20:
 157 0008 0130     		adds	r0, r0, #1
 158              	.LVL21:
 159 000a 0131     		adds	r1, r1, #1
 160              	.LVL22:
 161 000c 013B     		subs	r3, r3, #1
 162              	.LVL23:
 163 000e F9D1     		bne	.L7
 164              	.L5:
 165 0010 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE4:
 168              		.size	mem_cpy, .-mem_cpy
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 16


 169 0012 00BF     		.section	.text.mem_set,"ax",%progbits
 170              		.align	2
 171              		.thumb
 172              		.thumb_func
 173              		.type	mem_set, %function
 174              	mem_set:
 175              	.LFB5:
 688:.\ff.c        **** 	}
 689:.\ff.c        **** }
 690:.\ff.c        **** 
 691:.\ff.c        **** /* Fill memory block */
 692:.\ff.c        **** static
 693:.\ff.c        **** void mem_set (void* dst, int val, UINT cnt) {
 176              		.loc 1 693 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL24:
 182              	.L9:
 694:.\ff.c        **** 	BYTE *d = (BYTE*)dst;
 695:.\ff.c        **** 
 696:.\ff.c        **** 	do *d++ = (BYTE)val; while (--cnt);
 183              		.loc 1 696 0 discriminator 1
 184 0000 0170     		strb	r1, [r0]
 185              	.LVL25:
 186 0002 0130     		adds	r0, r0, #1
 187              	.LVL26:
 188 0004 013A     		subs	r2, r2, #1
 189              	.LVL27:
 190 0006 FBD1     		bne	.L9
 697:.\ff.c        **** }
 191              		.loc 1 697 0
 192 0008 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE5:
 195              		.size	mem_set, .-mem_set
 196 000a 00BF     		.section	.text.mem_cmp,"ax",%progbits
 197              		.align	2
 198              		.thumb
 199              		.thumb_func
 200              		.type	mem_cmp, %function
 201              	mem_cmp:
 202              	.LFB6:
 698:.\ff.c        **** 
 699:.\ff.c        **** /* Compare memory block */
 700:.\ff.c        **** static
 701:.\ff.c        **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 203              		.loc 1 701 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LVL28:
 209 0000 30B4     		push	{r4, r5}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 17


 212              		.cfi_offset 5, -4
 213              	.LVL29:
 214              	.L12:
 702:.\ff.c        **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 703:.\ff.c        **** 	int r = 0;
 704:.\ff.c        **** 
 705:.\ff.c        **** 	do {
 706:.\ff.c        **** 		r = *d++ - *s++;
 215              		.loc 1 706 0 discriminator 2
 216 0002 451C     		adds	r5, r0, #1
 217              	.LVL30:
 218 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 219 0006 4C1C     		adds	r4, r1, #1
 220              	.LVL31:
 221 0008 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 222 000a 1B1A     		subs	r3, r3, r0
 223              	.LVL32:
 707:.\ff.c        **** 	} while (--cnt && r == 0);
 224              		.loc 1 707 0 discriminator 2
 225 000c 013A     		subs	r2, r2, #1
 226              	.LVL33:
 227 000e 03D0     		beq	.L11
 706:.\ff.c        **** 	} while (--cnt && r == 0);
 228              		.loc 1 706 0 discriminator 1
 229 0010 2846     		mov	r0, r5
 230 0012 2146     		mov	r1, r4
 231              		.loc 1 707 0 discriminator 1
 232 0014 002B     		cmp	r3, #0
 233 0016 F4D0     		beq	.L12
 234              	.L11:
 708:.\ff.c        **** 
 709:.\ff.c        **** 	return r;
 710:.\ff.c        **** }
 235              		.loc 1 710 0
 236 0018 1846     		mov	r0, r3
 237 001a 30BC     		pop	{r4, r5}
 238              		.cfi_restore 5
 239              		.cfi_restore 4
 240              		.cfi_def_cfa_offset 0
 241              	.LVL34:
 242 001c 7047     		bx	lr
 243              		.cfi_endproc
 244              	.LFE6:
 245              		.size	mem_cmp, .-mem_cmp
 246 001e 00BF     		.section	.text.chk_chr,"ax",%progbits
 247              		.align	2
 248              		.thumb
 249              		.thumb_func
 250              		.type	chk_chr, %function
 251              	chk_chr:
 252              	.LFB7:
 711:.\ff.c        **** 
 712:.\ff.c        **** /* Check if chr is contained in the string */
 713:.\ff.c        **** static
 714:.\ff.c        **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 253              		.loc 1 714 0
 254              		.cfi_startproc
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 18


 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
 258              	.LVL35:
 715:.\ff.c        **** 	while (*str && *str != chr) str++;
 259              		.loc 1 715 0
 260 0000 00E0     		b	.L15
 261              	.L17:
 262              		.loc 1 715 0 is_stmt 0 discriminator 3
 263 0002 0130     		adds	r0, r0, #1
 264              	.LVL36:
 265              	.L15:
 266              		.loc 1 715 0 discriminator 1
 267 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 268 0006 0BB1     		cbz	r3, .L16
 269              		.loc 1 715 0 discriminator 2
 270 0008 8B42     		cmp	r3, r1
 271 000a FAD1     		bne	.L17
 272              	.L16:
 716:.\ff.c        **** 	return *str;
 717:.\ff.c        **** }
 273              		.loc 1 717 0 is_stmt 1
 274 000c 1846     		mov	r0, r3
 275              	.LVL37:
 276 000e 7047     		bx	lr
 277              		.cfi_endproc
 278              	.LFE7:
 279              		.size	chk_chr, .-chk_chr
 280              		.section	.text.clust2sect,"ax",%progbits
 281              		.align	2
 282              		.thumb
 283              		.thumb_func
 284              		.type	clust2sect, %function
 285              	clust2sect:
 286              	.LFB11:
 718:.\ff.c        **** 
 719:.\ff.c        **** 
 720:.\ff.c        **** 
 721:.\ff.c        **** 
 722:.\ff.c        **** #if _FS_REENTRANT
 723:.\ff.c        **** /*-----------------------------------------------------------------------*/
 724:.\ff.c        **** /* Request/Release grant to access the volume                            */
 725:.\ff.c        **** /*-----------------------------------------------------------------------*/
 726:.\ff.c        **** static
 727:.\ff.c        **** int lock_fs (
 728:.\ff.c        **** 	FATFS* fs		/* File system object */
 729:.\ff.c        **** )
 730:.\ff.c        **** {
 731:.\ff.c        **** 	return ff_req_grant(fs->sobj);
 732:.\ff.c        **** }
 733:.\ff.c        **** 
 734:.\ff.c        **** 
 735:.\ff.c        **** static
 736:.\ff.c        **** void unlock_fs (
 737:.\ff.c        **** 	FATFS* fs,		/* File system object */
 738:.\ff.c        **** 	FRESULT res		/* Result code to be returned */
 739:.\ff.c        **** )
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 19


 740:.\ff.c        **** {
 741:.\ff.c        **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 742:.\ff.c        **** 		ff_rel_grant(fs->sobj);
 743:.\ff.c        **** 	}
 744:.\ff.c        **** }
 745:.\ff.c        **** 
 746:.\ff.c        **** #endif
 747:.\ff.c        **** 
 748:.\ff.c        **** 
 749:.\ff.c        **** 
 750:.\ff.c        **** #if _FS_LOCK != 0
 751:.\ff.c        **** /*-----------------------------------------------------------------------*/
 752:.\ff.c        **** /* File lock control functions                                           */
 753:.\ff.c        **** /*-----------------------------------------------------------------------*/
 754:.\ff.c        **** 
 755:.\ff.c        **** static
 756:.\ff.c        **** FRESULT chk_lock (	/* Check if the file can be accessed */
 757:.\ff.c        **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 758:.\ff.c        **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 759:.\ff.c        **** )
 760:.\ff.c        **** {
 761:.\ff.c        **** 	UINT i, be;
 762:.\ff.c        **** 
 763:.\ff.c        **** 	/* Search file semaphore table */
 764:.\ff.c        **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 765:.\ff.c        **** 		if (Files[i].fs) {	/* Existing entry */
 766:.\ff.c        **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 767:.\ff.c        **** 				Files[i].clu == dp->obj.sclust &&
 768:.\ff.c        **** 				Files[i].ofs == dp->dptr) break;
 769:.\ff.c        **** 		} else {			/* Blank entry */
 770:.\ff.c        **** 			be = 1;
 771:.\ff.c        **** 		}
 772:.\ff.c        **** 	}
 773:.\ff.c        **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 774:.\ff.c        **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 775:.\ff.c        **** 	}
 776:.\ff.c        **** 
 777:.\ff.c        **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 778:.\ff.c        **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 779:.\ff.c        **** }
 780:.\ff.c        **** 
 781:.\ff.c        **** 
 782:.\ff.c        **** static
 783:.\ff.c        **** int enq_lock (void)	/* Check if an entry is available for a new object */
 784:.\ff.c        **** {
 785:.\ff.c        **** 	UINT i;
 786:.\ff.c        **** 
 787:.\ff.c        **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 788:.\ff.c        **** 	return (i == _FS_LOCK) ? 0 : 1;
 789:.\ff.c        **** }
 790:.\ff.c        **** 
 791:.\ff.c        **** 
 792:.\ff.c        **** static
 793:.\ff.c        **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 794:.\ff.c        **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 795:.\ff.c        **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 796:.\ff.c        **** )
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 20


 797:.\ff.c        **** {
 798:.\ff.c        **** 	UINT i;
 799:.\ff.c        **** 
 800:.\ff.c        **** 
 801:.\ff.c        **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802:.\ff.c        **** 		if (Files[i].fs == dp->obj.fs &&
 803:.\ff.c        **** 			Files[i].clu == dp->obj.sclust &&
 804:.\ff.c        **** 			Files[i].ofs == dp->dptr) break;
 805:.\ff.c        **** 	}
 806:.\ff.c        **** 
 807:.\ff.c        **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 808:.\ff.c        **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 809:.\ff.c        **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 810:.\ff.c        **** 		Files[i].fs = dp->obj.fs;
 811:.\ff.c        **** 		Files[i].clu = dp->obj.sclust;
 812:.\ff.c        **** 		Files[i].ofs = dp->dptr;
 813:.\ff.c        **** 		Files[i].ctr = 0;
 814:.\ff.c        **** 	}
 815:.\ff.c        **** 
 816:.\ff.c        **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 817:.\ff.c        **** 
 818:.\ff.c        **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 819:.\ff.c        **** 
 820:.\ff.c        **** 	return i + 1;
 821:.\ff.c        **** }
 822:.\ff.c        **** 
 823:.\ff.c        **** 
 824:.\ff.c        **** static
 825:.\ff.c        **** FRESULT dec_lock (	/* Decrement object open counter */
 826:.\ff.c        **** 	UINT i			/* Semaphore index (1..) */
 827:.\ff.c        **** )
 828:.\ff.c        **** {
 829:.\ff.c        **** 	WORD n;
 830:.\ff.c        **** 	FRESULT res;
 831:.\ff.c        **** 
 832:.\ff.c        **** 
 833:.\ff.c        **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 834:.\ff.c        **** 		n = Files[i].ctr;
 835:.\ff.c        **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 836:.\ff.c        **** 		if (n > 0) n--;				/* Decrement read mode open count */
 837:.\ff.c        **** 		Files[i].ctr = n;
 838:.\ff.c        **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 839:.\ff.c        **** 		res = FR_OK;
 840:.\ff.c        **** 	} else {
 841:.\ff.c        **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 842:.\ff.c        **** 	}
 843:.\ff.c        **** 	return res;
 844:.\ff.c        **** }
 845:.\ff.c        **** 
 846:.\ff.c        **** 
 847:.\ff.c        **** static
 848:.\ff.c        **** void clear_lock (	/* Clear lock entries of the volume */
 849:.\ff.c        **** 	FATFS *fs
 850:.\ff.c        **** )
 851:.\ff.c        **** {
 852:.\ff.c        **** 	UINT i;
 853:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 21


 854:.\ff.c        **** 	for (i = 0; i < _FS_LOCK; i++) {
 855:.\ff.c        **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 856:.\ff.c        **** 	}
 857:.\ff.c        **** }
 858:.\ff.c        **** 
 859:.\ff.c        **** #endif	/* _FS_LOCK != 0 */
 860:.\ff.c        **** 
 861:.\ff.c        **** 
 862:.\ff.c        **** 
 863:.\ff.c        **** /*-----------------------------------------------------------------------*/
 864:.\ff.c        **** /* Move/Flush disk access window in the file system object               */
 865:.\ff.c        **** /*-----------------------------------------------------------------------*/
 866:.\ff.c        **** #if !_FS_READONLY
 867:.\ff.c        **** static
 868:.\ff.c        **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 869:.\ff.c        **** 	FATFS* fs			/* File system object */
 870:.\ff.c        **** )
 871:.\ff.c        **** {
 872:.\ff.c        **** 	DWORD wsect;
 873:.\ff.c        **** 	UINT nf;
 874:.\ff.c        **** 	FRESULT res = FR_OK;
 875:.\ff.c        **** 
 876:.\ff.c        **** 
 877:.\ff.c        **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 878:.\ff.c        **** 		wsect = fs->winsect;	/* Current sector number */
 879:.\ff.c        **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 880:.\ff.c        **** 			res = FR_DISK_ERR;
 881:.\ff.c        **** 		} else {
 882:.\ff.c        **** 			fs->wflag = 0;
 883:.\ff.c        **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 884:.\ff.c        **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 885:.\ff.c        **** 					wsect += fs->fsize;
 886:.\ff.c        **** 					disk_write(fs->drv, fs->win, wsect, 1);
 887:.\ff.c        **** 				}
 888:.\ff.c        **** 			}
 889:.\ff.c        **** 		}
 890:.\ff.c        **** 	}
 891:.\ff.c        **** 	return res;
 892:.\ff.c        **** }
 893:.\ff.c        **** #endif
 894:.\ff.c        **** 
 895:.\ff.c        **** 
 896:.\ff.c        **** static
 897:.\ff.c        **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 898:.\ff.c        **** 	FATFS* fs,			/* File system object */
 899:.\ff.c        **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 900:.\ff.c        **** )
 901:.\ff.c        **** {
 902:.\ff.c        **** 	FRESULT res = FR_OK;
 903:.\ff.c        **** 
 904:.\ff.c        **** 
 905:.\ff.c        **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 906:.\ff.c        **** #if !_FS_READONLY
 907:.\ff.c        **** 		res = sync_window(fs);		/* Write-back changes */
 908:.\ff.c        **** #endif
 909:.\ff.c        **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 910:.\ff.c        **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 22


 911:.\ff.c        **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 912:.\ff.c        **** 				res = FR_DISK_ERR;
 913:.\ff.c        **** 			}
 914:.\ff.c        **** 			fs->winsect = sector;
 915:.\ff.c        **** 		}
 916:.\ff.c        **** 	}
 917:.\ff.c        **** 	return res;
 918:.\ff.c        **** }
 919:.\ff.c        **** 
 920:.\ff.c        **** 
 921:.\ff.c        **** 
 922:.\ff.c        **** 
 923:.\ff.c        **** #if !_FS_READONLY
 924:.\ff.c        **** /*-----------------------------------------------------------------------*/
 925:.\ff.c        **** /* Synchronize file system and strage device                             */
 926:.\ff.c        **** /*-----------------------------------------------------------------------*/
 927:.\ff.c        **** 
 928:.\ff.c        **** static
 929:.\ff.c        **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 930:.\ff.c        **** 	FATFS* fs		/* File system object */
 931:.\ff.c        **** )
 932:.\ff.c        **** {
 933:.\ff.c        **** 	FRESULT res;
 934:.\ff.c        **** 
 935:.\ff.c        **** 
 936:.\ff.c        **** 	res = sync_window(fs);
 937:.\ff.c        **** 	if (res == FR_OK) {
 938:.\ff.c        **** 		/* Update FSInfo sector if needed */
 939:.\ff.c        **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 940:.\ff.c        **** 			/* Create FSInfo structure */
 941:.\ff.c        **** 			mem_set(fs->win, 0, SS(fs));
 942:.\ff.c        **** 			st_word(fs->win + BS_55AA, 0xAA55);
 943:.\ff.c        **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 944:.\ff.c        **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 945:.\ff.c        **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 946:.\ff.c        **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 947:.\ff.c        **** 			/* Write it into the FSInfo sector */
 948:.\ff.c        **** 			fs->winsect = fs->volbase + 1;
 949:.\ff.c        **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 950:.\ff.c        **** 			fs->fsi_flag = 0;
 951:.\ff.c        **** 		}
 952:.\ff.c        **** 		/* Make sure that no pending write process in the physical drive */
 953:.\ff.c        **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 954:.\ff.c        **** 	}
 955:.\ff.c        **** 
 956:.\ff.c        **** 	return res;
 957:.\ff.c        **** }
 958:.\ff.c        **** 
 959:.\ff.c        **** #endif
 960:.\ff.c        **** 
 961:.\ff.c        **** 
 962:.\ff.c        **** 
 963:.\ff.c        **** /*-----------------------------------------------------------------------*/
 964:.\ff.c        **** /* Get sector# from cluster#                                             */
 965:.\ff.c        **** /*-----------------------------------------------------------------------*/
 966:.\ff.c        **** 
 967:.\ff.c        **** static
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 23


 968:.\ff.c        **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 969:.\ff.c        **** 	FATFS* fs,		/* File system object */
 970:.\ff.c        **** 	DWORD clst		/* Cluster# to be converted */
 971:.\ff.c        **** )
 972:.\ff.c        **** {
 287              		.loc 1 972 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL38:
 973:.\ff.c        **** 	clst -= 2;
 293              		.loc 1 973 0
 294 0000 0239     		subs	r1, r1, #2
 295              	.LVL39:
 974:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 296              		.loc 1 974 0
 297 0002 4369     		ldr	r3, [r0, #20]
 298 0004 023B     		subs	r3, r3, #2
 299 0006 8B42     		cmp	r3, r1
 300 0008 04D9     		bls	.L20
 975:.\ff.c        **** 	return clst * fs->csize + fs->database;
 301              		.loc 1 975 0
 302 000a 4389     		ldrh	r3, [r0, #10]
 303 000c 806A     		ldr	r0, [r0, #40]
 304              	.LVL40:
 305 000e 01FB0300 		mla	r0, r1, r3, r0
 306 0012 7047     		bx	lr
 307              	.LVL41:
 308              	.L20:
 974:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 309              		.loc 1 974 0
 310 0014 0020     		movs	r0, #0
 311              	.LVL42:
 976:.\ff.c        **** }
 312              		.loc 1 976 0
 313 0016 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE11:
 316              		.size	clust2sect, .-clust2sect
 317              		.section	.text.ld_clust,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 321              		.type	ld_clust, %function
 322              	ld_clust:
 323              	.LFB19:
 977:.\ff.c        **** 
 978:.\ff.c        **** 
 979:.\ff.c        **** 
 980:.\ff.c        **** 
 981:.\ff.c        **** /*-----------------------------------------------------------------------*/
 982:.\ff.c        **** /* FAT access - Read value of a FAT entry                                */
 983:.\ff.c        **** /*-----------------------------------------------------------------------*/
 984:.\ff.c        **** 
 985:.\ff.c        **** static
 986:.\ff.c        **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 24


 987:.\ff.c        **** 	_FDID* obj,	/* Corresponding object */
 988:.\ff.c        **** 	DWORD clst	/* Cluster number to get the value */
 989:.\ff.c        **** )
 990:.\ff.c        **** {
 991:.\ff.c        **** 	UINT wc, bc;
 992:.\ff.c        **** 	DWORD val;
 993:.\ff.c        **** 	FATFS *fs = obj->fs;
 994:.\ff.c        **** 
 995:.\ff.c        **** 
 996:.\ff.c        **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 997:.\ff.c        **** 		val = 1;	/* Internal error */
 998:.\ff.c        **** 
 999:.\ff.c        **** 	} else {
1000:.\ff.c        **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1001:.\ff.c        **** 
1002:.\ff.c        **** 		switch (fs->fs_type) {
1003:.\ff.c        **** 		case FS_FAT12 :
1004:.\ff.c        **** 			bc = (UINT)clst; bc += bc / 2;
1005:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1006:.\ff.c        **** 			wc = fs->win[bc++ % SS(fs)];
1007:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1008:.\ff.c        **** 			wc |= fs->win[bc % SS(fs)] << 8;
1009:.\ff.c        **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1010:.\ff.c        **** 			break;
1011:.\ff.c        **** 
1012:.\ff.c        **** 		case FS_FAT16 :
1013:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1014:.\ff.c        **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
1015:.\ff.c        **** 			break;
1016:.\ff.c        **** 
1017:.\ff.c        **** 		case FS_FAT32 :
1018:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1019:.\ff.c        **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1020:.\ff.c        **** 			break;
1021:.\ff.c        **** #if _FS_EXFAT
1022:.\ff.c        **** 		case FS_EXFAT :
1023:.\ff.c        **** 			if (obj->objsize) {
1024:.\ff.c        **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1025:.\ff.c        **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1026:.\ff.c        **** 
1027:.\ff.c        **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1028:.\ff.c        **** 					if (cofs <= clen) {
1029:.\ff.c        **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1030:.\ff.c        **** 						break;
1031:.\ff.c        **** 					}
1032:.\ff.c        **** 				}
1033:.\ff.c        **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the contiguous part? */
1034:.\ff.c        **** 					val = clst + 1; 	/* Generate the value */
1035:.\ff.c        **** 					break;
1036:.\ff.c        **** 				}
1037:.\ff.c        **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1038:.\ff.c        **** 					if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1039:.\ff.c        **** 					val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1040:.\ff.c        **** 					break;
1041:.\ff.c        **** 				}
1042:.\ff.c        **** 			}
1043:.\ff.c        **** 			/* go next */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 25


1044:.\ff.c        **** #endif
1045:.\ff.c        **** 		default:
1046:.\ff.c        **** 			val = 1;	/* Internal error */
1047:.\ff.c        **** 		}
1048:.\ff.c        **** 	}
1049:.\ff.c        **** 
1050:.\ff.c        **** 	return val;
1051:.\ff.c        **** }
1052:.\ff.c        **** 
1053:.\ff.c        **** 
1054:.\ff.c        **** 
1055:.\ff.c        **** 
1056:.\ff.c        **** #if !_FS_READONLY
1057:.\ff.c        **** /*-----------------------------------------------------------------------*/
1058:.\ff.c        **** /* FAT access - Change value of a FAT entry                              */
1059:.\ff.c        **** /*-----------------------------------------------------------------------*/
1060:.\ff.c        **** 
1061:.\ff.c        **** static
1062:.\ff.c        **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1063:.\ff.c        **** 	FATFS* fs,		/* Corresponding file system object */
1064:.\ff.c        **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1065:.\ff.c        **** 	DWORD val		/* New value to be set to the entry */
1066:.\ff.c        **** )
1067:.\ff.c        **** {
1068:.\ff.c        **** 	UINT bc;
1069:.\ff.c        **** 	BYTE *p;
1070:.\ff.c        **** 	FRESULT res = FR_INT_ERR;
1071:.\ff.c        **** 
1072:.\ff.c        **** 
1073:.\ff.c        **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1074:.\ff.c        **** 		switch (fs->fs_type) {
1075:.\ff.c        **** 		case FS_FAT12 :	/* Bitfield items */
1076:.\ff.c        **** 			bc = (UINT)clst; bc += bc / 2;
1077:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1078:.\ff.c        **** 			if (res != FR_OK) break;
1079:.\ff.c        **** 			p = fs->win + bc++ % SS(fs);
1080:.\ff.c        **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1081:.\ff.c        **** 			fs->wflag = 1;
1082:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1083:.\ff.c        **** 			if (res != FR_OK) break;
1084:.\ff.c        **** 			p = fs->win + bc % SS(fs);
1085:.\ff.c        **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1086:.\ff.c        **** 			fs->wflag = 1;
1087:.\ff.c        **** 			break;
1088:.\ff.c        **** 
1089:.\ff.c        **** 		case FS_FAT16 :	/* WORD aligned items */
1090:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1091:.\ff.c        **** 			if (res != FR_OK) break;
1092:.\ff.c        **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1093:.\ff.c        **** 			fs->wflag = 1;
1094:.\ff.c        **** 			break;
1095:.\ff.c        **** 
1096:.\ff.c        **** 		case FS_FAT32 :	/* DWORD aligned items */
1097:.\ff.c        **** #if _FS_EXFAT
1098:.\ff.c        **** 		case FS_EXFAT :
1099:.\ff.c        **** #endif
1100:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 26


1101:.\ff.c        **** 			if (res != FR_OK) break;
1102:.\ff.c        **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1103:.\ff.c        **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1104:.\ff.c        **** 			}
1105:.\ff.c        **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1106:.\ff.c        **** 			fs->wflag = 1;
1107:.\ff.c        **** 			break;
1108:.\ff.c        **** 		}
1109:.\ff.c        **** 	}
1110:.\ff.c        **** 	return res;
1111:.\ff.c        **** }
1112:.\ff.c        **** 
1113:.\ff.c        **** #endif /* !_FS_READONLY */
1114:.\ff.c        **** 
1115:.\ff.c        **** 
1116:.\ff.c        **** 
1117:.\ff.c        **** 
1118:.\ff.c        **** #if _FS_EXFAT && !_FS_READONLY
1119:.\ff.c        **** /*-----------------------------------------------------------------------*/
1120:.\ff.c        **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1121:.\ff.c        **** /*-----------------------------------------------------------------------*/
1122:.\ff.c        **** 
1123:.\ff.c        **** /*---------------------------------------------*/
1124:.\ff.c        **** /* exFAT: Find a contiguous free cluster block */
1125:.\ff.c        **** /*---------------------------------------------*/
1126:.\ff.c        **** 
1127:.\ff.c        **** static
1128:.\ff.c        **** DWORD find_bitmap (	/* 0:No free cluster, 2..:Free cluster found, 0xFFFFFFFF:Disk error */
1129:.\ff.c        **** 	FATFS* fs,	/* File system object */
1130:.\ff.c        **** 	DWORD clst,	/* Cluster number to scan from */
1131:.\ff.c        **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1132:.\ff.c        **** )
1133:.\ff.c        **** {
1134:.\ff.c        **** 	BYTE bm, bv;
1135:.\ff.c        **** 	UINT i;
1136:.\ff.c        **** 	DWORD val, scl, ctr;
1137:.\ff.c        **** 
1138:.\ff.c        **** 
1139:.\ff.c        **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1140:.\ff.c        **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1141:.\ff.c        **** 	scl = val = clst; ctr = 0;
1142:.\ff.c        **** 	for (;;) {
1143:.\ff.c        **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1144:.\ff.c        **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1145:.\ff.c        **** 		do {
1146:.\ff.c        **** 			do {
1147:.\ff.c        **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1148:.\ff.c        **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1149:.\ff.c        **** 					val = 0; bm = 0; i = 4096;
1150:.\ff.c        **** 				}
1151:.\ff.c        **** 				if (!bv) {	/* Is it a free cluster? */
1152:.\ff.c        **** 					if (++ctr == ncl) return scl + 2;	/* Check run length */
1153:.\ff.c        **** 				} else {
1154:.\ff.c        **** 					scl = val; ctr = 0;		/* Encountered a live cluster, restart to scan */
1155:.\ff.c        **** 				}
1156:.\ff.c        **** 				if (val == clst) return 0;	/* All cluster scanned? */
1157:.\ff.c        **** 			} while (bm);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 27


1158:.\ff.c        **** 			bm = 1;
1159:.\ff.c        **** 		} while (++i < SS(fs));
1160:.\ff.c        **** 	}
1161:.\ff.c        **** }
1162:.\ff.c        **** 
1163:.\ff.c        **** 
1164:.\ff.c        **** /*------------------------------------*/
1165:.\ff.c        **** /* exFAT: Set/Clear a block of bitmap */
1166:.\ff.c        **** /*------------------------------------*/
1167:.\ff.c        **** 
1168:.\ff.c        **** static
1169:.\ff.c        **** FRESULT change_bitmap (
1170:.\ff.c        **** 	FATFS* fs,	/* File system object */
1171:.\ff.c        **** 	DWORD clst,	/* Cluster number to change from */
1172:.\ff.c        **** 	DWORD ncl,	/* Number of clusters to be changed */
1173:.\ff.c        **** 	int bv		/* bit value to be set (0 or 1) */
1174:.\ff.c        **** )
1175:.\ff.c        **** {
1176:.\ff.c        **** 	BYTE bm;
1177:.\ff.c        **** 	UINT i;
1178:.\ff.c        **** 	DWORD sect;
1179:.\ff.c        **** 
1180:.\ff.c        **** 
1181:.\ff.c        **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1182:.\ff.c        **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1183:.\ff.c        **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1184:.\ff.c        **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1185:.\ff.c        **** 	for (;;) {
1186:.\ff.c        **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1187:.\ff.c        **** 		do {
1188:.\ff.c        **** 			do {
1189:.\ff.c        **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1190:.\ff.c        **** 				fs->win[i] ^= bm;	/* Flip the bit */
1191:.\ff.c        **** 				fs->wflag = 1;
1192:.\ff.c        **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1193:.\ff.c        **** 			} while (bm <<= 1);		/* Next bit */
1194:.\ff.c        **** 			bm = 1;
1195:.\ff.c        **** 		} while (++i < SS(fs));		/* Next byte */
1196:.\ff.c        **** 		i = 0;
1197:.\ff.c        **** 	}
1198:.\ff.c        **** }
1199:.\ff.c        **** 
1200:.\ff.c        **** 
1201:.\ff.c        **** /*---------------------------------------------*/
1202:.\ff.c        **** /* Complement contiguous part of the FAT chain */
1203:.\ff.c        **** /*---------------------------------------------*/
1204:.\ff.c        **** 
1205:.\ff.c        **** static
1206:.\ff.c        **** FRESULT fill_fat_chain (
1207:.\ff.c        **** 	_FDID* obj	/* Pointer to the corresponding object */
1208:.\ff.c        **** )
1209:.\ff.c        **** {
1210:.\ff.c        **** 	FRESULT res;
1211:.\ff.c        **** 	DWORD cl, n;
1212:.\ff.c        **** 
1213:.\ff.c        **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1214:.\ff.c        **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 28


1215:.\ff.c        **** 			res = put_fat(obj->fs, cl, cl + 1);
1216:.\ff.c        **** 			if (res != FR_OK) return res;
1217:.\ff.c        **** 		}
1218:.\ff.c        **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1219:.\ff.c        **** 	}
1220:.\ff.c        **** 	return FR_OK;
1221:.\ff.c        **** }
1222:.\ff.c        **** 
1223:.\ff.c        **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1224:.\ff.c        **** 
1225:.\ff.c        **** 
1226:.\ff.c        **** 
1227:.\ff.c        **** #if !_FS_READONLY
1228:.\ff.c        **** /*-----------------------------------------------------------------------*/
1229:.\ff.c        **** /* FAT handling - Remove a cluster chain                                 */
1230:.\ff.c        **** /*-----------------------------------------------------------------------*/
1231:.\ff.c        **** static
1232:.\ff.c        **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1233:.\ff.c        **** 	_FDID* obj,			/* Corresponding object */
1234:.\ff.c        **** 	DWORD clst,			/* Cluster to remove a chain from */
1235:.\ff.c        **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1236:.\ff.c        **** )
1237:.\ff.c        **** {
1238:.\ff.c        **** 	FRESULT res = FR_OK;
1239:.\ff.c        **** 	DWORD nxt;
1240:.\ff.c        **** 	FATFS *fs = obj->fs;
1241:.\ff.c        **** #if _FS_EXFAT || _USE_TRIM
1242:.\ff.c        **** 	DWORD scl = clst, ecl = clst;
1243:.\ff.c        **** #endif
1244:.\ff.c        **** #if _USE_TRIM
1245:.\ff.c        **** 	DWORD rt[2];
1246:.\ff.c        **** #endif
1247:.\ff.c        **** 
1248:.\ff.c        **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1249:.\ff.c        **** 
1250:.\ff.c        **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1251:.\ff.c        **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1252:.\ff.c        **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1253:.\ff.c        **** 		if (res != FR_OK) return res;
1254:.\ff.c        **** 	}
1255:.\ff.c        **** 
1256:.\ff.c        **** 	/* Remove the chain */
1257:.\ff.c        **** 	do {
1258:.\ff.c        **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1259:.\ff.c        **** 		if (nxt == 0) break;				/* Empty cluster? */
1260:.\ff.c        **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1261:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1262:.\ff.c        **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1263:.\ff.c        **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1264:.\ff.c        **** 			if (res != FR_OK) return res;
1265:.\ff.c        **** 		}
1266:.\ff.c        **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1267:.\ff.c        **** 			fs->free_clst++;
1268:.\ff.c        **** 			fs->fsi_flag |= 1;
1269:.\ff.c        **** 		}
1270:.\ff.c        **** #if _FS_EXFAT || _USE_TRIM
1271:.\ff.c        **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 29


1272:.\ff.c        **** 			ecl = nxt;
1273:.\ff.c        **** 		} else {				/* End of contiguous cluster block */ 
1274:.\ff.c        **** #if _FS_EXFAT
1275:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
1276:.\ff.c        **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1277:.\ff.c        **** 				if (res != FR_OK) return res;
1278:.\ff.c        **** 			}
1279:.\ff.c        **** #endif
1280:.\ff.c        **** #if _USE_TRIM
1281:.\ff.c        **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1282:.\ff.c        **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1283:.\ff.c        **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1284:.\ff.c        **** #endif
1285:.\ff.c        **** 			scl = ecl = nxt;
1286:.\ff.c        **** 		}
1287:.\ff.c        **** #endif
1288:.\ff.c        **** 		clst = nxt;					/* Next cluster */
1289:.\ff.c        **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1290:.\ff.c        **** 
1291:.\ff.c        **** #if _FS_EXFAT
1292:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {
1293:.\ff.c        **** 		if (pclst == 0) {	/* Does object have no chain? */
1294:.\ff.c        **** 			obj->stat = 0;		/* Change the object status 'initial' */
1295:.\ff.c        **** 		} else {
1296:.\ff.c        **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1297:.\ff.c        **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1298:.\ff.c        **** 			}
1299:.\ff.c        **** 		}
1300:.\ff.c        **** 	}
1301:.\ff.c        **** #endif
1302:.\ff.c        **** 	return FR_OK;
1303:.\ff.c        **** }
1304:.\ff.c        **** 
1305:.\ff.c        **** 
1306:.\ff.c        **** 
1307:.\ff.c        **** 
1308:.\ff.c        **** /*-----------------------------------------------------------------------*/
1309:.\ff.c        **** /* FAT handling - Stretch a chain or Create a new chain                  */
1310:.\ff.c        **** /*-----------------------------------------------------------------------*/
1311:.\ff.c        **** static
1312:.\ff.c        **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1313:.\ff.c        **** 	_FDID* obj,			/* Corresponding object */
1314:.\ff.c        **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1315:.\ff.c        **** )
1316:.\ff.c        **** {
1317:.\ff.c        **** 	DWORD cs, ncl, scl;
1318:.\ff.c        **** 	FRESULT res;
1319:.\ff.c        **** 	FATFS *fs = obj->fs;
1320:.\ff.c        **** 
1321:.\ff.c        **** 
1322:.\ff.c        **** 	if (clst == 0) {	/* Create a new chain */
1323:.\ff.c        **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
1324:.\ff.c        **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1325:.\ff.c        **** 	}
1326:.\ff.c        **** 	else {				/* Stretch current chain */
1327:.\ff.c        **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1328:.\ff.c        **** 		if (cs < 2) return 1;				/* Invalid value */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 30


1329:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1330:.\ff.c        **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1331:.\ff.c        **** 		scl = clst;
1332:.\ff.c        **** 	}
1333:.\ff.c        **** 
1334:.\ff.c        **** #if _FS_EXFAT
1335:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1336:.\ff.c        **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1337:.\ff.c        **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1338:.\ff.c        **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1339:.\ff.c        **** 		if (res == FR_INT_ERR) return 1;
1340:.\ff.c        **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1341:.\ff.c        **** 		if (clst == 0) {							/* Is it a new chain? */
1342:.\ff.c        **** 			obj->stat = 2;							/* Set status 'contiguous chain' */
1343:.\ff.c        **** 		} else {									/* This is a stretched chain */
1344:.\ff.c        **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1345:.\ff.c        **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1346:.\ff.c        **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1347:.\ff.c        **** 			}
1348:.\ff.c        **** 		}
1349:.\ff.c        **** 	} else
1350:.\ff.c        **** #endif
1351:.\ff.c        **** 	{	/* On the FAT12/16/32 volume */
1352:.\ff.c        **** 		ncl = scl;	/* Start cluster */
1353:.\ff.c        **** 		for (;;) {
1354:.\ff.c        **** 			ncl++;							/* Next cluster */
1355:.\ff.c        **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1356:.\ff.c        **** 				ncl = 2;
1357:.\ff.c        **** 				if (ncl > scl) return 0;	/* No free cluster */
1358:.\ff.c        **** 			}
1359:.\ff.c        **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
1360:.\ff.c        **** 			if (cs == 0) break;				/* Found a free cluster */
1361:.\ff.c        **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1362:.\ff.c        **** 			if (ncl == scl) return 0;		/* No free cluster */
1363:.\ff.c        **** 		}
1364:.\ff.c        **** 	}
1365:.\ff.c        **** 
1366:.\ff.c        **** 	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
1367:.\ff.c        **** 		res = FR_OK;						/* FAT does not need to be written */
1368:.\ff.c        **** 	} else {
1369:.\ff.c        **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1370:.\ff.c        **** 		if (res == FR_OK && clst) {
1371:.\ff.c        **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1372:.\ff.c        **** 		}
1373:.\ff.c        **** 	}
1374:.\ff.c        **** 
1375:.\ff.c        **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1376:.\ff.c        **** 		fs->last_clst = ncl;
1377:.\ff.c        **** 		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
1378:.\ff.c        **** 		fs->fsi_flag |= 1;
1379:.\ff.c        **** 	} else {
1380:.\ff.c        **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
1381:.\ff.c        **** 	}
1382:.\ff.c        **** 
1383:.\ff.c        **** 	return ncl;		/* Return new cluster number or error status */
1384:.\ff.c        **** }
1385:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 31


1386:.\ff.c        **** #endif /* !_FS_READONLY */
1387:.\ff.c        **** 
1388:.\ff.c        **** 
1389:.\ff.c        **** 
1390:.\ff.c        **** 
1391:.\ff.c        **** #if _USE_FASTSEEK
1392:.\ff.c        **** /*-----------------------------------------------------------------------*/
1393:.\ff.c        **** /* FAT handling - Convert offset into cluster with link map table        */
1394:.\ff.c        **** /*-----------------------------------------------------------------------*/
1395:.\ff.c        **** 
1396:.\ff.c        **** static
1397:.\ff.c        **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1398:.\ff.c        **** 	FIL* fp,		/* Pointer to the file object */
1399:.\ff.c        **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1400:.\ff.c        **** )
1401:.\ff.c        **** {
1402:.\ff.c        **** 	DWORD cl, ncl, *tbl;
1403:.\ff.c        **** 	FATFS *fs = fp->obj.fs;
1404:.\ff.c        **** 
1405:.\ff.c        **** 
1406:.\ff.c        **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1407:.\ff.c        **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1408:.\ff.c        **** 	for (;;) {
1409:.\ff.c        **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1410:.\ff.c        **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1411:.\ff.c        **** 		if (cl < ncl) break;	/* In this fragment? */
1412:.\ff.c        **** 		cl -= ncl; tbl++;		/* Next fragment */
1413:.\ff.c        **** 	}
1414:.\ff.c        **** 	return cl + *tbl;	/* Return the cluster number */
1415:.\ff.c        **** }
1416:.\ff.c        **** 
1417:.\ff.c        **** #endif	/* _USE_FASTSEEK */
1418:.\ff.c        **** 
1419:.\ff.c        **** 
1420:.\ff.c        **** 
1421:.\ff.c        **** 
1422:.\ff.c        **** /*-----------------------------------------------------------------------*/
1423:.\ff.c        **** /* Directory handling - Set directory index                              */
1424:.\ff.c        **** /*-----------------------------------------------------------------------*/
1425:.\ff.c        **** 
1426:.\ff.c        **** static
1427:.\ff.c        **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1428:.\ff.c        **** 	DIR* dp,		/* Pointer to directory object */
1429:.\ff.c        **** 	DWORD ofs		/* Offset of directory table */
1430:.\ff.c        **** )
1431:.\ff.c        **** {
1432:.\ff.c        **** 	DWORD csz, clst;
1433:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1434:.\ff.c        **** 
1435:.\ff.c        **** 
1436:.\ff.c        **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
1437:.\ff.c        **** 		return FR_INT_ERR;
1438:.\ff.c        **** 	}
1439:.\ff.c        **** 	dp->dptr = ofs;				/* Set current offset */
1440:.\ff.c        **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1441:.\ff.c        **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1442:.\ff.c        **** 		clst = fs->dirbase;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 32


1443:.\ff.c        **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1444:.\ff.c        **** 	}
1445:.\ff.c        **** 
1446:.\ff.c        **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1447:.\ff.c        **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1448:.\ff.c        **** 		dp->sect = fs->dirbase;
1449:.\ff.c        **** 
1450:.\ff.c        **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1451:.\ff.c        **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1452:.\ff.c        **** 		while (ofs >= csz) {				/* Follow cluster chain */
1453:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1454:.\ff.c        **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1455:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1456:.\ff.c        **** 			ofs -= csz;
1457:.\ff.c        **** 		}
1458:.\ff.c        **** 		dp->sect = clust2sect(fs, clst);
1459:.\ff.c        **** 	}
1460:.\ff.c        **** 	dp->clust = clst;					/* Current cluster# */
1461:.\ff.c        **** 	if (!dp->sect) return FR_INT_ERR;
1462:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1463:.\ff.c        **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1464:.\ff.c        **** 
1465:.\ff.c        **** 	return FR_OK;
1466:.\ff.c        **** }
1467:.\ff.c        **** 
1468:.\ff.c        **** 
1469:.\ff.c        **** 
1470:.\ff.c        **** 
1471:.\ff.c        **** /*-----------------------------------------------------------------------*/
1472:.\ff.c        **** /* Directory handling - Move directory table index next                  */
1473:.\ff.c        **** /*-----------------------------------------------------------------------*/
1474:.\ff.c        **** 
1475:.\ff.c        **** static
1476:.\ff.c        **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1477:.\ff.c        **** 	DIR* dp,		/* Pointer to the directory object */
1478:.\ff.c        **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1479:.\ff.c        **** )
1480:.\ff.c        **** {
1481:.\ff.c        **** 	DWORD ofs, clst;
1482:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1483:.\ff.c        **** #if !_FS_READONLY
1484:.\ff.c        **** 	UINT n;
1485:.\ff.c        **** #endif
1486:.\ff.c        **** 
1487:.\ff.c        **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1488:.\ff.c        **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
1489:.\ff.c        **** 
1490:.\ff.c        **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1491:.\ff.c        **** 		dp->sect++;				/* Next sector */
1492:.\ff.c        **** 
1493:.\ff.c        **** 		if (!dp->clust) {		/* Static table */
1494:.\ff.c        **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1495:.\ff.c        **** 				dp->sect = 0; return FR_NO_FILE;
1496:.\ff.c        **** 			}
1497:.\ff.c        **** 		}
1498:.\ff.c        **** 		else {					/* Dynamic table */
1499:.\ff.c        **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 33


1500:.\ff.c        **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1501:.\ff.c        **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1502:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1503:.\ff.c        **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1504:.\ff.c        **** #if !_FS_READONLY
1505:.\ff.c        **** 					if (!stretch) {								/* If no stretch, report EOT */
1506:.\ff.c        **** 						dp->sect = 0; return FR_NO_FILE;
1507:.\ff.c        **** 					}
1508:.\ff.c        **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1509:.\ff.c        **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1510:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1511:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1512:.\ff.c        **** 					/* Clean-up the stretched table */
1513:.\ff.c        **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1514:.\ff.c        **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1515:.\ff.c        **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1516:.\ff.c        **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
1517:.\ff.c        **** 						fs->wflag = 1;
1518:.\ff.c        **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1519:.\ff.c        **** 					}
1520:.\ff.c        **** 					fs->winsect -= n;							/* Restore window offset */
1521:.\ff.c        **** #else
1522:.\ff.c        **** 					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
1523:.\ff.c        **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1524:.\ff.c        **** #endif
1525:.\ff.c        **** 				}
1526:.\ff.c        **** 				dp->clust = clst;		/* Initialize data for new cluster */
1527:.\ff.c        **** 				dp->sect = clust2sect(fs, clst);
1528:.\ff.c        **** 			}
1529:.\ff.c        **** 		}
1530:.\ff.c        **** 	}
1531:.\ff.c        **** 	dp->dptr = ofs;						/* Current entry */
1532:.\ff.c        **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1533:.\ff.c        **** 
1534:.\ff.c        **** 	return FR_OK;
1535:.\ff.c        **** }
1536:.\ff.c        **** 
1537:.\ff.c        **** 
1538:.\ff.c        **** 
1539:.\ff.c        **** 
1540:.\ff.c        **** #if !_FS_READONLY
1541:.\ff.c        **** /*-----------------------------------------------------------------------*/
1542:.\ff.c        **** /* Directory handling - Reserve a block of directory entries             */
1543:.\ff.c        **** /*-----------------------------------------------------------------------*/
1544:.\ff.c        **** 
1545:.\ff.c        **** static
1546:.\ff.c        **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1547:.\ff.c        **** 	DIR* dp,		/* Pointer to the directory object */
1548:.\ff.c        **** 	UINT nent		/* Number of contiguous entries to allocate */
1549:.\ff.c        **** )
1550:.\ff.c        **** {
1551:.\ff.c        **** 	FRESULT res;
1552:.\ff.c        **** 	UINT n;
1553:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
1554:.\ff.c        **** 
1555:.\ff.c        **** 
1556:.\ff.c        **** 	res = dir_sdi(dp, 0);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 34


1557:.\ff.c        **** 	if (res == FR_OK) {
1558:.\ff.c        **** 		n = 0;
1559:.\ff.c        **** 		do {
1560:.\ff.c        **** 			res = move_window(fs, dp->sect);
1561:.\ff.c        **** 			if (res != FR_OK) break;
1562:.\ff.c        **** #if _FS_EXFAT
1563:.\ff.c        **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1564:.\ff.c        **** #else
1565:.\ff.c        **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1566:.\ff.c        **** #endif
1567:.\ff.c        **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1568:.\ff.c        **** 			} else {
1569:.\ff.c        **** 				n = 0;					/* Not a blank entry. Restart to search */
1570:.\ff.c        **** 			}
1571:.\ff.c        **** 			res = dir_next(dp, 1);
1572:.\ff.c        **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1573:.\ff.c        **** 	}
1574:.\ff.c        **** 
1575:.\ff.c        **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1576:.\ff.c        **** 	return res;
1577:.\ff.c        **** }
1578:.\ff.c        **** 
1579:.\ff.c        **** #endif	/* !_FS_READONLY */
1580:.\ff.c        **** 
1581:.\ff.c        **** 
1582:.\ff.c        **** 
1583:.\ff.c        **** 
1584:.\ff.c        **** /*-----------------------------------------------------------------------*/
1585:.\ff.c        **** /* FAT: Directory handling - Load/Store start cluster number             */
1586:.\ff.c        **** /*-----------------------------------------------------------------------*/
1587:.\ff.c        **** 
1588:.\ff.c        **** static
1589:.\ff.c        **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1590:.\ff.c        **** 	FATFS* fs,		/* Pointer to the fs object */
1591:.\ff.c        **** 	const BYTE* dir	/* Pointer to the key entry */
1592:.\ff.c        **** )
1593:.\ff.c        **** {
 324              		.loc 1 1593 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL43:
 329 0000 70B5     		push	{r4, r5, r6, lr}
 330              		.cfi_def_cfa_offset 16
 331              		.cfi_offset 4, -16
 332              		.cfi_offset 5, -12
 333              		.cfi_offset 6, -8
 334              		.cfi_offset 14, -4
 335 0002 0646     		mov	r6, r0
 336 0004 0D46     		mov	r5, r1
1594:.\ff.c        **** 	DWORD cl;
1595:.\ff.c        **** 
1596:.\ff.c        **** 	cl = ld_word(dir + DIR_FstClusLO);
 337              		.loc 1 1596 0
 338 0006 01F11A00 		add	r0, r1, #26
 339              	.LVL44:
 340 000a FFF7FEFF 		bl	ld_word
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 35


 341              	.LVL45:
 342 000e 0446     		mov	r4, r0
 343              	.LVL46:
1597:.\ff.c        **** 	if (fs->fs_type == FS_FAT32) {
 344              		.loc 1 1597 0
 345 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 346 0012 032B     		cmp	r3, #3
 347 0014 05D1     		bne	.L22
1598:.\ff.c        **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 348              		.loc 1 1598 0
 349 0016 05F11400 		add	r0, r5, #20
 350              	.LVL47:
 351 001a FFF7FEFF 		bl	ld_word
 352              	.LVL48:
 353 001e 44EA0040 		orr	r0, r4, r0, lsl #16
 354              	.LVL49:
 355              	.L22:
1599:.\ff.c        **** 	}
1600:.\ff.c        **** 
1601:.\ff.c        **** 	return cl;
1602:.\ff.c        **** }
 356              		.loc 1 1602 0
 357 0022 70BD     		pop	{r4, r5, r6, pc}
 358              		.cfi_endproc
 359              	.LFE19:
 360              		.size	ld_clust, .-ld_clust
 361              		.section	.text.st_clust,"ax",%progbits
 362              		.align	2
 363              		.thumb
 364              		.thumb_func
 365              		.type	st_clust, %function
 366              	st_clust:
 367              	.LFB20:
1603:.\ff.c        **** 
1604:.\ff.c        **** 
1605:.\ff.c        **** #if !_FS_READONLY
1606:.\ff.c        **** static
1607:.\ff.c        **** void st_clust (
1608:.\ff.c        **** 	FATFS* fs,	/* Pointer to the fs object */
1609:.\ff.c        **** 	BYTE* dir,	/* Pointer to the key entry */
1610:.\ff.c        **** 	DWORD cl	/* Value to be set */
1611:.\ff.c        **** )
1612:.\ff.c        **** {
 368              		.loc 1 1612 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              	.LVL50:
 373 0000 70B5     		push	{r4, r5, r6, lr}
 374              		.cfi_def_cfa_offset 16
 375              		.cfi_offset 4, -16
 376              		.cfi_offset 5, -12
 377              		.cfi_offset 6, -8
 378              		.cfi_offset 14, -4
 379 0002 0646     		mov	r6, r0
 380 0004 0D46     		mov	r5, r1
 381 0006 1446     		mov	r4, r2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 36


1613:.\ff.c        **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 382              		.loc 1 1613 0
 383 0008 01F11A00 		add	r0, r1, #26
 384              	.LVL51:
 385 000c 91B2     		uxth	r1, r2
 386              	.LVL52:
 387 000e FFF7FEFF 		bl	st_word
 388              	.LVL53:
1614:.\ff.c        **** 	if (fs->fs_type == FS_FAT32) {
 389              		.loc 1 1614 0
 390 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 391 0014 032B     		cmp	r3, #3
 392 0016 04D1     		bne	.L24
1615:.\ff.c        **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 393              		.loc 1 1615 0
 394 0018 05F11400 		add	r0, r5, #20
 395 001c 210C     		lsrs	r1, r4, #16
 396 001e FFF7FEFF 		bl	st_word
 397              	.LVL54:
 398              	.L24:
 399 0022 70BD     		pop	{r4, r5, r6, pc}
 400              		.cfi_endproc
 401              	.LFE20:
 402              		.size	st_clust, .-st_clust
 403              		.section	.text.get_fileinfo,"ax",%progbits
 404              		.align	2
 405              		.thumb
 406              		.thumb_func
 407              		.type	get_fileinfo, %function
 408              	get_fileinfo:
 409              	.LFB25:
1616:.\ff.c        **** 	}
1617:.\ff.c        **** }
1618:.\ff.c        **** #endif
1619:.\ff.c        **** 
1620:.\ff.c        **** 
1621:.\ff.c        **** 
1622:.\ff.c        **** #if _USE_LFN != 0
1623:.\ff.c        **** /*------------------------------------------------------------------------*/
1624:.\ff.c        **** /* FAT-LFN: LFN handling                                                  */
1625:.\ff.c        **** /*------------------------------------------------------------------------*/
1626:.\ff.c        **** static
1627:.\ff.c        **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1628:.\ff.c        **** 
1629:.\ff.c        **** 
1630:.\ff.c        **** /*--------------------------------------------------------*/
1631:.\ff.c        **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1632:.\ff.c        **** /*--------------------------------------------------------*/
1633:.\ff.c        **** static
1634:.\ff.c        **** int cmp_lfn (				/* 1:matched, 0:not matched */
1635:.\ff.c        **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1636:.\ff.c        **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1637:.\ff.c        **** )
1638:.\ff.c        **** {
1639:.\ff.c        **** 	UINT i, s;
1640:.\ff.c        **** 	WCHAR wc, uc;
1641:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 37


1642:.\ff.c        **** 
1643:.\ff.c        **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1644:.\ff.c        **** 
1645:.\ff.c        **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1646:.\ff.c        **** 
1647:.\ff.c        **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1648:.\ff.c        **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1649:.\ff.c        **** 		if (wc) {
1650:.\ff.c        **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1651:.\ff.c        **** 				return 0;					/* Not matched */
1652:.\ff.c        **** 			}
1653:.\ff.c        **** 			wc = uc;
1654:.\ff.c        **** 		} else {
1655:.\ff.c        **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1656:.\ff.c        **** 		}
1657:.\ff.c        **** 	}
1658:.\ff.c        **** 
1659:.\ff.c        **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1660:.\ff.c        **** 
1661:.\ff.c        **** 	return 1;		/* The part of LFN matched */
1662:.\ff.c        **** }
1663:.\ff.c        **** 
1664:.\ff.c        **** 
1665:.\ff.c        **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1666:.\ff.c        **** /*-----------------------------------------------------*/
1667:.\ff.c        **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1668:.\ff.c        **** /*-----------------------------------------------------*/
1669:.\ff.c        **** static
1670:.\ff.c        **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1671:.\ff.c        **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1672:.\ff.c        **** 	BYTE* dir			/* Pointer to the LFN entry */
1673:.\ff.c        **** )
1674:.\ff.c        **** {
1675:.\ff.c        **** 	UINT i, s;
1676:.\ff.c        **** 	WCHAR wc, uc;
1677:.\ff.c        **** 
1678:.\ff.c        **** 
1679:.\ff.c        **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1680:.\ff.c        **** 
1681:.\ff.c        **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1682:.\ff.c        **** 
1683:.\ff.c        **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1684:.\ff.c        **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1685:.\ff.c        **** 		if (wc) {
1686:.\ff.c        **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1687:.\ff.c        **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1688:.\ff.c        **** 		} else {
1689:.\ff.c        **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1690:.\ff.c        **** 		}
1691:.\ff.c        **** 	}
1692:.\ff.c        **** 
1693:.\ff.c        **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1694:.\ff.c        **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1695:.\ff.c        **** 		lfnbuf[i] = 0;
1696:.\ff.c        **** 	}
1697:.\ff.c        **** 
1698:.\ff.c        **** 	return 1;		/* The part of LFN is valid */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 38


1699:.\ff.c        **** }
1700:.\ff.c        **** #endif
1701:.\ff.c        **** 
1702:.\ff.c        **** 
1703:.\ff.c        **** #if !_FS_READONLY
1704:.\ff.c        **** /*-----------------------------------------*/
1705:.\ff.c        **** /* FAT-LFN: Create an entry of LFN entries */
1706:.\ff.c        **** /*-----------------------------------------*/
1707:.\ff.c        **** static
1708:.\ff.c        **** void put_lfn (
1709:.\ff.c        **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1710:.\ff.c        **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1711:.\ff.c        **** 	BYTE ord,			/* LFN order (1-20) */
1712:.\ff.c        **** 	BYTE sum			/* Checksum of the corresponding SFN */
1713:.\ff.c        **** )
1714:.\ff.c        **** {
1715:.\ff.c        **** 	UINT i, s;
1716:.\ff.c        **** 	WCHAR wc;
1717:.\ff.c        **** 
1718:.\ff.c        **** 
1719:.\ff.c        **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1720:.\ff.c        **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1721:.\ff.c        **** 	dir[LDIR_Type] = 0;
1722:.\ff.c        **** 	st_word(dir + LDIR_FstClusLO, 0);
1723:.\ff.c        **** 
1724:.\ff.c        **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1725:.\ff.c        **** 	s = wc = 0;
1726:.\ff.c        **** 	do {
1727:.\ff.c        **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1728:.\ff.c        **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1729:.\ff.c        **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1730:.\ff.c        **** 	} while (++s < 13);
1731:.\ff.c        **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1732:.\ff.c        **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1733:.\ff.c        **** }
1734:.\ff.c        **** 
1735:.\ff.c        **** #endif	/* !_FS_READONLY */
1736:.\ff.c        **** #endif	/* _USE_LFN != 0 */
1737:.\ff.c        **** 
1738:.\ff.c        **** 
1739:.\ff.c        **** 
1740:.\ff.c        **** #if _USE_LFN != 0 && !_FS_READONLY
1741:.\ff.c        **** /*-----------------------------------------------------------------------*/
1742:.\ff.c        **** /* FAT-LFN: Create a Numbered SFN                                        */
1743:.\ff.c        **** /*-----------------------------------------------------------------------*/
1744:.\ff.c        **** 
1745:.\ff.c        **** static
1746:.\ff.c        **** void gen_numname (
1747:.\ff.c        **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1748:.\ff.c        **** 	const BYTE* src,	/* Pointer to SFN */
1749:.\ff.c        **** 	const WCHAR* lfn,	/* Pointer to LFN */
1750:.\ff.c        **** 	UINT seq			/* Sequence number */
1751:.\ff.c        **** )
1752:.\ff.c        **** {
1753:.\ff.c        **** 	BYTE ns[8], c;
1754:.\ff.c        **** 	UINT i, j;
1755:.\ff.c        **** 	WCHAR wc;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 39


1756:.\ff.c        **** 	DWORD sr;
1757:.\ff.c        **** 
1758:.\ff.c        **** 
1759:.\ff.c        **** 	mem_cpy(dst, src, 11);
1760:.\ff.c        **** 
1761:.\ff.c        **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1762:.\ff.c        **** 		sr = seq;
1763:.\ff.c        **** 		while (*lfn) {	/* Create a CRC */
1764:.\ff.c        **** 			wc = *lfn++;
1765:.\ff.c        **** 			for (i = 0; i < 16; i++) {
1766:.\ff.c        **** 				sr = (sr << 1) + (wc & 1);
1767:.\ff.c        **** 				wc >>= 1;
1768:.\ff.c        **** 				if (sr & 0x10000) sr ^= 0x11021;
1769:.\ff.c        **** 			}
1770:.\ff.c        **** 		}
1771:.\ff.c        **** 		seq = (UINT)sr;
1772:.\ff.c        **** 	}
1773:.\ff.c        **** 
1774:.\ff.c        **** 	/* itoa (hexdecimal) */
1775:.\ff.c        **** 	i = 7;
1776:.\ff.c        **** 	do {
1777:.\ff.c        **** 		c = (BYTE)((seq % 16) + '0');
1778:.\ff.c        **** 		if (c > '9') c += 7;
1779:.\ff.c        **** 		ns[i--] = c;
1780:.\ff.c        **** 		seq /= 16;
1781:.\ff.c        **** 	} while (seq);
1782:.\ff.c        **** 	ns[i] = '~';
1783:.\ff.c        **** 
1784:.\ff.c        **** 	/* Append the number */
1785:.\ff.c        **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1786:.\ff.c        **** 		if (IsDBCS1(dst[j])) {
1787:.\ff.c        **** 			if (j == i - 1) break;
1788:.\ff.c        **** 			j++;
1789:.\ff.c        **** 		}
1790:.\ff.c        **** 	}
1791:.\ff.c        **** 	do {
1792:.\ff.c        **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1793:.\ff.c        **** 	} while (j < 8);
1794:.\ff.c        **** }
1795:.\ff.c        **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1796:.\ff.c        **** 
1797:.\ff.c        **** 
1798:.\ff.c        **** 
1799:.\ff.c        **** #if _USE_LFN != 0
1800:.\ff.c        **** /*-----------------------------------------------------------------------*/
1801:.\ff.c        **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1802:.\ff.c        **** /*-----------------------------------------------------------------------*/
1803:.\ff.c        **** 
1804:.\ff.c        **** static
1805:.\ff.c        **** BYTE sum_sfn (
1806:.\ff.c        **** 	const BYTE* dir		/* Pointer to the SFN entry */
1807:.\ff.c        **** )
1808:.\ff.c        **** {
1809:.\ff.c        **** 	BYTE sum = 0;
1810:.\ff.c        **** 	UINT n = 11;
1811:.\ff.c        **** 
1812:.\ff.c        **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 40


1813:.\ff.c        **** 	return sum;
1814:.\ff.c        **** }
1815:.\ff.c        **** 
1816:.\ff.c        **** #endif	/* _USE_LFN != 0 */
1817:.\ff.c        **** 
1818:.\ff.c        **** 
1819:.\ff.c        **** 
1820:.\ff.c        **** #if _FS_EXFAT
1821:.\ff.c        **** /*-----------------------------------------------------------------------*/
1822:.\ff.c        **** /* exFAT: Checksum                                                       */
1823:.\ff.c        **** /*-----------------------------------------------------------------------*/
1824:.\ff.c        **** 
1825:.\ff.c        **** static
1826:.\ff.c        **** WORD xdir_sum (			/* Get checksum of the directoly block */
1827:.\ff.c        **** 	const BYTE* dir		/* Directory entry block to be calculated */
1828:.\ff.c        **** )
1829:.\ff.c        **** {
1830:.\ff.c        **** 	UINT i, szblk;
1831:.\ff.c        **** 	WORD sum;
1832:.\ff.c        **** 
1833:.\ff.c        **** 
1834:.\ff.c        **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1835:.\ff.c        **** 	for (i = sum = 0; i < szblk; i++) {
1836:.\ff.c        **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1837:.\ff.c        **** 			i++;
1838:.\ff.c        **** 		} else {
1839:.\ff.c        **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1840:.\ff.c        **** 		}
1841:.\ff.c        **** 	}
1842:.\ff.c        **** 	return sum;
1843:.\ff.c        **** }
1844:.\ff.c        **** 
1845:.\ff.c        **** 
1846:.\ff.c        **** 
1847:.\ff.c        **** static
1848:.\ff.c        **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1849:.\ff.c        **** 	const WCHAR* name	/* File name to be calculated */
1850:.\ff.c        **** )
1851:.\ff.c        **** {
1852:.\ff.c        **** 	WCHAR chr;
1853:.\ff.c        **** 	WORD sum = 0;
1854:.\ff.c        **** 
1855:.\ff.c        **** 
1856:.\ff.c        **** 	while ((chr = *name++) != 0) {
1857:.\ff.c        **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1858:.\ff.c        **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1859:.\ff.c        **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1860:.\ff.c        **** 	}
1861:.\ff.c        **** 	return sum;
1862:.\ff.c        **** }
1863:.\ff.c        **** 
1864:.\ff.c        **** 
1865:.\ff.c        **** #if !_FS_READONLY && _USE_MKFS
1866:.\ff.c        **** static
1867:.\ff.c        **** DWORD xsum32 (
1868:.\ff.c        **** 	BYTE  dat,	/* Data to be sumed */
1869:.\ff.c        **** 	DWORD sum	/* Previous value */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 41


1870:.\ff.c        **** )
1871:.\ff.c        **** {
1872:.\ff.c        **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1873:.\ff.c        **** 	return sum;
1874:.\ff.c        **** }
1875:.\ff.c        **** #endif
1876:.\ff.c        **** 
1877:.\ff.c        **** 
1878:.\ff.c        **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1879:.\ff.c        **** /*------------------------------------------------------*/
1880:.\ff.c        **** /* exFAT: Get object information from a directory block */
1881:.\ff.c        **** /*------------------------------------------------------*/
1882:.\ff.c        **** 
1883:.\ff.c        **** static
1884:.\ff.c        **** void get_xdir_info (
1885:.\ff.c        **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1886:.\ff.c        **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1887:.\ff.c        **** )
1888:.\ff.c        **** {
1889:.\ff.c        **** 	UINT di, si;
1890:.\ff.c        **** 	WCHAR w;
1891:.\ff.c        **** #if !_LFN_UNICODE
1892:.\ff.c        **** 	UINT nc;
1893:.\ff.c        **** #endif
1894:.\ff.c        **** 
1895:.\ff.c        **** 	/* Get file name */
1896:.\ff.c        **** #if _LFN_UNICODE
1897:.\ff.c        **** 	if (dirb[XDIR_NumName] <= _MAX_LFN) {
1898:.\ff.c        **** 		for (si = SZDIRE * 2, di = 0; di < dirb[XDIR_NumName]; si += 2, di++) {
1899:.\ff.c        **** 			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
1900:.\ff.c        **** 			w = ld_word(dirb + si);				/* Get a character */
1901:.\ff.c        **** 			fno->fname[di] = w;					/* Store it */
1902:.\ff.c        **** 		}
1903:.\ff.c        **** 	} else {
1904:.\ff.c        **** 		di = 0;	/* Buffer overflow and inaccessible object */
1905:.\ff.c        **** 	}
1906:.\ff.c        **** #else
1907:.\ff.c        **** 	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1908:.\ff.c        **** 		if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
1909:.\ff.c        **** 		w = ld_word(dirb + si);				/* Get a character */
1910:.\ff.c        **** 		w = ff_convert(w, 0);				/* Unicode -> OEM */
1911:.\ff.c        **** 		if (w == 0) { di = 0; break; }		/* Could not be converted and inaccessible object */
1912:.\ff.c        **** 		if (_DF1S && w >= 0x100) {			/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
1913:.\ff.c        **** 			fno->fname[di++] = (char)(w >> 8);
1914:.\ff.c        **** 		}
1915:.\ff.c        **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow and inaccessible object */
1916:.\ff.c        **** 		fno->fname[di++] = (char)w;
1917:.\ff.c        **** 	}
1918:.\ff.c        **** #endif
1919:.\ff.c        **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object? */
1920:.\ff.c        **** 	fno->fname[di] = 0;						/* Terminate file name */
1921:.\ff.c        **** 
1922:.\ff.c        **** 	fno->altname[0] = 0;							/* No SFN */
1923:.\ff.c        **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1924:.\ff.c        **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1925:.\ff.c        **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1926:.\ff.c        **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 42


1927:.\ff.c        **** }
1928:.\ff.c        **** 
1929:.\ff.c        **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1930:.\ff.c        **** 
1931:.\ff.c        **** 
1932:.\ff.c        **** /*-----------------------------------*/
1933:.\ff.c        **** /* exFAT: Get a directry entry block */
1934:.\ff.c        **** /*-----------------------------------*/
1935:.\ff.c        **** 
1936:.\ff.c        **** static
1937:.\ff.c        **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1938:.\ff.c        **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
1939:.\ff.c        **** )
1940:.\ff.c        **** {
1941:.\ff.c        **** 	FRESULT res;
1942:.\ff.c        **** 	UINT i, nent;
1943:.\ff.c        **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1944:.\ff.c        **** 
1945:.\ff.c        **** 
1946:.\ff.c        **** 	/* Load 85 entry */
1947:.\ff.c        **** 	res = move_window(dp->obj.fs, dp->sect);
1948:.\ff.c        **** 	if (res != FR_OK) return res;
1949:.\ff.c        **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1950:.\ff.c        **** 	mem_cpy(dirb, dp->dir, SZDIRE);
1951:.\ff.c        **** 	nent = dirb[XDIR_NumSec] + 1;
1952:.\ff.c        **** 
1953:.\ff.c        **** 	/* Load C0 entry */
1954:.\ff.c        **** 	res = dir_next(dp, 0);
1955:.\ff.c        **** 	if (res != FR_OK) return res;
1956:.\ff.c        **** 	res = move_window(dp->obj.fs, dp->sect);
1957:.\ff.c        **** 	if (res != FR_OK) return res;
1958:.\ff.c        **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
1959:.\ff.c        **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
1960:.\ff.c        **** 
1961:.\ff.c        **** 	/* Load C1 entries */
1962:.\ff.c        **** 	if (nent < 3 || nent > 19) return FR_NO_FILE;
1963:.\ff.c        **** 	i = SZDIRE * 2; nent *= SZDIRE;
1964:.\ff.c        **** 	do {
1965:.\ff.c        **** 		res = dir_next(dp, 0);
1966:.\ff.c        **** 		if (res != FR_OK) return res;
1967:.\ff.c        **** 		res = move_window(dp->obj.fs, dp->sect);
1968:.\ff.c        **** 		if (res != FR_OK) return res;
1969:.\ff.c        **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
1970:.\ff.c        **** 		mem_cpy(dirb + i, dp->dir, SZDIRE);
1971:.\ff.c        **** 		i += SZDIRE;
1972:.\ff.c        **** 	} while (i < nent);
1973:.\ff.c        **** 
1974:.\ff.c        **** 	/* Sanity check */
1975:.\ff.c        **** 	if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1976:.\ff.c        **** 
1977:.\ff.c        **** 	return FR_OK;
1978:.\ff.c        **** }
1979:.\ff.c        **** 
1980:.\ff.c        **** 
1981:.\ff.c        **** #if !_FS_READONLY || _FS_RPATH != 0 
1982:.\ff.c        **** /*------------------------------------------------*/
1983:.\ff.c        **** /* exFAT: Load the object's directory entry block */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 43


1984:.\ff.c        **** /*------------------------------------------------*/
1985:.\ff.c        **** static
1986:.\ff.c        **** FRESULT load_obj_dir (	
1987:.\ff.c        **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
1988:.\ff.c        **** 	const _FDID* obj	/* Object with containing directory information */
1989:.\ff.c        **** )
1990:.\ff.c        **** {
1991:.\ff.c        **** 	FRESULT res;
1992:.\ff.c        **** 
1993:.\ff.c        **** 
1994:.\ff.c        **** 	/* Open object containing directory */
1995:.\ff.c        **** 	dp->obj.fs = obj->fs;
1996:.\ff.c        **** 	dp->obj.sclust = obj->c_scl;
1997:.\ff.c        **** 	dp->obj.stat = (BYTE)obj->c_size;
1998:.\ff.c        **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1999:.\ff.c        **** 	dp->blk_ofs = obj->c_ofs;
2000:.\ff.c        **** 
2001:.\ff.c        **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto the block location */
2002:.\ff.c        **** 	if (res == FR_OK) {
2003:.\ff.c        **** 		res = load_xdir(dp);		/* Load the object's entry block */
2004:.\ff.c        **** 	}
2005:.\ff.c        **** 	return res;
2006:.\ff.c        **** }
2007:.\ff.c        **** #endif
2008:.\ff.c        **** 
2009:.\ff.c        **** 
2010:.\ff.c        **** #if !_FS_READONLY
2011:.\ff.c        **** /*-----------------------------------------------*/
2012:.\ff.c        **** /* exFAT: Store the directory block to the media */
2013:.\ff.c        **** /*-----------------------------------------------*/
2014:.\ff.c        **** static
2015:.\ff.c        **** FRESULT store_xdir (
2016:.\ff.c        **** 	DIR* dp				/* Pointer to the direcotry object */
2017:.\ff.c        **** )
2018:.\ff.c        **** {
2019:.\ff.c        **** 	FRESULT res;
2020:.\ff.c        **** 	UINT nent;
2021:.\ff.c        **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2022:.\ff.c        **** 
2023:.\ff.c        **** 	/* Create set sum */
2024:.\ff.c        **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2025:.\ff.c        **** 	nent = dirb[XDIR_NumSec] + 1;
2026:.\ff.c        **** 
2027:.\ff.c        **** 	/* Store the set of directory to the volume */
2028:.\ff.c        **** 	res = dir_sdi(dp, dp->blk_ofs);
2029:.\ff.c        **** 	while (res == FR_OK) {
2030:.\ff.c        **** 		res = move_window(dp->obj.fs, dp->sect);
2031:.\ff.c        **** 		if (res != FR_OK) break;
2032:.\ff.c        **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2033:.\ff.c        **** 		dp->obj.fs->wflag = 1;
2034:.\ff.c        **** 		if (--nent == 0) break;
2035:.\ff.c        **** 		dirb += SZDIRE;
2036:.\ff.c        **** 		res = dir_next(dp, 0);
2037:.\ff.c        **** 	}
2038:.\ff.c        **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2039:.\ff.c        **** }
2040:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 44


2041:.\ff.c        **** 
2042:.\ff.c        **** 
2043:.\ff.c        **** /*-------------------------------------------*/
2044:.\ff.c        **** /* exFAT: Create a new directory enrty block */
2045:.\ff.c        **** /*-------------------------------------------*/
2046:.\ff.c        **** 
2047:.\ff.c        **** static
2048:.\ff.c        **** void create_xdir (
2049:.\ff.c        **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2050:.\ff.c        **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2051:.\ff.c        **** )
2052:.\ff.c        **** {
2053:.\ff.c        **** 	UINT i;
2054:.\ff.c        **** 	BYTE nb, nc;
2055:.\ff.c        **** 	WCHAR chr;
2056:.\ff.c        **** 
2057:.\ff.c        **** 
2058:.\ff.c        **** 	mem_set(dirb, 0, 2 * SZDIRE);			/* Initialize 85+C0 entry */
2059:.\ff.c        **** 	dirb[XDIR_Type] = 0x85;
2060:.\ff.c        **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2061:.\ff.c        **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2062:.\ff.c        **** 
2063:.\ff.c        **** 	i = SZDIRE * 2;	/* C1 offset */
2064:.\ff.c        **** 	nc = 0; nb = 1; chr = 1;
2065:.\ff.c        **** 	do {
2066:.\ff.c        **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2067:.\ff.c        **** 		do {	/* Fill name field */
2068:.\ff.c        **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2069:.\ff.c        **** 			st_word(dirb + i, chr); i += 2;	/* Store it */
2070:.\ff.c        **** 		} while (i % SZDIRE);
2071:.\ff.c        **** 		nb++;
2072:.\ff.c        **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2073:.\ff.c        **** 
2074:.\ff.c        **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2075:.\ff.c        **** 	dirb[XDIR_NumSec] = nb;		/* Set number of C0+C1s */
2076:.\ff.c        **** }
2077:.\ff.c        **** 
2078:.\ff.c        **** #endif	/* !_FS_READONLY */
2079:.\ff.c        **** #endif	/* _FS_EXFAT */
2080:.\ff.c        **** 
2081:.\ff.c        **** 
2082:.\ff.c        **** 
2083:.\ff.c        **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2084:.\ff.c        **** /*-----------------------------------------------------------------------*/
2085:.\ff.c        **** /* Read an object from the directory                                     */
2086:.\ff.c        **** /*-----------------------------------------------------------------------*/
2087:.\ff.c        **** 
2088:.\ff.c        **** static
2089:.\ff.c        **** FRESULT dir_read (
2090:.\ff.c        **** 	DIR* dp,		/* Pointer to the directory object */
2091:.\ff.c        **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2092:.\ff.c        **** )
2093:.\ff.c        **** {
2094:.\ff.c        **** 	FRESULT res = FR_NO_FILE;
2095:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2096:.\ff.c        **** 	BYTE a, c;
2097:.\ff.c        **** #if _USE_LFN != 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 45


2098:.\ff.c        **** 	BYTE ord = 0xFF, sum = 0xFF;
2099:.\ff.c        **** #endif
2100:.\ff.c        **** 
2101:.\ff.c        **** 	while (dp->sect) {
2102:.\ff.c        **** 		res = move_window(fs, dp->sect);
2103:.\ff.c        **** 		if (res != FR_OK) break;
2104:.\ff.c        **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
2105:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
2106:.\ff.c        **** #if _FS_EXFAT
2107:.\ff.c        **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2108:.\ff.c        **** 			if (_USE_LABEL && vol) {
2109:.\ff.c        **** 				if (c == 0x83) break;	/* Volume label entry? */
2110:.\ff.c        **** 			} else {
2111:.\ff.c        **** 				if (c == 0x85) {		/* Start of the file entry block? */
2112:.\ff.c        **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2113:.\ff.c        **** 					res = load_xdir(dp);	/* Load the entry block */
2114:.\ff.c        **** 					if (res == FR_OK) {
2115:.\ff.c        **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2116:.\ff.c        **** 					}
2117:.\ff.c        **** 					break;
2118:.\ff.c        **** 				}
2119:.\ff.c        **** 			}
2120:.\ff.c        **** 		} else
2121:.\ff.c        **** #endif
2122:.\ff.c        **** 		{	/* On the FAT12/16/32 volume */
2123:.\ff.c        **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2124:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2125:.\ff.c        **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2126:.\ff.c        **** 				ord = 0xFF;
2127:.\ff.c        **** 			} else {
2128:.\ff.c        **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2129:.\ff.c        **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2130:.\ff.c        **** 						sum = dp->dir[LDIR_Chksum];
2131:.\ff.c        **** 						c &= (BYTE)~LLEF; ord = c;
2132:.\ff.c        **** 						dp->blk_ofs = dp->dptr;
2133:.\ff.c        **** 					}
2134:.\ff.c        **** 					/* Check LFN validity and capture it */
2135:.\ff.c        **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2136:.\ff.c        **** 				} else {					/* An SFN entry is found */
2137:.\ff.c        **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2138:.\ff.c        **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2139:.\ff.c        **** 					}
2140:.\ff.c        **** 					break;
2141:.\ff.c        **** 				}
2142:.\ff.c        **** 			}
2143:.\ff.c        **** #else		/* Non LFN configuration */
2144:.\ff.c        **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
2145:.\ff.c        **** 				break;
2146:.\ff.c        **** 			}
2147:.\ff.c        **** #endif
2148:.\ff.c        **** 		}
2149:.\ff.c        **** 		res = dir_next(dp, 0);		/* Next entry */
2150:.\ff.c        **** 		if (res != FR_OK) break;
2151:.\ff.c        **** 	}
2152:.\ff.c        **** 
2153:.\ff.c        **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2154:.\ff.c        **** 	return res;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 46


2155:.\ff.c        **** }
2156:.\ff.c        **** 
2157:.\ff.c        **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2158:.\ff.c        **** 
2159:.\ff.c        **** 
2160:.\ff.c        **** 
2161:.\ff.c        **** /*-----------------------------------------------------------------------*/
2162:.\ff.c        **** /* Directory handling - Find an object in the directory                  */
2163:.\ff.c        **** /*-----------------------------------------------------------------------*/
2164:.\ff.c        **** 
2165:.\ff.c        **** static
2166:.\ff.c        **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2167:.\ff.c        **** 	DIR* dp			/* Pointer to the directory object with the file name */
2168:.\ff.c        **** )
2169:.\ff.c        **** {
2170:.\ff.c        **** 	FRESULT res;
2171:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2172:.\ff.c        **** 	BYTE c;
2173:.\ff.c        **** #if _USE_LFN != 0
2174:.\ff.c        **** 	BYTE a, ord, sum;
2175:.\ff.c        **** #endif
2176:.\ff.c        **** 
2177:.\ff.c        **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2178:.\ff.c        **** 	if (res != FR_OK) return res;
2179:.\ff.c        **** #if _FS_EXFAT
2180:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2181:.\ff.c        **** 		BYTE nc;
2182:.\ff.c        **** 		UINT di, ni;
2183:.\ff.c        **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2184:.\ff.c        **** 
2185:.\ff.c        **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2186:.\ff.c        **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value 
2187:.\ff.c        **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2188:.\ff.c        **** 				if ((di % SZDIRE) == 0) di += 2;
2189:.\ff.c        **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2190:.\ff.c        **** 			}
2191:.\ff.c        **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2192:.\ff.c        **** 		}
2193:.\ff.c        **** 		return res;
2194:.\ff.c        **** 	}
2195:.\ff.c        **** #endif
2196:.\ff.c        **** 	/* On the FAT12/16/32 volume */
2197:.\ff.c        **** #if _USE_LFN != 0
2198:.\ff.c        **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2199:.\ff.c        **** #endif
2200:.\ff.c        **** 	do {
2201:.\ff.c        **** 		res = move_window(fs, dp->sect);
2202:.\ff.c        **** 		if (res != FR_OK) break;
2203:.\ff.c        **** 		c = dp->dir[DIR_Name];
2204:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2205:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2206:.\ff.c        **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2207:.\ff.c        **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2208:.\ff.c        **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2209:.\ff.c        **** 		} else {
2210:.\ff.c        **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2211:.\ff.c        **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 47


2212:.\ff.c        **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2213:.\ff.c        **** 						sum = dp->dir[LDIR_Chksum];
2214:.\ff.c        **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2215:.\ff.c        **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2216:.\ff.c        **** 					}
2217:.\ff.c        **** 					/* Check validity of the LFN entry and compare it with given name */
2218:.\ff.c        **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2219:.\ff.c        **** 				}
2220:.\ff.c        **** 			} else {					/* An SFN entry is found */
2221:.\ff.c        **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2222:.\ff.c        **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2223:.\ff.c        **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2224:.\ff.c        **** 			}
2225:.\ff.c        **** 		}
2226:.\ff.c        **** #else		/* Non LFN configuration */
2227:.\ff.c        **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2228:.\ff.c        **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2229:.\ff.c        **** #endif
2230:.\ff.c        **** 		res = dir_next(dp, 0);	/* Next entry */
2231:.\ff.c        **** 	} while (res == FR_OK);
2232:.\ff.c        **** 
2233:.\ff.c        **** 	return res;
2234:.\ff.c        **** }
2235:.\ff.c        **** 
2236:.\ff.c        **** 
2237:.\ff.c        **** 
2238:.\ff.c        **** 
2239:.\ff.c        **** #if !_FS_READONLY
2240:.\ff.c        **** /*-----------------------------------------------------------------------*/
2241:.\ff.c        **** /* Register an object to the directory                                   */
2242:.\ff.c        **** /*-----------------------------------------------------------------------*/
2243:.\ff.c        **** 
2244:.\ff.c        **** static
2245:.\ff.c        **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2246:.\ff.c        **** 	DIR* dp				/* Target directory with object name to be created */
2247:.\ff.c        **** )
2248:.\ff.c        **** {
2249:.\ff.c        **** 	FRESULT res;
2250:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2251:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2252:.\ff.c        **** 	UINT n, nlen, nent;
2253:.\ff.c        **** 	BYTE sn[12], sum;
2254:.\ff.c        **** 
2255:.\ff.c        **** 
2256:.\ff.c        **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2257:.\ff.c        **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2258:.\ff.c        **** 
2259:.\ff.c        **** #if _FS_EXFAT
2260:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2261:.\ff.c        **** 		DIR dj;
2262:.\ff.c        **** 
2263:.\ff.c        **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2264:.\ff.c        **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2265:.\ff.c        **** 		if (res != FR_OK) return res;
2266:.\ff.c        **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);			/* Set block position */
2267:.\ff.c        **** 
2268:.\ff.c        **** 		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 48


2269:.\ff.c        **** 			dp->obj.stat &= 3;
2270:.\ff.c        **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase object size by cluster size */
2271:.\ff.c        **** 			res = fill_fat_chain(&dp->obj);	/* Complement FAT chain if needed */
2272:.\ff.c        **** 			if (res != FR_OK) return res;
2273:.\ff.c        **** 			res = load_obj_dir(&dj, &dp->obj);
2274:.\ff.c        **** 			if (res != FR_OK) return res;	/* Load the object status */
2275:.\ff.c        **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2276:.\ff.c        **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2277:.\ff.c        **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2278:.\ff.c        **** 			res = store_xdir(&dj);			/* Store the object status */
2279:.\ff.c        **** 			if (res != FR_OK) return res;
2280:.\ff.c        **** 		}
2281:.\ff.c        **** 
2282:.\ff.c        **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2283:.\ff.c        **** 		return FR_OK;
2284:.\ff.c        **** 	}
2285:.\ff.c        **** #endif
2286:.\ff.c        **** 	/* On the FAT12/16/32 volume */
2287:.\ff.c        **** 	mem_cpy(sn, dp->fn, 12);
2288:.\ff.c        **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2289:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2290:.\ff.c        **** 		for (n = 1; n < 100; n++) {
2291:.\ff.c        **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2292:.\ff.c        **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2293:.\ff.c        **** 			if (res != FR_OK) break;
2294:.\ff.c        **** 		}
2295:.\ff.c        **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2296:.\ff.c        **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2297:.\ff.c        **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2298:.\ff.c        **** 	}
2299:.\ff.c        **** 
2300:.\ff.c        **** 	/* Create an SFN with/without LFNs. */
2301:.\ff.c        **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2302:.\ff.c        **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2303:.\ff.c        **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2304:.\ff.c        **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2305:.\ff.c        **** 		if (res == FR_OK) {
2306:.\ff.c        **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2307:.\ff.c        **** 			do {					/* Store LFN entries in bottom first */
2308:.\ff.c        **** 				res = move_window(fs, dp->sect);
2309:.\ff.c        **** 				if (res != FR_OK) break;
2310:.\ff.c        **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2311:.\ff.c        **** 				fs->wflag = 1;
2312:.\ff.c        **** 				res = dir_next(dp, 0);	/* Next entry */
2313:.\ff.c        **** 			} while (res == FR_OK && --nent);
2314:.\ff.c        **** 		}
2315:.\ff.c        **** 	}
2316:.\ff.c        **** 
2317:.\ff.c        **** #else	/* Non LFN configuration */
2318:.\ff.c        **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2319:.\ff.c        **** 
2320:.\ff.c        **** #endif
2321:.\ff.c        **** 
2322:.\ff.c        **** 	/* Set SFN entry */
2323:.\ff.c        **** 	if (res == FR_OK) {
2324:.\ff.c        **** 		res = move_window(fs, dp->sect);
2325:.\ff.c        **** 		if (res == FR_OK) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 49


2326:.\ff.c        **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2327:.\ff.c        **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2328:.\ff.c        **** #if _USE_LFN != 0
2329:.\ff.c        **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2330:.\ff.c        **** #endif
2331:.\ff.c        **** 			fs->wflag = 1;
2332:.\ff.c        **** 		}
2333:.\ff.c        **** 	}
2334:.\ff.c        **** 
2335:.\ff.c        **** 	return res;
2336:.\ff.c        **** }
2337:.\ff.c        **** 
2338:.\ff.c        **** #endif /* !_FS_READONLY */
2339:.\ff.c        **** 
2340:.\ff.c        **** 
2341:.\ff.c        **** 
2342:.\ff.c        **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2343:.\ff.c        **** /*-----------------------------------------------------------------------*/
2344:.\ff.c        **** /* Remove an object from the directory                                   */
2345:.\ff.c        **** /*-----------------------------------------------------------------------*/
2346:.\ff.c        **** 
2347:.\ff.c        **** static
2348:.\ff.c        **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2349:.\ff.c        **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2350:.\ff.c        **** )
2351:.\ff.c        **** {
2352:.\ff.c        **** 	FRESULT res;
2353:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2354:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2355:.\ff.c        **** 	DWORD last = dp->dptr;
2356:.\ff.c        **** 
2357:.\ff.c        **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2358:.\ff.c        **** 	if (res == FR_OK) {
2359:.\ff.c        **** 		do {
2360:.\ff.c        **** 			res = move_window(fs, dp->sect);
2361:.\ff.c        **** 			if (res != FR_OK) break;
2362:.\ff.c        **** 			/* Mark an entry 'deleted' */
2363:.\ff.c        **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2364:.\ff.c        **** 				dp->dir[XDIR_Type] &= 0x7F;
2365:.\ff.c        **** 			} else {									/* On the FAT12/16/32 volume */
2366:.\ff.c        **** 				dp->dir[DIR_Name] = DDEM;
2367:.\ff.c        **** 			}
2368:.\ff.c        **** 			fs->wflag = 1;
2369:.\ff.c        **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2370:.\ff.c        **** 			res = dir_next(dp, 0);	/* Next entry */
2371:.\ff.c        **** 		} while (res == FR_OK);
2372:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2373:.\ff.c        **** 	}
2374:.\ff.c        **** #else			/* Non LFN configuration */
2375:.\ff.c        **** 
2376:.\ff.c        **** 	res = move_window(fs, dp->sect);
2377:.\ff.c        **** 	if (res == FR_OK) {
2378:.\ff.c        **** 		dp->dir[DIR_Name] = DDEM;
2379:.\ff.c        **** 		fs->wflag = 1;
2380:.\ff.c        **** 	}
2381:.\ff.c        **** #endif
2382:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 50


2383:.\ff.c        **** 	return res;
2384:.\ff.c        **** }
2385:.\ff.c        **** 
2386:.\ff.c        **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2387:.\ff.c        **** 
2388:.\ff.c        **** 
2389:.\ff.c        **** 
2390:.\ff.c        **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2391:.\ff.c        **** /*-----------------------------------------------------------------------*/
2392:.\ff.c        **** /* Get file information from directory entry                             */
2393:.\ff.c        **** /*-----------------------------------------------------------------------*/
2394:.\ff.c        **** 
2395:.\ff.c        **** static
2396:.\ff.c        **** void get_fileinfo (		/* No return code */
2397:.\ff.c        **** 	DIR* dp,			/* Pointer to the directory object */
2398:.\ff.c        **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2399:.\ff.c        **** )
2400:.\ff.c        **** {
 410              		.loc 1 2400 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL55:
2401:.\ff.c        **** 	UINT i, j;
2402:.\ff.c        **** 	TCHAR c;
2403:.\ff.c        **** 	DWORD tm;
2404:.\ff.c        **** #if _USE_LFN != 0
2405:.\ff.c        **** 	WCHAR w, lfv;
2406:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
2407:.\ff.c        **** #endif
2408:.\ff.c        **** 
2409:.\ff.c        **** 
2410:.\ff.c        **** 	fno->fname[0] = 0;		/* Invaidate file info */
 415              		.loc 1 2410 0
 416 0000 0023     		movs	r3, #0
 417 0002 4B72     		strb	r3, [r1, #9]
2411:.\ff.c        **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 418              		.loc 1 2411 0
 419 0004 8369     		ldr	r3, [r0, #24]
 420 0006 63B3     		cbz	r3, .L36
2400:.\ff.c        **** 	UINT i, j;
 421              		.loc 1 2400 0
 422 0008 70B5     		push	{r4, r5, r6, lr}
 423              		.cfi_def_cfa_offset 16
 424              		.cfi_offset 4, -16
 425              		.cfi_offset 5, -12
 426              		.cfi_offset 6, -8
 427              		.cfi_offset 14, -4
 428 000a 0024     		movs	r4, #0
 429 000c 2346     		mov	r3, r4
 430 000e 11E0     		b	.L29
 431              	.LVL56:
 432              	.L33:
2412:.\ff.c        **** 
2413:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2414:.\ff.c        **** #if _FS_EXFAT
2415:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 51


2416:.\ff.c        **** 		get_xdir_info(fs->dirbuf, fno);
2417:.\ff.c        **** 		return;
2418:.\ff.c        **** 	} else
2419:.\ff.c        **** #endif
2420:.\ff.c        **** 	{	/* On the FAT12/16/32 volume */
2421:.\ff.c        **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2422:.\ff.c        **** 			i = j = 0;
2423:.\ff.c        **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2424:.\ff.c        **** #if !_LFN_UNICODE
2425:.\ff.c        **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2426:.\ff.c        **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2427:.\ff.c        **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2428:.\ff.c        **** 					fno->fname[i++] = (char)(w >> 8);
2429:.\ff.c        **** 				}
2430:.\ff.c        **** #endif
2431:.\ff.c        **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2432:.\ff.c        **** 				fno->fname[i++] = (TCHAR)w;
2433:.\ff.c        **** 			}
2434:.\ff.c        **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2435:.\ff.c        **** 		}
2436:.\ff.c        **** 	}
2437:.\ff.c        **** 
2438:.\ff.c        **** 	i = j = 0;
2439:.\ff.c        **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2440:.\ff.c        **** 	while (i < 11) {		/* Copy name body and extension */
2441:.\ff.c        **** 		c = (TCHAR)dp->dir[i++];
2442:.\ff.c        **** 		if (c == ' ') continue;				/* Skip padding spaces */
2443:.\ff.c        **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2444:.\ff.c        **** 		if (i == 9) {						/* Insert a . if extension is exist */
2445:.\ff.c        **** 			if (!lfv) fno->fname[j] = '.';
2446:.\ff.c        **** 			fno->altname[j++] = '.';
2447:.\ff.c        **** 		}
2448:.\ff.c        **** #if _LFN_UNICODE
2449:.\ff.c        **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2450:.\ff.c        **** 			c = c << 8 | dp->dir[i++];
2451:.\ff.c        **** 		}
2452:.\ff.c        **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2453:.\ff.c        **** 		if (!c) c = '?';
2454:.\ff.c        **** #endif
2455:.\ff.c        **** 		fno->altname[j] = c;
2456:.\ff.c        **** 		if (!lfv) {
2457:.\ff.c        **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
2458:.\ff.c        **** 				c += 0x20;			/* To lower */
2459:.\ff.c        **** 			}
2460:.\ff.c        **** 			fno->fname[j] = c;
2461:.\ff.c        **** 		}
2462:.\ff.c        **** 		j++;
2463:.\ff.c        **** 	}
2464:.\ff.c        **** 	if (!lfv) {
2465:.\ff.c        **** 		fno->fname[j] = 0;
2466:.\ff.c        **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2467:.\ff.c        **** 	}
2468:.\ff.c        **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2469:.\ff.c        **** 
2470:.\ff.c        **** #else	/* Non-LFN configuration */
2471:.\ff.c        **** 	i = j = 0;
2472:.\ff.c        **** 	while (i < 11) {		/* Copy name body and extension */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 52


2473:.\ff.c        **** 		c = (TCHAR)dp->dir[i++];
 433              		.loc 1 2473 0
 434 0010 C569     		ldr	r5, [r0, #28]
 435 0012 5A1C     		adds	r2, r3, #1
 436              	.LVL57:
 437 0014 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 438              	.LVL58:
2474:.\ff.c        **** 		if (c == ' ') continue;				/* Skip padding spaces */
 439              		.loc 1 2474 0
 440 0016 202B     		cmp	r3, #32
 441 0018 0BD0     		beq	.L30
2475:.\ff.c        **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 442              		.loc 1 2475 0
 443 001a 052B     		cmp	r3, #5
 444 001c 00D1     		bne	.L31
 445 001e E523     		movs	r3, #229
 446              	.LVL59:
 447              	.L31:
2476:.\ff.c        **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 448              		.loc 1 2476 0
 449 0020 092A     		cmp	r2, #9
 450 0022 03D1     		bne	.L32
 451              	.LVL60:
 452              		.loc 1 2476 0 is_stmt 0 discriminator 1
 453 0024 0D19     		adds	r5, r1, r4
 454 0026 2E26     		movs	r6, #46
 455 0028 6E72     		strb	r6, [r5, #9]
 456 002a 0134     		adds	r4, r4, #1
 457              	.LVL61:
 458              	.L32:
2477:.\ff.c        **** 		fno->fname[j++] = c;
 459              		.loc 1 2477 0 is_stmt 1
 460 002c 0D19     		adds	r5, r1, r4
 461 002e 6B72     		strb	r3, [r5, #9]
 462 0030 0134     		adds	r4, r4, #1
 463              	.LVL62:
 464              	.L30:
 465 0032 1346     		mov	r3, r2
 466              	.LVL63:
 467              	.L29:
2472:.\ff.c        **** 		c = (TCHAR)dp->dir[i++];
 468              		.loc 1 2472 0
 469 0034 0A2B     		cmp	r3, #10
 470 0036 EBD9     		bls	.L33
 471 0038 0E46     		mov	r6, r1
 472 003a 0546     		mov	r5, r0
2478:.\ff.c        **** 	}
2479:.\ff.c        **** 	fno->fname[j] = 0;
 473              		.loc 1 2479 0
 474 003c 0C44     		add	r4, r4, r1
 475              	.LVL64:
 476 003e 0023     		movs	r3, #0
 477              	.LVL65:
 478 0040 6372     		strb	r3, [r4, #9]
2480:.\ff.c        **** #endif
2481:.\ff.c        **** 
2482:.\ff.c        **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 53


 479              		.loc 1 2482 0
 480 0042 C369     		ldr	r3, [r0, #28]
 481 0044 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 482 0046 0B72     		strb	r3, [r1, #8]
2483:.\ff.c        **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 483              		.loc 1 2483 0
 484 0048 C069     		ldr	r0, [r0, #28]
 485              	.LVL66:
 486 004a 1C30     		adds	r0, r0, #28
 487 004c FFF7FEFF 		bl	ld_dword
 488              	.LVL67:
 489 0050 3060     		str	r0, [r6]
2484:.\ff.c        **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 490              		.loc 1 2484 0
 491 0052 E869     		ldr	r0, [r5, #28]
 492 0054 1630     		adds	r0, r0, #22
 493 0056 FFF7FEFF 		bl	ld_dword
 494              	.LVL68:
2485:.\ff.c        **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 495              		.loc 1 2485 0
 496 005a F080     		strh	r0, [r6, #6]	@ movhi
 497 005c 000C     		lsrs	r0, r0, #16
 498              	.LVL69:
 499 005e B080     		strh	r0, [r6, #4]	@ movhi
 500 0060 70BD     		pop	{r4, r5, r6, pc}
 501              	.LVL70:
 502              	.L36:
 503              		.cfi_def_cfa_offset 0
 504              		.cfi_restore 4
 505              		.cfi_restore 5
 506              		.cfi_restore 6
 507              		.cfi_restore 14
 508 0062 7047     		bx	lr
 509              		.cfi_endproc
 510              	.LFE25:
 511              		.size	get_fileinfo, .-get_fileinfo
 512              		.section	.text.create_name,"ax",%progbits
 513              		.align	2
 514              		.thumb
 515              		.thumb_func
 516              		.type	create_name, %function
 517              	create_name:
 518              	.LFB26:
2486:.\ff.c        **** }
2487:.\ff.c        **** 
2488:.\ff.c        **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2489:.\ff.c        **** 
2490:.\ff.c        **** 
2491:.\ff.c        **** 
2492:.\ff.c        **** #if _USE_FIND && _FS_MINIMIZE <= 1
2493:.\ff.c        **** /*-----------------------------------------------------------------------*/
2494:.\ff.c        **** /* Pattern matching                                                      */
2495:.\ff.c        **** /*-----------------------------------------------------------------------*/
2496:.\ff.c        **** 
2497:.\ff.c        **** static
2498:.\ff.c        **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2499:.\ff.c        **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 54


2500:.\ff.c        **** )
2501:.\ff.c        **** {
2502:.\ff.c        **** #if !_LFN_UNICODE
2503:.\ff.c        **** 	WCHAR chr;
2504:.\ff.c        **** 
2505:.\ff.c        **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2506:.\ff.c        **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2507:.\ff.c        **** #ifdef _EXCVT
2508:.\ff.c        **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2509:.\ff.c        **** #else
2510:.\ff.c        **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2511:.\ff.c        **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2512:.\ff.c        **** 	}
2513:.\ff.c        **** #endif
2514:.\ff.c        **** 	return chr;
2515:.\ff.c        **** #else
2516:.\ff.c        **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2517:.\ff.c        **** #endif
2518:.\ff.c        **** }
2519:.\ff.c        **** 
2520:.\ff.c        **** 
2521:.\ff.c        **** static
2522:.\ff.c        **** int pattern_matching (	/* 0:not matched, 1:matched */
2523:.\ff.c        **** 	const TCHAR* pat,	/* Matching pattern */
2524:.\ff.c        **** 	const TCHAR* nam,	/* String to be tested */
2525:.\ff.c        **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2526:.\ff.c        **** 	int inf				/* Infinite search (* specified) */
2527:.\ff.c        **** )
2528:.\ff.c        **** {
2529:.\ff.c        **** 	const TCHAR *pp, *np;
2530:.\ff.c        **** 	WCHAR pc, nc;
2531:.\ff.c        **** 	int nm, nx;
2532:.\ff.c        **** 
2533:.\ff.c        **** 
2534:.\ff.c        **** 	while (skip--) {				/* Pre-skip name chars */
2535:.\ff.c        **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2536:.\ff.c        **** 	}
2537:.\ff.c        **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2538:.\ff.c        **** 
2539:.\ff.c        **** 	do {
2540:.\ff.c        **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2541:.\ff.c        **** 		for (;;) {
2542:.\ff.c        **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2543:.\ff.c        **** 				nm = nx = 0;
2544:.\ff.c        **** 				do {				/* Analyze the wildcard chars */
2545:.\ff.c        **** 					if (*pp++ == '?') nm++; else nx = 1;
2546:.\ff.c        **** 				} while (*pp == '?' || *pp == '*');
2547:.\ff.c        **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2548:.\ff.c        **** 				nc = *np; break;	/* Branch mismatched */
2549:.\ff.c        **** 			}
2550:.\ff.c        **** 			pc = get_achar(&pp);	/* Get a pattern char */
2551:.\ff.c        **** 			nc = get_achar(&np);	/* Get a name char */
2552:.\ff.c        **** 			if (pc != nc) break;	/* Branch mismatched? */
2553:.\ff.c        **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2554:.\ff.c        **** 		}
2555:.\ff.c        **** 		get_achar(&nam);			/* nam++ */
2556:.\ff.c        **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 55


2557:.\ff.c        **** 
2558:.\ff.c        **** 	return 0;
2559:.\ff.c        **** }
2560:.\ff.c        **** 
2561:.\ff.c        **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2562:.\ff.c        **** 
2563:.\ff.c        **** 
2564:.\ff.c        **** 
2565:.\ff.c        **** /*-----------------------------------------------------------------------*/
2566:.\ff.c        **** /* Pick a top segment and create the object name in directory form       */
2567:.\ff.c        **** /*-----------------------------------------------------------------------*/
2568:.\ff.c        **** 
2569:.\ff.c        **** static
2570:.\ff.c        **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2571:.\ff.c        **** 	DIR* dp,			/* Pointer to the directory object */
2572:.\ff.c        **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2573:.\ff.c        **** )
2574:.\ff.c        **** {
 519              		.loc 1 2574 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              	.LVL71:
 524 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 525              		.cfi_def_cfa_offset 40
 526              		.cfi_offset 3, -40
 527              		.cfi_offset 4, -36
 528              		.cfi_offset 5, -32
 529              		.cfi_offset 6, -28
 530              		.cfi_offset 7, -24
 531              		.cfi_offset 8, -20
 532              		.cfi_offset 9, -16
 533              		.cfi_offset 10, -12
 534              		.cfi_offset 11, -8
 535              		.cfi_offset 14, -4
 536 0004 8246     		mov	r10, r0
 537 0006 8946     		mov	r9, r1
2575:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
2576:.\ff.c        **** 	BYTE b, cf;
2577:.\ff.c        **** 	WCHAR w, *lfn;
2578:.\ff.c        **** 	UINT i, ni, si, di;
2579:.\ff.c        **** 	const TCHAR *p;
2580:.\ff.c        **** 
2581:.\ff.c        **** 	/* Create LFN in Unicode */
2582:.\ff.c        **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2583:.\ff.c        **** 	for (;;) {
2584:.\ff.c        **** 		w = p[si++];					/* Get a character */
2585:.\ff.c        **** 		if (w < ' ') break;				/* Break if end of the path name */
2586:.\ff.c        **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2587:.\ff.c        **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2588:.\ff.c        **** 			break;
2589:.\ff.c        **** 		}
2590:.\ff.c        **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2591:.\ff.c        **** #if !_LFN_UNICODE
2592:.\ff.c        **** 		w &= 0xFF;
2593:.\ff.c        **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2594:.\ff.c        **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 56


2595:.\ff.c        **** 			w = (w << 8) + b;			/* Create a DBC */
2596:.\ff.c        **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2597:.\ff.c        **** 		}
2598:.\ff.c        **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2599:.\ff.c        **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2600:.\ff.c        **** #endif
2601:.\ff.c        **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2602:.\ff.c        **** 		lfn[di++] = w;					/* Store the Unicode character */
2603:.\ff.c        **** 	}
2604:.\ff.c        **** 	*path = &p[si];						/* Return pointer to the next segment */
2605:.\ff.c        **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2606:.\ff.c        **** #if _FS_RPATH != 0
2607:.\ff.c        **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2608:.\ff.c        **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2609:.\ff.c        **** 		lfn[di] = 0;
2610:.\ff.c        **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2611:.\ff.c        **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2612:.\ff.c        **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2613:.\ff.c        **** 		return FR_OK;
2614:.\ff.c        **** 	}
2615:.\ff.c        **** #endif
2616:.\ff.c        **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2617:.\ff.c        **** 		w = lfn[di - 1];
2618:.\ff.c        **** 		if (w != ' ' && w != '.') break;
2619:.\ff.c        **** 		di--;
2620:.\ff.c        **** 	}
2621:.\ff.c        **** 	lfn[di] = 0;						/* LFN is created */
2622:.\ff.c        **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2623:.\ff.c        **** 
2624:.\ff.c        **** 	/* Create SFN in directory form */
2625:.\ff.c        **** 	mem_set(dp->fn, ' ', 11);
2626:.\ff.c        **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2627:.\ff.c        **** 	if (si) cf |= NS_LOSS | NS_LFN;
2628:.\ff.c        **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2629:.\ff.c        **** 
2630:.\ff.c        **** 	i = b = 0; ni = 8;
2631:.\ff.c        **** 	for (;;) {
2632:.\ff.c        **** 		w = lfn[si++];					/* Get an LFN character */
2633:.\ff.c        **** 		if (!w) break;					/* Break on end of the LFN */
2634:.\ff.c        **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2635:.\ff.c        **** 			cf |= NS_LOSS | NS_LFN; continue;
2636:.\ff.c        **** 		}
2637:.\ff.c        **** 
2638:.\ff.c        **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2639:.\ff.c        **** 			if (ni == 11) {				/* Long extension */
2640:.\ff.c        **** 				cf |= NS_LOSS | NS_LFN; break;
2641:.\ff.c        **** 			}
2642:.\ff.c        **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2643:.\ff.c        **** 			if (si > di) break;			/* No extension */
2644:.\ff.c        **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
2645:.\ff.c        **** 			b <<= 2; continue;
2646:.\ff.c        **** 		}
2647:.\ff.c        **** 
2648:.\ff.c        **** 		if (w >= 0x80) {				/* Non ASCII character */
2649:.\ff.c        **** #ifdef _EXCVT
2650:.\ff.c        **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2651:.\ff.c        **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 57


2652:.\ff.c        **** #else
2653:.\ff.c        **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2654:.\ff.c        **** #endif
2655:.\ff.c        **** 			cf |= NS_LFN;				/* Force create LFN entry */
2656:.\ff.c        **** 		}
2657:.\ff.c        **** 
2658:.\ff.c        **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2659:.\ff.c        **** 			if (i >= ni - 1) {
2660:.\ff.c        **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2661:.\ff.c        **** 			}
2662:.\ff.c        **** 			dp->fn[i++] = (BYTE)(w >> 8);
2663:.\ff.c        **** 		} else {						/* SBC */
2664:.\ff.c        **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2665:.\ff.c        **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2666:.\ff.c        **** 			} else {
2667:.\ff.c        **** 				if (IsUpper(w)) {		/* ASCII large capital */
2668:.\ff.c        **** 					b |= 2;
2669:.\ff.c        **** 				} else {
2670:.\ff.c        **** 					if (IsLower(w)) {	/* ASCII small capital */
2671:.\ff.c        **** 						b |= 1; w -= 0x20;
2672:.\ff.c        **** 					}
2673:.\ff.c        **** 				}
2674:.\ff.c        **** 			}
2675:.\ff.c        **** 		}
2676:.\ff.c        **** 		dp->fn[i++] = (BYTE)w;
2677:.\ff.c        **** 	}
2678:.\ff.c        **** 
2679:.\ff.c        **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2680:.\ff.c        **** 
2681:.\ff.c        **** 	if (ni == 8) b <<= 2;
2682:.\ff.c        **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
2683:.\ff.c        **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2684:.\ff.c        **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2685:.\ff.c        **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2686:.\ff.c        **** 	}
2687:.\ff.c        **** 
2688:.\ff.c        **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2689:.\ff.c        **** 
2690:.\ff.c        **** 	return FR_OK;
2691:.\ff.c        **** 
2692:.\ff.c        **** 
2693:.\ff.c        **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2694:.\ff.c        **** 	BYTE c, d, *sfn;
2695:.\ff.c        **** 	UINT ni, si, i;
2696:.\ff.c        **** 	const char *p;
2697:.\ff.c        **** 
2698:.\ff.c        **** 	/* Create file name in directory form */
2699:.\ff.c        **** 	p = *path; sfn = dp->fn;
 538              		.loc 1 2699 0
 539 0008 0F68     		ldr	r7, [r1]
 540              	.LVL72:
 541 000a 00F1200B 		add	fp, r0, #32
 542              	.LVL73:
2700:.\ff.c        **** 	mem_set(sfn, ' ', 11);
 543              		.loc 1 2700 0
 544 000e 5846     		mov	r0, fp
 545              	.LVL74:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 58


 546 0010 2021     		movs	r1, #32
 547              	.LVL75:
 548 0012 0B22     		movs	r2, #11
 549 0014 FFF7FEFF 		bl	mem_set
 550              	.LVL76:
2701:.\ff.c        **** 	si = i = 0; ni = 8;
 551              		.loc 1 2701 0
 552 0018 0026     		movs	r6, #0
 553 001a 3346     		mov	r3, r6
 554 001c 4FF00808 		mov	r8, #8
 555              	.LVL77:
 556              	.L38:
2702:.\ff.c        **** #if _FS_RPATH != 0
2703:.\ff.c        **** 	if (p[si] == '.') { /* Is this a dot entry? */
2704:.\ff.c        **** 		for (;;) {
2705:.\ff.c        **** 			c = (BYTE)p[si++];
2706:.\ff.c        **** 			if (c != '.' || si >= 3) break;
2707:.\ff.c        **** 			sfn[i++] = c;
2708:.\ff.c        **** 		}
2709:.\ff.c        **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2710:.\ff.c        **** 		*path = p + si;								/* Return pointer to the next segment */
2711:.\ff.c        **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2712:.\ff.c        **** 		return FR_OK;
2713:.\ff.c        **** 	}
2714:.\ff.c        **** #endif
2715:.\ff.c        **** 	for (;;) {
2716:.\ff.c        **** 		c = (BYTE)p[si++];
 557              		.loc 1 2716 0
 558 0020 5D1C     		adds	r5, r3, #1
 559              	.LVL78:
 560 0022 FC5C     		ldrb	r4, [r7, r3]	@ zero_extendqisi2
 561              	.LVL79:
2717:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 562              		.loc 1 2717 0
 563 0024 202C     		cmp	r4, #32
 564 0026 4AD9     		bls	.L39
2718:.\ff.c        **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 565              		.loc 1 2718 0
 566 0028 2F2C     		cmp	r4, #47
 567 002a 03D0     		beq	.L42
 568              		.loc 1 2718 0 is_stmt 0 discriminator 1
 569 002c 5C2C     		cmp	r4, #92
 570 002e 07D1     		bne	.L41
 571 0030 00E0     		b	.L42
 572              	.L43:
2719:.\ff.c        **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 573              		.loc 1 2719 0 is_stmt 1 discriminator 4
 574 0032 0135     		adds	r5, r5, #1
 575              	.LVL80:
 576              	.L42:
 577              		.loc 1 2719 0 is_stmt 0 discriminator 1
 578 0034 7B5D     		ldrb	r3, [r7, r5]	@ zero_extendqisi2
 579 0036 2F2B     		cmp	r3, #47
 580 0038 FBD0     		beq	.L43
 581              		.loc 1 2719 0 discriminator 3
 582 003a 5C2B     		cmp	r3, #92
 583 003c F9D0     		beq	.L43
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 59


 584 003e 3EE0     		b	.L39
 585              	.L41:
2720:.\ff.c        **** 			break;
2721:.\ff.c        **** 		}
2722:.\ff.c        **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
 586              		.loc 1 2722 0 is_stmt 1
 587 0040 2E2C     		cmp	r4, #46
 588 0042 01D0     		beq	.L44
 589              		.loc 1 2722 0 is_stmt 0 discriminator 1
 590 0044 4645     		cmp	r6, r8
 591 0046 09D3     		bcc	.L45
 592              	.L44:
2723:.\ff.c        **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 593              		.loc 1 2723 0 is_stmt 1
 594 0048 B8F10B0F 		cmp	r8, #11
 595 004c 4CD0     		beq	.L54
 596              		.loc 1 2723 0 is_stmt 0 discriminator 2
 597 004e 2E2C     		cmp	r4, #46
 598 0050 4DD1     		bne	.L55
2716:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 599              		.loc 1 2716 0 is_stmt 1
 600 0052 2B46     		mov	r3, r5
2724:.\ff.c        **** 			i = 8; ni = 11;				/* Goto extension */
 601              		.loc 1 2724 0
 602 0054 0826     		movs	r6, #8
 603              	.LVL81:
 604 0056 4FF00B08 		mov	r8, #11
 605              	.LVL82:
 606 005a E1E7     		b	.L38
 607              	.LVL83:
 608              	.L45:
2725:.\ff.c        **** 			continue;
2726:.\ff.c        **** 		}
2727:.\ff.c        **** 		if (c >= 0x80) {				/* Extended character? */
2728:.\ff.c        **** #ifdef _EXCVT
2729:.\ff.c        **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2730:.\ff.c        **** #else
2731:.\ff.c        **** #if !_DF1S
2732:.\ff.c        **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2733:.\ff.c        **** #endif
2734:.\ff.c        **** #endif
2735:.\ff.c        **** 		}
2736:.\ff.c        **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
 609              		.loc 1 2736 0
 610 005c 04F17F03 		add	r3, r4, #127
 611 0060 DBB2     		uxtb	r3, r3
 612 0062 1E2B     		cmp	r3, #30
 613 0064 04D9     		bls	.L48
 614              		.loc 1 2736 0 is_stmt 0 discriminator 1
 615 0066 04F12003 		add	r3, r4, #32
 616 006a DBB2     		uxtb	r3, r3
 617 006c 1C2B     		cmp	r3, #28
 618 006e 15D8     		bhi	.L49
 619              	.L48:
2737:.\ff.c        **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 620              		.loc 1 2737 0 is_stmt 1
 621 0070 6B1C     		adds	r3, r5, #1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 60


 622              	.LVL84:
 623 0072 795D     		ldrb	r1, [r7, r5]	@ zero_extendqisi2
 624              	.LVL85:
2738:.\ff.c        **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 625              		.loc 1 2738 0
 626 0074 A1F14002 		sub	r2, r1, #64
 627 0078 D2B2     		uxtb	r2, r2
 628 007a 3E2A     		cmp	r2, #62
 629 007c 03D9     		bls	.L50
 630              		.loc 1 2738 0 is_stmt 0 discriminator 1
 631 007e 81F08002 		eor	r2, r1, #128
 632 0082 7C2A     		cmp	r2, #124
 633 0084 36D8     		bhi	.L56
 634              	.L50:
 635              		.loc 1 2738 0 discriminator 4
 636 0086 08F1FF32 		add	r2, r8, #-1
 637 008a B242     		cmp	r2, r6
 638 008c 35D9     		bls	.L57
2739:.\ff.c        **** 			sfn[i++] = c;
 639              		.loc 1 2739 0 is_stmt 1
 640 008e 721C     		adds	r2, r6, #1
 641              	.LVL86:
 642 0090 0BF80640 		strb	r4, [fp, r6]
2740:.\ff.c        **** 			sfn[i++] = d;
 643              		.loc 1 2740 0
 644 0094 0236     		adds	r6, r6, #2
 645              	.LVL87:
 646 0096 0BF80210 		strb	r1, [fp, r2]
 647 009a C1E7     		b	.L38
 648              	.LVL88:
 649              	.L49:
2741:.\ff.c        **** 		} else {						/* SBC */
2742:.\ff.c        **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 650              		.loc 1 2742 0
 651 009c 1B48     		ldr	r0, .L62
 652 009e 2146     		mov	r1, r4
 653 00a0 FFF7FEFF 		bl	chk_chr
 654              	.LVL89:
 655 00a4 60BB     		cbnz	r0, .L58
2743:.\ff.c        **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 656              		.loc 1 2743 0
 657 00a6 A4F16103 		sub	r3, r4, #97
 658 00aa DBB2     		uxtb	r3, r3
 659 00ac 192B     		cmp	r3, #25
 660 00ae 01D8     		bhi	.L51
 661              		.loc 1 2743 0 is_stmt 0 discriminator 1
 662 00b0 203C     		subs	r4, r4, #32
 663              	.LVL90:
 664 00b2 E4B2     		uxtb	r4, r4
 665              	.LVL91:
 666              	.L51:
2744:.\ff.c        **** 			sfn[i++] = c;
 667              		.loc 1 2744 0 is_stmt 1
 668 00b4 0BF80640 		strb	r4, [fp, r6]
 669 00b8 0136     		adds	r6, r6, #1
 670              	.LVL92:
2716:.\ff.c        **** 		if (c <= ' ') break; 			/* Break if end of the path name */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 61


 671              		.loc 1 2716 0
 672 00ba 2B46     		mov	r3, r5
 673 00bc B0E7     		b	.L38
 674              	.L39:
2745:.\ff.c        **** 		}
2746:.\ff.c        **** 	}
2747:.\ff.c        **** 	*path = p + si;						/* Return pointer to the next segment */
 675              		.loc 1 2747 0
 676 00be 3D44     		add	r5, r5, r7
 677              	.LVL93:
 678 00c0 C9F80050 		str	r5, [r9]
2748:.\ff.c        **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 679              		.loc 1 2748 0
 680 00c4 FEB1     		cbz	r6, .L59
2749:.\ff.c        **** 
2750:.\ff.c        **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 681              		.loc 1 2750 0
 682 00c6 9AF82030 		ldrb	r3, [r10, #32]	@ zero_extendqisi2
 683 00ca E52B     		cmp	r3, #229
 684 00cc 02D1     		bne	.L52
 685              		.loc 1 2750 0 is_stmt 0 discriminator 1
 686 00ce 0523     		movs	r3, #5
 687 00d0 8AF82030 		strb	r3, [r10, #32]
 688              	.L52:
2751:.\ff.c        **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 689              		.loc 1 2751 0 is_stmt 1
 690 00d4 202C     		cmp	r4, #32
 691 00d6 01D8     		bhi	.L60
 692 00d8 0423     		movs	r3, #4
 693 00da 00E0     		b	.L53
 694              	.L60:
 695 00dc 0023     		movs	r3, #0
 696              	.L53:
 697              		.loc 1 2751 0 is_stmt 0 discriminator 4
 698 00de 8AF82B30 		strb	r3, [r10, #43]
2752:.\ff.c        **** 
2753:.\ff.c        **** 	return FR_OK;
 699              		.loc 1 2753 0 is_stmt 1 discriminator 4
 700 00e2 0020     		movs	r0, #0
 701 00e4 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 702              	.LVL94:
 703              	.L54:
2723:.\ff.c        **** 			i = 8; ni = 11;				/* Goto extension */
 704              		.loc 1 2723 0
 705 00e8 0620     		movs	r0, #6
 706 00ea BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 707              	.LVL95:
 708              	.L55:
 709 00ee 0620     		movs	r0, #6
 710 00f0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 711              	.LVL96:
 712              	.L56:
2738:.\ff.c        **** 			sfn[i++] = c;
 713              		.loc 1 2738 0
 714 00f4 0620     		movs	r0, #6
 715 00f6 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 716              	.LVL97:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 62


 717              	.L57:
 718 00fa 0620     		movs	r0, #6
 719 00fc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 720              	.LVL98:
 721              	.L58:
2742:.\ff.c        **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 722              		.loc 1 2742 0
 723 0100 0620     		movs	r0, #6
 724 0102 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 725              	.LVL99:
 726              	.L59:
2748:.\ff.c        **** 
 727              		.loc 1 2748 0
 728 0106 0620     		movs	r0, #6
2754:.\ff.c        **** #endif /* _USE_LFN != 0 */
2755:.\ff.c        **** }
 729              		.loc 1 2755 0
 730 0108 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 731              	.LVL100:
 732              	.L63:
 733              		.align	2
 734              	.L62:
 735 010c 00000000 		.word	.LC0
 736              		.cfi_endproc
 737              	.LFE26:
 738              		.size	create_name, .-create_name
 739              		.section	.text.get_ldnumber,"ax",%progbits
 740              		.align	2
 741              		.thumb
 742              		.thumb_func
 743              		.type	get_ldnumber, %function
 744              	get_ldnumber:
 745              	.LFB28:
2756:.\ff.c        **** 
2757:.\ff.c        **** 
2758:.\ff.c        **** 
2759:.\ff.c        **** 
2760:.\ff.c        **** /*-----------------------------------------------------------------------*/
2761:.\ff.c        **** /* Follow a file path                                                    */
2762:.\ff.c        **** /*-----------------------------------------------------------------------*/
2763:.\ff.c        **** 
2764:.\ff.c        **** static
2765:.\ff.c        **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2766:.\ff.c        **** 	DIR* dp,			/* Directory object to return last directory and found object */
2767:.\ff.c        **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2768:.\ff.c        **** )
2769:.\ff.c        **** {
2770:.\ff.c        **** 	FRESULT res;
2771:.\ff.c        **** 	BYTE ns;
2772:.\ff.c        **** 	_FDID *obj = &dp->obj;
2773:.\ff.c        **** 	FATFS *fs = obj->fs;
2774:.\ff.c        **** 
2775:.\ff.c        **** 
2776:.\ff.c        **** #if _FS_RPATH != 0
2777:.\ff.c        **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2778:.\ff.c        **** 		obj->sclust = fs->cdir;				/* Start from the current directory */
2779:.\ff.c        **** 	} else
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 63


2780:.\ff.c        **** #endif
2781:.\ff.c        **** 	{										/* With heading separator */
2782:.\ff.c        **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2783:.\ff.c        **** 		obj->sclust = 0;					/* Start from the root directory */
2784:.\ff.c        **** 	}
2785:.\ff.c        **** #if _FS_EXFAT && _FS_RPATH != 0
2786:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2787:.\ff.c        **** 		DIR dj;
2788:.\ff.c        **** 
2789:.\ff.c        **** 		obj->c_scl = fs->cdc_scl;
2790:.\ff.c        **** 		obj->c_size = fs->cdc_size;
2791:.\ff.c        **** 		obj->c_ofs = fs->cdc_ofs;
2792:.\ff.c        **** 		res = load_obj_dir(&dj, obj);
2793:.\ff.c        **** 		if (res != FR_OK) return res;
2794:.\ff.c        **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2795:.\ff.c        **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2796:.\ff.c        **** 	}
2797:.\ff.c        **** #endif
2798:.\ff.c        **** 
2799:.\ff.c        **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2800:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NONAME;
2801:.\ff.c        **** 		res = dir_sdi(dp, 0);
2802:.\ff.c        **** 
2803:.\ff.c        **** 	} else {								/* Follow path */
2804:.\ff.c        **** 		for (;;) {
2805:.\ff.c        **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2806:.\ff.c        **** 			if (res != FR_OK) break;
2807:.\ff.c        **** 			res = dir_find(dp);				/* Find an object with the segment name */
2808:.\ff.c        **** 			ns = dp->fn[NSFLAG];
2809:.\ff.c        **** 			if (res != FR_OK) {				/* Failed to find the object */
2810:.\ff.c        **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2811:.\ff.c        **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2812:.\ff.c        **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2813:.\ff.c        **** 						dp->fn[NSFLAG] = NS_NONAME;
2814:.\ff.c        **** 						res = FR_OK;
2815:.\ff.c        **** 					} else {							/* Could not find the object */
2816:.\ff.c        **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2817:.\ff.c        **** 					}
2818:.\ff.c        **** 				}
2819:.\ff.c        **** 				break;
2820:.\ff.c        **** 			}
2821:.\ff.c        **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2822:.\ff.c        **** 			/* Get into the sub-directory */
2823:.\ff.c        **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2824:.\ff.c        **** 				res = FR_NO_PATH; break;
2825:.\ff.c        **** 			}
2826:.\ff.c        **** #if _FS_EXFAT
2827:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
2828:.\ff.c        **** 				obj->c_scl = obj->sclust;		/* Save containing directory information for next dir */
2829:.\ff.c        **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2830:.\ff.c        **** 				obj->c_ofs = dp->blk_ofs;
2831:.\ff.c        **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2832:.\ff.c        **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2833:.\ff.c        **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2834:.\ff.c        **** 			} else
2835:.\ff.c        **** #endif
2836:.\ff.c        **** 			{
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 64


2837:.\ff.c        **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2838:.\ff.c        **** 			}
2839:.\ff.c        **** 		}
2840:.\ff.c        **** 	}
2841:.\ff.c        **** 
2842:.\ff.c        **** 	return res;
2843:.\ff.c        **** }
2844:.\ff.c        **** 
2845:.\ff.c        **** 
2846:.\ff.c        **** 
2847:.\ff.c        **** 
2848:.\ff.c        **** /*-----------------------------------------------------------------------*/
2849:.\ff.c        **** /* Get logical drive number from path name                               */
2850:.\ff.c        **** /*-----------------------------------------------------------------------*/
2851:.\ff.c        **** 
2852:.\ff.c        **** static
2853:.\ff.c        **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2854:.\ff.c        **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2855:.\ff.c        **** )
2856:.\ff.c        **** {
 746              		.loc 1 2856 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751              	.LVL101:
2857:.\ff.c        **** 	const TCHAR *tp, *tt;
2858:.\ff.c        **** 	UINT i;
2859:.\ff.c        **** 	int vol = -1;
2860:.\ff.c        **** #if _STR_VOLUME_ID		/* Find string drive id */
2861:.\ff.c        **** 	static const char* const str[] = {_VOLUME_STRS};
2862:.\ff.c        **** 	const char *sp;
2863:.\ff.c        **** 	char c;
2864:.\ff.c        **** 	TCHAR tc;
2865:.\ff.c        **** #endif
2866:.\ff.c        **** 
2867:.\ff.c        **** 
2868:.\ff.c        **** 	if (*path) {	/* If the pointer is not a null */
 752              		.loc 1 2868 0
 753 0000 0168     		ldr	r1, [r0]
 754 0002 21B9     		cbnz	r1, .L71
2859:.\ff.c        **** #if _STR_VOLUME_ID		/* Find string drive id */
 755              		.loc 1 2859 0
 756 0004 4FF0FF33 		mov	r3, #-1
 757 0008 1FE0     		b	.L77
 758              	.LVL102:
 759              	.L68:
2869:.\ff.c        **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 760              		.loc 1 2869 0 discriminator 4
 761 000a 0132     		adds	r2, r2, #1
 762              	.LVL103:
 763 000c 00E0     		b	.L65
 764              	.LVL104:
 765              	.L71:
 766 000e 0A46     		mov	r2, r1
 767              	.L65:
 768              	.LVL105:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 65


 769              		.loc 1 2869 0 is_stmt 0 discriminator 1
 770 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 771 0012 202B     		cmp	r3, #32
 772 0014 01D9     		bls	.L67
 773              		.loc 1 2869 0 discriminator 3
 774 0016 3A2B     		cmp	r3, #58
 775 0018 F7D1     		bne	.L68
 776              	.L67:
2870:.\ff.c        **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 777              		.loc 1 2870 0 is_stmt 1
 778 001a 3A2B     		cmp	r3, #58
 779 001c 14D1     		bne	.L72
2856:.\ff.c        **** 	const TCHAR *tp, *tt;
 780              		.loc 1 2856 0
 781 001e 10B4     		push	{r4}
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 4, -4
 784              	.LVL106:
2871:.\ff.c        **** 			tp = *path;
2872:.\ff.c        **** 			i = *tp++ - '0'; 
 785              		.loc 1 2872 0
 786 0020 4C1C     		adds	r4, r1, #1
 787              	.LVL107:
 788 0022 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 789 0024 303B     		subs	r3, r3, #48
 790              	.LVL108:
2873:.\ff.c        **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 791              		.loc 1 2873 0
 792 0026 092B     		cmp	r3, #9
 793 0028 05D8     		bhi	.L73
 794              		.loc 1 2873 0 is_stmt 0 discriminator 1
 795 002a 9442     		cmp	r4, r2
 796 002c 06D1     		bne	.L74
2874:.\ff.c        **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 797              		.loc 1 2874 0 is_stmt 1
 798 002e 43B9     		cbnz	r3, .L75
 799              	.LVL109:
2875:.\ff.c        **** 					vol = (int)i;
2876:.\ff.c        **** 					*path = ++tt;
 800              		.loc 1 2876 0
 801 0030 0132     		adds	r2, r2, #1
 802              	.LVL110:
 803 0032 0260     		str	r2, [r0]
 804 0034 0BE0     		b	.L70
 805              	.LVL111:
 806              	.L73:
2859:.\ff.c        **** #if _STR_VOLUME_ID		/* Find string drive id */
 807              		.loc 1 2859 0
 808 0036 4FF0FF33 		mov	r3, #-1
 809              	.LVL112:
 810 003a 08E0     		b	.L70
 811              	.LVL113:
 812              	.L74:
 813 003c 4FF0FF33 		mov	r3, #-1
 814              	.LVL114:
 815 0040 05E0     		b	.L70
 816              	.LVL115:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 66


 817              	.L75:
 818 0042 4FF0FF33 		mov	r3, #-1
 819              	.LVL116:
2877:.\ff.c        **** 				}
2878:.\ff.c        **** 			}
2879:.\ff.c        **** #if _STR_VOLUME_ID
2880:.\ff.c        **** 			 else {	/* No numeric drive number, find string drive id */
2881:.\ff.c        **** 				i = 0; tt++;
2882:.\ff.c        **** 				do {
2883:.\ff.c        **** 					sp = str[i]; tp = *path;
2884:.\ff.c        **** 					do {	/* Compare a string drive id with path name */
2885:.\ff.c        **** 						c = *sp++; tc = *tp++;
2886:.\ff.c        **** 						if (IsLower(tc)) tc -= 0x20;
2887:.\ff.c        **** 					} while (c && (TCHAR)c == tc);
2888:.\ff.c        **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2889:.\ff.c        **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2890:.\ff.c        **** 					vol = (int)i;
2891:.\ff.c        **** 					*path = tt;
2892:.\ff.c        **** 				}
2893:.\ff.c        **** 			}
2894:.\ff.c        **** #endif
2895:.\ff.c        **** 			return vol;
 820              		.loc 1 2895 0
 821 0046 02E0     		b	.L70
 822              	.LVL117:
 823              	.L72:
 824              		.cfi_def_cfa_offset 0
 825              		.cfi_restore 4
2896:.\ff.c        **** 		}
2897:.\ff.c        **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2898:.\ff.c        **** 		vol = CurrVol;	/* Current drive */
2899:.\ff.c        **** #else
2900:.\ff.c        **** 		vol = 0;		/* Drive 0 */
 826              		.loc 1 2900 0
 827 0048 0023     		movs	r3, #0
 828              	.LVL118:
 829              	.L77:
2901:.\ff.c        **** #endif
2902:.\ff.c        **** 	}
2903:.\ff.c        **** 	return vol;
2904:.\ff.c        **** }
 830              		.loc 1 2904 0
 831 004a 1846     		mov	r0, r3
 832              	.LVL119:
 833 004c 7047     		bx	lr
 834              	.LVL120:
 835              	.L70:
 836              		.cfi_def_cfa_offset 4
 837              		.cfi_offset 4, -4
 838 004e 1846     		mov	r0, r3
 839              	.LVL121:
 840 0050 5DF8044B 		ldr	r4, [sp], #4
 841              		.cfi_restore 4
 842              		.cfi_def_cfa_offset 0
 843              	.LVL122:
 844 0054 7047     		bx	lr
 845              		.cfi_endproc
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 67


 846              	.LFE28:
 847              		.size	get_ldnumber, .-get_ldnumber
 848 0056 00BF     		.section	.text.putc_init,"ax",%progbits
 849              		.align	2
 850              		.thumb
 851              		.thumb_func
 852              		.type	putc_init, %function
 853              	putc_init:
 854              	.LFB51:
2905:.\ff.c        **** 
2906:.\ff.c        **** 
2907:.\ff.c        **** 
2908:.\ff.c        **** 
2909:.\ff.c        **** /*-----------------------------------------------------------------------*/
2910:.\ff.c        **** /* Load a sector and check if it is an FAT boot sector                   */
2911:.\ff.c        **** /*-----------------------------------------------------------------------*/
2912:.\ff.c        **** 
2913:.\ff.c        **** static
2914:.\ff.c        **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2915:.\ff.c        **** 	FATFS* fs,	/* File system object */
2916:.\ff.c        **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
2917:.\ff.c        **** )
2918:.\ff.c        **** {
2919:.\ff.c        **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2920:.\ff.c        **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2921:.\ff.c        **** 
2922:.\ff.c        **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
2923:.\ff.c        **** 
2924:.\ff.c        **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
2925:.\ff.c        **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
2926:.\ff.c        **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2927:.\ff.c        **** 	}
2928:.\ff.c        **** #if _FS_EXFAT
2929:.\ff.c        **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2930:.\ff.c        **** #endif
2931:.\ff.c        **** 	return 2;
2932:.\ff.c        **** }
2933:.\ff.c        **** 
2934:.\ff.c        **** 
2935:.\ff.c        **** 
2936:.\ff.c        **** 
2937:.\ff.c        **** /*-----------------------------------------------------------------------*/
2938:.\ff.c        **** /* Find logical drive and check if the volume is mounted                 */
2939:.\ff.c        **** /*-----------------------------------------------------------------------*/
2940:.\ff.c        **** 
2941:.\ff.c        **** static
2942:.\ff.c        **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2943:.\ff.c        **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2944:.\ff.c        **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2945:.\ff.c        **** 	BYTE mode			/* !=0: Check write protection for write access */
2946:.\ff.c        **** )
2947:.\ff.c        **** {
2948:.\ff.c        **** 	BYTE fmt, *pt;
2949:.\ff.c        **** 	int vol;
2950:.\ff.c        **** 	DSTATUS stat;
2951:.\ff.c        **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
2952:.\ff.c        **** 	WORD nrsv;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 68


2953:.\ff.c        **** 	FATFS *fs;
2954:.\ff.c        **** 	UINT i;
2955:.\ff.c        **** 
2956:.\ff.c        **** 
2957:.\ff.c        **** 	/* Get logical drive number */
2958:.\ff.c        **** 	*rfs = 0;
2959:.\ff.c        **** 	vol = get_ldnumber(path);
2960:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
2961:.\ff.c        **** 
2962:.\ff.c        **** 	/* Check if the file system object is valid or not */
2963:.\ff.c        **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
2964:.\ff.c        **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2965:.\ff.c        **** 
2966:.\ff.c        **** 	ENTER_FF(fs);						/* Lock the volume */
2967:.\ff.c        **** 	*rfs = fs;							/* Return pointer to the file system object */
2968:.\ff.c        **** 
2969:.\ff.c        **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2970:.\ff.c        **** 	if (fs->fs_type) {					/* If the volume has been mounted */
2971:.\ff.c        **** 		stat = disk_status(fs->drv);
2972:.\ff.c        **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2973:.\ff.c        **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2974:.\ff.c        **** 				return FR_WRITE_PROTECTED;
2975:.\ff.c        **** 			}
2976:.\ff.c        **** 			return FR_OK;				/* The file system object is valid */
2977:.\ff.c        **** 		}
2978:.\ff.c        **** 	}
2979:.\ff.c        **** 
2980:.\ff.c        **** 	/* The file system object is not valid. */
2981:.\ff.c        **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2982:.\ff.c        **** 
2983:.\ff.c        **** 	fs->fs_type = 0;					/* Clear the file system object */
2984:.\ff.c        **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2985:.\ff.c        **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2986:.\ff.c        **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2987:.\ff.c        **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2988:.\ff.c        **** 	}
2989:.\ff.c        **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2990:.\ff.c        **** 		return FR_WRITE_PROTECTED;
2991:.\ff.c        **** 	}
2992:.\ff.c        **** #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
2993:.\ff.c        **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
2994:.\ff.c        **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
2995:.\ff.c        **** #endif
2996:.\ff.c        **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2997:.\ff.c        **** 	bsect = 0;
2998:.\ff.c        **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2999:.\ff.c        **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
3000:.\ff.c        **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
3001:.\ff.c        **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
3002:.\ff.c        **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
3003:.\ff.c        **** 		}
3004:.\ff.c        **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
3005:.\ff.c        **** 		if (i) i--;
3006:.\ff.c        **** 		do {								/* Find an FAT volume */
3007:.\ff.c        **** 			bsect = br[i];
3008:.\ff.c        **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
3009:.\ff.c        **** 		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 69


3010:.\ff.c        **** 	}
3011:.\ff.c        **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3012:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3013:.\ff.c        **** 
3014:.\ff.c        **** 	/* An FAT volume is found. Following code initializes the file system object */
3015:.\ff.c        **** 
3016:.\ff.c        **** #if _FS_EXFAT
3017:.\ff.c        **** 	if (fmt == 1) {
3018:.\ff.c        **** 		QWORD maxlba;
3019:.\ff.c        **** 
3020:.\ff.c        **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3021:.\ff.c        **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3022:.\ff.c        **** 
3023:.\ff.c        **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3024:.\ff.c        **** 
3025:.\ff.c        **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs))	/* (BPB_BytsPerSecEx must be equal to the physical 
3026:.\ff.c        **** 			return FR_NO_FILESYSTEM;
3027:.\ff.c        **** 
3028:.\ff.c        **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3029:.\ff.c        **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3030:.\ff.c        **** 
3031:.\ff.c        **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3032:.\ff.c        **** 
3033:.\ff.c        **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3034:.\ff.c        **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3035:.\ff.c        **** 
3036:.\ff.c        **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3037:.\ff.c        **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3038:.\ff.c        **** 
3039:.\ff.c        **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3040:.\ff.c        **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3041:.\ff.c        **** 		fs->n_fatent = nclst + 2;
3042:.\ff.c        **** 
3043:.\ff.c        **** 		/* Boundaries and Limits */
3044:.\ff.c        **** 		fs->volbase = bsect;
3045:.\ff.c        **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3046:.\ff.c        **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3047:.\ff.c        **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3048:.\ff.c        **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3049:.\ff.c        **** 
3050:.\ff.c        **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3051:.\ff.c        **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3052:.\ff.c        **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3053:.\ff.c        **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3054:.\ff.c        **** 		}
3055:.\ff.c        **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3056:.\ff.c        **** #if !_FS_READONLY
3057:.\ff.c        **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3058:.\ff.c        **** #endif
3059:.\ff.c        **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3060:.\ff.c        **** 	} else
3061:.\ff.c        **** #endif	/* _FS_EXFAT */
3062:.\ff.c        **** 	{
3063:.\ff.c        **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3064:.\ff.c        **** 
3065:.\ff.c        **** 		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
3066:.\ff.c        **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 70


3067:.\ff.c        **** 		fs->fsize = fasize;
3068:.\ff.c        **** 
3069:.\ff.c        **** 		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
3070:.\ff.c        **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3071:.\ff.c        **** 		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
3072:.\ff.c        **** 
3073:.\ff.c        **** 		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
3074:.\ff.c        **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3075:.\ff.c        **** 
3076:.\ff.c        **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3077:.\ff.c        **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3078:.\ff.c        **** 
3079:.\ff.c        **** 		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
3080:.\ff.c        **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3081:.\ff.c        **** 
3082:.\ff.c        **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
3083:.\ff.c        **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
3084:.\ff.c        **** 
3085:.\ff.c        **** 		/* Determine the FAT sub type */
3086:.\ff.c        **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3087:.\ff.c        **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3088:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
3089:.\ff.c        **** 		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
3090:.\ff.c        **** 		fmt = FS_FAT32;
3091:.\ff.c        **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3092:.\ff.c        **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3093:.\ff.c        **** 
3094:.\ff.c        **** 		/* Boundaries and Limits */
3095:.\ff.c        **** 		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
3096:.\ff.c        **** 		fs->volbase = bsect;								/* Volume start sector */
3097:.\ff.c        **** 		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
3098:.\ff.c        **** 		fs->database = bsect + sysect;						/* Data start sector */
3099:.\ff.c        **** 		if (fmt == FS_FAT32) {
3100:.\ff.c        **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
3101:.\ff.c        **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
3102:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3103:.\ff.c        **** 			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
3104:.\ff.c        **** 		} else {
3105:.\ff.c        **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
3106:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
3107:.\ff.c        **** 			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
3108:.\ff.c        **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3109:.\ff.c        **** 		}
3110:.\ff.c        **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3111:.\ff.c        **** 
3112:.\ff.c        **** #if !_FS_READONLY
3113:.\ff.c        **** 		/* Get FSINFO if available */
3114:.\ff.c        **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3115:.\ff.c        **** 		fs->fsi_flag = 0x80;
3116:.\ff.c        **** #if (_FS_NOFSINFO & 3) != 3
3117:.\ff.c        **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
3118:.\ff.c        **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3119:.\ff.c        **** 			&& move_window(fs, bsect + 1) == FR_OK)
3120:.\ff.c        **** 		{
3121:.\ff.c        **** 			fs->fsi_flag = 0;
3122:.\ff.c        **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
3123:.\ff.c        **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 71


3124:.\ff.c        **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3125:.\ff.c        **** 			{
3126:.\ff.c        **** #if (_FS_NOFSINFO & 1) == 0
3127:.\ff.c        **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3128:.\ff.c        **** #endif
3129:.\ff.c        **** #if (_FS_NOFSINFO & 2) == 0
3130:.\ff.c        **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3131:.\ff.c        **** #endif
3132:.\ff.c        **** 			}
3133:.\ff.c        **** 		}
3134:.\ff.c        **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3135:.\ff.c        **** #endif	/* !_FS_READONLY */
3136:.\ff.c        **** 	}
3137:.\ff.c        **** 
3138:.\ff.c        **** 	fs->fs_type = fmt;	/* FAT sub-type */
3139:.\ff.c        **** 	fs->id = ++Fsid;	/* File system mount ID */
3140:.\ff.c        **** #if _USE_LFN == 1
3141:.\ff.c        **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3142:.\ff.c        **** #if _FS_EXFAT
3143:.\ff.c        **** 	fs->dirbuf = DirBuf;	/* Static directory block working buuffer */
3144:.\ff.c        **** #endif
3145:.\ff.c        **** #endif
3146:.\ff.c        **** #if _FS_RPATH != 0
3147:.\ff.c        **** 	fs->cdir = 0;		/* Initialize current directory */
3148:.\ff.c        **** #endif
3149:.\ff.c        **** #if _FS_LOCK != 0		/* Clear file lock semaphores */
3150:.\ff.c        **** 	clear_lock(fs);
3151:.\ff.c        **** #endif
3152:.\ff.c        **** 	return FR_OK;
3153:.\ff.c        **** }
3154:.\ff.c        **** 
3155:.\ff.c        **** 
3156:.\ff.c        **** 
3157:.\ff.c        **** 
3158:.\ff.c        **** /*-----------------------------------------------------------------------*/
3159:.\ff.c        **** /* Check if the file/directory object is valid or not                    */
3160:.\ff.c        **** /*-----------------------------------------------------------------------*/
3161:.\ff.c        **** 
3162:.\ff.c        **** static
3163:.\ff.c        **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3164:.\ff.c        **** 	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
3165:.\ff.c        **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3166:.\ff.c        **** )
3167:.\ff.c        **** {
3168:.\ff.c        **** 	FRESULT res;
3169:.\ff.c        **** 
3170:.\ff.c        **** 
3171:.\ff.c        **** 	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) 
3172:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
3173:.\ff.c        **** 		res = FR_INVALID_OBJECT;
3174:.\ff.c        **** 	} else {
3175:.\ff.c        **** 		*fs = obj->fs;			/* Owner file sytem object */
3176:.\ff.c        **** 		ENTER_FF(obj->fs);		/* Lock file system */
3177:.\ff.c        **** 		res = FR_OK;
3178:.\ff.c        **** 	}
3179:.\ff.c        **** 	return res;
3180:.\ff.c        **** }
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 72


3181:.\ff.c        **** 
3182:.\ff.c        **** 
3183:.\ff.c        **** 
3184:.\ff.c        **** 
3185:.\ff.c        **** /*---------------------------------------------------------------------------
3186:.\ff.c        **** 
3187:.\ff.c        ****    Public Functions (FatFs API)
3188:.\ff.c        **** 
3189:.\ff.c        **** ----------------------------------------------------------------------------*/
3190:.\ff.c        **** 
3191:.\ff.c        **** 
3192:.\ff.c        **** 
3193:.\ff.c        **** /*-----------------------------------------------------------------------*/
3194:.\ff.c        **** /* Mount/Unmount a Logical Drive                                         */
3195:.\ff.c        **** /*-----------------------------------------------------------------------*/
3196:.\ff.c        **** 
3197:.\ff.c        **** FRESULT f_mount (
3198:.\ff.c        **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3199:.\ff.c        **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3200:.\ff.c        **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3201:.\ff.c        **** )
3202:.\ff.c        **** {
3203:.\ff.c        **** 	FATFS *cfs;
3204:.\ff.c        **** 	int vol;
3205:.\ff.c        **** 	FRESULT res;
3206:.\ff.c        **** 	const TCHAR *rp = path;
3207:.\ff.c        **** 
3208:.\ff.c        **** 
3209:.\ff.c        **** 	/* Get logical drive number */
3210:.\ff.c        **** 	vol = get_ldnumber(&rp);
3211:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
3212:.\ff.c        **** 	cfs = FatFs[vol];					/* Pointer to fs object */
3213:.\ff.c        **** 
3214:.\ff.c        **** 	if (cfs) {
3215:.\ff.c        **** #if _FS_LOCK != 0
3216:.\ff.c        **** 		clear_lock(cfs);
3217:.\ff.c        **** #endif
3218:.\ff.c        **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3219:.\ff.c        **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3220:.\ff.c        **** #endif
3221:.\ff.c        **** 		cfs->fs_type = 0;				/* Clear old fs object */
3222:.\ff.c        **** 	}
3223:.\ff.c        **** 
3224:.\ff.c        **** 	if (fs) {
3225:.\ff.c        **** 		fs->fs_type = 0;				/* Clear new fs object */
3226:.\ff.c        **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3227:.\ff.c        **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3228:.\ff.c        **** #endif
3229:.\ff.c        **** 	}
3230:.\ff.c        **** 	FatFs[vol] = fs;					/* Register new fs object */
3231:.\ff.c        **** 
3232:.\ff.c        **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
3233:.\ff.c        **** 
3234:.\ff.c        **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
3235:.\ff.c        **** 	LEAVE_FF(fs, res);
3236:.\ff.c        **** }
3237:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 73


3238:.\ff.c        **** 
3239:.\ff.c        **** 
3240:.\ff.c        **** 
3241:.\ff.c        **** /*-----------------------------------------------------------------------*/
3242:.\ff.c        **** /* Open or Create a File                                                 */
3243:.\ff.c        **** /*-----------------------------------------------------------------------*/
3244:.\ff.c        **** 
3245:.\ff.c        **** FRESULT f_open (
3246:.\ff.c        **** 	FIL* fp,			/* Pointer to the blank file object */
3247:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file name */
3248:.\ff.c        **** 	BYTE mode			/* Access mode and file open mode flags */
3249:.\ff.c        **** )
3250:.\ff.c        **** {
3251:.\ff.c        **** 	FRESULT res;
3252:.\ff.c        **** 	DIR dj;
3253:.\ff.c        **** 	FATFS *fs;
3254:.\ff.c        **** #if !_FS_READONLY
3255:.\ff.c        **** 	DWORD dw, cl, bcs, clst, sc;
3256:.\ff.c        **** 	FSIZE_t ofs;
3257:.\ff.c        **** #endif
3258:.\ff.c        **** 	DEF_NAMBUF
3259:.\ff.c        **** 
3260:.\ff.c        **** 
3261:.\ff.c        **** 	if (!fp) return FR_INVALID_OBJECT;
3262:.\ff.c        **** 
3263:.\ff.c        **** 	/* Get logical drive */
3264:.\ff.c        **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
3265:.\ff.c        **** 	res = find_volume(&path, &fs, mode);
3266:.\ff.c        **** 	if (res == FR_OK) {
3267:.\ff.c        **** 		dj.obj.fs = fs;
3268:.\ff.c        **** 		INIT_NAMBUF(fs);
3269:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
3270:.\ff.c        **** #if !_FS_READONLY	/* R/W configuration */
3271:.\ff.c        **** 		if (res == FR_OK) {
3272:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3273:.\ff.c        **** 				res = FR_INVALID_NAME;
3274:.\ff.c        **** 			}
3275:.\ff.c        **** #if _FS_LOCK != 0
3276:.\ff.c        **** 			else {
3277:.\ff.c        **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3278:.\ff.c        **** 			}
3279:.\ff.c        **** #endif
3280:.\ff.c        **** 		}
3281:.\ff.c        **** 		/* Create or Open a file */
3282:.\ff.c        **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3283:.\ff.c        **** 			if (res != FR_OK) {					/* No file, create new */
3284:.\ff.c        **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
3285:.\ff.c        **** #if _FS_LOCK != 0
3286:.\ff.c        **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3287:.\ff.c        **** #else
3288:.\ff.c        **** 					res = dir_register(&dj);
3289:.\ff.c        **** #endif
3290:.\ff.c        **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
3291:.\ff.c        **** 			}
3292:.\ff.c        **** 			else {								/* Any object is already existing */
3293:.\ff.c        **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3294:.\ff.c        **** 					res = FR_DENIED;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 74


3295:.\ff.c        **** 				} else {
3296:.\ff.c        **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3297:.\ff.c        **** 				}
3298:.\ff.c        **** 			}
3299:.\ff.c        **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
3300:.\ff.c        **** 				dw = GET_FATTIME();
3301:.\ff.c        **** #if _FS_EXFAT
3302:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
3303:.\ff.c        **** 					/* Get current allocation info */
3304:.\ff.c        **** 					fp->obj.fs = fs;
3305:.\ff.c        **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3306:.\ff.c        **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3307:.\ff.c        **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3308:.\ff.c        **** 					/* Initialize directory entry block */
3309:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3310:.\ff.c        **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3311:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3312:.\ff.c        **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3313:.\ff.c        **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3314:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3315:.\ff.c        **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3316:.\ff.c        **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3317:.\ff.c        **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3318:.\ff.c        **** 					res = store_xdir(&dj);
3319:.\ff.c        **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3320:.\ff.c        **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3321:.\ff.c        **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3322:.\ff.c        **** 					}
3323:.\ff.c        **** 				} else
3324:.\ff.c        **** #endif
3325:.\ff.c        **** 				{
3326:.\ff.c        **** 					/* Clean directory info */
3327:.\ff.c        **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
3328:.\ff.c        **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
3329:.\ff.c        **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3330:.\ff.c        **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
3331:.\ff.c        **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3332:.\ff.c        **** 					st_dword(dj.dir + DIR_FileSize, 0);
3333:.\ff.c        **** 					fs->wflag = 1;
3334:.\ff.c        **** 
3335:.\ff.c        **** 					if (cl) {							/* Remove the cluster chain if exist */
3336:.\ff.c        **** 						dw = fs->winsect;
3337:.\ff.c        **** 						res = remove_chain(&dj.obj, cl, 0);
3338:.\ff.c        **** 						if (res == FR_OK) {
3339:.\ff.c        **** 							res = move_window(fs, dw);
3340:.\ff.c        **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
3341:.\ff.c        **** 						}
3342:.\ff.c        **** 					}
3343:.\ff.c        **** 				}
3344:.\ff.c        **** 			}
3345:.\ff.c        **** 		}
3346:.\ff.c        **** 		else {	/* Open an existing file */
3347:.\ff.c        **** 			if (res == FR_OK) {					/* Following succeeded */
3348:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3349:.\ff.c        **** 					res = FR_NO_FILE;
3350:.\ff.c        **** 				} else {
3351:.\ff.c        **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 75


3352:.\ff.c        **** 						res = FR_DENIED;
3353:.\ff.c        **** 					}
3354:.\ff.c        **** 				}
3355:.\ff.c        **** 			}
3356:.\ff.c        **** 		}
3357:.\ff.c        **** 		if (res == FR_OK) {
3358:.\ff.c        **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
3359:.\ff.c        **** 				mode |= FA_MODIFIED;
3360:.\ff.c        **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3361:.\ff.c        **** 			fp->dir_ptr = dj.dir;
3362:.\ff.c        **** #if _FS_LOCK != 0
3363:.\ff.c        **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3364:.\ff.c        **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
3365:.\ff.c        **** #endif
3366:.\ff.c        **** 		}
3367:.\ff.c        **** #else		/* R/O configuration */
3368:.\ff.c        **** 		if (res == FR_OK) {
3369:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3370:.\ff.c        **** 				res = FR_INVALID_NAME;
3371:.\ff.c        **** 			} else {
3372:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3373:.\ff.c        **** 					res = FR_NO_FILE;
3374:.\ff.c        **** 				}
3375:.\ff.c        **** 			}
3376:.\ff.c        **** 		}
3377:.\ff.c        **** #endif
3378:.\ff.c        **** 
3379:.\ff.c        **** 		if (res == FR_OK) {
3380:.\ff.c        **** #if _FS_EXFAT
3381:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
3382:.\ff.c        **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Get allocation info */
3383:.\ff.c        **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3384:.\ff.c        **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3385:.\ff.c        **** 				fp->obj.c_scl = dj.obj.sclust;
3386:.\ff.c        **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3387:.\ff.c        **** 				fp->obj.c_ofs = dj.blk_ofs;
3388:.\ff.c        **** 			} else
3389:.\ff.c        **** #endif
3390:.\ff.c        **** 			{
3391:.\ff.c        **** 				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
3392:.\ff.c        **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3393:.\ff.c        **** 			}
3394:.\ff.c        **** #if _USE_FASTSEEK
3395:.\ff.c        **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3396:.\ff.c        **** #endif
3397:.\ff.c        **** 			fp->obj.fs = fs;	 	/* Validate the file object */
3398:.\ff.c        **** 			fp->obj.id = fs->id;
3399:.\ff.c        **** 			fp->flag = mode;		/* Set file access mode */
3400:.\ff.c        **** 			fp->err = 0;			/* Clear error flag */
3401:.\ff.c        **** 			fp->sect = 0;			/* Invalidate current data sector */
3402:.\ff.c        **** 			fp->fptr = 0;			/* Set file pointer top of the file */
3403:.\ff.c        **** #if !_FS_READONLY
3404:.\ff.c        **** #if !_FS_TINY
3405:.\ff.c        **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
3406:.\ff.c        **** #endif
3407:.\ff.c        **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3408:.\ff.c        **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 76


3409:.\ff.c        **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3410:.\ff.c        **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3411:.\ff.c        **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3412:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
3413:.\ff.c        **** 					if (clst <= 1) res = FR_INT_ERR;
3414:.\ff.c        **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3415:.\ff.c        **** 				}
3416:.\ff.c        **** 				fp->clust = clst;
3417:.\ff.c        **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3418:.\ff.c        **** 					if ((sc = clust2sect(fs, clst)) == 0) {
3419:.\ff.c        **** 						res = FR_INT_ERR;
3420:.\ff.c        **** 					} else {
3421:.\ff.c        **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
3422:.\ff.c        **** #if !_FS_TINY
3423:.\ff.c        **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3424:.\ff.c        **** #endif
3425:.\ff.c        **** 					}
3426:.\ff.c        **** 				}
3427:.\ff.c        **** 			}
3428:.\ff.c        **** #endif
3429:.\ff.c        **** 		}
3430:.\ff.c        **** 
3431:.\ff.c        **** 		FREE_NAMBUF();
3432:.\ff.c        **** 	}
3433:.\ff.c        **** 
3434:.\ff.c        **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
3435:.\ff.c        **** 
3436:.\ff.c        **** 	LEAVE_FF(fs, res);
3437:.\ff.c        **** }
3438:.\ff.c        **** 
3439:.\ff.c        **** 
3440:.\ff.c        **** 
3441:.\ff.c        **** 
3442:.\ff.c        **** /*-----------------------------------------------------------------------*/
3443:.\ff.c        **** /* Read File                                                             */
3444:.\ff.c        **** /*-----------------------------------------------------------------------*/
3445:.\ff.c        **** 
3446:.\ff.c        **** FRESULT f_read (
3447:.\ff.c        **** 	FIL* fp, 	/* Pointer to the file object */
3448:.\ff.c        **** 	void* buff,	/* Pointer to data buffer */
3449:.\ff.c        **** 	UINT btr,	/* Number of bytes to read */
3450:.\ff.c        **** 	UINT* br	/* Pointer to number of bytes read */
3451:.\ff.c        **** )
3452:.\ff.c        **** {
3453:.\ff.c        **** 	FRESULT res;
3454:.\ff.c        **** 	FATFS *fs;
3455:.\ff.c        **** 	DWORD clst, sect;
3456:.\ff.c        **** 	FSIZE_t remain;
3457:.\ff.c        **** 	UINT rcnt, cc, csect;
3458:.\ff.c        **** 	BYTE *rbuff = (BYTE*)buff;
3459:.\ff.c        **** 
3460:.\ff.c        **** 
3461:.\ff.c        **** 	*br = 0;	/* Clear read byte counter */
3462:.\ff.c        **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
3463:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3464:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
3465:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 77


3466:.\ff.c        **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
3467:.\ff.c        **** 
3468:.\ff.c        **** 	for ( ;  btr;								/* Repeat until all data read */
3469:.\ff.c        **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3470:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3471:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3472:.\ff.c        **** 			if (csect == 0) {					/* On the cluster boundary? */
3473:.\ff.c        **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3474:.\ff.c        **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3475:.\ff.c        **** 				} else {						/* Middle or end of the file */
3476:.\ff.c        **** #if _USE_FASTSEEK
3477:.\ff.c        **** 					if (fp->cltbl) {
3478:.\ff.c        **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3479:.\ff.c        **** 					} else
3480:.\ff.c        **** #endif
3481:.\ff.c        **** 					{
3482:.\ff.c        **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
3483:.\ff.c        **** 					}
3484:.\ff.c        **** 				}
3485:.\ff.c        **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
3486:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3487:.\ff.c        **** 				fp->clust = clst;				/* Update current cluster */
3488:.\ff.c        **** 			}
3489:.\ff.c        **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3490:.\ff.c        **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3491:.\ff.c        **** 			sect += csect;
3492:.\ff.c        **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3493:.\ff.c        **** 			if (cc) {							/* Read maximum contiguous sectors directly */
3494:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3495:.\ff.c        **** 					cc = fs->csize - csect;
3496:.\ff.c        **** 				}
3497:.\ff.c        **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3498:.\ff.c        **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3499:.\ff.c        **** #if _FS_TINY
3500:.\ff.c        **** 				if (fs->wflag && fs->winsect - sect < cc) {
3501:.\ff.c        **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3502:.\ff.c        **** 				}
3503:.\ff.c        **** #else
3504:.\ff.c        **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3505:.\ff.c        **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3506:.\ff.c        **** 				}
3507:.\ff.c        **** #endif
3508:.\ff.c        **** #endif
3509:.\ff.c        **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
3510:.\ff.c        **** 				continue;
3511:.\ff.c        **** 			}
3512:.\ff.c        **** #if !_FS_TINY
3513:.\ff.c        **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
3514:.\ff.c        **** #if !_FS_READONLY
3515:.\ff.c        **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3516:.\ff.c        **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3517:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
3518:.\ff.c        **** 				}
3519:.\ff.c        **** #endif
3520:.\ff.c        **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
3521:.\ff.c        **** 			}
3522:.\ff.c        **** #endif
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 78


3523:.\ff.c        **** 			fp->sect = sect;
3524:.\ff.c        **** 		}
3525:.\ff.c        **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3526:.\ff.c        **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
3527:.\ff.c        **** #if _FS_TINY
3528:.\ff.c        **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3529:.\ff.c        **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3530:.\ff.c        **** #else
3531:.\ff.c        **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3532:.\ff.c        **** #endif
3533:.\ff.c        **** 	}
3534:.\ff.c        **** 
3535:.\ff.c        **** 	LEAVE_FF(fs, FR_OK);
3536:.\ff.c        **** }
3537:.\ff.c        **** 
3538:.\ff.c        **** 
3539:.\ff.c        **** 
3540:.\ff.c        **** 
3541:.\ff.c        **** #if !_FS_READONLY
3542:.\ff.c        **** /*-----------------------------------------------------------------------*/
3543:.\ff.c        **** /* Write File                                                            */
3544:.\ff.c        **** /*-----------------------------------------------------------------------*/
3545:.\ff.c        **** 
3546:.\ff.c        **** FRESULT f_write (
3547:.\ff.c        **** 	FIL* fp,			/* Pointer to the file object */
3548:.\ff.c        **** 	const void* buff,	/* Pointer to the data to be written */
3549:.\ff.c        **** 	UINT btw,			/* Number of bytes to write */
3550:.\ff.c        **** 	UINT* bw			/* Pointer to number of bytes written */
3551:.\ff.c        **** )
3552:.\ff.c        **** {
3553:.\ff.c        **** 	FRESULT res;
3554:.\ff.c        **** 	FATFS *fs;
3555:.\ff.c        **** 	DWORD clst, sect;
3556:.\ff.c        **** 	UINT wcnt, cc, csect;
3557:.\ff.c        **** 	const BYTE *wbuff = (const BYTE*)buff;
3558:.\ff.c        **** 
3559:.\ff.c        **** 
3560:.\ff.c        **** 	*bw = 0;	/* Clear write byte counter */
3561:.\ff.c        **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
3562:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3563:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
3564:.\ff.c        **** 
3565:.\ff.c        **** 	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3566:.\ff.c        **** 	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
3567:.\ff.c        **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
3568:.\ff.c        **** 	}
3569:.\ff.c        **** 
3570:.\ff.c        **** 	for ( ;  btw;							/* Repeat until all data written */
3571:.\ff.c        **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3572:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
3573:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
3574:.\ff.c        **** 			if (csect == 0) {				/* On the cluster boundary? */
3575:.\ff.c        **** 				if (fp->fptr == 0) {		/* On the top of the file? */
3576:.\ff.c        **** 					clst = fp->obj.sclust;	/* Follow from the origin */
3577:.\ff.c        **** 					if (clst == 0) {		/* If no cluster is allocated, */
3578:.\ff.c        **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
3579:.\ff.c        **** 					}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 79


3580:.\ff.c        **** 				} else {					/* On the middle or end of the file */
3581:.\ff.c        **** #if _USE_FASTSEEK
3582:.\ff.c        **** 					if (fp->cltbl) {
3583:.\ff.c        **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3584:.\ff.c        **** 					} else
3585:.\ff.c        **** #endif
3586:.\ff.c        **** 					{
3587:.\ff.c        **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
3588:.\ff.c        **** 					}
3589:.\ff.c        **** 				}
3590:.\ff.c        **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
3591:.\ff.c        **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
3592:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3593:.\ff.c        **** 				fp->clust = clst;			/* Update current cluster */
3594:.\ff.c        **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
3595:.\ff.c        **** 			}
3596:.\ff.c        **** #if _FS_TINY
3597:.\ff.c        **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3598:.\ff.c        **** #else
3599:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
3600:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3601:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
3602:.\ff.c        **** 			}
3603:.\ff.c        **** #endif
3604:.\ff.c        **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3605:.\ff.c        **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3606:.\ff.c        **** 			sect += csect;
3607:.\ff.c        **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
3608:.\ff.c        **** 			if (cc) {						/* Write maximum contiguous sectors directly */
3609:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3610:.\ff.c        **** 					cc = fs->csize - csect;
3611:.\ff.c        **** 				}
3612:.\ff.c        **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3613:.\ff.c        **** #if _FS_MINIMIZE <= 2
3614:.\ff.c        **** #if _FS_TINY
3615:.\ff.c        **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3616:.\ff.c        **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3617:.\ff.c        **** 					fs->wflag = 0;
3618:.\ff.c        **** 				}
3619:.\ff.c        **** #else
3620:.\ff.c        **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
3621:.\ff.c        **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
3622:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
3623:.\ff.c        **** 				}
3624:.\ff.c        **** #endif
3625:.\ff.c        **** #endif
3626:.\ff.c        **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
3627:.\ff.c        **** 				continue;
3628:.\ff.c        **** 			}
3629:.\ff.c        **** #if _FS_TINY
3630:.\ff.c        **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3631:.\ff.c        **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3632:.\ff.c        **** 				fs->winsect = sect;
3633:.\ff.c        **** 			}
3634:.\ff.c        **** #else
3635:.\ff.c        **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
3636:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 80


3637:.\ff.c        **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
3638:.\ff.c        **** 					ABORT(fs, FR_DISK_ERR);
3639:.\ff.c        **** 			}
3640:.\ff.c        **** #endif
3641:.\ff.c        **** 			fp->sect = sect;
3642:.\ff.c        **** 		}
3643:.\ff.c        **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3644:.\ff.c        **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
3645:.\ff.c        **** #if _FS_TINY
3646:.\ff.c        **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3647:.\ff.c        **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3648:.\ff.c        **** 		fs->wflag = 1;
3649:.\ff.c        **** #else
3650:.\ff.c        **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3651:.\ff.c        **** 		fp->flag |= FA_DIRTY;
3652:.\ff.c        **** #endif
3653:.\ff.c        **** 	}
3654:.\ff.c        **** 
3655:.\ff.c        **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
3656:.\ff.c        **** 
3657:.\ff.c        **** 	LEAVE_FF(fs, FR_OK);
3658:.\ff.c        **** }
3659:.\ff.c        **** 
3660:.\ff.c        **** 
3661:.\ff.c        **** 
3662:.\ff.c        **** 
3663:.\ff.c        **** /*-----------------------------------------------------------------------*/
3664:.\ff.c        **** /* Synchronize the File                                                  */
3665:.\ff.c        **** /*-----------------------------------------------------------------------*/
3666:.\ff.c        **** 
3667:.\ff.c        **** FRESULT f_sync (
3668:.\ff.c        **** 	FIL* fp		/* Pointer to the file object */
3669:.\ff.c        **** )
3670:.\ff.c        **** {
3671:.\ff.c        **** 	FRESULT res;
3672:.\ff.c        **** 	FATFS *fs;
3673:.\ff.c        **** 	DWORD tm;
3674:.\ff.c        **** 	BYTE *dir;
3675:.\ff.c        **** 	DEF_NAMBUF
3676:.\ff.c        **** 
3677:.\ff.c        **** 
3678:.\ff.c        **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
3679:.\ff.c        **** 	if (res == FR_OK) {
3680:.\ff.c        **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
3681:.\ff.c        **** #if !_FS_TINY
3682:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
3683:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
3684:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
3685:.\ff.c        **** 			}
3686:.\ff.c        **** #endif
3687:.\ff.c        **** 			/* Update the directory entry */
3688:.\ff.c        **** 			tm = GET_FATTIME();				/* Modified time */
3689:.\ff.c        **** #if _FS_EXFAT
3690:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
3691:.\ff.c        **** 				res = fill_fat_chain(&fp->obj);	/* Create FAT chain if needed */
3692:.\ff.c        **** 				if (res == FR_OK) {
3693:.\ff.c        **** 					DIR dj;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 81


3694:.\ff.c        **** 
3695:.\ff.c        **** 					INIT_NAMBUF(fs);
3696:.\ff.c        **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3697:.\ff.c        **** 					if (res == FR_OK) {
3698:.\ff.c        **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3699:.\ff.c        **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3700:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3701:.\ff.c        **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3702:.\ff.c        **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3703:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3704:.\ff.c        **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3705:.\ff.c        **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3706:.\ff.c        **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3707:.\ff.c        **** 						if (res == FR_OK) {
3708:.\ff.c        **** 							res = sync_fs(fs);
3709:.\ff.c        **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3710:.\ff.c        **** 						}
3711:.\ff.c        **** 					}
3712:.\ff.c        **** 					FREE_NAMBUF();
3713:.\ff.c        **** 				}
3714:.\ff.c        **** 			} else
3715:.\ff.c        **** #endif
3716:.\ff.c        **** 			{
3717:.\ff.c        **** 				res = move_window(fs, fp->dir_sect);
3718:.\ff.c        **** 				if (res == FR_OK) {
3719:.\ff.c        **** 					dir = fp->dir_ptr;
3720:.\ff.c        **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
3721:.\ff.c        **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
3722:.\ff.c        **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
3723:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
3724:.\ff.c        **** 					st_word(dir + DIR_LstAccDate, 0);
3725:.\ff.c        **** 					fs->wflag = 1;
3726:.\ff.c        **** 					res = sync_fs(fs);					/* Restore it to the directory */
3727:.\ff.c        **** 					fp->flag &= (BYTE)~FA_MODIFIED;
3728:.\ff.c        **** 				}
3729:.\ff.c        **** 			}
3730:.\ff.c        **** 		}
3731:.\ff.c        **** 	}
3732:.\ff.c        **** 
3733:.\ff.c        **** 	LEAVE_FF(fs, res);
3734:.\ff.c        **** }
3735:.\ff.c        **** 
3736:.\ff.c        **** #endif /* !_FS_READONLY */
3737:.\ff.c        **** 
3738:.\ff.c        **** 
3739:.\ff.c        **** 
3740:.\ff.c        **** 
3741:.\ff.c        **** /*-----------------------------------------------------------------------*/
3742:.\ff.c        **** /* Close File                                                            */
3743:.\ff.c        **** /*-----------------------------------------------------------------------*/
3744:.\ff.c        **** 
3745:.\ff.c        **** FRESULT f_close (
3746:.\ff.c        **** 	FIL* fp		/* Pointer to the file object to be closed */
3747:.\ff.c        **** )
3748:.\ff.c        **** {
3749:.\ff.c        **** 	FRESULT res;
3750:.\ff.c        **** 	FATFS *fs;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 82


3751:.\ff.c        **** 
3752:.\ff.c        **** #if !_FS_READONLY
3753:.\ff.c        **** 	res = f_sync(fp);					/* Flush cached data */
3754:.\ff.c        **** 	if (res == FR_OK)
3755:.\ff.c        **** #endif
3756:.\ff.c        **** 	{
3757:.\ff.c        **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
3758:.\ff.c        **** 		if (res == FR_OK) {
3759:.\ff.c        **** #if _FS_LOCK != 0
3760:.\ff.c        **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
3761:.\ff.c        **** 			if (res == FR_OK)
3762:.\ff.c        **** #endif
3763:.\ff.c        **** 			{
3764:.\ff.c        **** 				fp->obj.fs = 0;			/* Invalidate file object */
3765:.\ff.c        **** 			}
3766:.\ff.c        **** #if _FS_REENTRANT
3767:.\ff.c        **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
3768:.\ff.c        **** #endif
3769:.\ff.c        **** 		}
3770:.\ff.c        **** 	}
3771:.\ff.c        **** 	return res;
3772:.\ff.c        **** }
3773:.\ff.c        **** 
3774:.\ff.c        **** 
3775:.\ff.c        **** 
3776:.\ff.c        **** 
3777:.\ff.c        **** #if _FS_RPATH >= 1
3778:.\ff.c        **** /*-----------------------------------------------------------------------*/
3779:.\ff.c        **** /* Change Current Directory or Current Drive, Get Current Directory      */
3780:.\ff.c        **** /*-----------------------------------------------------------------------*/
3781:.\ff.c        **** 
3782:.\ff.c        **** #if _VOLUMES >= 2
3783:.\ff.c        **** FRESULT f_chdrive (
3784:.\ff.c        **** 	const TCHAR* path		/* Drive number */
3785:.\ff.c        **** )
3786:.\ff.c        **** {
3787:.\ff.c        **** 	int vol;
3788:.\ff.c        **** 
3789:.\ff.c        **** 
3790:.\ff.c        **** 	/* Get logical drive number */
3791:.\ff.c        **** 	vol = get_ldnumber(&path);
3792:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
3793:.\ff.c        **** 
3794:.\ff.c        **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
3795:.\ff.c        **** 
3796:.\ff.c        **** 	return FR_OK;
3797:.\ff.c        **** }
3798:.\ff.c        **** #endif
3799:.\ff.c        **** 
3800:.\ff.c        **** 
3801:.\ff.c        **** FRESULT f_chdir (
3802:.\ff.c        **** 	const TCHAR* path	/* Pointer to the directory path */
3803:.\ff.c        **** )
3804:.\ff.c        **** {
3805:.\ff.c        **** 	FRESULT res;
3806:.\ff.c        **** 	DIR dj;
3807:.\ff.c        **** 	FATFS *fs;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 83


3808:.\ff.c        **** 	DEF_NAMBUF
3809:.\ff.c        **** 
3810:.\ff.c        **** 	/* Get logical drive */
3811:.\ff.c        **** 	res = find_volume(&path, &fs, 0);
3812:.\ff.c        **** 	if (res == FR_OK) {
3813:.\ff.c        **** 		dj.obj.fs = fs;
3814:.\ff.c        **** 		INIT_NAMBUF(fs);
3815:.\ff.c        **** 		res = follow_path(&dj, path);		/* Follow the path */
3816:.\ff.c        **** 		if (res == FR_OK) {					/* Follow completed */
3817:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3818:.\ff.c        **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3819:.\ff.c        **** #if _FS_EXFAT
3820:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
3821:.\ff.c        **** 					fs->cdc_scl = dj.obj.c_scl;
3822:.\ff.c        **** 					fs->cdc_size = dj.obj.c_size;
3823:.\ff.c        **** 					fs->cdc_ofs = dj.obj.c_ofs;
3824:.\ff.c        **** 				}
3825:.\ff.c        **** #endif
3826:.\ff.c        **** 			} else {
3827:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3828:.\ff.c        **** #if _FS_EXFAT
3829:.\ff.c        **** 					if (fs->fs_type == FS_EXFAT) {
3830:.\ff.c        **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3831:.\ff.c        **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3832:.\ff.c        **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3833:.\ff.c        **** 						fs->cdc_ofs = dj.blk_ofs;
3834:.\ff.c        **** 					} else
3835:.\ff.c        **** #endif
3836:.\ff.c        **** 					{
3837:.\ff.c        **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3838:.\ff.c        **** 					}
3839:.\ff.c        **** 				} else {
3840:.\ff.c        **** 					res = FR_NO_PATH;		/* Reached but a file */
3841:.\ff.c        **** 				}
3842:.\ff.c        **** 			}
3843:.\ff.c        **** 		}
3844:.\ff.c        **** 		FREE_NAMBUF();
3845:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3846:.\ff.c        **** 	}
3847:.\ff.c        **** 
3848:.\ff.c        **** 	LEAVE_FF(fs, res);
3849:.\ff.c        **** }
3850:.\ff.c        **** 
3851:.\ff.c        **** 
3852:.\ff.c        **** #if _FS_RPATH >= 2
3853:.\ff.c        **** FRESULT f_getcwd (
3854:.\ff.c        **** 	TCHAR* buff,	/* Pointer to the directory path */
3855:.\ff.c        **** 	UINT len		/* Size of path */
3856:.\ff.c        **** )
3857:.\ff.c        **** {
3858:.\ff.c        **** 	FRESULT res;
3859:.\ff.c        **** 	DIR dj;
3860:.\ff.c        **** 	FATFS *fs;
3861:.\ff.c        **** 	UINT i, n;
3862:.\ff.c        **** 	DWORD ccl;
3863:.\ff.c        **** 	TCHAR *tp;
3864:.\ff.c        **** 	FILINFO fno;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 84


3865:.\ff.c        **** 	DEF_NAMBUF
3866:.\ff.c        **** 
3867:.\ff.c        **** 
3868:.\ff.c        **** 	*buff = 0;
3869:.\ff.c        **** 	/* Get logical drive */
3870:.\ff.c        **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3871:.\ff.c        **** 	if (res == FR_OK) {
3872:.\ff.c        **** 		dj.obj.fs = fs;
3873:.\ff.c        **** 		INIT_NAMBUF(fs);
3874:.\ff.c        **** 		i = len;			/* Bottom of buffer (directory stack base) */
3875:.\ff.c        **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3876:.\ff.c        **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3877:.\ff.c        **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3878:.\ff.c        **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3879:.\ff.c        **** 				if (res != FR_OK) break;
3880:.\ff.c        **** 				res = move_window(fs, dj.sect);
3881:.\ff.c        **** 				if (res != FR_OK) break;
3882:.\ff.c        **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3883:.\ff.c        **** 				res = dir_sdi(&dj, 0);
3884:.\ff.c        **** 				if (res != FR_OK) break;
3885:.\ff.c        **** 				do {							/* Find the entry links to the child directory */
3886:.\ff.c        **** 					res = dir_read(&dj, 0);
3887:.\ff.c        **** 					if (res != FR_OK) break;
3888:.\ff.c        **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3889:.\ff.c        **** 					res = dir_next(&dj, 0);
3890:.\ff.c        **** 				} while (res == FR_OK);
3891:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3892:.\ff.c        **** 				if (res != FR_OK) break;
3893:.\ff.c        **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3894:.\ff.c        **** 				for (n = 0; fno.fname[n]; n++) ;
3895:.\ff.c        **** 				if (i < n + 3) {
3896:.\ff.c        **** 					res = FR_NOT_ENOUGH_CORE; break;
3897:.\ff.c        **** 				}
3898:.\ff.c        **** 				while (n) buff[--i] = fno.fname[--n];
3899:.\ff.c        **** 				buff[--i] = '/';
3900:.\ff.c        **** 			}
3901:.\ff.c        **** 		}
3902:.\ff.c        **** 		tp = buff;
3903:.\ff.c        **** 		if (res == FR_OK) {
3904:.\ff.c        **** #if _VOLUMES >= 2
3905:.\ff.c        **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3906:.\ff.c        **** 			*tp++ = ':';
3907:.\ff.c        **** #endif
3908:.\ff.c        **** 			if (i == len) {					/* Root-directory */
3909:.\ff.c        **** 				*tp++ = '/';
3910:.\ff.c        **** 			} else {						/* Sub-directroy */
3911:.\ff.c        **** 				do		/* Add stacked path str */
3912:.\ff.c        **** 					*tp++ = buff[i++];
3913:.\ff.c        **** 				while (i < len);
3914:.\ff.c        **** 			}
3915:.\ff.c        **** 		}
3916:.\ff.c        **** 		*tp = 0;
3917:.\ff.c        **** 		FREE_NAMBUF();
3918:.\ff.c        **** 	}
3919:.\ff.c        **** 
3920:.\ff.c        **** 	LEAVE_FF(fs, res);
3921:.\ff.c        **** }
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 85


3922:.\ff.c        **** 
3923:.\ff.c        **** #endif /* _FS_RPATH >= 2 */
3924:.\ff.c        **** #endif /* _FS_RPATH >= 1 */
3925:.\ff.c        **** 
3926:.\ff.c        **** 
3927:.\ff.c        **** 
3928:.\ff.c        **** #if _FS_MINIMIZE <= 2
3929:.\ff.c        **** /*-----------------------------------------------------------------------*/
3930:.\ff.c        **** /* Seek File R/W Pointer                                                 */
3931:.\ff.c        **** /*-----------------------------------------------------------------------*/
3932:.\ff.c        **** 
3933:.\ff.c        **** FRESULT f_lseek (
3934:.\ff.c        **** 	FIL* fp,		/* Pointer to the file object */
3935:.\ff.c        **** 	FSIZE_t ofs		/* File pointer from top of file */
3936:.\ff.c        **** )
3937:.\ff.c        **** {
3938:.\ff.c        **** 	FRESULT res;
3939:.\ff.c        **** 	FATFS *fs;
3940:.\ff.c        **** 	DWORD clst, bcs, nsect;
3941:.\ff.c        **** 	FSIZE_t ifptr;
3942:.\ff.c        **** #if _USE_FASTSEEK
3943:.\ff.c        **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
3944:.\ff.c        **** #endif
3945:.\ff.c        **** 
3946:.\ff.c        **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
3947:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3948:.\ff.c        **** #if _USE_FASTSEEK
3949:.\ff.c        **** 	if (fp->cltbl) {	/* Fast seek */
3950:.\ff.c        **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
3951:.\ff.c        **** 			tbl = fp->cltbl;
3952:.\ff.c        **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
3953:.\ff.c        **** 			cl = fp->obj.sclust;		/* Origin of the chain */
3954:.\ff.c        **** 			if (cl) {
3955:.\ff.c        **** 				do {
3956:.\ff.c        **** 					/* Get a fragment */
3957:.\ff.c        **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
3958:.\ff.c        **** 					do {
3959:.\ff.c        **** 						pcl = cl; ncl++;
3960:.\ff.c        **** 						cl = get_fat(&fp->obj, cl);
3961:.\ff.c        **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
3962:.\ff.c        **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3963:.\ff.c        **** 					} while (cl == pcl + 1);
3964:.\ff.c        **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
3965:.\ff.c        **** 						*tbl++ = ncl; *tbl++ = tcl;
3966:.\ff.c        **** 					}
3967:.\ff.c        **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
3968:.\ff.c        **** 			}
3969:.\ff.c        **** 			*fp->cltbl = ulen;	/* Number of items used */
3970:.\ff.c        **** 			if (ulen <= tlen) {
3971:.\ff.c        **** 				*tbl = 0;		/* Terminate table */
3972:.\ff.c        **** 			} else {
3973:.\ff.c        **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
3974:.\ff.c        **** 			}
3975:.\ff.c        **** 		} else {						/* Fast seek */
3976:.\ff.c        **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
3977:.\ff.c        **** 			fp->fptr = ofs;				/* Set file pointer */
3978:.\ff.c        **** 			if (ofs) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 86


3979:.\ff.c        **** 				fp->clust = clmt_clust(fp, ofs - 1);
3980:.\ff.c        **** 				dsc = clust2sect(fs, fp->clust);
3981:.\ff.c        **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
3982:.\ff.c        **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
3983:.\ff.c        **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
3984:.\ff.c        **** #if !_FS_TINY
3985:.\ff.c        **** #if !_FS_READONLY
3986:.\ff.c        **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3987:.\ff.c        **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3988:.\ff.c        **** 						fp->flag &= (BYTE)~FA_DIRTY;
3989:.\ff.c        **** 					}
3990:.\ff.c        **** #endif
3991:.\ff.c        **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sec
3992:.\ff.c        **** #endif
3993:.\ff.c        **** 					fp->sect = dsc;
3994:.\ff.c        **** 				}
3995:.\ff.c        **** 			}
3996:.\ff.c        **** 		}
3997:.\ff.c        **** 	} else
3998:.\ff.c        **** #endif
3999:.\ff.c        **** 
4000:.\ff.c        **** 	/* Normal Seek */
4001:.\ff.c        **** 	{
4002:.\ff.c        **** #if _FS_EXFAT
4003:.\ff.c        **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATx
4004:.\ff.c        **** #endif
4005:.\ff.c        **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
4006:.\ff.c        **** 			ofs = fp->obj.objsize;
4007:.\ff.c        **** 		}
4008:.\ff.c        **** 		ifptr = fp->fptr;
4009:.\ff.c        **** 		fp->fptr = nsect = 0;
4010:.\ff.c        **** 		if (ofs) {
4011:.\ff.c        **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
4012:.\ff.c        **** 			if (ifptr > 0 &&
4013:.\ff.c        **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
4014:.\ff.c        **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
4015:.\ff.c        **** 				ofs -= fp->fptr;
4016:.\ff.c        **** 				clst = fp->clust;
4017:.\ff.c        **** 			} else {									/* When seek to back cluster, */
4018:.\ff.c        **** 				clst = fp->obj.sclust;					/* start from the first cluster */
4019:.\ff.c        **** #if !_FS_READONLY
4020:.\ff.c        **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
4021:.\ff.c        **** 					clst = create_chain(&fp->obj, 0);
4022:.\ff.c        **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4023:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4024:.\ff.c        **** 					fp->obj.sclust = clst;
4025:.\ff.c        **** 				}
4026:.\ff.c        **** #endif
4027:.\ff.c        **** 				fp->clust = clst;
4028:.\ff.c        **** 			}
4029:.\ff.c        **** 			if (clst != 0) {
4030:.\ff.c        **** 				while (ofs > bcs) {						/* Cluster following loop */
4031:.\ff.c        **** 					ofs -= bcs; fp->fptr += bcs;
4032:.\ff.c        **** #if !_FS_READONLY
4033:.\ff.c        **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4034:.\ff.c        **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
4035:.\ff.c        **** 							fp->obj.objsize = fp->fptr;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 87


4036:.\ff.c        **** 							fp->flag |= FA_MODIFIED;
4037:.\ff.c        **** 						}
4038:.\ff.c        **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4039:.\ff.c        **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4040:.\ff.c        **** 							ofs = 0; break;
4041:.\ff.c        **** 						}
4042:.\ff.c        **** 					} else
4043:.\ff.c        **** #endif
4044:.\ff.c        **** 					{
4045:.\ff.c        **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4046:.\ff.c        **** 					}
4047:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4048:.\ff.c        **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4049:.\ff.c        **** 					fp->clust = clst;
4050:.\ff.c        **** 				}
4051:.\ff.c        **** 				fp->fptr += ofs;
4052:.\ff.c        **** 				if (ofs % SS(fs)) {
4053:.\ff.c        **** 					nsect = clust2sect(fs, clst);	/* Current sector */
4054:.\ff.c        **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
4055:.\ff.c        **** 					nsect += (DWORD)(ofs / SS(fs));
4056:.\ff.c        **** 				}
4057:.\ff.c        **** 			}
4058:.\ff.c        **** 		}
4059:.\ff.c        **** 		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is e
4060:.\ff.c        **** 			fp->obj.objsize = fp->fptr;
4061:.\ff.c        **** 			fp->flag |= FA_MODIFIED;
4062:.\ff.c        **** 		}
4063:.\ff.c        **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
4064:.\ff.c        **** #if !_FS_TINY
4065:.\ff.c        **** #if !_FS_READONLY
4066:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
4067:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4068:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
4069:.\ff.c        **** 			}
4070:.\ff.c        **** #endif
4071:.\ff.c        **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
4072:.\ff.c        **** #endif
4073:.\ff.c        **** 			fp->sect = nsect;
4074:.\ff.c        **** 		}
4075:.\ff.c        **** 	}
4076:.\ff.c        **** 
4077:.\ff.c        **** 	LEAVE_FF(fs, res);
4078:.\ff.c        **** }
4079:.\ff.c        **** 
4080:.\ff.c        **** 
4081:.\ff.c        **** 
4082:.\ff.c        **** #if _FS_MINIMIZE <= 1
4083:.\ff.c        **** /*-----------------------------------------------------------------------*/
4084:.\ff.c        **** /* Create a Directory Object                                             */
4085:.\ff.c        **** /*-----------------------------------------------------------------------*/
4086:.\ff.c        **** 
4087:.\ff.c        **** FRESULT f_opendir (
4088:.\ff.c        **** 	DIR* dp,			/* Pointer to directory object to create */
4089:.\ff.c        **** 	const TCHAR* path	/* Pointer to the directory path */
4090:.\ff.c        **** )
4091:.\ff.c        **** {
4092:.\ff.c        **** 	FRESULT res;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 88


4093:.\ff.c        **** 	FATFS *fs;
4094:.\ff.c        **** 	_FDID *obj;
4095:.\ff.c        **** 	DEF_NAMBUF
4096:.\ff.c        **** 
4097:.\ff.c        **** 
4098:.\ff.c        **** 	if (!dp) return FR_INVALID_OBJECT;
4099:.\ff.c        **** 
4100:.\ff.c        **** 	/* Get logical drive */
4101:.\ff.c        **** 	obj = &dp->obj;
4102:.\ff.c        **** 	res = find_volume(&path, &fs, 0);
4103:.\ff.c        **** 	if (res == FR_OK) {
4104:.\ff.c        **** 		obj->fs = fs;
4105:.\ff.c        **** 		INIT_NAMBUF(fs);
4106:.\ff.c        **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4107:.\ff.c        **** 		if (res == FR_OK) {						/* Follow completed */
4108:.\ff.c        **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4109:.\ff.c        **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
4110:.\ff.c        **** #if _FS_EXFAT
4111:.\ff.c        **** 					if (fs->fs_type == FS_EXFAT) {
4112:.\ff.c        **** 						obj->c_scl = obj->sclust;	/* Save containing directory inforamation */
4113:.\ff.c        **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4114:.\ff.c        **** 						obj->c_ofs = dp->blk_ofs;
4115:.\ff.c        **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object location and status */
4116:.\ff.c        **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4117:.\ff.c        **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4118:.\ff.c        **** 					} else
4119:.\ff.c        **** #endif
4120:.\ff.c        **** 					{
4121:.\ff.c        **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
4122:.\ff.c        **** 					}
4123:.\ff.c        **** 				} else {						/* This object is a file */
4124:.\ff.c        **** 					res = FR_NO_PATH;
4125:.\ff.c        **** 				}
4126:.\ff.c        **** 			}
4127:.\ff.c        **** 			if (res == FR_OK) {
4128:.\ff.c        **** 				obj->id = fs->id;
4129:.\ff.c        **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4130:.\ff.c        **** #if _FS_LOCK != 0
4131:.\ff.c        **** 				if (res == FR_OK) {
4132:.\ff.c        **** 					if (obj->sclust) {
4133:.\ff.c        **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4134:.\ff.c        **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
4135:.\ff.c        **** 					} else {
4136:.\ff.c        **** 						obj->lockid = 0;	/* Root directory need not to be locked */
4137:.\ff.c        **** 					}
4138:.\ff.c        **** 				}
4139:.\ff.c        **** #endif
4140:.\ff.c        **** 			}
4141:.\ff.c        **** 		}
4142:.\ff.c        **** 		FREE_NAMBUF();
4143:.\ff.c        **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4144:.\ff.c        **** 	}
4145:.\ff.c        **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
4146:.\ff.c        **** 
4147:.\ff.c        **** 	LEAVE_FF(fs, res);
4148:.\ff.c        **** }
4149:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 89


4150:.\ff.c        **** 
4151:.\ff.c        **** 
4152:.\ff.c        **** 
4153:.\ff.c        **** /*-----------------------------------------------------------------------*/
4154:.\ff.c        **** /* Close Directory                                                       */
4155:.\ff.c        **** /*-----------------------------------------------------------------------*/
4156:.\ff.c        **** 
4157:.\ff.c        **** FRESULT f_closedir (
4158:.\ff.c        **** 	DIR *dp		/* Pointer to the directory object to be closed */
4159:.\ff.c        **** )
4160:.\ff.c        **** {
4161:.\ff.c        **** 	FRESULT res;
4162:.\ff.c        **** 	FATFS *fs;
4163:.\ff.c        **** 
4164:.\ff.c        **** 
4165:.\ff.c        **** 	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
4166:.\ff.c        **** 	if (res == FR_OK) {
4167:.\ff.c        **** #if _FS_LOCK != 0
4168:.\ff.c        **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
4169:.\ff.c        **** 			res = dec_lock(dp->obj.lockid);
4170:.\ff.c        **** 		}
4171:.\ff.c        **** 		if (res == FR_OK)
4172:.\ff.c        **** #endif
4173:.\ff.c        **** 		{
4174:.\ff.c        **** 			dp->obj.fs = 0;			/* Invalidate directory object */
4175:.\ff.c        **** 		}
4176:.\ff.c        **** #if _FS_REENTRANT
4177:.\ff.c        **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4178:.\ff.c        **** #endif
4179:.\ff.c        **** 	}
4180:.\ff.c        **** 	return res;
4181:.\ff.c        **** }
4182:.\ff.c        **** 
4183:.\ff.c        **** 
4184:.\ff.c        **** 
4185:.\ff.c        **** 
4186:.\ff.c        **** /*-----------------------------------------------------------------------*/
4187:.\ff.c        **** /* Read Directory Entries in Sequence                                    */
4188:.\ff.c        **** /*-----------------------------------------------------------------------*/
4189:.\ff.c        **** 
4190:.\ff.c        **** FRESULT f_readdir (
4191:.\ff.c        **** 	DIR* dp,			/* Pointer to the open directory object */
4192:.\ff.c        **** 	FILINFO* fno		/* Pointer to file information to return */
4193:.\ff.c        **** )
4194:.\ff.c        **** {
4195:.\ff.c        **** 	FRESULT res;
4196:.\ff.c        **** 	FATFS *fs;
4197:.\ff.c        **** 	DEF_NAMBUF
4198:.\ff.c        **** 
4199:.\ff.c        **** 
4200:.\ff.c        **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
4201:.\ff.c        **** 	if (res == FR_OK) {
4202:.\ff.c        **** 		if (!fno) {
4203:.\ff.c        **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4204:.\ff.c        **** 		} else {
4205:.\ff.c        **** 			INIT_NAMBUF(fs);
4206:.\ff.c        **** 			res = dir_read(dp, 0);			/* Read an item */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 90


4207:.\ff.c        **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
4208:.\ff.c        **** 			if (res == FR_OK) {				/* A valid entry is found */
4209:.\ff.c        **** 				get_fileinfo(dp, fno);		/* Get the object information */
4210:.\ff.c        **** 				res = dir_next(dp, 0);		/* Increment index for next */
4211:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
4212:.\ff.c        **** 			}
4213:.\ff.c        **** 			FREE_NAMBUF();
4214:.\ff.c        **** 		}
4215:.\ff.c        **** 	}
4216:.\ff.c        **** 	LEAVE_FF(fs, res);
4217:.\ff.c        **** }
4218:.\ff.c        **** 
4219:.\ff.c        **** 
4220:.\ff.c        **** 
4221:.\ff.c        **** #if _USE_FIND
4222:.\ff.c        **** /*-----------------------------------------------------------------------*/
4223:.\ff.c        **** /* Find Next File                                                        */
4224:.\ff.c        **** /*-----------------------------------------------------------------------*/
4225:.\ff.c        **** 
4226:.\ff.c        **** FRESULT f_findnext (
4227:.\ff.c        **** 	DIR* dp,		/* Pointer to the open directory object */
4228:.\ff.c        **** 	FILINFO* fno	/* Pointer to the file information structure */
4229:.\ff.c        **** )
4230:.\ff.c        **** {
4231:.\ff.c        **** 	FRESULT res;
4232:.\ff.c        **** 
4233:.\ff.c        **** 
4234:.\ff.c        **** 	for (;;) {
4235:.\ff.c        **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4236:.\ff.c        **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4237:.\ff.c        **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4238:.\ff.c        **** #if _USE_LFN != 0 && _USE_FIND == 2
4239:.\ff.c        **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4240:.\ff.c        **** #endif
4241:.\ff.c        **** 	}
4242:.\ff.c        **** 	return res;
4243:.\ff.c        **** }
4244:.\ff.c        **** 
4245:.\ff.c        **** 
4246:.\ff.c        **** 
4247:.\ff.c        **** /*-----------------------------------------------------------------------*/
4248:.\ff.c        **** /* Find First File                                                       */
4249:.\ff.c        **** /*-----------------------------------------------------------------------*/
4250:.\ff.c        **** 
4251:.\ff.c        **** FRESULT f_findfirst (
4252:.\ff.c        **** 	DIR* dp,				/* Pointer to the blank directory object */
4253:.\ff.c        **** 	FILINFO* fno,			/* Pointer to the file information structure */
4254:.\ff.c        **** 	const TCHAR* path,		/* Pointer to the directory to open */
4255:.\ff.c        **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4256:.\ff.c        **** )
4257:.\ff.c        **** {
4258:.\ff.c        **** 	FRESULT res;
4259:.\ff.c        **** 
4260:.\ff.c        **** 
4261:.\ff.c        **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4262:.\ff.c        **** 	res = f_opendir(dp, path);		/* Open the target directory */
4263:.\ff.c        **** 	if (res == FR_OK) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 91


4264:.\ff.c        **** 		res = f_findnext(dp, fno);	/* Find the first item */
4265:.\ff.c        **** 	}
4266:.\ff.c        **** 	return res;
4267:.\ff.c        **** }
4268:.\ff.c        **** 
4269:.\ff.c        **** #endif	/* _USE_FIND */
4270:.\ff.c        **** 
4271:.\ff.c        **** 
4272:.\ff.c        **** 
4273:.\ff.c        **** #if _FS_MINIMIZE == 0
4274:.\ff.c        **** /*-----------------------------------------------------------------------*/
4275:.\ff.c        **** /* Get File Status                                                       */
4276:.\ff.c        **** /*-----------------------------------------------------------------------*/
4277:.\ff.c        **** 
4278:.\ff.c        **** FRESULT f_stat (
4279:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file path */
4280:.\ff.c        **** 	FILINFO* fno		/* Pointer to file information to return */
4281:.\ff.c        **** )
4282:.\ff.c        **** {
4283:.\ff.c        **** 	FRESULT res;
4284:.\ff.c        **** 	DIR dj;
4285:.\ff.c        **** 	DEF_NAMBUF
4286:.\ff.c        **** 
4287:.\ff.c        **** 
4288:.\ff.c        **** 	/* Get logical drive */
4289:.\ff.c        **** 	res = find_volume(&path, &dj.obj.fs, 0);
4290:.\ff.c        **** 	if (res == FR_OK) {
4291:.\ff.c        **** 		INIT_NAMBUF(dj.obj.fs);
4292:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
4293:.\ff.c        **** 		if (res == FR_OK) {				/* Follow completed */
4294:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4295:.\ff.c        **** 				res = FR_INVALID_NAME;
4296:.\ff.c        **** 			} else {							/* Found an object */
4297:.\ff.c        **** 				if (fno) get_fileinfo(&dj, fno);
4298:.\ff.c        **** 			}
4299:.\ff.c        **** 		}
4300:.\ff.c        **** 		FREE_NAMBUF();
4301:.\ff.c        **** 	}
4302:.\ff.c        **** 
4303:.\ff.c        **** 	LEAVE_FF(dj.obj.fs, res);
4304:.\ff.c        **** }
4305:.\ff.c        **** 
4306:.\ff.c        **** 
4307:.\ff.c        **** 
4308:.\ff.c        **** #if !_FS_READONLY
4309:.\ff.c        **** /*-----------------------------------------------------------------------*/
4310:.\ff.c        **** /* Get Number of Free Clusters                                           */
4311:.\ff.c        **** /*-----------------------------------------------------------------------*/
4312:.\ff.c        **** 
4313:.\ff.c        **** FRESULT f_getfree (
4314:.\ff.c        **** 	const TCHAR* path,	/* Path name of the logical drive number */
4315:.\ff.c        **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4316:.\ff.c        **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4317:.\ff.c        **** )
4318:.\ff.c        **** {
4319:.\ff.c        **** 	FRESULT res;
4320:.\ff.c        **** 	FATFS *fs;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 92


4321:.\ff.c        **** 	DWORD nfree, clst, sect, stat;
4322:.\ff.c        **** 	UINT i;
4323:.\ff.c        **** 	BYTE *p;
4324:.\ff.c        **** 	_FDID obj;
4325:.\ff.c        **** 
4326:.\ff.c        **** 
4327:.\ff.c        **** 	/* Get logical drive */
4328:.\ff.c        **** 	res = find_volume(&path, &fs, 0);
4329:.\ff.c        **** 	if (res == FR_OK) {
4330:.\ff.c        **** 		*fatfs = fs;				/* Return ptr to the fs object */
4331:.\ff.c        **** 		/* If free_clst is valid, return it without full cluster scan */
4332:.\ff.c        **** 		if (fs->free_clst <= fs->n_fatent - 2) {
4333:.\ff.c        **** 			*nclst = fs->free_clst;
4334:.\ff.c        **** 		} else {
4335:.\ff.c        **** 			/* Get number of free clusters */
4336:.\ff.c        **** 			nfree = 0;
4337:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
4338:.\ff.c        **** 				clst = 2; obj.fs = fs;
4339:.\ff.c        **** 				do {
4340:.\ff.c        **** 					stat = get_fat(&obj, clst);
4341:.\ff.c        **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4342:.\ff.c        **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4343:.\ff.c        **** 					if (stat == 0) nfree++;
4344:.\ff.c        **** 				} while (++clst < fs->n_fatent);
4345:.\ff.c        **** 			} else {
4346:.\ff.c        **** #if _FS_EXFAT
4347:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4348:.\ff.c        **** 					BYTE bm;
4349:.\ff.c        **** 					UINT b;
4350:.\ff.c        **** 
4351:.\ff.c        **** 					clst = fs->n_fatent - 2;
4352:.\ff.c        **** 					sect = fs->database;
4353:.\ff.c        **** 					i = 0;
4354:.\ff.c        **** 					do {
4355:.\ff.c        **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
4356:.\ff.c        **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4357:.\ff.c        **** 							if (!(bm & 1)) nfree++;
4358:.\ff.c        **** 							bm >>= 1;
4359:.\ff.c        **** 						}
4360:.\ff.c        **** 						i = (i + 1) % SS(fs);
4361:.\ff.c        **** 					} while (clst);
4362:.\ff.c        **** 				} else
4363:.\ff.c        **** #endif
4364:.\ff.c        **** 				{	/* FAT16/32: Sector alighed FAT entries */
4365:.\ff.c        **** 					clst = fs->n_fatent; sect = fs->fatbase;
4366:.\ff.c        **** 					i = 0; p = 0;
4367:.\ff.c        **** 					do {
4368:.\ff.c        **** 						if (i == 0) {
4369:.\ff.c        **** 							res = move_window(fs, sect++);
4370:.\ff.c        **** 							if (res != FR_OK) break;
4371:.\ff.c        **** 							p = fs->win;
4372:.\ff.c        **** 							i = SS(fs);
4373:.\ff.c        **** 						}
4374:.\ff.c        **** 						if (fs->fs_type == FS_FAT16) {
4375:.\ff.c        **** 							if (ld_word(p) == 0) nfree++;
4376:.\ff.c        **** 							p += 2; i -= 2;
4377:.\ff.c        **** 						} else {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 93


4378:.\ff.c        **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
4379:.\ff.c        **** 							p += 4; i -= 4;
4380:.\ff.c        **** 						}
4381:.\ff.c        **** 					} while (--clst);
4382:.\ff.c        **** 				}
4383:.\ff.c        **** 			}
4384:.\ff.c        **** 			*nclst = nfree;			/* Return the free clusters */
4385:.\ff.c        **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
4386:.\ff.c        **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
4387:.\ff.c        **** 		}
4388:.\ff.c        **** 	}
4389:.\ff.c        **** 
4390:.\ff.c        **** 	LEAVE_FF(fs, res);
4391:.\ff.c        **** }
4392:.\ff.c        **** 
4393:.\ff.c        **** 
4394:.\ff.c        **** 
4395:.\ff.c        **** 
4396:.\ff.c        **** /*-----------------------------------------------------------------------*/
4397:.\ff.c        **** /* Truncate File                                                         */
4398:.\ff.c        **** /*-----------------------------------------------------------------------*/
4399:.\ff.c        **** 
4400:.\ff.c        **** FRESULT f_truncate (
4401:.\ff.c        **** 	FIL* fp		/* Pointer to the file object */
4402:.\ff.c        **** )
4403:.\ff.c        **** {
4404:.\ff.c        **** 	FRESULT res;
4405:.\ff.c        **** 	FATFS *fs;
4406:.\ff.c        **** 	DWORD ncl;
4407:.\ff.c        **** 
4408:.\ff.c        **** 
4409:.\ff.c        **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4410:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
4411:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4412:.\ff.c        **** 
4413:.\ff.c        **** 	if (fp->obj.objsize > fp->fptr) {
4414:.\ff.c        **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
4415:.\ff.c        **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4416:.\ff.c        **** 			fp->obj.sclust = 0;
4417:.\ff.c        **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4418:.\ff.c        **** 			ncl = get_fat(&fp->obj, fp->clust);
4419:.\ff.c        **** 			res = FR_OK;
4420:.\ff.c        **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4421:.\ff.c        **** 			if (ncl == 1) res = FR_INT_ERR;
4422:.\ff.c        **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4423:.\ff.c        **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4424:.\ff.c        **** 			}
4425:.\ff.c        **** 		}
4426:.\ff.c        **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
4427:.\ff.c        **** 		fp->flag |= FA_MODIFIED;
4428:.\ff.c        **** #if !_FS_TINY
4429:.\ff.c        **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4430:.\ff.c        **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
4431:.\ff.c        **** 				res = FR_DISK_ERR;
4432:.\ff.c        **** 			} else {
4433:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
4434:.\ff.c        **** 			}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 94


4435:.\ff.c        **** 		}
4436:.\ff.c        **** #endif
4437:.\ff.c        **** 		if (res != FR_OK) ABORT(fs, res);
4438:.\ff.c        **** 	}
4439:.\ff.c        **** 
4440:.\ff.c        **** 	LEAVE_FF(fs, res);
4441:.\ff.c        **** }
4442:.\ff.c        **** 
4443:.\ff.c        **** 
4444:.\ff.c        **** 
4445:.\ff.c        **** 
4446:.\ff.c        **** /*-----------------------------------------------------------------------*/
4447:.\ff.c        **** /* Delete a File/Directory                                               */
4448:.\ff.c        **** /*-----------------------------------------------------------------------*/
4449:.\ff.c        **** 
4450:.\ff.c        **** FRESULT f_unlink (
4451:.\ff.c        **** 	const TCHAR* path		/* Pointer to the file or directory path */
4452:.\ff.c        **** )
4453:.\ff.c        **** {
4454:.\ff.c        **** 	FRESULT res;
4455:.\ff.c        **** 	DIR dj, sdj;
4456:.\ff.c        **** 	DWORD dclst = 0;
4457:.\ff.c        **** 	FATFS *fs;
4458:.\ff.c        **** #if _FS_EXFAT
4459:.\ff.c        **** 	_FDID obj;
4460:.\ff.c        **** #endif
4461:.\ff.c        **** 	DEF_NAMBUF
4462:.\ff.c        **** 
4463:.\ff.c        **** 
4464:.\ff.c        **** 	/* Get logical drive */
4465:.\ff.c        **** 	res = find_volume(&path, &fs, FA_WRITE);
4466:.\ff.c        **** 	dj.obj.fs = fs;
4467:.\ff.c        **** 	if (res == FR_OK) {
4468:.\ff.c        **** 		INIT_NAMBUF(fs);
4469:.\ff.c        **** 		res = follow_path(&dj, path);		/* Follow the file path */
4470:.\ff.c        **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4471:.\ff.c        **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4472:.\ff.c        **** 		}
4473:.\ff.c        **** #if _FS_LOCK != 0
4474:.\ff.c        **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4475:.\ff.c        **** #endif
4476:.\ff.c        **** 		if (res == FR_OK) {					/* The object is accessible */
4477:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4478:.\ff.c        **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4479:.\ff.c        **** 			} else {
4480:.\ff.c        **** 				if (dj.obj.attr & AM_RDO) {
4481:.\ff.c        **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4482:.\ff.c        **** 				}
4483:.\ff.c        **** 			}
4484:.\ff.c        **** 			if (res == FR_OK) {
4485:.\ff.c        **** #if _FS_EXFAT
4486:.\ff.c        **** 				obj.fs = fs;
4487:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
4488:.\ff.c        **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4489:.\ff.c        **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4490:.\ff.c        **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4491:.\ff.c        **** 				} else
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 95


4492:.\ff.c        **** #endif
4493:.\ff.c        **** 				{
4494:.\ff.c        **** 					dclst = ld_clust(fs, dj.dir);
4495:.\ff.c        **** 				}
4496:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
4497:.\ff.c        **** #if _FS_RPATH != 0
4498:.\ff.c        **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4499:.\ff.c        **** 						res = FR_DENIED;
4500:.\ff.c        **** 					} else
4501:.\ff.c        **** #endif
4502:.\ff.c        **** 					{
4503:.\ff.c        **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
4504:.\ff.c        **** 						sdj.obj.sclust = dclst;
4505:.\ff.c        **** #if _FS_EXFAT
4506:.\ff.c        **** 						if (fs->fs_type == FS_EXFAT) {
4507:.\ff.c        **** 							sdj.obj.objsize = obj.objsize;
4508:.\ff.c        **** 							sdj.obj.stat = obj.stat;
4509:.\ff.c        **** 						}
4510:.\ff.c        **** #endif
4511:.\ff.c        **** 						res = dir_sdi(&sdj, 0);
4512:.\ff.c        **** 						if (res == FR_OK) {
4513:.\ff.c        **** 							res = dir_read(&sdj, 0);			/* Read an item */
4514:.\ff.c        **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4515:.\ff.c        **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4516:.\ff.c        **** 						}
4517:.\ff.c        **** 					}
4518:.\ff.c        **** 				}
4519:.\ff.c        **** 			}
4520:.\ff.c        **** 			if (res == FR_OK) {
4521:.\ff.c        **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4522:.\ff.c        **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
4523:.\ff.c        **** #if _FS_EXFAT
4524:.\ff.c        **** 					res = remove_chain(&obj, dclst, 0);
4525:.\ff.c        **** #else
4526:.\ff.c        **** 					res = remove_chain(&dj.obj, dclst, 0);
4527:.\ff.c        **** #endif
4528:.\ff.c        **** 				}
4529:.\ff.c        **** 				if (res == FR_OK) res = sync_fs(fs);
4530:.\ff.c        **** 			}
4531:.\ff.c        **** 		}
4532:.\ff.c        **** 		FREE_NAMBUF();
4533:.\ff.c        **** 	}
4534:.\ff.c        **** 
4535:.\ff.c        **** 	LEAVE_FF(fs, res);
4536:.\ff.c        **** }
4537:.\ff.c        **** 
4538:.\ff.c        **** 
4539:.\ff.c        **** 
4540:.\ff.c        **** 
4541:.\ff.c        **** /*-----------------------------------------------------------------------*/
4542:.\ff.c        **** /* Create a Directory                                                    */
4543:.\ff.c        **** /*-----------------------------------------------------------------------*/
4544:.\ff.c        **** 
4545:.\ff.c        **** FRESULT f_mkdir (
4546:.\ff.c        **** 	const TCHAR* path		/* Pointer to the directory path */
4547:.\ff.c        **** )
4548:.\ff.c        **** {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 96


4549:.\ff.c        **** 	FRESULT res;
4550:.\ff.c        **** 	DIR dj;
4551:.\ff.c        **** 	FATFS *fs;
4552:.\ff.c        **** 	BYTE *dir;
4553:.\ff.c        **** 	UINT n;
4554:.\ff.c        **** 	DWORD dsc, dcl, pcl, tm;
4555:.\ff.c        **** 	DEF_NAMBUF
4556:.\ff.c        **** 
4557:.\ff.c        **** 
4558:.\ff.c        **** 	/* Get logical drive */
4559:.\ff.c        **** 	res = find_volume(&path, &fs, FA_WRITE);
4560:.\ff.c        **** 	dj.obj.fs = fs;
4561:.\ff.c        **** 	if (res == FR_OK) {
4562:.\ff.c        **** 		INIT_NAMBUF(fs);
4563:.\ff.c        **** 		res = follow_path(&dj, path);			/* Follow the file path */
4564:.\ff.c        **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
4565:.\ff.c        **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4566:.\ff.c        **** 			res = FR_INVALID_NAME;
4567:.\ff.c        **** 		}
4568:.\ff.c        **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
4569:.\ff.c        **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
4570:.\ff.c        **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
4571:.\ff.c        **** 			res = FR_OK;
4572:.\ff.c        **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
4573:.\ff.c        **** 			if (dcl == 1) res = FR_INT_ERR;
4574:.\ff.c        **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
4575:.\ff.c        **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
4576:.\ff.c        **** 			tm = GET_FATTIME();
4577:.\ff.c        **** 			if (res == FR_OK) {					/* Initialize the new directory table */
4578:.\ff.c        **** 				dsc = clust2sect(fs, dcl);
4579:.\ff.c        **** 				dir = fs->win;
4580:.\ff.c        **** 				mem_set(dir, 0, SS(fs));
4581:.\ff.c        **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4582:.\ff.c        **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
4583:.\ff.c        **** 					dir[DIR_Name] = '.';
4584:.\ff.c        **** 					dir[DIR_Attr] = AM_DIR;
4585:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);
4586:.\ff.c        **** 					st_clust(fs, dir, dcl);
4587:.\ff.c        **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
4588:.\ff.c        **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
4589:.\ff.c        **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
4590:.\ff.c        **** 					st_clust(fs, dir + SZDIRE, pcl);
4591:.\ff.c        **** 				}
4592:.\ff.c        **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
4593:.\ff.c        **** 					fs->winsect = dsc++;
4594:.\ff.c        **** 					fs->wflag = 1;
4595:.\ff.c        **** 					res = sync_window(fs);
4596:.\ff.c        **** 					if (res != FR_OK) break;
4597:.\ff.c        **** 					mem_set(dir, 0, SS(fs));
4598:.\ff.c        **** 				}
4599:.\ff.c        **** 			}
4600:.\ff.c        **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
4601:.\ff.c        **** 			if (res == FR_OK) {
4602:.\ff.c        **** #if _FS_EXFAT
4603:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4604:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4605:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 97


4606:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4607:.\ff.c        **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4608:.\ff.c        **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4609:.\ff.c        **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4610:.\ff.c        **** 					res = store_xdir(&dj);
4611:.\ff.c        **** 				} else
4612:.\ff.c        **** #endif
4613:.\ff.c        **** 				{
4614:.\ff.c        **** 					dir = dj.dir;
4615:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
4616:.\ff.c        **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
4617:.\ff.c        **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
4618:.\ff.c        **** 					fs->wflag = 1;
4619:.\ff.c        **** 				}
4620:.\ff.c        **** 				if (res == FR_OK) res = sync_fs(fs);
4621:.\ff.c        **** 			} else {
4622:.\ff.c        **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
4623:.\ff.c        **** 			}
4624:.\ff.c        **** 		}
4625:.\ff.c        **** 		FREE_NAMBUF();
4626:.\ff.c        **** 	}
4627:.\ff.c        **** 
4628:.\ff.c        **** 	LEAVE_FF(fs, res);
4629:.\ff.c        **** }
4630:.\ff.c        **** 
4631:.\ff.c        **** 
4632:.\ff.c        **** 
4633:.\ff.c        **** 
4634:.\ff.c        **** /*-----------------------------------------------------------------------*/
4635:.\ff.c        **** /* Rename a File/Directory                                               */
4636:.\ff.c        **** /*-----------------------------------------------------------------------*/
4637:.\ff.c        **** 
4638:.\ff.c        **** FRESULT f_rename (
4639:.\ff.c        **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4640:.\ff.c        **** 	const TCHAR* path_new	/* Pointer to the new name */
4641:.\ff.c        **** )
4642:.\ff.c        **** {
4643:.\ff.c        **** 	FRESULT res;
4644:.\ff.c        **** 	DIR djo, djn;
4645:.\ff.c        **** 	FATFS *fs;
4646:.\ff.c        **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4647:.\ff.c        **** 	DWORD dw;
4648:.\ff.c        **** 	DEF_NAMBUF
4649:.\ff.c        **** 
4650:.\ff.c        **** 
4651:.\ff.c        **** 	get_ldnumber(&path_new);						/* Ignore drive number of new name */
4652:.\ff.c        **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
4653:.\ff.c        **** 	if (res == FR_OK) {
4654:.\ff.c        **** 		djo.obj.fs = fs;
4655:.\ff.c        **** 		INIT_NAMBUF(fs);
4656:.\ff.c        **** 		res = follow_path(&djo, path_old);		/* Check old object */
4657:.\ff.c        **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
4658:.\ff.c        **** #if _FS_LOCK != 0
4659:.\ff.c        **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
4660:.\ff.c        **** #endif
4661:.\ff.c        **** 		if (res == FR_OK) {						/* Object to be renamed is found */
4662:.\ff.c        **** #if _FS_EXFAT
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 98


4663:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4664:.\ff.c        **** 				BYTE nf, nn;
4665:.\ff.c        **** 				WORD nh;
4666:.\ff.c        **** 
4667:.\ff.c        **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4668:.\ff.c        **** 				mem_cpy(&djn, &djo, sizeof djo);
4669:.\ff.c        **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4670:.\ff.c        **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4671:.\ff.c        **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4672:.\ff.c        **** 				}
4673:.\ff.c        **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4674:.\ff.c        **** 					res = dir_register(&djn);			/* Register the new entry */
4675:.\ff.c        **** 					if (res == FR_OK) {
4676:.\ff.c        **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4677:.\ff.c        **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4678:.\ff.c        **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4679:.\ff.c        **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4680:.\ff.c        **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4681:.\ff.c        **** /* Start of critical section where any interruption can cause a cross-link */
4682:.\ff.c        **** 						res = store_xdir(&djn);
4683:.\ff.c        **** 					}
4684:.\ff.c        **** 				}
4685:.\ff.c        **** 			} else
4686:.\ff.c        **** #endif
4687:.\ff.c        **** 			{	/* At FAT12/FAT16/FAT32 */
4688:.\ff.c        **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
4689:.\ff.c        **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
4690:.\ff.c        **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4691:.\ff.c        **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4692:.\ff.c        **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4693:.\ff.c        **** 				}
4694:.\ff.c        **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4695:.\ff.c        **** 					res = dir_register(&djn);			/* Register the new entry */
4696:.\ff.c        **** 					if (res == FR_OK) {
4697:.\ff.c        **** 						dir = djn.dir;					/* Copy information about object except name */
4698:.\ff.c        **** 						mem_cpy(dir + 13, buf + 2, 19);
4699:.\ff.c        **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
4700:.\ff.c        **** 						fs->wflag = 1;
4701:.\ff.c        **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
4702:.\ff.c        **** 							dw = clust2sect(fs, ld_clust(fs, dir));
4703:.\ff.c        **** 							if (!dw) {
4704:.\ff.c        **** 								res = FR_INT_ERR;
4705:.\ff.c        **** 							} else {
4706:.\ff.c        **** /* Start of critical section where any interruption can cause a cross-link */
4707:.\ff.c        **** 								res = move_window(fs, dw);
4708:.\ff.c        **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
4709:.\ff.c        **** 								if (res == FR_OK && dir[1] == '.') {
4710:.\ff.c        **** 									st_clust(fs, dir, djn.obj.sclust);
4711:.\ff.c        **** 									fs->wflag = 1;
4712:.\ff.c        **** 								}
4713:.\ff.c        **** 							}
4714:.\ff.c        **** 						}
4715:.\ff.c        **** 					}
4716:.\ff.c        **** 				}
4717:.\ff.c        **** 			}
4718:.\ff.c        **** 			if (res == FR_OK) {
4719:.\ff.c        **** 				res = dir_remove(&djo);		/* Remove old entry */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 99


4720:.\ff.c        **** 				if (res == FR_OK) {
4721:.\ff.c        **** 					res = sync_fs(fs);
4722:.\ff.c        **** 				}
4723:.\ff.c        **** 			}
4724:.\ff.c        **** /* End of critical section */
4725:.\ff.c        **** 		}
4726:.\ff.c        **** 		FREE_NAMBUF();
4727:.\ff.c        **** 	}
4728:.\ff.c        **** 
4729:.\ff.c        **** 	LEAVE_FF(fs, res);
4730:.\ff.c        **** }
4731:.\ff.c        **** 
4732:.\ff.c        **** #endif /* !_FS_READONLY */
4733:.\ff.c        **** #endif /* _FS_MINIMIZE == 0 */
4734:.\ff.c        **** #endif /* _FS_MINIMIZE <= 1 */
4735:.\ff.c        **** #endif /* _FS_MINIMIZE <= 2 */
4736:.\ff.c        **** 
4737:.\ff.c        **** 
4738:.\ff.c        **** 
4739:.\ff.c        **** #if _USE_CHMOD && !_FS_READONLY
4740:.\ff.c        **** /*-----------------------------------------------------------------------*/
4741:.\ff.c        **** /* Change Attribute                                                      */
4742:.\ff.c        **** /*-----------------------------------------------------------------------*/
4743:.\ff.c        **** 
4744:.\ff.c        **** FRESULT f_chmod (
4745:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file path */
4746:.\ff.c        **** 	BYTE attr,			/* Attribute bits */
4747:.\ff.c        **** 	BYTE mask			/* Attribute mask to change */
4748:.\ff.c        **** )
4749:.\ff.c        **** {
4750:.\ff.c        **** 	FRESULT res;
4751:.\ff.c        **** 	DIR dj;
4752:.\ff.c        **** 	FATFS *fs;
4753:.\ff.c        **** 	DEF_NAMBUF
4754:.\ff.c        **** 
4755:.\ff.c        **** 
4756:.\ff.c        **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4757:.\ff.c        **** 	dj.obj.fs = fs;
4758:.\ff.c        **** 	if (res == FR_OK) {
4759:.\ff.c        **** 		INIT_NAMBUF(fs);
4760:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
4761:.\ff.c        **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4762:.\ff.c        **** 		if (res == FR_OK) {
4763:.\ff.c        **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4764:.\ff.c        **** #if _FS_EXFAT
4765:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
4766:.\ff.c        **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4767:.\ff.c        **** 				res = store_xdir(&dj);
4768:.\ff.c        **** 			} else
4769:.\ff.c        **** #endif
4770:.\ff.c        **** 			{
4771:.\ff.c        **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4772:.\ff.c        **** 				fs->wflag = 1;
4773:.\ff.c        **** 			}
4774:.\ff.c        **** 			if (res == FR_OK) res = sync_fs(fs);
4775:.\ff.c        **** 		}
4776:.\ff.c        **** 		FREE_NAMBUF();
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 100


4777:.\ff.c        **** 	}
4778:.\ff.c        **** 
4779:.\ff.c        **** 	LEAVE_FF(fs, res);
4780:.\ff.c        **** }
4781:.\ff.c        **** 
4782:.\ff.c        **** 
4783:.\ff.c        **** 
4784:.\ff.c        **** 
4785:.\ff.c        **** /*-----------------------------------------------------------------------*/
4786:.\ff.c        **** /* Change Timestamp                                                      */
4787:.\ff.c        **** /*-----------------------------------------------------------------------*/
4788:.\ff.c        **** 
4789:.\ff.c        **** FRESULT f_utime (
4790:.\ff.c        **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4791:.\ff.c        **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4792:.\ff.c        **** )
4793:.\ff.c        **** {
4794:.\ff.c        **** 	FRESULT res;
4795:.\ff.c        **** 	DIR dj;
4796:.\ff.c        **** 	FATFS *fs;
4797:.\ff.c        **** 	DEF_NAMBUF
4798:.\ff.c        **** 
4799:.\ff.c        **** 
4800:.\ff.c        **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4801:.\ff.c        **** 	dj.obj.fs = fs;
4802:.\ff.c        **** 	if (res == FR_OK) {
4803:.\ff.c        **** 		INIT_NAMBUF(fs);
4804:.\ff.c        **** 		res = follow_path(&dj, path);	/* Follow the file path */
4805:.\ff.c        **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4806:.\ff.c        **** 		if (res == FR_OK) {
4807:.\ff.c        **** #if _FS_EXFAT
4808:.\ff.c        **** 			if (fs->fs_type == FS_EXFAT) {
4809:.\ff.c        **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4810:.\ff.c        **** 				res = store_xdir(&dj);
4811:.\ff.c        **** 			} else
4812:.\ff.c        **** #endif
4813:.\ff.c        **** 			{
4814:.\ff.c        **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4815:.\ff.c        **** 				fs->wflag = 1;
4816:.\ff.c        **** 			}
4817:.\ff.c        **** 			if (res == FR_OK) res = sync_fs(fs);
4818:.\ff.c        **** 		}
4819:.\ff.c        **** 		FREE_NAMBUF();
4820:.\ff.c        **** 	}
4821:.\ff.c        **** 
4822:.\ff.c        **** 	LEAVE_FF(fs, res);
4823:.\ff.c        **** }
4824:.\ff.c        **** 
4825:.\ff.c        **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4826:.\ff.c        **** 
4827:.\ff.c        **** 
4828:.\ff.c        **** 
4829:.\ff.c        **** #if _USE_LABEL
4830:.\ff.c        **** /*-----------------------------------------------------------------------*/
4831:.\ff.c        **** /* Get Volume Label                                                      */
4832:.\ff.c        **** /*-----------------------------------------------------------------------*/
4833:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 101


4834:.\ff.c        **** FRESULT f_getlabel (
4835:.\ff.c        **** 	const TCHAR* path,	/* Path name of the logical drive number */
4836:.\ff.c        **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4837:.\ff.c        **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4838:.\ff.c        **** )
4839:.\ff.c        **** {
4840:.\ff.c        **** 	FRESULT res;
4841:.\ff.c        **** 	DIR dj;
4842:.\ff.c        **** 	FATFS *fs;
4843:.\ff.c        **** 	UINT si, di;
4844:.\ff.c        **** #if _LFN_UNICODE || _FS_EXFAT
4845:.\ff.c        **** 	WCHAR w;
4846:.\ff.c        **** #endif
4847:.\ff.c        **** 
4848:.\ff.c        **** 	/* Get logical drive */
4849:.\ff.c        **** 	res = find_volume(&path, &fs, 0);
4850:.\ff.c        **** 
4851:.\ff.c        **** 	/* Get volume label */
4852:.\ff.c        **** 	if (res == FR_OK && label) {
4853:.\ff.c        **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4854:.\ff.c        **** 		res = dir_sdi(&dj, 0);
4855:.\ff.c        **** 		if (res == FR_OK) {
4856:.\ff.c        **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4857:.\ff.c        **** 		 	if (res == FR_OK) {
4858:.\ff.c        **** #if _FS_EXFAT
4859:.\ff.c        **** 				if (fs->fs_type == FS_EXFAT) {
4860:.\ff.c        **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4861:.\ff.c        **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4862:.\ff.c        **** #if _LFN_UNICODE
4863:.\ff.c        **** 						label[di++] = w;
4864:.\ff.c        **** #else
4865:.\ff.c        **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
4866:.\ff.c        **** 						if (w == 0) w = '?';	/* Replace wrong character */
4867:.\ff.c        **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4868:.\ff.c        **** 						label[di++] = (char)w;
4869:.\ff.c        **** #endif
4870:.\ff.c        **** 					}
4871:.\ff.c        **** 					label[di] = 0;
4872:.\ff.c        **** 				} else
4873:.\ff.c        **** #endif
4874:.\ff.c        **** 				{
4875:.\ff.c        **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4876:.\ff.c        **** 					do {
4877:.\ff.c        **** #if _LFN_UNICODE
4878:.\ff.c        **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4879:.\ff.c        **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4880:.\ff.c        **** 							w = w << 8 | dj.dir[si++];
4881:.\ff.c        **** 						}
4882:.\ff.c        **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4883:.\ff.c        **** #else
4884:.\ff.c        **** 						label[di++] = dj.dir[si++];
4885:.\ff.c        **** #endif
4886:.\ff.c        **** 					} while (di < 11);
4887:.\ff.c        **** 					do {				/* Truncate trailing spaces */
4888:.\ff.c        **** 						label[di] = 0;
4889:.\ff.c        **** 						if (di == 0) break;
4890:.\ff.c        **** 					} while (label[--di] == ' ');
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 102


4891:.\ff.c        **** 				}
4892:.\ff.c        **** 			}
4893:.\ff.c        **** 		}
4894:.\ff.c        **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4895:.\ff.c        **** 			label[0] = 0;
4896:.\ff.c        **** 			res = FR_OK;
4897:.\ff.c        **** 		}
4898:.\ff.c        **** 	}
4899:.\ff.c        **** 
4900:.\ff.c        **** 	/* Get volume serial number */
4901:.\ff.c        **** 	if (res == FR_OK && vsn) {
4902:.\ff.c        **** 		res = move_window(fs, fs->volbase);
4903:.\ff.c        **** 		if (res == FR_OK) {
4904:.\ff.c        **** 			switch (fs->fs_type) {
4905:.\ff.c        **** 			case FS_EXFAT: di = BPB_VolIDEx; break;
4906:.\ff.c        **** 			case FS_FAT32: di = BS_VolID32; break;
4907:.\ff.c        **** 			default:       di = BS_VolID;
4908:.\ff.c        **** 			}
4909:.\ff.c        **** 			*vsn = ld_dword(fs->win + di);
4910:.\ff.c        **** 		}
4911:.\ff.c        **** 	}
4912:.\ff.c        **** 
4913:.\ff.c        **** 	LEAVE_FF(fs, res);
4914:.\ff.c        **** }
4915:.\ff.c        **** 
4916:.\ff.c        **** 
4917:.\ff.c        **** 
4918:.\ff.c        **** #if !_FS_READONLY
4919:.\ff.c        **** /*-----------------------------------------------------------------------*/
4920:.\ff.c        **** /* Set Volume Label                                                      */
4921:.\ff.c        **** /*-----------------------------------------------------------------------*/
4922:.\ff.c        **** 
4923:.\ff.c        **** FRESULT f_setlabel (
4924:.\ff.c        **** 	const TCHAR* label	/* Pointer to the volume label to set */
4925:.\ff.c        **** )
4926:.\ff.c        **** {
4927:.\ff.c        **** 	FRESULT res;
4928:.\ff.c        **** 	DIR dj;
4929:.\ff.c        **** 	FATFS *fs;
4930:.\ff.c        **** 	BYTE dirvn[22];
4931:.\ff.c        **** 	UINT i, j, slen;
4932:.\ff.c        **** 	WCHAR w;
4933:.\ff.c        **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
4934:.\ff.c        **** 
4935:.\ff.c        **** 
4936:.\ff.c        **** 	/* Get logical drive */
4937:.\ff.c        **** 	res = find_volume(&label, &fs, FA_WRITE);
4938:.\ff.c        **** 	if (res != FR_OK) LEAVE_FF(fs, res);
4939:.\ff.c        **** 	dj.obj.fs = fs;
4940:.\ff.c        **** 
4941:.\ff.c        **** 	/* Get length of given volume label */
4942:.\ff.c        **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
4943:.\ff.c        **** 
4944:.\ff.c        **** #if _FS_EXFAT
4945:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
4946:.\ff.c        **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
4947:.\ff.c        **** 			w = label[i++];
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 103


4948:.\ff.c        **** #if !_LFN_UNICODE
4949:.\ff.c        **** 			if (IsDBCS1(w)) {
4950:.\ff.c        **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4951:.\ff.c        **** 			}
4952:.\ff.c        **** 			w = ff_convert(w, 1);
4953:.\ff.c        **** #endif
4954:.\ff.c        **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
4955:.\ff.c        **** 				LEAVE_FF(fs, FR_INVALID_NAME);
4956:.\ff.c        **** 			}
4957:.\ff.c        **** 			st_word(dirvn + j, w); j += 2;
4958:.\ff.c        **** 		}
4959:.\ff.c        **** 		slen = j;
4960:.\ff.c        **** 	} else
4961:.\ff.c        **** #endif
4962:.\ff.c        **** 	{	/* On the FAT12/16/32 volume */
4963:.\ff.c        **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
4964:.\ff.c        **** 		if (slen) {		/* Is there a volume label to be set? */
4965:.\ff.c        **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
4966:.\ff.c        **** 			do {
4967:.\ff.c        **** #if _LFN_UNICODE
4968:.\ff.c        **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
4969:.\ff.c        **** #else
4970:.\ff.c        **** 				w = (BYTE)label[i++];
4971:.\ff.c        **** 				if (IsDBCS1(w)) {
4972:.\ff.c        **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4973:.\ff.c        **** 				}
4974:.\ff.c        **** #if _USE_LFN != 0
4975:.\ff.c        **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
4976:.\ff.c        **** #else
4977:.\ff.c        **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
4978:.\ff.c        **** #ifdef _EXCVT
4979:.\ff.c        **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
4980:.\ff.c        **** #else
4981:.\ff.c        **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
4982:.\ff.c        **** #endif
4983:.\ff.c        **** #endif
4984:.\ff.c        **** #endif
4985:.\ff.c        **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
4986:.\ff.c        **** 					LEAVE_FF(fs, FR_INVALID_NAME);
4987:.\ff.c        **** 				}
4988:.\ff.c        **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
4989:.\ff.c        **** 				dirvn[j++] = (BYTE)w;
4990:.\ff.c        **** 			} while (i < slen);
4991:.\ff.c        **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
4992:.\ff.c        **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
4993:.\ff.c        **** 		}
4994:.\ff.c        **** 	}
4995:.\ff.c        **** 
4996:.\ff.c        **** 	/* Set volume label */
4997:.\ff.c        **** 	dj.obj.sclust = 0;		/* Open root directory */
4998:.\ff.c        **** 	res = dir_sdi(&dj, 0);
4999:.\ff.c        **** 	if (res == FR_OK) {
5000:.\ff.c        **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5001:.\ff.c        **** 		if (res == FR_OK) {
5002:.\ff.c        **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5003:.\ff.c        **** 				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
5004:.\ff.c        **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 104


5005:.\ff.c        **** 			} else {
5006:.\ff.c        **** 				if (slen) {
5007:.\ff.c        **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5008:.\ff.c        **** 				} else {
5009:.\ff.c        **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5010:.\ff.c        **** 				}
5011:.\ff.c        **** 			}
5012:.\ff.c        **** 			fs->wflag = 1;
5013:.\ff.c        **** 			res = sync_fs(fs);
5014:.\ff.c        **** 		} else {			/* No volume label entry is found or error */
5015:.\ff.c        **** 			if (res == FR_NO_FILE) {
5016:.\ff.c        **** 				res = FR_OK;
5017:.\ff.c        **** 				if (slen) {	/* Create a volume label entry */
5018:.\ff.c        **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5019:.\ff.c        **** 					if (res == FR_OK) {
5020:.\ff.c        **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5021:.\ff.c        **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5022:.\ff.c        **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5023:.\ff.c        **** 							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5024:.\ff.c        **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5025:.\ff.c        **** 						} else {
5026:.\ff.c        **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5027:.\ff.c        **** 							mem_cpy(dj.dir, dirvn, 11);
5028:.\ff.c        **** 						}
5029:.\ff.c        **** 						fs->wflag = 1;
5030:.\ff.c        **** 						res = sync_fs(fs);
5031:.\ff.c        **** 					}
5032:.\ff.c        **** 				}
5033:.\ff.c        **** 			}
5034:.\ff.c        **** 		}
5035:.\ff.c        **** 	}
5036:.\ff.c        **** 
5037:.\ff.c        **** 	LEAVE_FF(fs, res);
5038:.\ff.c        **** }
5039:.\ff.c        **** 
5040:.\ff.c        **** #endif /* !_FS_READONLY */
5041:.\ff.c        **** #endif /* _USE_LABEL */
5042:.\ff.c        **** 
5043:.\ff.c        **** 
5044:.\ff.c        **** 
5045:.\ff.c        **** #if _USE_EXPAND && !_FS_READONLY
5046:.\ff.c        **** /*-----------------------------------------------------------------------*/
5047:.\ff.c        **** /* Allocate a Contiguous Blocks to the File                              */
5048:.\ff.c        **** /*-----------------------------------------------------------------------*/
5049:.\ff.c        **** 
5050:.\ff.c        **** FRESULT f_expand (
5051:.\ff.c        **** 	FIL* fp,		/* Pointer to the file object */
5052:.\ff.c        **** 	FSIZE_t fsz,	/* File size to be expanded to */
5053:.\ff.c        **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5054:.\ff.c        **** )
5055:.\ff.c        **** {
5056:.\ff.c        **** 	FRESULT res;
5057:.\ff.c        **** 	FATFS *fs;
5058:.\ff.c        **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5059:.\ff.c        **** 
5060:.\ff.c        **** 
5061:.\ff.c        **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 105


5062:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5063:.\ff.c        **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5064:.\ff.c        **** #if _FS_EXFAT
5065:.\ff.c        **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5066:.\ff.c        **** #endif
5067:.\ff.c        **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5068:.\ff.c        **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5069:.\ff.c        **** 	stcl = fs->last_clst; lclst = 0;
5070:.\ff.c        **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5071:.\ff.c        **** 
5072:.\ff.c        **** #if _FS_EXFAT
5073:.\ff.c        **** 	if (fs->fs_type == FS_EXFAT) {
5074:.\ff.c        **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5075:.\ff.c        **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5076:.\ff.c        **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5077:.\ff.c        **** 		if (res == FR_OK) {
5078:.\ff.c        **** 			if (opt) {
5079:.\ff.c        **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5080:.\ff.c        **** 				lclst = scl + tcl - 1;
5081:.\ff.c        **** 			} else {
5082:.\ff.c        **** 				lclst = scl - 1;
5083:.\ff.c        **** 			}
5084:.\ff.c        **** 		}
5085:.\ff.c        **** 	} else
5086:.\ff.c        **** #endif
5087:.\ff.c        **** 	{
5088:.\ff.c        **** 		scl = clst = stcl; ncl = 0;
5089:.\ff.c        **** 		for (;;) {	/* Find a contiguous cluster block */
5090:.\ff.c        **** 			n = get_fat(&fp->obj, clst);
5091:.\ff.c        **** 			if (++clst >= fs->n_fatent) clst = 2;
5092:.\ff.c        **** 			if (n == 1) { res = FR_INT_ERR; break; }
5093:.\ff.c        **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5094:.\ff.c        **** 			if (n == 0) {	/* Is it a free cluster? */
5095:.\ff.c        **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5096:.\ff.c        **** 			} else {
5097:.\ff.c        **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5098:.\ff.c        **** 			}
5099:.\ff.c        **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5100:.\ff.c        **** 		}
5101:.\ff.c        **** 		if (res == FR_OK) {
5102:.\ff.c        **** 			if (opt) {
5103:.\ff.c        **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5104:.\ff.c        **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5105:.\ff.c        **** 					if (res != FR_OK) break;
5106:.\ff.c        **** 					lclst = clst;
5107:.\ff.c        **** 				}
5108:.\ff.c        **** 			} else {
5109:.\ff.c        **** 				lclst = scl - 1;
5110:.\ff.c        **** 			}
5111:.\ff.c        **** 		}
5112:.\ff.c        **** 	}
5113:.\ff.c        **** 
5114:.\ff.c        **** 	if (res == FR_OK) {
5115:.\ff.c        **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5116:.\ff.c        **** 		if (opt) {
5117:.\ff.c        **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5118:.\ff.c        **** 			fp->obj.objsize = fsz;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 106


5119:.\ff.c        **** 			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5120:.\ff.c        **** 			fp->flag |= FA_MODIFIED;
5121:.\ff.c        **** 			if (fs->free_clst  < fs->n_fatent - 2) {	/* Update FSINFO */
5122:.\ff.c        **** 				fs->free_clst -= tcl;
5123:.\ff.c        **** 				fs->fsi_flag |= 1;
5124:.\ff.c        **** 			}
5125:.\ff.c        **** 		}
5126:.\ff.c        **** 	}
5127:.\ff.c        **** 
5128:.\ff.c        **** 	LEAVE_FF(fs, res);
5129:.\ff.c        **** }
5130:.\ff.c        **** 
5131:.\ff.c        **** #endif /* _USE_EXPAND && !_FS_READONLY */
5132:.\ff.c        **** 
5133:.\ff.c        **** 
5134:.\ff.c        **** 
5135:.\ff.c        **** #if _USE_FORWARD
5136:.\ff.c        **** /*-----------------------------------------------------------------------*/
5137:.\ff.c        **** /* Forward data to the stream directly                                   */
5138:.\ff.c        **** /*-----------------------------------------------------------------------*/
5139:.\ff.c        **** 
5140:.\ff.c        **** FRESULT f_forward (
5141:.\ff.c        **** 	FIL* fp, 						/* Pointer to the file object */
5142:.\ff.c        **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5143:.\ff.c        **** 	UINT btf,						/* Number of bytes to forward */
5144:.\ff.c        **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5145:.\ff.c        **** )
5146:.\ff.c        **** {
5147:.\ff.c        **** 	FRESULT res;
5148:.\ff.c        **** 	FATFS *fs;
5149:.\ff.c        **** 	DWORD clst, sect;
5150:.\ff.c        **** 	FSIZE_t remain;
5151:.\ff.c        **** 	UINT rcnt, csect;
5152:.\ff.c        **** 	BYTE *dbuf;
5153:.\ff.c        **** 
5154:.\ff.c        **** 
5155:.\ff.c        **** 	*bf = 0;	/* Clear transfer byte counter */
5156:.\ff.c        **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5157:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5158:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5159:.\ff.c        **** 
5160:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
5161:.\ff.c        **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5162:.\ff.c        **** 
5163:.\ff.c        **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5164:.\ff.c        **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5165:.\ff.c        **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5166:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5167:.\ff.c        **** 			if (csect == 0) {						/* On the cluster boundary? */
5168:.\ff.c        **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5169:.\ff.c        **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5170:.\ff.c        **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5171:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5172:.\ff.c        **** 				fp->clust = clst;					/* Update current cluster */
5173:.\ff.c        **** 			}
5174:.\ff.c        **** 		}
5175:.\ff.c        **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 107


5176:.\ff.c        **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5177:.\ff.c        **** 		sect += csect;
5178:.\ff.c        **** #if _FS_TINY
5179:.\ff.c        **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5180:.\ff.c        **** 		dbuf = fs->win;
5181:.\ff.c        **** #else
5182:.\ff.c        **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5183:.\ff.c        **** #if !_FS_READONLY
5184:.\ff.c        **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5185:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5186:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
5187:.\ff.c        **** 			}
5188:.\ff.c        **** #endif
5189:.\ff.c        **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5190:.\ff.c        **** 		}
5191:.\ff.c        **** 		dbuf = fp->buf;
5192:.\ff.c        **** #endif
5193:.\ff.c        **** 		fp->sect = sect;
5194:.\ff.c        **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5195:.\ff.c        **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5196:.\ff.c        **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5197:.\ff.c        **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5198:.\ff.c        **** 	}
5199:.\ff.c        **** 
5200:.\ff.c        **** 	LEAVE_FF(fs, FR_OK);
5201:.\ff.c        **** }
5202:.\ff.c        **** #endif /* _USE_FORWARD */
5203:.\ff.c        **** 
5204:.\ff.c        **** 
5205:.\ff.c        **** 
5206:.\ff.c        **** #if _USE_MKFS && !_FS_READONLY
5207:.\ff.c        **** /*-----------------------------------------------------------------------*/
5208:.\ff.c        **** /* Create FAT file system on the logical drive                           */
5209:.\ff.c        **** /*-----------------------------------------------------------------------*/
5210:.\ff.c        **** 
5211:.\ff.c        **** FRESULT f_mkfs (
5212:.\ff.c        **** 	const TCHAR* path,	/* Logical drive number */
5213:.\ff.c        **** 	BYTE opt,			/* Format option */
5214:.\ff.c        **** 	DWORD au,			/* Size of allocation unit [byte] */
5215:.\ff.c        **** 	void* work,			/* Pointer to working buffer */
5216:.\ff.c        **** 	UINT len			/* Size of working buffer */
5217:.\ff.c        **** )
5218:.\ff.c        **** {
5219:.\ff.c        **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
5220:.\ff.c        **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
5221:.\ff.c        **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5222:.\ff.c        **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5223:.\ff.c        **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5224:.\ff.c        **** 	WORD ss;
5225:.\ff.c        **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5226:.\ff.c        **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5227:.\ff.c        **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5228:.\ff.c        **** 	UINT i;
5229:.\ff.c        **** 	int vol;
5230:.\ff.c        **** 	DSTATUS stat;
5231:.\ff.c        **** #if _USE_TRIM || _FS_EXFAT
5232:.\ff.c        **** 	DWORD tbl[3];
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 108


5233:.\ff.c        **** #endif
5234:.\ff.c        **** 
5235:.\ff.c        **** 
5236:.\ff.c        **** 	/* Check mounted drive and clear work area */
5237:.\ff.c        **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5238:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
5239:.\ff.c        **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
5240:.\ff.c        **** 	pdrv = LD2PD(vol);	/* Physical drive */
5241:.\ff.c        **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5242:.\ff.c        **** 
5243:.\ff.c        **** 	/* Check physical drive status */
5244:.\ff.c        **** 	stat = disk_initialize(pdrv);
5245:.\ff.c        **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5246:.\ff.c        **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5247:.\ff.c        **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5248:.\ff.c        **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium */
5249:.\ff.c        **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5250:.\ff.c        **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5251:.\ff.c        **** #else
5252:.\ff.c        **** 	ss = _MAX_SS;
5253:.\ff.c        **** #endif
5254:.\ff.c        **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5255:.\ff.c        **** 	au /= ss;	/* Cluster size in unit of sector */
5256:.\ff.c        **** 
5257:.\ff.c        **** 	/* Get working buffer */
5258:.\ff.c        **** 	buf = (BYTE*)work;		/* Working buffer */
5259:.\ff.c        **** 	sz_buf = len / ss;		/* Size of working buffer (sector) */
5260:.\ff.c        **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5261:.\ff.c        **** 	if (!szb_buf) return FR_MKFS_ABORTED;
5262:.\ff.c        **** 
5263:.\ff.c        **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5264:.\ff.c        **** 	if (_MULTI_PARTITION && part != 0) {
5265:.\ff.c        **** 		/* Get partition information from partition table in the MBR */
5266:.\ff.c        **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5267:.\ff.c        **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check if MBR is valid */
5268:.\ff.c        **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5269:.\ff.c        **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5270:.\ff.c        **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5271:.\ff.c        **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5272:.\ff.c        **** 	} else {
5273:.\ff.c        **** 		/* Create a single-partition in this function */
5274:.\ff.c        **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
5275:.\ff.c        **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5276:.\ff.c        **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
5277:.\ff.c        **** 		sz_vol -= b_vol;						/* Volume size */
5278:.\ff.c        **** 	}
5279:.\ff.c        **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
5280:.\ff.c        **** 
5281:.\ff.c        **** 	/* Pre-determine the FAT type */
5282:.\ff.c        **** 	do {
5283:.\ff.c        **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5284:.\ff.c        **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5285:.\ff.c        **** 				fmt = FS_EXFAT; break;
5286:.\ff.c        **** 			}
5287:.\ff.c        **** 		}
5288:.\ff.c        **** 		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
5289:.\ff.c        **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 109


5290:.\ff.c        **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5291:.\ff.c        **** 				fmt = FS_FAT32; break;
5292:.\ff.c        **** 			}
5293:.\ff.c        **** 		}
5294:.\ff.c        **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
5295:.\ff.c        **** 		fmt = FS_FAT16;
5296:.\ff.c        **** 	} while (0);
5297:.\ff.c        **** 
5298:.\ff.c        **** #if _FS_EXFAT
5299:.\ff.c        **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5300:.\ff.c        **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5301:.\ff.c        **** 		WCHAR ch, si;
5302:.\ff.c        **** 		UINT j, st;
5303:.\ff.c        **** 		BYTE b;
5304:.\ff.c        **** 
5305:.\ff.c        **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5306:.\ff.c        **** #if _USE_TRIM
5307:.\ff.c        **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5308:.\ff.c        **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5309:.\ff.c        **** #endif
5310:.\ff.c        **** 		/* Determine FAT location, data location and number of clusters */
5311:.\ff.c        **** 		if (!au) {	/* au auto-selection */
5312:.\ff.c        **** 			au = 8;
5313:.\ff.c        **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5314:.\ff.c        **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5315:.\ff.c        **** 		}
5316:.\ff.c        **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5317:.\ff.c        **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5318:.\ff.c        **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5319:.\ff.c        **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5320:.\ff.c        **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5321:.\ff.c        **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5322:.\ff.c        **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5323:.\ff.c        **** 
5324:.\ff.c        **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5325:.\ff.c        **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5326:.\ff.c        **** 
5327:.\ff.c        **** 		/* Create a compressed up-case table */
5328:.\ff.c        **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5329:.\ff.c        **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5330:.\ff.c        **** 		st = si = i = j = szb_case = 0;
5331:.\ff.c        **** 		do {
5332:.\ff.c        **** 			switch (st) {
5333:.\ff.c        **** 			case 0:
5334:.\ff.c        **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5335:.\ff.c        **** 				if (ch != si) {
5336:.\ff.c        **** 					si++; break;		/* Store the up-case char if exist */
5337:.\ff.c        **** 				}
5338:.\ff.c        **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5339:.\ff.c        **** 				if (j >= 128) {
5340:.\ff.c        **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5341:.\ff.c        **** 				}
5342:.\ff.c        **** 				st = 1;			/* Do not compress short run */
5343:.\ff.c        **** 				/* continue */
5344:.\ff.c        **** 			case 1:
5345:.\ff.c        **** 				ch = si++;		/* Fill the short run */
5346:.\ff.c        **** 				if (--j == 0) st = 0;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 110


5347:.\ff.c        **** 				break;
5348:.\ff.c        **** 			default:
5349:.\ff.c        **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
5350:.\ff.c        **** 				st = 0;
5351:.\ff.c        **** 			}
5352:.\ff.c        **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5353:.\ff.c        **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5354:.\ff.c        **** 			i += 2; szb_case += 2;
5355:.\ff.c        **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5356:.\ff.c        **** 				n = (i + ss - 1) / ss;
5357:.\ff.c        **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5358:.\ff.c        **** 				sect += n; i = 0;
5359:.\ff.c        **** 			}
5360:.\ff.c        **** 		} while (si);
5361:.\ff.c        **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5362:.\ff.c        **** 		tbl[2] = 1;										/* Number of root dir clusters */
5363:.\ff.c        **** 
5364:.\ff.c        **** 		/* Initialize the allocation bitmap */
5365:.\ff.c        **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
5366:.\ff.c        **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5367:.\ff.c        **** 		do {
5368:.\ff.c        **** 			mem_set(buf, 0, szb_buf);
5369:.\ff.c        **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5370:.\ff.c        **** 			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5371:.\ff.c        **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5372:.\ff.c        **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5373:.\ff.c        **** 			sect += n; nsect -= n;
5374:.\ff.c        **** 		} while (nsect);
5375:.\ff.c        **** 
5376:.\ff.c        **** 		/* Initialize the FAT */
5377:.\ff.c        **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5378:.\ff.c        **** 		j = nb = cl = 0;
5379:.\ff.c        **** 		do {
5380:.\ff.c        **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5381:.\ff.c        **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5382:.\ff.c        **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5383:.\ff.c        **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5384:.\ff.c        **** 			}
5385:.\ff.c        **** 			do {			/* Create chains of bitmap, up-case and root dir */
5386:.\ff.c        **** 				while (nb && i < szb_buf) {			/* Create a chain */
5387:.\ff.c        **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5388:.\ff.c        **** 					i += 4; cl++; nb--;
5389:.\ff.c        **** 				}
5390:.\ff.c        **** 				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
5391:.\ff.c        **** 			} while (nb && i < szb_buf);
5392:.\ff.c        **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5393:.\ff.c        **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5394:.\ff.c        **** 			sect += n; nsect -= n;
5395:.\ff.c        **** 		} while (nsect);
5396:.\ff.c        **** 
5397:.\ff.c        **** 		/* Initialize the root directory */
5398:.\ff.c        **** 		mem_set(buf, 0, szb_buf);
5399:.\ff.c        **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5400:.\ff.c        **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5401:.\ff.c        **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5402:.\ff.c        **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5403:.\ff.c        **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 111


5404:.\ff.c        **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
5405:.\ff.c        **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5406:.\ff.c        **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
5407:.\ff.c        **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5408:.\ff.c        **** 		do {	/* Fill root directory sectors */
5409:.\ff.c        **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5410:.\ff.c        **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5411:.\ff.c        **** 			mem_set(buf, 0, ss);
5412:.\ff.c        **** 			sect += n; nsect -= n;
5413:.\ff.c        **** 		} while (nsect);
5414:.\ff.c        **** 
5415:.\ff.c        **** 		/* Create two set of the exFAT VBR blocks */
5416:.\ff.c        **** 		sect = b_vol;
5417:.\ff.c        **** 		for (n = 0; n < 2; n++) {
5418:.\ff.c        **** 			/* Main record (+0) */
5419:.\ff.c        **** 			mem_set(buf, 0, ss);
5420:.\ff.c        **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5421:.\ff.c        **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5422:.\ff.c        **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5423:.\ff.c        **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5424:.\ff.c        **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5425:.\ff.c        **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5426:.\ff.c        **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5427:.\ff.c        **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5428:.\ff.c        **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5429:.\ff.c        **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
5430:.\ff.c        **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5431:.\ff.c        **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5432:.\ff.c        **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5433:.\ff.c        **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5434:.\ff.c        **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5435:.\ff.c        **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5436:.\ff.c        **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5437:.\ff.c        **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5438:.\ff.c        **** 			}
5439:.\ff.c        **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5440:.\ff.c        **** 			/* Extended bootstrap record (+1..+8) */
5441:.\ff.c        **** 			mem_set(buf, 0, ss);
5442:.\ff.c        **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5443:.\ff.c        **** 			for (j = 1; j < 9; j++) {
5444:.\ff.c        **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5445:.\ff.c        **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5446:.\ff.c        **** 			}
5447:.\ff.c        **** 			/* OEM/Reserved record (+9..+10) */
5448:.\ff.c        **** 			mem_set(buf, 0, ss);
5449:.\ff.c        **** 			for ( ; j < 11; j++) {
5450:.\ff.c        **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5451:.\ff.c        **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5452:.\ff.c        **** 			}
5453:.\ff.c        **** 			/* Sum record (+11) */
5454:.\ff.c        **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5455:.\ff.c        **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5456:.\ff.c        **** 		}
5457:.\ff.c        **** 
5458:.\ff.c        **** 	} else
5459:.\ff.c        **** #endif	/* _FS_EXFAT */
5460:.\ff.c        **** 	{	/* Create an FAT12/16/32 volume */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 112


5461:.\ff.c        **** 		do {
5462:.\ff.c        **** 			pau = au;
5463:.\ff.c        **** 			/* Pre-determine number of clusters and FAT sub-type */
5464:.\ff.c        **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5465:.\ff.c        **** 				if (!pau) {	/* au auto-selection */
5466:.\ff.c        **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5467:.\ff.c        **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5468:.\ff.c        **** 				}
5469:.\ff.c        **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5470:.\ff.c        **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5471:.\ff.c        **** 				sz_rsv = 32;	/* Number of reserved sectors */
5472:.\ff.c        **** 				sz_dir = 0;		/* No static directory */
5473:.\ff.c        **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
5474:.\ff.c        **** 			} else {				/* FAT12/16 volume */
5475:.\ff.c        **** 				if (!pau) {	/* au auto-selection */
5476:.\ff.c        **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5477:.\ff.c        **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5478:.\ff.c        **** 				}
5479:.\ff.c        **** 				n_clst = sz_vol / pau;
5480:.\ff.c        **** 				if (n_clst > MAX_FAT12) {
5481:.\ff.c        **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5482:.\ff.c        **** 				} else {
5483:.\ff.c        **** 					fmt = FS_FAT12;
5484:.\ff.c        **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5485:.\ff.c        **** 				}
5486:.\ff.c        **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5487:.\ff.c        **** 				sz_rsv = 1;						/* Number of reserved sectors */
5488:.\ff.c        **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5489:.\ff.c        **** 			}
5490:.\ff.c        **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5491:.\ff.c        **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5492:.\ff.c        **** 
5493:.\ff.c        **** 			/* Align data base to erase block boundary (for flash memory media) */
5494:.\ff.c        **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5495:.\ff.c        **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5496:.\ff.c        **** 				sz_rsv += n; b_fat += n;
5497:.\ff.c        **** 			} else {					/* FAT12/16: Expand FAT size */
5498:.\ff.c        **** 				sz_fat += n / n_fats;
5499:.\ff.c        **** 			}
5500:.\ff.c        **** 
5501:.\ff.c        **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5502:.\ff.c        **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
5503:.\ff.c        **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5504:.\ff.c        **** 			if (fmt == FS_FAT32) {
5505:.\ff.c        **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5506:.\ff.c        **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5507:.\ff.c        **** 					return FR_MKFS_ABORTED;
5508:.\ff.c        **** 				}
5509:.\ff.c        **** 			}
5510:.\ff.c        **** 			if (fmt == FS_FAT16) {
5511:.\ff.c        **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5512:.\ff.c        **** 					if (!au && (pau * 2) <= 64) {
5513:.\ff.c        **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5514:.\ff.c        **** 					}
5515:.\ff.c        **** 					if ((opt & FM_FAT32)) {
5516:.\ff.c        **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5517:.\ff.c        **** 					}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 113


5518:.\ff.c        **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5519:.\ff.c        **** 					return FR_MKFS_ABORTED;
5520:.\ff.c        **** 				}
5521:.\ff.c        **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5522:.\ff.c        **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5523:.\ff.c        **** 					return FR_MKFS_ABORTED;
5524:.\ff.c        **** 				}
5525:.\ff.c        **** 			}
5526:.\ff.c        **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
5527:.\ff.c        **** 
5528:.\ff.c        **** 			/* Ok, it is the valid cluster configuration */
5529:.\ff.c        **** 			break;
5530:.\ff.c        **** 		} while (1);
5531:.\ff.c        **** 
5532:.\ff.c        **** #if _USE_TRIM
5533:.\ff.c        **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5534:.\ff.c        **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5535:.\ff.c        **** #endif
5536:.\ff.c        **** 		/* Create FAT VBR */
5537:.\ff.c        **** 		mem_set(buf, 0, ss);
5538:.\ff.c        **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5539:.\ff.c        **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5540:.\ff.c        **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5541:.\ff.c        **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5542:.\ff.c        **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5543:.\ff.c        **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5544:.\ff.c        **** 		if (sz_vol < 0x10000) {
5545:.\ff.c        **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5546:.\ff.c        **** 		} else {
5547:.\ff.c        **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5548:.\ff.c        **** 		}
5549:.\ff.c        **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5550:.\ff.c        **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5551:.\ff.c        **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5552:.\ff.c        **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5553:.\ff.c        **** 		if (fmt == FS_FAT32) {
5554:.\ff.c        **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5555:.\ff.c        **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5556:.\ff.c        **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5557:.\ff.c        **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5558:.\ff.c        **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5559:.\ff.c        **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5560:.\ff.c        **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5561:.\ff.c        **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5562:.\ff.c        **** 		} else {
5563:.\ff.c        **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5564:.\ff.c        **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5565:.\ff.c        **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5566:.\ff.c        **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5567:.\ff.c        **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5568:.\ff.c        **** 		}
5569:.\ff.c        **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5570:.\ff.c        **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
5571:.\ff.c        **** 
5572:.\ff.c        **** 		/* Create FSINFO record if needed */
5573:.\ff.c        **** 		if (fmt == FS_FAT32) {
5574:.\ff.c        **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 114


5575:.\ff.c        **** 			mem_set(buf, 0, ss);
5576:.\ff.c        **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5577:.\ff.c        **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5578:.\ff.c        **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5579:.\ff.c        **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5580:.\ff.c        **** 			st_word(buf + BS_55AA, 0xAA55);
5581:.\ff.c        **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5582:.\ff.c        **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5583:.\ff.c        **** 		}
5584:.\ff.c        **** 
5585:.\ff.c        **** 		/* Initialize FAT area */
5586:.\ff.c        **** 		mem_set(buf, 0, (UINT)szb_buf);
5587:.\ff.c        **** 		sect = b_fat;		/* FAT start sector */
5588:.\ff.c        **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5589:.\ff.c        **** 			if (fmt == FS_FAT32) {
5590:.\ff.c        **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5591:.\ff.c        **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5592:.\ff.c        **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5593:.\ff.c        **** 			} else {
5594:.\ff.c        **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5595:.\ff.c        **** 			}
5596:.\ff.c        **** 			nsect = sz_fat;		/* Number of FAT sectors */
5597:.\ff.c        **** 			do {	/* Fill FAT sectors */
5598:.\ff.c        **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5599:.\ff.c        **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5600:.\ff.c        **** 				mem_set(buf, 0, ss);
5601:.\ff.c        **** 				sect += n; nsect -= n;
5602:.\ff.c        **** 			} while (nsect);
5603:.\ff.c        **** 		}
5604:.\ff.c        **** 
5605:.\ff.c        **** 		/* Initialize root directory (fill with zero) */
5606:.\ff.c        **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5607:.\ff.c        **** 		do {
5608:.\ff.c        **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5609:.\ff.c        **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5610:.\ff.c        **** 			sect += n; nsect -= n;
5611:.\ff.c        **** 		} while (nsect);
5612:.\ff.c        **** 	}
5613:.\ff.c        **** 
5614:.\ff.c        **** 	/* Determine system ID in the partition table */
5615:.\ff.c        **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5616:.\ff.c        **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5617:.\ff.c        **** 	} else {
5618:.\ff.c        **** 		if (fmt == FS_FAT32) {
5619:.\ff.c        **** 			sys = 0x0C;		/* FAT32X */
5620:.\ff.c        **** 		} else {
5621:.\ff.c        **** 			if (sz_vol >= 0x10000) {
5622:.\ff.c        **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
5623:.\ff.c        **** 			} else {
5624:.\ff.c        **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
5625:.\ff.c        **** 			}
5626:.\ff.c        **** 		}
5627:.\ff.c        **** 	}
5628:.\ff.c        **** 
5629:.\ff.c        **** 	if (_MULTI_PARTITION && part != 0) {
5630:.\ff.c        **** 		/* Update system ID in the partition table */
5631:.\ff.c        **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 115


5632:.\ff.c        **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
5633:.\ff.c        **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
5634:.\ff.c        **** 	} else {
5635:.\ff.c        **** 		if (!(opt & FM_SFD)) {
5636:.\ff.c        **** 			/* Create partition table in FDISK format */
5637:.\ff.c        **** 			mem_set(buf, 0, ss);
5638:.\ff.c        **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5639:.\ff.c        **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5640:.\ff.c        **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5641:.\ff.c        **** 			pte[PTE_StHead] = 1;				/* Start head */
5642:.\ff.c        **** 			pte[PTE_StSec] = 1;					/* Start sector */
5643:.\ff.c        **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5644:.\ff.c        **** 			pte[PTE_System] = sys;				/* System type */
5645:.\ff.c        **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
5646:.\ff.c        **** 			pte[PTE_EdHead] = 254;				/* End head */
5647:.\ff.c        **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
5648:.\ff.c        **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5649:.\ff.c        **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5650:.\ff.c        **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5651:.\ff.c        **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5652:.\ff.c        **** 		}
5653:.\ff.c        **** 	}
5654:.\ff.c        **** 
5655:.\ff.c        **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
5656:.\ff.c        **** 
5657:.\ff.c        **** 	return FR_OK;
5658:.\ff.c        **** }
5659:.\ff.c        **** 
5660:.\ff.c        **** 
5661:.\ff.c        **** 
5662:.\ff.c        **** #if _MULTI_PARTITION
5663:.\ff.c        **** /*-----------------------------------------------------------------------*/
5664:.\ff.c        **** /* Create partition table on the physical drive                          */
5665:.\ff.c        **** /*-----------------------------------------------------------------------*/
5666:.\ff.c        **** 
5667:.\ff.c        **** FRESULT f_fdisk (
5668:.\ff.c        **** 	BYTE pdrv,			/* Physical drive number */
5669:.\ff.c        **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5670:.\ff.c        **** 	void* work			/* Pointer to the working buffer */
5671:.\ff.c        **** )
5672:.\ff.c        **** {
5673:.\ff.c        **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5674:.\ff.c        **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5675:.\ff.c        **** 	DSTATUS stat;
5676:.\ff.c        **** 	DWORD sz_disk, sz_part, s_part;
5677:.\ff.c        **** 
5678:.\ff.c        **** 
5679:.\ff.c        **** 	stat = disk_initialize(pdrv);
5680:.\ff.c        **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5681:.\ff.c        **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5682:.\ff.c        **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5683:.\ff.c        **** 
5684:.\ff.c        **** 	/* Determine the CHS without any care of the drive geometry */
5685:.\ff.c        **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5686:.\ff.c        **** 	if (n == 256) n--;
5687:.\ff.c        **** 	e_hd = n - 1;
5688:.\ff.c        **** 	sz_cyl = 63 * n;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 116


5689:.\ff.c        **** 	tot_cyl = sz_disk / sz_cyl;
5690:.\ff.c        **** 
5691:.\ff.c        **** 	/* Create partition table */
5692:.\ff.c        **** 	mem_set(buf, 0, _MAX_SS);
5693:.\ff.c        **** 	p = buf + MBR_Table; b_cyl = 0;
5694:.\ff.c        **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5695:.\ff.c        **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
5696:.\ff.c        **** 		if (!p_cyl) continue;
5697:.\ff.c        **** 		s_part = (DWORD)sz_cyl * b_cyl;
5698:.\ff.c        **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5699:.\ff.c        **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5700:.\ff.c        **** 			s_hd = 1;
5701:.\ff.c        **** 			s_part += 63; sz_part -= 63;
5702:.\ff.c        **** 		} else {
5703:.\ff.c        **** 			s_hd = 0;
5704:.\ff.c        **** 		}
5705:.\ff.c        **** 		e_cyl = b_cyl + p_cyl - 1;
5706:.\ff.c        **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5707:.\ff.c        **** 
5708:.\ff.c        **** 		/* Set partition table */
5709:.\ff.c        **** 		p[1] = s_hd;						/* Start head */
5710:.\ff.c        **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
5711:.\ff.c        **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5712:.\ff.c        **** 		p[4] = 0x06;						/* System type (temporary setting) */
5713:.\ff.c        **** 		p[5] = e_hd;						/* End head */
5714:.\ff.c        **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
5715:.\ff.c        **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5716:.\ff.c        **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5717:.\ff.c        **** 		st_dword(p + 12, sz_part);			/* Partition size */
5718:.\ff.c        **** 
5719:.\ff.c        **** 		/* Next partition */
5720:.\ff.c        **** 		b_cyl += p_cyl;
5721:.\ff.c        **** 	}
5722:.\ff.c        **** 	st_word(p, 0xAA55);
5723:.\ff.c        **** 
5724:.\ff.c        **** 	/* Write it to the MBR */
5725:.\ff.c        **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5726:.\ff.c        **** }
5727:.\ff.c        **** 
5728:.\ff.c        **** #endif /* _MULTI_PARTITION */
5729:.\ff.c        **** #endif /* _USE_MKFS && !_FS_READONLY */
5730:.\ff.c        **** 
5731:.\ff.c        **** 
5732:.\ff.c        **** 
5733:.\ff.c        **** 
5734:.\ff.c        **** #if _USE_STRFUNC
5735:.\ff.c        **** /*-----------------------------------------------------------------------*/
5736:.\ff.c        **** /* Get a string from the file                                            */
5737:.\ff.c        **** /*-----------------------------------------------------------------------*/
5738:.\ff.c        **** 
5739:.\ff.c        **** TCHAR* f_gets (
5740:.\ff.c        **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5741:.\ff.c        **** 	int len,		/* Size of string buffer (characters) */
5742:.\ff.c        **** 	FIL* fp			/* Pointer to the file object */
5743:.\ff.c        **** )
5744:.\ff.c        **** {
5745:.\ff.c        **** 	int n = 0;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 117


5746:.\ff.c        **** 	TCHAR c, *p = buff;
5747:.\ff.c        **** 	BYTE s[2];
5748:.\ff.c        **** 	UINT rc;
5749:.\ff.c        **** 
5750:.\ff.c        **** 
5751:.\ff.c        **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
5752:.\ff.c        **** #if _LFN_UNICODE
5753:.\ff.c        **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5754:.\ff.c        **** 		f_read(fp, s, 1, &rc);
5755:.\ff.c        **** 		if (rc != 1) break;
5756:.\ff.c        **** 		c = s[0];
5757:.\ff.c        **** 		if (c >= 0x80) {
5758:.\ff.c        **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5759:.\ff.c        **** 			if (c < 0xE0) {			/* Two-byte sequence */
5760:.\ff.c        **** 				f_read(fp, s, 1, &rc);
5761:.\ff.c        **** 				if (rc != 1) break;
5762:.\ff.c        **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5763:.\ff.c        **** 				if (c < 0x80) c = '?';
5764:.\ff.c        **** 			} else {
5765:.\ff.c        **** 				if (c < 0xF0) {		/* Three-byte sequence */
5766:.\ff.c        **** 					f_read(fp, s, 2, &rc);
5767:.\ff.c        **** 					if (rc != 2) break;
5768:.\ff.c        **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5769:.\ff.c        **** 					if (c < 0x800) c = '?';
5770:.\ff.c        **** 				} else {			/* Reject four-byte sequence */
5771:.\ff.c        **** 					c = '?';
5772:.\ff.c        **** 				}
5773:.\ff.c        **** 			}
5774:.\ff.c        **** 		}
5775:.\ff.c        **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5776:.\ff.c        **** 		f_read(fp, s, 2, &rc);
5777:.\ff.c        **** 		if (rc != 2) break;
5778:.\ff.c        **** 		c = s[1] + (s[0] << 8);
5779:.\ff.c        **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5780:.\ff.c        **** 		f_read(fp, s, 2, &rc);
5781:.\ff.c        **** 		if (rc != 2) break;
5782:.\ff.c        **** 		c = s[0] + (s[1] << 8);
5783:.\ff.c        **** #else						/* Read a character in ANSI/OEM */
5784:.\ff.c        **** 		f_read(fp, s, 1, &rc);
5785:.\ff.c        **** 		if (rc != 1) break;
5786:.\ff.c        **** 		c = s[0];
5787:.\ff.c        **** 		if (IsDBCS1(c)) {
5788:.\ff.c        **** 			f_read(fp, s, 1, &rc);
5789:.\ff.c        **** 			if (rc != 1) break;
5790:.\ff.c        **** 			c = (c << 8) + s[0];
5791:.\ff.c        **** 		}
5792:.\ff.c        **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5793:.\ff.c        **** 		if (!c) c = '?';
5794:.\ff.c        **** #endif
5795:.\ff.c        **** #else						/* Read a character without conversion */
5796:.\ff.c        **** 		f_read(fp, s, 1, &rc);
5797:.\ff.c        **** 		if (rc != 1) break;
5798:.\ff.c        **** 		c = s[0];
5799:.\ff.c        **** #endif
5800:.\ff.c        **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
5801:.\ff.c        **** 		*p++ = c;
5802:.\ff.c        **** 		n++;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 118


5803:.\ff.c        **** 		if (c == '\n') break;		/* Break on EOL */
5804:.\ff.c        **** 	}
5805:.\ff.c        **** 	*p = 0;
5806:.\ff.c        **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
5807:.\ff.c        **** }
5808:.\ff.c        **** 
5809:.\ff.c        **** 
5810:.\ff.c        **** 
5811:.\ff.c        **** 
5812:.\ff.c        **** #if !_FS_READONLY
5813:.\ff.c        **** #include <stdarg.h>
5814:.\ff.c        **** /*-----------------------------------------------------------------------*/
5815:.\ff.c        **** /* Put a character to the file                                           */
5816:.\ff.c        **** /*-----------------------------------------------------------------------*/
5817:.\ff.c        **** 
5818:.\ff.c        **** typedef struct {
5819:.\ff.c        **** 	FIL *fp;		/* Ptr to the writing file */
5820:.\ff.c        **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
5821:.\ff.c        **** 	BYTE buf[64];	/* Write buffer */
5822:.\ff.c        **** } putbuff;
5823:.\ff.c        **** 
5824:.\ff.c        **** 
5825:.\ff.c        **** static
5826:.\ff.c        **** void putc_bfd (		/* Buffered write with code conversion */
5827:.\ff.c        **** 	putbuff* pb,
5828:.\ff.c        **** 	TCHAR c
5829:.\ff.c        **** )
5830:.\ff.c        **** {
5831:.\ff.c        **** 	UINT bw;
5832:.\ff.c        **** 	int i;
5833:.\ff.c        **** 
5834:.\ff.c        **** 
5835:.\ff.c        **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
5836:.\ff.c        **** 		putc_bfd(pb, '\r');
5837:.\ff.c        **** 	}
5838:.\ff.c        **** 
5839:.\ff.c        **** 	i = pb->idx;		/* Write index of pb->buf[] */
5840:.\ff.c        **** 	if (i < 0) return;
5841:.\ff.c        **** 
5842:.\ff.c        **** #if _LFN_UNICODE
5843:.\ff.c        **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5844:.\ff.c        **** 	if (c < 0x80) {				/* 7-bit */
5845:.\ff.c        **** 		pb->buf[i++] = (BYTE)c;
5846:.\ff.c        **** 	} else {
5847:.\ff.c        **** 		if (c < 0x800) {		/* 11-bit */
5848:.\ff.c        **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5849:.\ff.c        **** 		} else {				/* 16-bit */
5850:.\ff.c        **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5851:.\ff.c        **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5852:.\ff.c        **** 		}
5853:.\ff.c        **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5854:.\ff.c        **** 	}
5855:.\ff.c        **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5856:.\ff.c        **** 	pb->buf[i++] = (BYTE)(c >> 8);
5857:.\ff.c        **** 	pb->buf[i++] = (BYTE)c;
5858:.\ff.c        **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5859:.\ff.c        **** 	pb->buf[i++] = (BYTE)c;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 119


5860:.\ff.c        **** 	pb->buf[i++] = (BYTE)(c >> 8);
5861:.\ff.c        **** #else							/* Write a character in ANSI/OEM */
5862:.\ff.c        **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
5863:.\ff.c        **** 	if (!c) c = '?';
5864:.\ff.c        **** 	if (c >= 0x100)
5865:.\ff.c        **** 		pb->buf[i++] = (BYTE)(c >> 8);
5866:.\ff.c        **** 	pb->buf[i++] = (BYTE)c;
5867:.\ff.c        **** #endif
5868:.\ff.c        **** #else							/* Write a character without conversion */
5869:.\ff.c        **** 	pb->buf[i++] = (BYTE)c;
5870:.\ff.c        **** #endif
5871:.\ff.c        **** 
5872:.\ff.c        **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
5873:.\ff.c        **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
5874:.\ff.c        **** 		i = (bw == (UINT)i) ? 0 : -1;
5875:.\ff.c        **** 	}
5876:.\ff.c        **** 	pb->idx = i;
5877:.\ff.c        **** 	pb->nchr++;
5878:.\ff.c        **** }
5879:.\ff.c        **** 
5880:.\ff.c        **** 
5881:.\ff.c        **** static
5882:.\ff.c        **** int putc_flush (		/* Flush left characters in the buffer */
5883:.\ff.c        **** 	putbuff* pb
5884:.\ff.c        **** )
5885:.\ff.c        **** {
5886:.\ff.c        **** 	UINT nw;
5887:.\ff.c        **** 
5888:.\ff.c        **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
5889:.\ff.c        **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
5890:.\ff.c        **** 		&& (UINT)pb->idx == nw) return pb->nchr;
5891:.\ff.c        **** 	return EOF;
5892:.\ff.c        **** }
5893:.\ff.c        **** 
5894:.\ff.c        **** 
5895:.\ff.c        **** static
5896:.\ff.c        **** void putc_init (		/* Initialize write buffer */
5897:.\ff.c        **** 	putbuff* pb,
5898:.\ff.c        **** 	FIL* fp
5899:.\ff.c        **** )
5900:.\ff.c        **** {
 855              		.loc 1 5900 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL123:
5901:.\ff.c        **** 	pb->fp = fp;
 861              		.loc 1 5901 0
 862 0000 0160     		str	r1, [r0]
5902:.\ff.c        **** 	pb->nchr = pb->idx = 0;
 863              		.loc 1 5902 0
 864 0002 0023     		movs	r3, #0
 865 0004 4360     		str	r3, [r0, #4]
 866 0006 8360     		str	r3, [r0, #8]
 867 0008 7047     		bx	lr
 868              		.cfi_endproc
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 120


 869              	.LFE51:
 870              		.size	putc_init, .-putc_init
 871              		.section	.text.validate,"ax",%progbits
 872              		.align	2
 873              		.thumb
 874              		.thumb_func
 875              		.type	validate, %function
 876              	validate:
 877              	.LFB31:
3167:.\ff.c        **** 	FRESULT res;
 878              		.loc 1 3167 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL124:
 883 0000 38B5     		push	{r3, r4, r5, lr}
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 3, -16
 886              		.cfi_offset 4, -12
 887              		.cfi_offset 5, -8
 888              		.cfi_offset 14, -4
 889 0002 0C46     		mov	r4, r1
3171:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
 890              		.loc 1 3171 0
 891 0004 70B1     		cbz	r0, .L80
 892 0006 0546     		mov	r5, r0
3171:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
 893              		.loc 1 3171 0 is_stmt 0 discriminator 1
 894 0008 0368     		ldr	r3, [r0]
 895 000a 5BB1     		cbz	r3, .L80
3171:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
 896              		.loc 1 3171 0 discriminator 2
 897 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 898 000e 4AB1     		cbz	r2, .L80
3171:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
 899              		.loc 1 3171 0 discriminator 3
 900 0010 D988     		ldrh	r1, [r3, #6]
 901              	.LVL125:
 902 0012 8288     		ldrh	r2, [r0, #4]
 903 0014 9142     		cmp	r1, r2
 904 0016 05D1     		bne	.L80
3171:.\ff.c        **** 		*fs = 0;				/* The object is invalid */
 905              		.loc 1 3171 0 discriminator 4
 906 0018 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 907              	.LVL126:
 908 001a FFF7FEFF 		bl	disk_status
 909              	.LVL127:
 910 001e 10F0010F 		tst	r0, #1
 911 0022 03D0     		beq	.L81
 912              	.LVL128:
 913              	.L80:
3172:.\ff.c        **** 		res = FR_INVALID_OBJECT;
 914              		.loc 1 3172 0 is_stmt 1
 915 0024 0023     		movs	r3, #0
 916 0026 2360     		str	r3, [r4]
 917              	.LVL129:
3173:.\ff.c        **** 	} else {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 121


 918              		.loc 1 3173 0
 919 0028 0920     		movs	r0, #9
 920 002a 38BD     		pop	{r3, r4, r5, pc}
 921              	.LVL130:
 922              	.L81:
3175:.\ff.c        **** 		ENTER_FF(obj->fs);		/* Lock file system */
 923              		.loc 1 3175 0
 924 002c 2B68     		ldr	r3, [r5]
 925 002e 2360     		str	r3, [r4]
 926              	.LVL131:
3177:.\ff.c        **** 	}
 927              		.loc 1 3177 0
 928 0030 0020     		movs	r0, #0
 929              	.LVL132:
3180:.\ff.c        **** 
 930              		.loc 1 3180 0
 931 0032 38BD     		pop	{r3, r4, r5, pc}
 932              		.cfi_endproc
 933              	.LFE31:
 934              		.size	validate, .-validate
 935              		.section	.text.sync_window,"ax",%progbits
 936              		.align	2
 937              		.thumb
 938              		.thumb_func
 939              		.type	sync_window, %function
 940              	sync_window:
 941              	.LFB8:
 871:.\ff.c        **** 	DWORD wsect;
 942              		.loc 1 871 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 0
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 946              	.LVL133:
 947 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 948              		.cfi_def_cfa_offset 24
 949              		.cfi_offset 3, -24
 950              		.cfi_offset 4, -20
 951              		.cfi_offset 5, -16
 952              		.cfi_offset 6, -12
 953              		.cfi_offset 7, -8
 954              		.cfi_offset 14, -4
 955              	.LVL134:
 877:.\ff.c        **** 		wsect = fs->winsect;	/* Current sector number */
 956              		.loc 1 877 0
 957 0002 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 958 0004 03B3     		cbz	r3, .L88
 959 0006 0446     		mov	r4, r0
 878:.\ff.c        **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 960              		.loc 1 878 0
 961 0008 C66A     		ldr	r6, [r0, #44]
 962              	.LVL135:
 879:.\ff.c        **** 			res = FR_DISK_ERR;
 963              		.loc 1 879 0
 964 000a 00F13007 		add	r7, r0, #48
 965 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 966              	.LVL136:
 967 0010 3946     		mov	r1, r7
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 122


 968 0012 3246     		mov	r2, r6
 969 0014 0123     		movs	r3, #1
 970 0016 FFF7FEFF 		bl	disk_write
 971              	.LVL137:
 972 001a B8B9     		cbnz	r0, .L89
 882:.\ff.c        **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 973              		.loc 1 882 0
 974 001c 0023     		movs	r3, #0
 975 001e E370     		strb	r3, [r4, #3]
 883:.\ff.c        **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 976              		.loc 1 883 0
 977 0020 236A     		ldr	r3, [r4, #32]
 978 0022 F31A     		subs	r3, r6, r3
 979 0024 A269     		ldr	r2, [r4, #24]
 980 0026 9342     		cmp	r3, r2
 981 0028 12D2     		bcs	.L90
 884:.\ff.c        **** 					wsect += fs->fsize;
 982              		.loc 1 884 0
 983 002a A578     		ldrb	r5, [r4, #2]	@ zero_extendqisi2
 984              	.LVL138:
 985 002c 08E0     		b	.L86
 986              	.L87:
 885:.\ff.c        **** 					disk_write(fs->drv, fs->win, wsect, 1);
 987              		.loc 1 885 0 discriminator 3
 988 002e A369     		ldr	r3, [r4, #24]
 989 0030 1E44     		add	r6, r6, r3
 990              	.LVL139:
 886:.\ff.c        **** 				}
 991              		.loc 1 886 0 discriminator 3
 992 0032 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 993 0034 3946     		mov	r1, r7
 994 0036 3246     		mov	r2, r6
 995 0038 0123     		movs	r3, #1
 996 003a FFF7FEFF 		bl	disk_write
 997              	.LVL140:
 884:.\ff.c        **** 					wsect += fs->fsize;
 998              		.loc 1 884 0 discriminator 3
 999 003e 013D     		subs	r5, r5, #1
 1000              	.LVL141:
 1001              	.L86:
 884:.\ff.c        **** 					wsect += fs->fsize;
 1002              		.loc 1 884 0 is_stmt 0 discriminator 1
 1003 0040 012D     		cmp	r5, #1
 1004 0042 F4D8     		bhi	.L87
 874:.\ff.c        **** 
 1005              		.loc 1 874 0 is_stmt 1
 1006 0044 0020     		movs	r0, #0
 1007 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1008              	.LVL142:
 1009              	.L88:
 1010 0048 0020     		movs	r0, #0
 1011              	.LVL143:
 1012 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1013              	.LVL144:
 1014              	.L89:
 880:.\ff.c        **** 		} else {
 1015              		.loc 1 880 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 123


 1016 004c 0120     		movs	r0, #1
 1017 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1018              	.LVL145:
 1019              	.L90:
 874:.\ff.c        **** 
 1020              		.loc 1 874 0
 1021 0050 0020     		movs	r0, #0
 1022              	.LVL146:
 892:.\ff.c        **** #endif
 1023              		.loc 1 892 0
 1024 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1025              		.cfi_endproc
 1026              	.LFE8:
 1027              		.size	sync_window, .-sync_window
 1028              		.section	.text.move_window,"ax",%progbits
 1029              		.align	2
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	move_window, %function
 1033              	move_window:
 1034              	.LFB9:
 901:.\ff.c        **** 	FRESULT res = FR_OK;
 1035              		.loc 1 901 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              	.LVL147:
 1040 0000 70B5     		push	{r4, r5, r6, lr}
 1041              		.cfi_def_cfa_offset 16
 1042              		.cfi_offset 4, -16
 1043              		.cfi_offset 5, -12
 1044              		.cfi_offset 6, -8
 1045              		.cfi_offset 14, -4
 1046 0002 0446     		mov	r4, r0
 1047 0004 0D46     		mov	r5, r1
 1048              	.LVL148:
 905:.\ff.c        **** #if !_FS_READONLY
 1049              		.loc 1 905 0
 1050 0006 C36A     		ldr	r3, [r0, #44]
 1051 0008 8B42     		cmp	r3, r1
 1052 000a 10D0     		beq	.L95
 907:.\ff.c        **** #endif
 1053              		.loc 1 907 0
 1054 000c FFF7FEFF 		bl	sync_window
 1055              	.LVL149:
 909:.\ff.c        **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 1056              		.loc 1 909 0
 1057 0010 0646     		mov	r6, r0
 1058 0012 68B9     		cbnz	r0, .L93
 910:.\ff.c        **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1059              		.loc 1 910 0
 1060 0014 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1061              	.LVL150:
 1062 0016 04F13001 		add	r1, r4, #48
 1063 001a 2A46     		mov	r2, r5
 1064 001c 0123     		movs	r3, #1
 1065 001e FFF7FEFF 		bl	disk_read
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 124


 1066              	.LVL151:
 1067 0022 10B1     		cbz	r0, .L94
 912:.\ff.c        **** 			}
 1068              		.loc 1 912 0
 1069 0024 0126     		movs	r6, #1
 911:.\ff.c        **** 				res = FR_DISK_ERR;
 1070              		.loc 1 911 0
 1071 0026 4FF0FF35 		mov	r5, #-1
 1072              	.LVL152:
 1073              	.L94:
 914:.\ff.c        **** 		}
 1074              		.loc 1 914 0
 1075 002a E562     		str	r5, [r4, #44]
 1076 002c 00E0     		b	.L93
 1077              	.LVL153:
 1078              	.L95:
 902:.\ff.c        **** 
 1079              		.loc 1 902 0
 1080 002e 0026     		movs	r6, #0
 1081              	.LVL154:
 1082              	.L93:
 918:.\ff.c        **** 
 1083              		.loc 1 918 0
 1084 0030 3046     		mov	r0, r6
 1085 0032 70BD     		pop	{r4, r5, r6, pc}
 1086              		.cfi_endproc
 1087              	.LFE9:
 1088              		.size	move_window, .-move_window
 1089              		.section	.text.check_fs,"ax",%progbits
 1090              		.align	2
 1091              		.thumb
 1092              		.thumb_func
 1093              		.type	check_fs, %function
 1094              	check_fs:
 1095              	.LFB29:
2918:.\ff.c        **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 1096              		.loc 1 2918 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL155:
 1101 0000 10B5     		push	{r4, lr}
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 4, -8
 1104              		.cfi_offset 14, -4
 1105 0002 0446     		mov	r4, r0
2919:.\ff.c        **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 1106              		.loc 1 2919 0
 1107 0004 0023     		movs	r3, #0
 1108 0006 C370     		strb	r3, [r0, #3]
 1109 0008 4FF0FF33 		mov	r3, #-1
 1110 000c C362     		str	r3, [r0, #44]
2920:.\ff.c        **** 
 1111              		.loc 1 2920 0
 1112 000e FFF7FEFF 		bl	move_window
 1113              	.LVL156:
 1114 0012 18BB     		cbnz	r0, .L101
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 125


2922:.\ff.c        **** 
 1115              		.loc 1 2922 0
 1116 0014 04F22E20 		addw	r0, r4, #558
 1117 0018 FFF7FEFF 		bl	ld_word
 1118              	.LVL157:
 1119 001c 4AF65523 		movw	r3, #43605
 1120 0020 9842     		cmp	r0, r3
 1121 0022 1DD1     		bne	.L102
2924:.\ff.c        **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1122              		.loc 1 2924 0
 1123 0024 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 1124 0028 E92B     		cmp	r3, #233
 1125 002a 05D0     		beq	.L100
2924:.\ff.c        **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1126              		.loc 1 2924 0 is_stmt 0 discriminator 1
 1127 002c 236B     		ldr	r3, [r4, #48]
 1128 002e 03F0FF13 		and	r3, r3, #16711935
 1129 0032 0F4A     		ldr	r2, .L107
 1130 0034 9342     		cmp	r3, r2
 1131 0036 15D1     		bne	.L103
 1132              	.L100:
2925:.\ff.c        **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1133              		.loc 1 2925 0 is_stmt 1
 1134 0038 04F16600 		add	r0, r4, #102
 1135 003c FFF7FEFF 		bl	ld_dword
 1136              	.LVL158:
 1137 0040 20F07F40 		bic	r0, r0, #-16777216
 1138 0044 0B4B     		ldr	r3, .L107+4
 1139 0046 9842     		cmp	r0, r3
 1140 0048 0ED0     		beq	.L104
2926:.\ff.c        **** 	}
 1141              		.loc 1 2926 0
 1142 004a 04F18200 		add	r0, r4, #130
 1143 004e FFF7FEFF 		bl	ld_dword
 1144              	.LVL159:
 1145 0052 094B     		ldr	r3, .L107+8
 1146 0054 9842     		cmp	r0, r3
 1147 0056 09D0     		beq	.L105
2931:.\ff.c        **** }
 1148              		.loc 1 2931 0
 1149 0058 0220     		movs	r0, #2
 1150 005a 10BD     		pop	{r4, pc}
 1151              	.LVL160:
 1152              	.L101:
2920:.\ff.c        **** 
 1153              		.loc 1 2920 0
 1154 005c 0420     		movs	r0, #4
 1155 005e 10BD     		pop	{r4, pc}
 1156              	.LVL161:
 1157              	.L102:
2922:.\ff.c        **** 
 1158              		.loc 1 2922 0
 1159 0060 0320     		movs	r0, #3
 1160 0062 10BD     		pop	{r4, pc}
 1161              	.LVL162:
 1162              	.L103:
2931:.\ff.c        **** }
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 126


 1163              		.loc 1 2931 0
 1164 0064 0220     		movs	r0, #2
 1165 0066 10BD     		pop	{r4, pc}
 1166              	.LVL163:
 1167              	.L104:
2925:.\ff.c        **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1168              		.loc 1 2925 0
 1169 0068 0020     		movs	r0, #0
 1170 006a 10BD     		pop	{r4, pc}
 1171              	.LVL164:
 1172              	.L105:
2926:.\ff.c        **** 	}
 1173              		.loc 1 2926 0
 1174 006c 0020     		movs	r0, #0
2932:.\ff.c        **** 
 1175              		.loc 1 2932 0
 1176 006e 10BD     		pop	{r4, pc}
 1177              	.LVL165:
 1178              	.L108:
 1179              		.align	2
 1180              	.L107:
 1181 0070 EB009000 		.word	9437419
 1182 0074 46415400 		.word	5521734
 1183 0078 46415433 		.word	861159750
 1184              		.cfi_endproc
 1185              	.LFE29:
 1186              		.size	check_fs, .-check_fs
 1187              		.section	.text.find_volume,"ax",%progbits
 1188              		.align	2
 1189              		.thumb
 1190              		.thumb_func
 1191              		.type	find_volume, %function
 1192              	find_volume:
 1193              	.LFB30:
2947:.\ff.c        **** 	BYTE fmt, *pt;
 1194              		.loc 1 2947 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198              	.LVL166:
 1199 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1200              		.cfi_def_cfa_offset 32
 1201              		.cfi_offset 4, -32
 1202              		.cfi_offset 5, -28
 1203              		.cfi_offset 6, -24
 1204              		.cfi_offset 7, -20
 1205              		.cfi_offset 8, -16
 1206              		.cfi_offset 9, -12
 1207              		.cfi_offset 10, -8
 1208              		.cfi_offset 14, -4
 1209 0004 84B0     		sub	sp, sp, #16
 1210              		.cfi_def_cfa_offset 48
 1211 0006 0E46     		mov	r6, r1
 1212 0008 1746     		mov	r7, r2
2958:.\ff.c        **** 	vol = get_ldnumber(path);
 1213              		.loc 1 2958 0
 1214 000a 0023     		movs	r3, #0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 127


 1215 000c 0B60     		str	r3, [r1]
2959:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1216              		.loc 1 2959 0
 1217 000e FFF7FEFF 		bl	get_ldnumber
 1218              	.LVL167:
2960:.\ff.c        **** 
 1219              		.loc 1 2960 0
 1220 0012 051E     		subs	r5, r0, #0
 1221 0014 C0F22B81 		blt	.L128
2963:.\ff.c        **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1222              		.loc 1 2963 0
 1223 0018 AA4B     		ldr	r3, .L154
 1224 001a 53F82540 		ldr	r4, [r3, r5, lsl #2]
 1225              	.LVL168:
2964:.\ff.c        **** 
 1226              		.loc 1 2964 0
 1227 001e 002C     		cmp	r4, #0
 1228 0020 00F02781 		beq	.L129
2967:.\ff.c        **** 
 1229              		.loc 1 2967 0
 1230 0024 3460     		str	r4, [r6]
2969:.\ff.c        **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 1231              		.loc 1 2969 0
 1232 0026 07F0FE07 		and	r7, r7, #254
 1233              	.LVL169:
2970:.\ff.c        **** 		stat = disk_status(fs->drv);
 1234              		.loc 1 2970 0
 1235 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1236 002c 73B1     		cbz	r3, .L111
2971:.\ff.c        **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1237              		.loc 1 2971 0
 1238 002e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1239              	.LVL170:
 1240 0030 FFF7FEFF 		bl	disk_status
 1241              	.LVL171:
2972:.\ff.c        **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1242              		.loc 1 2972 0
 1243 0034 10F0010F 		tst	r0, #1
 1244 0038 08D1     		bne	.L111
2973:.\ff.c        **** 				return FR_WRITE_PROTECTED;
 1245              		.loc 1 2973 0
 1246 003a 002F     		cmp	r7, #0
 1247 003c 00F01B81 		beq	.L130
2973:.\ff.c        **** 				return FR_WRITE_PROTECTED;
 1248              		.loc 1 2973 0 is_stmt 0 discriminator 1
 1249 0040 10F0040F 		tst	r0, #4
 1250 0044 40F01981 		bne	.L131
2976:.\ff.c        **** 		}
 1251              		.loc 1 2976 0 is_stmt 1
 1252 0048 0020     		movs	r0, #0
 1253              	.LVL172:
 1254 004a 37E1     		b	.L110
 1255              	.L111:
2983:.\ff.c        **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1256              		.loc 1 2983 0
 1257 004c 0023     		movs	r3, #0
 1258 004e 2370     		strb	r3, [r4]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 128


2984:.\ff.c        **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1259              		.loc 1 2984 0
 1260 0050 E8B2     		uxtb	r0, r5
 1261 0052 6070     		strb	r0, [r4, #1]
2985:.\ff.c        **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1262              		.loc 1 2985 0
 1263 0054 FFF7FEFF 		bl	disk_initialize
 1264              	.LVL173:
2986:.\ff.c        **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1265              		.loc 1 2986 0
 1266 0058 10F0010F 		tst	r0, #1
 1267 005c 40F00F81 		bne	.L132
2989:.\ff.c        **** 		return FR_WRITE_PROTECTED;
 1268              		.loc 1 2989 0
 1269 0060 1FB1     		cbz	r7, .L112
2989:.\ff.c        **** 		return FR_WRITE_PROTECTED;
 1270              		.loc 1 2989 0 is_stmt 0 discriminator 1
 1271 0062 10F0040F 		tst	r0, #4
 1272 0066 40F00C81 		bne	.L133
 1273              	.L112:
 1274              	.LVL174:
2998:.\ff.c        **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 1275              		.loc 1 2998 0 is_stmt 1
 1276 006a 2046     		mov	r0, r4
 1277              	.LVL175:
 1278 006c 0021     		movs	r1, #0
 1279 006e FFF7FEFF 		bl	check_fs
 1280              	.LVL176:
2999:.\ff.c        **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 1281              		.loc 1 2999 0
 1282 0072 0228     		cmp	r0, #2
 1283 0074 14D0     		beq	.L134
2997:.\ff.c        **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 1284              		.loc 1 2997 0
 1285 0076 0026     		movs	r6, #0
 1286              	.LVL177:
 1287 0078 27E0     		b	.L114
 1288              	.LVL178:
 1289              	.L116:
3001:.\ff.c        **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 1290              		.loc 1 3001 0
 1291 007a 04EB0510 		add	r0, r4, r5, lsl #4
 1292              	.LVL179:
3002:.\ff.c        **** 		}
 1293              		.loc 1 3002 0
 1294 007e 90F8F231 		ldrb	r3, [r0, #498]	@ zero_extendqisi2
3001:.\ff.c        **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 1295              		.loc 1 3001 0
 1296 0082 00F5F770 		add	r0, r0, #494
 1297              	.LVL180:
3002:.\ff.c        **** 		}
 1298              		.loc 1 3002 0
 1299 0086 1BB1     		cbz	r3, .L135
3002:.\ff.c        **** 		}
 1300              		.loc 1 3002 0 is_stmt 0 discriminator 1
 1301 0088 0830     		adds	r0, r0, #8
 1302              	.LVL181:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 129


 1303 008a FFF7FEFF 		bl	ld_dword
 1304              	.LVL182:
 1305 008e 00E0     		b	.L115
 1306              	.LVL183:
 1307              	.L135:
3002:.\ff.c        **** 		}
 1308              		.loc 1 3002 0
 1309 0090 0020     		movs	r0, #0
 1310              	.LVL184:
 1311              	.L115:
3002:.\ff.c        **** 		}
 1312              		.loc 1 3002 0 discriminator 4
 1313 0092 04AB     		add	r3, sp, #16
 1314 0094 03EB8503 		add	r3, r3, r5, lsl #2
 1315 0098 43F8100C 		str	r0, [r3, #-16]
3000:.\ff.c        **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 1316              		.loc 1 3000 0 is_stmt 1 discriminator 4
 1317 009c 0135     		adds	r5, r5, #1
 1318              	.LVL185:
 1319 009e 00E0     		b	.L113
 1320              	.LVL186:
 1321              	.L134:
 1322 00a0 0025     		movs	r5, #0
 1323              	.LVL187:
 1324              	.L113:
3000:.\ff.c        **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 1325              		.loc 1 3000 0 is_stmt 0 discriminator 2
 1326 00a2 032D     		cmp	r5, #3
 1327 00a4 E9D9     		bls	.L116
 1328 00a6 0025     		movs	r5, #0
 1329              	.LVL188:
 1330              	.L118:
3007:.\ff.c        **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 1331              		.loc 1 3007 0 is_stmt 1
 1332 00a8 04AB     		add	r3, sp, #16
 1333 00aa 03EB8503 		add	r3, r3, r5, lsl #2
 1334 00ae 53F8106C 		ldr	r6, [r3, #-16]
 1335              	.LVL189:
3008:.\ff.c        **** 		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 1336              		.loc 1 3008 0
 1337 00b2 26B1     		cbz	r6, .L136
3008:.\ff.c        **** 		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 1338              		.loc 1 3008 0 is_stmt 0 discriminator 1
 1339 00b4 2046     		mov	r0, r4
 1340 00b6 3146     		mov	r1, r6
 1341 00b8 FFF7FEFF 		bl	check_fs
 1342              	.LVL190:
 1343 00bc 00E0     		b	.L117
 1344              	.L136:
3008:.\ff.c        **** 		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 1345              		.loc 1 3008 0
 1346 00be 0320     		movs	r0, #3
 1347              	.L117:
 1348              	.LVL191:
3009:.\ff.c        **** 	}
 1349              		.loc 1 3009 0 is_stmt 1 discriminator 4
 1350 00c0 0128     		cmp	r0, #1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 130


 1351 00c2 02D9     		bls	.L114
3009:.\ff.c        **** 	}
 1352              		.loc 1 3009 0 is_stmt 0 discriminator 1
 1353 00c4 0135     		adds	r5, r5, #1
 1354              	.LVL192:
 1355 00c6 032D     		cmp	r5, #3
 1356 00c8 EED9     		bls	.L118
 1357              	.LVL193:
 1358              	.L114:
3011:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1359              		.loc 1 3011 0 is_stmt 1
 1360 00ca 0428     		cmp	r0, #4
 1361 00cc 00F0DB80 		beq	.L137
3012:.\ff.c        **** 
 1362              		.loc 1 3012 0
 1363 00d0 0128     		cmp	r0, #1
 1364 00d2 00F2DA80 		bhi	.L138
3063:.\ff.c        **** 
 1365              		.loc 1 3063 0
 1366 00d6 04F13B00 		add	r0, r4, #59
 1367              	.LVL194:
 1368 00da FFF7FEFF 		bl	ld_word
 1369              	.LVL195:
 1370 00de B0F5007F 		cmp	r0, #512
 1371 00e2 40F0D480 		bne	.L139
3065:.\ff.c        **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1372              		.loc 1 3065 0
 1373 00e6 04F14600 		add	r0, r4, #70
 1374 00ea FFF7FEFF 		bl	ld_word
 1375              	.LVL196:
 1376 00ee 8046     		mov	r8, r0
 1377              	.LVL197:
3066:.\ff.c        **** 		fs->fsize = fasize;
 1378              		.loc 1 3066 0
 1379 00f0 20B9     		cbnz	r0, .L119
3066:.\ff.c        **** 		fs->fsize = fasize;
 1380              		.loc 1 3066 0 is_stmt 0 discriminator 1
 1381 00f2 04F15400 		add	r0, r4, #84
 1382              	.LVL198:
 1383 00f6 FFF7FEFF 		bl	ld_dword
 1384              	.LVL199:
 1385 00fa 8046     		mov	r8, r0
 1386              	.LVL200:
 1387              	.L119:
3067:.\ff.c        **** 
 1388              		.loc 1 3067 0 is_stmt 1
 1389 00fc C4F81880 		str	r8, [r4, #24]
3069:.\ff.c        **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 1390              		.loc 1 3069 0
 1391 0100 94F84090 		ldrb	r9, [r4, #64]	@ zero_extendqisi2
 1392 0104 84F80290 		strb	r9, [r4, #2]
3070:.\ff.c        **** 		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 1393              		.loc 1 3070 0
 1394 0108 09F1FF33 		add	r3, r9, #-1
 1395 010c DBB2     		uxtb	r3, r3
 1396 010e 012B     		cmp	r3, #1
 1397 0110 00F2BF80 		bhi	.L140
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 131


3071:.\ff.c        **** 
 1398              		.loc 1 3071 0
 1399 0114 08FB09F9 		mul	r9, r8, r9
 1400              	.LVL201:
3073:.\ff.c        **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 1401              		.loc 1 3073 0
 1402 0118 94F83D50 		ldrb	r5, [r4, #61]	@ zero_extendqisi2
 1403 011c 6581     		strh	r5, [r4, #10]	@ movhi
3074:.\ff.c        **** 
 1404              		.loc 1 3074 0
 1405 011e 002D     		cmp	r5, #0
 1406 0120 00F0B980 		beq	.L141
3074:.\ff.c        **** 
 1407              		.loc 1 3074 0 is_stmt 0 discriminator 2
 1408 0124 6B1E     		subs	r3, r5, #1
 1409 0126 1D42     		tst	r5, r3
 1410 0128 40F0B780 		bne	.L142
3076:.\ff.c        **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 1411              		.loc 1 3076 0 is_stmt 1
 1412 012c 04F14100 		add	r0, r4, #65
 1413 0130 FFF7FEFF 		bl	ld_word
 1414              	.LVL202:
 1415 0134 8246     		mov	r10, r0
 1416 0136 2081     		strh	r0, [r4, #8]	@ movhi
3077:.\ff.c        **** 
 1417              		.loc 1 3077 0
 1418 0138 10F00F0F 		tst	r0, #15
 1419 013c 40F0AF80 		bne	.L143
3079:.\ff.c        **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 1420              		.loc 1 3079 0
 1421 0140 04F14300 		add	r0, r4, #67
 1422 0144 FFF7FEFF 		bl	ld_word
 1423              	.LVL203:
 1424 0148 0746     		mov	r7, r0
 1425              	.LVL204:
3080:.\ff.c        **** 
 1426              		.loc 1 3080 0
 1427 014a 20B9     		cbnz	r0, .L120
3080:.\ff.c        **** 
 1428              		.loc 1 3080 0 is_stmt 0 discriminator 1
 1429 014c 04F15000 		add	r0, r4, #80
 1430              	.LVL205:
 1431 0150 FFF7FEFF 		bl	ld_dword
 1432              	.LVL206:
 1433 0154 0746     		mov	r7, r0
 1434              	.LVL207:
 1435              	.L120:
3082:.\ff.c        **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 1436              		.loc 1 3082 0 is_stmt 1
 1437 0156 04F13E00 		add	r0, r4, #62
 1438              	.LVL208:
 1439 015a FFF7FEFF 		bl	ld_word
 1440              	.LVL209:
3083:.\ff.c        **** 
 1441              		.loc 1 3083 0
 1442 015e 0346     		mov	r3, r0
 1443 0160 0028     		cmp	r0, #0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 132


 1444 0162 00F09E80 		beq	.L144
3086:.\ff.c        **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 1445              		.loc 1 3086 0
 1446 0166 00EB0902 		add	r2, r0, r9
 1447 016a 02EB1A12 		add	r2, r2, r10, lsr #4
 1448              	.LVL210:
3087:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1449              		.loc 1 3087 0
 1450 016e 9742     		cmp	r7, r2
 1451 0170 C0F09980 		bcc	.L145
3088:.\ff.c        **** 		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 1452              		.loc 1 3088 0
 1453 0174 BF1A     		subs	r7, r7, r2
 1454              	.LVL211:
 1455 0176 B7FBF5F5 		udiv	r5, r7, r5
 1456              	.LVL212:
3089:.\ff.c        **** 		fmt = FS_FAT32;
 1457              		.loc 1 3089 0
 1458 017a 002D     		cmp	r5, #0
 1459 017c 00F09580 		beq	.L146
 1460              	.LVL213:
3091:.\ff.c        **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1461              		.loc 1 3091 0
 1462 0180 4FF6F571 		movw	r1, #65525
 1463 0184 8D42     		cmp	r5, r1
 1464 0186 01D9     		bls	.L147
3090:.\ff.c        **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 1465              		.loc 1 3090 0
 1466 0188 0327     		movs	r7, #3
 1467 018a 00E0     		b	.L121
 1468              	.L147:
3091:.\ff.c        **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 1469              		.loc 1 3091 0
 1470 018c 0227     		movs	r7, #2
 1471              	.L121:
 1472              	.LVL214:
3092:.\ff.c        **** 
 1473              		.loc 1 3092 0
 1474 018e 40F6F571 		movw	r1, #4085
 1475 0192 8D42     		cmp	r5, r1
 1476 0194 00D8     		bhi	.L122
 1477 0196 0127     		movs	r7, #1
 1478              	.LVL215:
 1479              	.L122:
3095:.\ff.c        **** 		fs->volbase = bsect;								/* Volume start sector */
 1480              		.loc 1 3095 0
 1481 0198 0235     		adds	r5, r5, #2
 1482              	.LVL216:
 1483 019a 6561     		str	r5, [r4, #20]
3096:.\ff.c        **** 		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 1484              		.loc 1 3096 0
 1485 019c E661     		str	r6, [r4, #28]
3097:.\ff.c        **** 		fs->database = bsect + sysect;						/* Data start sector */
 1486              		.loc 1 3097 0
 1487 019e 3344     		add	r3, r3, r6
 1488 01a0 2362     		str	r3, [r4, #32]
3098:.\ff.c        **** 		if (fmt == FS_FAT32) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 133


 1489              		.loc 1 3098 0
 1490 01a2 3244     		add	r2, r2, r6
 1491              	.LVL217:
 1492 01a4 A262     		str	r2, [r4, #40]
3099:.\ff.c        **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 1493              		.loc 1 3099 0
 1494 01a6 032F     		cmp	r7, #3
 1495 01a8 0FD1     		bne	.L123
3100:.\ff.c        **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1496              		.loc 1 3100 0
 1497 01aa 04F15A00 		add	r0, r4, #90
 1498              	.LVL218:
 1499 01ae FFF7FEFF 		bl	ld_word
 1500              	.LVL219:
 1501 01b2 0028     		cmp	r0, #0
 1502 01b4 7BD1     		bne	.L149
3101:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1503              		.loc 1 3101 0
 1504 01b6 BAF1000F 		cmp	r10, #0
 1505 01ba 7AD1     		bne	.L150
3102:.\ff.c        **** 			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 1506              		.loc 1 3102 0
 1507 01bc 04F15C00 		add	r0, r4, #92
 1508 01c0 FFF7FEFF 		bl	ld_dword
 1509              	.LVL220:
 1510 01c4 6062     		str	r0, [r4, #36]
3103:.\ff.c        **** 		} else {
 1511              		.loc 1 3103 0
 1512 01c6 AD00     		lsls	r5, r5, #2
 1513              	.LVL221:
 1514 01c8 0EE0     		b	.L124
 1515              	.LVL222:
 1516              	.L123:
3105:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1517              		.loc 1 3105 0
 1518 01ca BAF1000F 		cmp	r10, #0
 1519 01ce 72D0     		beq	.L151
3106:.\ff.c        **** 			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 1520              		.loc 1 3106 0
 1521 01d0 4B44     		add	r3, r3, r9
 1522 01d2 6362     		str	r3, [r4, #36]
3108:.\ff.c        **** 		}
 1523              		.loc 1 3108 0
 1524 01d4 022F     		cmp	r7, #2
 1525 01d6 01D1     		bne	.L125
3108:.\ff.c        **** 		}
 1526              		.loc 1 3108 0 is_stmt 0 discriminator 1
 1527 01d8 6D00     		lsls	r5, r5, #1
 1528              	.LVL223:
 1529 01da 05E0     		b	.L124
 1530              	.LVL224:
 1531              	.L125:
3108:.\ff.c        **** 		}
 1532              		.loc 1 3108 0 discriminator 2
 1533 01dc 05EB4503 		add	r3, r5, r5, lsl #1
 1534 01e0 05F00105 		and	r5, r5, #1
 1535              	.LVL225:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 134


 1536 01e4 05EB5305 		add	r5, r5, r3, lsr #1
 1537              	.LVL226:
 1538              	.L124:
3110:.\ff.c        **** 
 1539              		.loc 1 3110 0 is_stmt 1
 1540 01e8 05F2FF15 		addw	r5, r5, #511
 1541              	.LVL227:
 1542 01ec B8EB552F 		cmp	r8, r5, lsr #9
 1543 01f0 63D3     		bcc	.L152
3114:.\ff.c        **** 		fs->fsi_flag = 0x80;
 1544              		.loc 1 3114 0
 1545 01f2 4FF0FF33 		mov	r3, #-1
 1546 01f6 2361     		str	r3, [r4, #16]
 1547 01f8 E360     		str	r3, [r4, #12]
3115:.\ff.c        **** #if (_FS_NOFSINFO & 3) != 3
 1548              		.loc 1 3115 0
 1549 01fa 8023     		movs	r3, #128
 1550 01fc 2371     		strb	r3, [r4, #4]
3117:.\ff.c        **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 1551              		.loc 1 3117 0
 1552 01fe 032F     		cmp	r7, #3
 1553 0200 2CD1     		bne	.L127
3118:.\ff.c        **** 			&& move_window(fs, bsect + 1) == FR_OK)
 1554              		.loc 1 3118 0
 1555 0202 04F16000 		add	r0, r4, #96
 1556 0206 FFF7FEFF 		bl	ld_word
 1557              	.LVL228:
 1558 020a 0128     		cmp	r0, #1
 1559 020c 26D1     		bne	.L127
3119:.\ff.c        **** 		{
 1560              		.loc 1 3119 0
 1561 020e 2046     		mov	r0, r4
 1562 0210 711C     		adds	r1, r6, #1
 1563 0212 FFF7FEFF 		bl	move_window
 1564              	.LVL229:
 1565 0216 08BB     		cbnz	r0, .L127
3121:.\ff.c        **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 1566              		.loc 1 3121 0
 1567 0218 0023     		movs	r3, #0
 1568 021a 2371     		strb	r3, [r4, #4]
3122:.\ff.c        **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 1569              		.loc 1 3122 0
 1570 021c 04F22E20 		addw	r0, r4, #558
 1571 0220 FFF7FEFF 		bl	ld_word
 1572              	.LVL230:
 1573 0224 4AF65523 		movw	r3, #43605
 1574 0228 9842     		cmp	r0, r3
 1575 022a 17D1     		bne	.L127
3123:.\ff.c        **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 1576              		.loc 1 3123 0
 1577 022c 04F13000 		add	r0, r4, #48
 1578 0230 FFF7FEFF 		bl	ld_dword
 1579              	.LVL231:
 1580 0234 244B     		ldr	r3, .L154+4
 1581 0236 9842     		cmp	r0, r3
 1582 0238 10D1     		bne	.L127
3124:.\ff.c        **** 			{
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 135


 1583              		.loc 1 3124 0
 1584 023a 04F50570 		add	r0, r4, #532
 1585 023e FFF7FEFF 		bl	ld_dword
 1586              	.LVL232:
 1587 0242 224B     		ldr	r3, .L154+8
 1588 0244 9842     		cmp	r0, r3
 1589 0246 09D1     		bne	.L127
3127:.\ff.c        **** #endif
 1590              		.loc 1 3127 0
 1591 0248 04F50670 		add	r0, r4, #536
 1592 024c FFF7FEFF 		bl	ld_dword
 1593              	.LVL233:
 1594 0250 2061     		str	r0, [r4, #16]
3130:.\ff.c        **** #endif
 1595              		.loc 1 3130 0
 1596 0252 04F50770 		add	r0, r4, #540
 1597 0256 FFF7FEFF 		bl	ld_dword
 1598              	.LVL234:
 1599 025a E060     		str	r0, [r4, #12]
 1600              	.L127:
3138:.\ff.c        **** 	fs->id = ++Fsid;	/* File system mount ID */
 1601              		.loc 1 3138 0
 1602 025c 2770     		strb	r7, [r4]
3139:.\ff.c        **** #if _USE_LFN == 1
 1603              		.loc 1 3139 0
 1604 025e 194A     		ldr	r2, .L154
 1605 0260 9388     		ldrh	r3, [r2, #4]
 1606 0262 0133     		adds	r3, r3, #1
 1607 0264 9BB2     		uxth	r3, r3
 1608 0266 9380     		strh	r3, [r2, #4]	@ movhi
 1609 0268 E380     		strh	r3, [r4, #6]	@ movhi
3152:.\ff.c        **** }
 1610              		.loc 1 3152 0
 1611 026a 0020     		movs	r0, #0
 1612 026c 26E0     		b	.L110
 1613              	.LVL235:
 1614              	.L128:
2960:.\ff.c        **** 
 1615              		.loc 1 2960 0
 1616 026e 0B20     		movs	r0, #11
 1617              	.LVL236:
 1618 0270 24E0     		b	.L110
 1619              	.LVL237:
 1620              	.L129:
2964:.\ff.c        **** 
 1621              		.loc 1 2964 0
 1622 0272 0C20     		movs	r0, #12
 1623              	.LVL238:
 1624 0274 22E0     		b	.L110
 1625              	.LVL239:
 1626              	.L130:
2976:.\ff.c        **** 		}
 1627              		.loc 1 2976 0
 1628 0276 0020     		movs	r0, #0
 1629              	.LVL240:
 1630 0278 20E0     		b	.L110
 1631              	.LVL241:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 136


 1632              	.L131:
2974:.\ff.c        **** 			}
 1633              		.loc 1 2974 0
 1634 027a 0A20     		movs	r0, #10
 1635              	.LVL242:
 1636 027c 1EE0     		b	.L110
 1637              	.LVL243:
 1638              	.L132:
2987:.\ff.c        **** 	}
 1639              		.loc 1 2987 0
 1640 027e 0320     		movs	r0, #3
 1641              	.LVL244:
 1642 0280 1CE0     		b	.L110
 1643              	.LVL245:
 1644              	.L133:
2990:.\ff.c        **** 	}
 1645              		.loc 1 2990 0
 1646 0282 0A20     		movs	r0, #10
 1647              	.LVL246:
 1648 0284 1AE0     		b	.L110
 1649              	.LVL247:
 1650              	.L137:
3011:.\ff.c        **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1651              		.loc 1 3011 0
 1652 0286 0120     		movs	r0, #1
 1653              	.LVL248:
 1654 0288 18E0     		b	.L110
 1655              	.LVL249:
 1656              	.L138:
3012:.\ff.c        **** 
 1657              		.loc 1 3012 0
 1658 028a 0D20     		movs	r0, #13
 1659              	.LVL250:
 1660 028c 16E0     		b	.L110
 1661              	.L139:
3063:.\ff.c        **** 
 1662              		.loc 1 3063 0
 1663 028e 0D20     		movs	r0, #13
 1664 0290 14E0     		b	.L110
 1665              	.LVL251:
 1666              	.L140:
3070:.\ff.c        **** 		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 1667              		.loc 1 3070 0
 1668 0292 0D20     		movs	r0, #13
 1669              	.LVL252:
 1670 0294 12E0     		b	.L110
 1671              	.LVL253:
 1672              	.L141:
3074:.\ff.c        **** 
 1673              		.loc 1 3074 0
 1674 0296 0D20     		movs	r0, #13
 1675 0298 10E0     		b	.L110
 1676              	.L142:
 1677 029a 0D20     		movs	r0, #13
 1678 029c 0EE0     		b	.L110
 1679              	.L143:
3077:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 137


 1680              		.loc 1 3077 0
 1681 029e 0D20     		movs	r0, #13
 1682 02a0 0CE0     		b	.L110
 1683              	.LVL254:
 1684              	.L144:
3083:.\ff.c        **** 
 1685              		.loc 1 3083 0
 1686 02a2 0D20     		movs	r0, #13
 1687              	.LVL255:
 1688 02a4 0AE0     		b	.L110
 1689              	.LVL256:
 1690              	.L145:
3087:.\ff.c        **** 		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 1691              		.loc 1 3087 0
 1692 02a6 0D20     		movs	r0, #13
 1693              	.LVL257:
 1694 02a8 08E0     		b	.L110
 1695              	.LVL258:
 1696              	.L146:
3089:.\ff.c        **** 		fmt = FS_FAT32;
 1697              		.loc 1 3089 0
 1698 02aa 0D20     		movs	r0, #13
 1699              	.LVL259:
 1700 02ac 06E0     		b	.L110
 1701              	.LVL260:
 1702              	.L149:
3100:.\ff.c        **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 1703              		.loc 1 3100 0
 1704 02ae 0D20     		movs	r0, #13
 1705 02b0 04E0     		b	.L110
 1706              	.L150:
3101:.\ff.c        **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 1707              		.loc 1 3101 0
 1708 02b2 0D20     		movs	r0, #13
 1709 02b4 02E0     		b	.L110
 1710              	.LVL261:
 1711              	.L151:
3105:.\ff.c        **** 			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 1712              		.loc 1 3105 0
 1713 02b6 0D20     		movs	r0, #13
 1714              	.LVL262:
 1715 02b8 00E0     		b	.L110
 1716              	.LVL263:
 1717              	.L152:
3110:.\ff.c        **** 
 1718              		.loc 1 3110 0
 1719 02ba 0D20     		movs	r0, #13
 1720              	.LVL264:
 1721              	.L110:
3153:.\ff.c        **** 
 1722              		.loc 1 3153 0
 1723 02bc 04B0     		add	sp, sp, #16
 1724              		.cfi_def_cfa_offset 32
 1725              		@ sp needed
 1726 02be BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1727              	.L155:
 1728 02c2 00BF     		.align	2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 138


 1729              	.L154:
 1730 02c4 00000000 		.word	.LANCHOR0
 1731 02c8 52526141 		.word	1096897106
 1732 02cc 72724161 		.word	1631679090
 1733              		.cfi_endproc
 1734              	.LFE30:
 1735              		.size	find_volume, .-find_volume
 1736              		.section	.text.put_fat,"ax",%progbits
 1737              		.align	2
 1738              		.thumb
 1739              		.thumb_func
 1740              		.type	put_fat, %function
 1741              	put_fat:
 1742              	.LFB13:
1067:.\ff.c        **** 	UINT bc;
 1743              		.loc 1 1067 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              	.LVL265:
 1748 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1749              		.cfi_def_cfa_offset 32
 1750              		.cfi_offset 3, -32
 1751              		.cfi_offset 4, -28
 1752              		.cfi_offset 5, -24
 1753              		.cfi_offset 6, -20
 1754              		.cfi_offset 7, -16
 1755              		.cfi_offset 8, -12
 1756              		.cfi_offset 9, -8
 1757              		.cfi_offset 14, -4
 1758 0004 0C46     		mov	r4, r1
 1759              	.LVL266:
1073:.\ff.c        **** 		switch (fs->fs_type) {
 1760              		.loc 1 1073 0
 1761 0006 0129     		cmp	r1, #1
 1762 0008 77D9     		bls	.L165
 1763 000a 0546     		mov	r5, r0
 1764 000c 1746     		mov	r7, r2
1073:.\ff.c        **** 		switch (fs->fs_type) {
 1765              		.loc 1 1073 0 is_stmt 0 discriminator 1
 1766 000e 4369     		ldr	r3, [r0, #20]
 1767 0010 8B42     		cmp	r3, r1
 1768 0012 74D9     		bls	.L166
1074:.\ff.c        **** 		case FS_FAT12 :	/* Bitfield items */
 1769              		.loc 1 1074 0 is_stmt 1
 1770 0014 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1771 0016 022B     		cmp	r3, #2
 1772 0018 43D0     		beq	.L158
 1773 001a 032B     		cmp	r3, #3
 1774 001c 53D0     		beq	.L159
 1775 001e 012B     		cmp	r3, #1
 1776 0020 6FD1     		bne	.L168
 1777              	.LVL267:
1076:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1778              		.loc 1 1076 0
 1779 0022 01EB5108 		add	r8, r1, r1, lsr #1
 1780              	.LVL268:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 139


1077:.\ff.c        **** 			if (res != FR_OK) break;
 1781              		.loc 1 1077 0
 1782 0026 016A     		ldr	r1, [r0, #32]
 1783              	.LVL269:
 1784 0028 01EB5821 		add	r1, r1, r8, lsr #9
 1785 002c FFF7FEFF 		bl	move_window
 1786              	.LVL270:
1078:.\ff.c        **** 			p = fs->win + bc++ % SS(fs);
 1787              		.loc 1 1078 0
 1788 0030 0646     		mov	r6, r0
 1789 0032 0028     		cmp	r0, #0
 1790 0034 66D1     		bne	.L157
1079:.\ff.c        **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1791              		.loc 1 1079 0
 1792 0036 08F10109 		add	r9, r8, #1
 1793              	.LVL271:
 1794 003a C8F30808 		ubfx	r8, r8, #0, #9
 1795              	.LVL272:
1080:.\ff.c        **** 			fs->wflag = 1;
 1796              		.loc 1 1080 0
 1797 003e 14F00104 		ands	r4, r4, #1
 1798              	.LVL273:
 1799 0042 0AD0     		beq	.L161
1080:.\ff.c        **** 			fs->wflag = 1;
 1800              		.loc 1 1080 0 is_stmt 0 discriminator 1
 1801 0044 05EB0803 		add	r3, r5, r8
 1802 0048 93F83020 		ldrb	r2, [r3, #48]	@ zero_extendqisi2
 1803 004c FBB2     		uxtb	r3, r7
 1804 004e 02F00F02 		and	r2, r2, #15
 1805 0052 42EA0313 		orr	r3, r2, r3, lsl #4
 1806 0056 DBB2     		uxtb	r3, r3
 1807 0058 00E0     		b	.L162
 1808              	.L161:
1080:.\ff.c        **** 			fs->wflag = 1;
 1809              		.loc 1 1080 0 discriminator 2
 1810 005a FBB2     		uxtb	r3, r7
 1811              	.L162:
1080:.\ff.c        **** 			fs->wflag = 1;
 1812              		.loc 1 1080 0 discriminator 4
 1813 005c A844     		add	r8, r8, r5
 1814              	.LVL274:
 1815 005e 88F83030 		strb	r3, [r8, #48]
1081:.\ff.c        **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1816              		.loc 1 1081 0 is_stmt 1 discriminator 4
 1817 0062 0123     		movs	r3, #1
 1818 0064 EB70     		strb	r3, [r5, #3]
1082:.\ff.c        **** 			if (res != FR_OK) break;
 1819              		.loc 1 1082 0 discriminator 4
 1820 0066 296A     		ldr	r1, [r5, #32]
 1821 0068 2846     		mov	r0, r5
 1822              	.LVL275:
 1823 006a 01EB5921 		add	r1, r1, r9, lsr #9
 1824 006e FFF7FEFF 		bl	move_window
 1825              	.LVL276:
1083:.\ff.c        **** 			p = fs->win + bc % SS(fs);
 1826              		.loc 1 1083 0 discriminator 4
 1827 0072 0646     		mov	r6, r0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 140


 1828 0074 0028     		cmp	r0, #0
 1829 0076 45D1     		bne	.L157
1084:.\ff.c        **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1830              		.loc 1 1084 0
 1831 0078 C9F30809 		ubfx	r9, r9, #0, #9
 1832              	.LVL277:
1085:.\ff.c        **** 			fs->wflag = 1;
 1833              		.loc 1 1085 0
 1834 007c 14B1     		cbz	r4, .L163
1085:.\ff.c        **** 			fs->wflag = 1;
 1835              		.loc 1 1085 0 is_stmt 0 discriminator 1
 1836 007e C7F30717 		ubfx	r7, r7, #4, #8
 1837              	.LVL278:
 1838 0082 08E0     		b	.L164
 1839              	.LVL279:
 1840              	.L163:
1085:.\ff.c        **** 			fs->wflag = 1;
 1841              		.loc 1 1085 0 discriminator 2
 1842 0084 05EB0903 		add	r3, r5, r9
 1843 0088 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 1844 008c 23F00F03 		bic	r3, r3, #15
 1845 0090 C7F30327 		ubfx	r7, r7, #8, #4
 1846              	.LVL280:
 1847 0094 1F43     		orrs	r7, r7, r3
 1848              	.L164:
1085:.\ff.c        **** 			fs->wflag = 1;
 1849              		.loc 1 1085 0 discriminator 4
 1850 0096 A944     		add	r9, r9, r5
 1851              	.LVL281:
 1852 0098 89F83070 		strb	r7, [r9, #48]
1086:.\ff.c        **** 			break;
 1853              		.loc 1 1086 0 is_stmt 1 discriminator 4
 1854 009c 0123     		movs	r3, #1
 1855 009e EB70     		strb	r3, [r5, #3]
1087:.\ff.c        **** 
 1856              		.loc 1 1087 0 discriminator 4
 1857 00a0 30E0     		b	.L157
 1858              	.LVL282:
 1859              	.L158:
1090:.\ff.c        **** 			if (res != FR_OK) break;
 1860              		.loc 1 1090 0
 1861 00a2 016A     		ldr	r1, [r0, #32]
 1862              	.LVL283:
 1863 00a4 01EB1421 		add	r1, r1, r4, lsr #8
 1864 00a8 FFF7FEFF 		bl	move_window
 1865              	.LVL284:
1091:.\ff.c        **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 1866              		.loc 1 1091 0
 1867 00ac 0646     		mov	r6, r0
 1868 00ae 48BB     		cbnz	r0, .L157
1092:.\ff.c        **** 			fs->wflag = 1;
 1869              		.loc 1 1092 0
 1870 00b0 6000     		lsls	r0, r4, #1
 1871              	.LVL285:
 1872 00b2 00F4FF70 		and	r0, r0, #510
 1873 00b6 3030     		adds	r0, r0, #48
 1874 00b8 2844     		add	r0, r0, r5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 141


 1875 00ba B9B2     		uxth	r1, r7
 1876 00bc FFF7FEFF 		bl	st_word
 1877              	.LVL286:
1093:.\ff.c        **** 			break;
 1878              		.loc 1 1093 0
 1879 00c0 0123     		movs	r3, #1
 1880 00c2 EB70     		strb	r3, [r5, #3]
1094:.\ff.c        **** 
 1881              		.loc 1 1094 0
 1882 00c4 1EE0     		b	.L157
 1883              	.LVL287:
 1884              	.L159:
1100:.\ff.c        **** 			if (res != FR_OK) break;
 1885              		.loc 1 1100 0
 1886 00c6 016A     		ldr	r1, [r0, #32]
 1887              	.LVL288:
 1888 00c8 01EBD411 		add	r1, r1, r4, lsr #7
 1889 00cc FFF7FEFF 		bl	move_window
 1890              	.LVL289:
1101:.\ff.c        **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 1891              		.loc 1 1101 0
 1892 00d0 0646     		mov	r6, r0
 1893 00d2 B8B9     		cbnz	r0, .L157
1103:.\ff.c        **** 			}
 1894              		.loc 1 1103 0
 1895 00d4 27F07047 		bic	r7, r7, #-268435456
 1896              	.LVL290:
 1897 00d8 A400     		lsls	r4, r4, #2
 1898              	.LVL291:
 1899 00da 04F4FE74 		and	r4, r4, #508
 1900 00de 3034     		adds	r4, r4, #48
 1901 00e0 2C44     		add	r4, r4, r5
 1902 00e2 2046     		mov	r0, r4
 1903              	.LVL292:
 1904 00e4 FFF7FEFF 		bl	ld_dword
 1905              	.LVL293:
 1906 00e8 00F07041 		and	r1, r0, #-268435456
 1907              	.LVL294:
1105:.\ff.c        **** 			fs->wflag = 1;
 1908              		.loc 1 1105 0
 1909 00ec 2046     		mov	r0, r4
 1910 00ee 3943     		orrs	r1, r1, r7
 1911              	.LVL295:
 1912 00f0 FFF7FEFF 		bl	st_dword
 1913              	.LVL296:
1106:.\ff.c        **** 			break;
 1914              		.loc 1 1106 0
 1915 00f4 0123     		movs	r3, #1
 1916 00f6 EB70     		strb	r3, [r5, #3]
1107:.\ff.c        **** 		}
 1917              		.loc 1 1107 0
 1918 00f8 04E0     		b	.L157
 1919              	.LVL297:
 1920              	.L165:
1070:.\ff.c        **** 
 1921              		.loc 1 1070 0
 1922 00fa 0226     		movs	r6, #2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 142


 1923 00fc 02E0     		b	.L157
 1924              	.L166:
 1925 00fe 0226     		movs	r6, #2
 1926 0100 00E0     		b	.L157
 1927              	.L168:
 1928 0102 0226     		movs	r6, #2
 1929              	.LVL298:
 1930              	.L157:
1111:.\ff.c        **** 
 1931              		.loc 1 1111 0
 1932 0104 3046     		mov	r0, r6
 1933 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1934              		.cfi_endproc
 1935              	.LFE13:
 1936              		.size	put_fat, .-put_fat
 1937 010a 00BF     		.section	.text.get_fat,"ax",%progbits
 1938              		.align	2
 1939              		.thumb
 1940              		.thumb_func
 1941              		.type	get_fat, %function
 1942              	get_fat:
 1943              	.LFB12:
 990:.\ff.c        **** 	UINT wc, bc;
 1944              		.loc 1 990 0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              	.LVL299:
 1949 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1950              		.cfi_def_cfa_offset 24
 1951              		.cfi_offset 3, -24
 1952              		.cfi_offset 4, -20
 1953              		.cfi_offset 5, -16
 1954              		.cfi_offset 6, -12
 1955              		.cfi_offset 7, -8
 1956              		.cfi_offset 14, -4
 993:.\ff.c        **** 
 1957              		.loc 1 993 0
 1958 0002 0668     		ldr	r6, [r0]
 1959              	.LVL300:
 996:.\ff.c        **** 		val = 1;	/* Internal error */
 1960              		.loc 1 996 0
 1961 0004 0129     		cmp	r1, #1
 1962 0006 51D9     		bls	.L177
 996:.\ff.c        **** 		val = 1;	/* Internal error */
 1963              		.loc 1 996 0 is_stmt 0 discriminator 1
 1964 0008 7369     		ldr	r3, [r6, #20]
 1965 000a 8B42     		cmp	r3, r1
 1966 000c 50D9     		bls	.L178
 1967 000e 0C46     		mov	r4, r1
 1968              	.LVL301:
1002:.\ff.c        **** 		case FS_FAT12 :
 1969              		.loc 1 1002 0 is_stmt 1
 1970 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 1971 0012 022B     		cmp	r3, #2
 1972 0014 2AD0     		beq	.L172
 1973 0016 032B     		cmp	r3, #3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 143


 1974 0018 37D0     		beq	.L173
 1975 001a 012B     		cmp	r3, #1
 1976 001c 4AD1     		bne	.L184
 1977              	.LVL302:
1004:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1978              		.loc 1 1004 0
 1979 001e 01EB5105 		add	r5, r1, r1, lsr #1
 1980              	.LVL303:
1005:.\ff.c        **** 			wc = fs->win[bc++ % SS(fs)];
 1981              		.loc 1 1005 0
 1982 0022 316A     		ldr	r1, [r6, #32]
 1983              	.LVL304:
 1984 0024 3046     		mov	r0, r6
 1985              	.LVL305:
 1986 0026 01EB5521 		add	r1, r1, r5, lsr #9
 1987 002a FFF7FEFF 		bl	move_window
 1988              	.LVL306:
 1989 002e 0028     		cmp	r0, #0
 1990 0030 42D1     		bne	.L180
1006:.\ff.c        **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1991              		.loc 1 1006 0
 1992 0032 6F1C     		adds	r7, r5, #1
 1993              	.LVL307:
 1994 0034 C5F30805 		ubfx	r5, r5, #0, #9
 1995 0038 3544     		add	r5, r5, r6
 1996 003a 95F83050 		ldrb	r5, [r5, #48]	@ zero_extendqisi2
 1997              	.LVL308:
1007:.\ff.c        **** 			wc |= fs->win[bc % SS(fs)] << 8;
 1998              		.loc 1 1007 0
 1999 003e 316A     		ldr	r1, [r6, #32]
 2000 0040 3046     		mov	r0, r6
 2001 0042 01EB5721 		add	r1, r1, r7, lsr #9
 2002 0046 FFF7FEFF 		bl	move_window
 2003              	.LVL309:
 2004 004a 0028     		cmp	r0, #0
 2005 004c 37D1     		bne	.L181
1008:.\ff.c        **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2006              		.loc 1 1008 0
 2007 004e C7F30807 		ubfx	r7, r7, #0, #9
 2008              	.LVL310:
 2009 0052 3E44     		add	r6, r6, r7
 2010              	.LVL311:
 2011 0054 96F83000 		ldrb	r0, [r6, #48]	@ zero_extendqisi2
 2012 0058 45EA0020 		orr	r0, r5, r0, lsl #8
 2013              	.LVL312:
1009:.\ff.c        **** 			break;
 2014              		.loc 1 1009 0
 2015 005c 14F0010F 		tst	r4, #1
 2016 0060 01D0     		beq	.L175
1009:.\ff.c        **** 			break;
 2017              		.loc 1 1009 0 is_stmt 0 discriminator 1
 2018 0062 0009     		lsrs	r0, r0, #4
 2019              	.LVL313:
 2020 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2021              	.LVL314:
 2022              	.L175:
1009:.\ff.c        **** 			break;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 144


 2023              		.loc 1 1009 0 discriminator 2
 2024 0066 C0F30B00 		ubfx	r0, r0, #0, #12
 2025              	.LVL315:
1010:.\ff.c        **** 
 2026              		.loc 1 1010 0 is_stmt 1 discriminator 2
 2027 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2028              	.LVL316:
 2029              	.L172:
1013:.\ff.c        **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2030              		.loc 1 1013 0
 2031 006c 316A     		ldr	r1, [r6, #32]
 2032              	.LVL317:
 2033 006e 3046     		mov	r0, r6
 2034              	.LVL318:
 2035 0070 01EB1421 		add	r1, r1, r4, lsr #8
 2036 0074 FFF7FEFF 		bl	move_window
 2037              	.LVL319:
 2038 0078 20BB     		cbnz	r0, .L182
1014:.\ff.c        **** 			break;
 2039              		.loc 1 1014 0
 2040 007a 6000     		lsls	r0, r4, #1
 2041 007c 00F4FF70 		and	r0, r0, #510
 2042 0080 3030     		adds	r0, r0, #48
 2043 0082 3044     		add	r0, r0, r6
 2044 0084 FFF7FEFF 		bl	ld_word
 2045              	.LVL320:
1015:.\ff.c        **** 
 2046              		.loc 1 1015 0
 2047 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2048              	.LVL321:
 2049              	.L173:
1018:.\ff.c        **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2050              		.loc 1 1018 0
 2051 008a 316A     		ldr	r1, [r6, #32]
 2052              	.LVL322:
 2053 008c 3046     		mov	r0, r6
 2054              	.LVL323:
 2055 008e 01EBD411 		add	r1, r1, r4, lsr #7
 2056 0092 FFF7FEFF 		bl	move_window
 2057              	.LVL324:
 2058 0096 C0B9     		cbnz	r0, .L183
1019:.\ff.c        **** 			break;
 2059              		.loc 1 1019 0
 2060 0098 A000     		lsls	r0, r4, #2
 2061 009a 00F4FE70 		and	r0, r0, #508
 2062 009e 3030     		adds	r0, r0, #48
 2063 00a0 3044     		add	r0, r0, r6
 2064 00a2 FFF7FEFF 		bl	ld_dword
 2065              	.LVL325:
 2066 00a6 20F07040 		bic	r0, r0, #-268435456
 2067              	.LVL326:
1020:.\ff.c        **** #if _FS_EXFAT
 2068              		.loc 1 1020 0
 2069 00aa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2070              	.LVL327:
 2071              	.L177:
 997:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 145


 2072              		.loc 1 997 0
 2073 00ac 0120     		movs	r0, #1
 2074              	.LVL328:
 2075 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2076              	.LVL329:
 2077              	.L178:
 2078 00b0 0120     		movs	r0, #1
 2079              	.LVL330:
 2080 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2081              	.LVL331:
 2082              	.L184:
1046:.\ff.c        **** 		}
 2083              		.loc 1 1046 0
 2084 00b4 0120     		movs	r0, #1
 2085              	.LVL332:
 2086 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2087              	.LVL333:
 2088              	.L180:
1000:.\ff.c        **** 
 2089              		.loc 1 1000 0
 2090 00b8 4FF0FF30 		mov	r0, #-1
 2091 00bc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2092              	.LVL334:
 2093              	.L181:
 2094 00be 4FF0FF30 		mov	r0, #-1
 2095 00c2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2096              	.LVL335:
 2097              	.L182:
 2098 00c4 4FF0FF30 		mov	r0, #-1
 2099 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2100              	.LVL336:
 2101              	.L183:
 2102 00ca 4FF0FF30 		mov	r0, #-1
 2103              	.LVL337:
1051:.\ff.c        **** 
 2104              		.loc 1 1051 0
 2105 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2106              		.cfi_endproc
 2107              	.LFE12:
 2108              		.size	get_fat, .-get_fat
 2109              		.section	.text.dir_sdi,"ax",%progbits
 2110              		.align	2
 2111              		.thumb
 2112              		.thumb_func
 2113              		.type	dir_sdi, %function
 2114              	dir_sdi:
 2115              	.LFB16:
1431:.\ff.c        **** 	DWORD csz, clst;
 2116              		.loc 1 1431 0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 2120              	.LVL338:
 2121 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2122              		.cfi_def_cfa_offset 24
 2123              		.cfi_offset 4, -24
 2124              		.cfi_offset 5, -20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 146


 2125              		.cfi_offset 6, -16
 2126              		.cfi_offset 7, -12
 2127              		.cfi_offset 8, -8
 2128              		.cfi_offset 14, -4
 2129 0004 0646     		mov	r6, r0
 2130 0006 0C46     		mov	r4, r1
1433:.\ff.c        **** 
 2131              		.loc 1 1433 0
 2132 0008 0768     		ldr	r7, [r0]
 2133              	.LVL339:
1436:.\ff.c        **** 		return FR_INT_ERR;
 2134              		.loc 1 1436 0
 2135 000a B1F5001F 		cmp	r1, #2097152
 2136 000e 3AD2     		bcs	.L193
1436:.\ff.c        **** 		return FR_INT_ERR;
 2137              		.loc 1 1436 0 is_stmt 0 discriminator 1
 2138 0010 11F01F0F 		tst	r1, #31
 2139 0014 3AD1     		bne	.L194
1439:.\ff.c        **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2140              		.loc 1 1439 0 is_stmt 1
 2141 0016 3161     		str	r1, [r6, #16]
1440:.\ff.c        **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2142              		.loc 1 1440 0
 2143 0018 8568     		ldr	r5, [r0, #8]
 2144              	.LVL340:
1441:.\ff.c        **** 		clst = fs->dirbase;
 2145              		.loc 1 1441 0
 2146 001a 1DB9     		cbnz	r5, .L188
1441:.\ff.c        **** 		clst = fs->dirbase;
 2147              		.loc 1 1441 0 is_stmt 0 discriminator 1
 2148 001c 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2149 001e 022B     		cmp	r3, #2
 2150 0020 00D9     		bls	.L188
1442:.\ff.c        **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2151              		.loc 1 1442 0 is_stmt 1
 2152 0022 7D6A     		ldr	r5, [r7, #36]
 2153              	.LVL341:
 2154              	.L188:
1446:.\ff.c        **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 2155              		.loc 1 1446 0
 2156 0024 35B9     		cbnz	r5, .L189
1447:.\ff.c        **** 		dp->sect = fs->dirbase;
 2157              		.loc 1 1447 0
 2158 0026 3B89     		ldrh	r3, [r7, #8]
 2159 0028 B3EB541F 		cmp	r3, r4, lsr #5
 2160 002c 31D9     		bls	.L195
1448:.\ff.c        **** 
 2161              		.loc 1 1448 0
 2162 002e 7B6A     		ldr	r3, [r7, #36]
 2163 0030 B361     		str	r3, [r6, #24]
 2164 0032 1AE0     		b	.L190
 2165              	.L189:
1451:.\ff.c        **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2166              		.loc 1 1451 0
 2167 0034 B7F80A80 		ldrh	r8, [r7, #10]
 2168 0038 4FEA4828 		lsl	r8, r8, #9
 2169              	.LVL342:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 147


1452:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2170              		.loc 1 1452 0
 2171 003c 0EE0     		b	.L191
 2172              	.LVL343:
 2173              	.L192:
1453:.\ff.c        **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2174              		.loc 1 1453 0
 2175 003e 3046     		mov	r0, r6
 2176 0040 2946     		mov	r1, r5
 2177 0042 FFF7FEFF 		bl	get_fat
 2178              	.LVL344:
 2179 0046 0546     		mov	r5, r0
 2180              	.LVL345:
1454:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2181              		.loc 1 1454 0
 2182 0048 B0F1FF3F 		cmp	r0, #-1
 2183 004c 24D0     		beq	.L196
1455:.\ff.c        **** 			ofs -= csz;
 2184              		.loc 1 1455 0
 2185 004e 0128     		cmp	r0, #1
 2186 0050 25D9     		bls	.L197
1455:.\ff.c        **** 			ofs -= csz;
 2187              		.loc 1 1455 0 is_stmt 0 discriminator 2
 2188 0052 7B69     		ldr	r3, [r7, #20]
 2189 0054 8342     		cmp	r3, r0
 2190 0056 25D9     		bls	.L198
1456:.\ff.c        **** 		}
 2191              		.loc 1 1456 0 is_stmt 1
 2192 0058 C8EB0404 		rsb	r4, r8, r4
 2193              	.LVL346:
 2194              	.L191:
1452:.\ff.c        **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2195              		.loc 1 1452 0
 2196 005c 4445     		cmp	r4, r8
 2197 005e EED2     		bcs	.L192
1458:.\ff.c        **** 	}
 2198              		.loc 1 1458 0
 2199 0060 3846     		mov	r0, r7
 2200 0062 2946     		mov	r1, r5
 2201 0064 FFF7FEFF 		bl	clust2sect
 2202              	.LVL347:
 2203 0068 B061     		str	r0, [r6, #24]
 2204              	.LVL348:
 2205              	.L190:
1460:.\ff.c        **** 	if (!dp->sect) return FR_INT_ERR;
 2206              		.loc 1 1460 0
 2207 006a 7561     		str	r5, [r6, #20]
1461:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2208              		.loc 1 1461 0
 2209 006c B369     		ldr	r3, [r6, #24]
 2210 006e E3B1     		cbz	r3, .L199
1462:.\ff.c        **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2211              		.loc 1 1462 0
 2212 0070 03EB5423 		add	r3, r3, r4, lsr #9
 2213 0074 B361     		str	r3, [r6, #24]
1463:.\ff.c        **** 
 2214              		.loc 1 1463 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 148


 2215 0076 C4F30803 		ubfx	r3, r4, #0, #9
 2216 007a 3033     		adds	r3, r3, #48
 2217 007c 3B44     		add	r3, r3, r7
 2218 007e F361     		str	r3, [r6, #28]
1465:.\ff.c        **** }
 2219              		.loc 1 1465 0
 2220 0080 0020     		movs	r0, #0
 2221 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2222              	.LVL349:
 2223              	.L193:
1437:.\ff.c        **** 	}
 2224              		.loc 1 1437 0
 2225 0086 0220     		movs	r0, #2
 2226              	.LVL350:
 2227 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2228              	.LVL351:
 2229              	.L194:
 2230 008c 0220     		movs	r0, #2
 2231              	.LVL352:
 2232 008e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2233              	.LVL353:
 2234              	.L195:
1447:.\ff.c        **** 		dp->sect = fs->dirbase;
 2235              		.loc 1 1447 0
 2236 0092 0220     		movs	r0, #2
 2237              	.LVL354:
 2238 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2239              	.LVL355:
 2240              	.L196:
1454:.\ff.c        **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2241              		.loc 1 1454 0
 2242 0098 0120     		movs	r0, #1
 2243              	.LVL356:
 2244 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2245              	.LVL357:
 2246              	.L197:
1455:.\ff.c        **** 			ofs -= csz;
 2247              		.loc 1 1455 0
 2248 009e 0220     		movs	r0, #2
 2249              	.LVL358:
 2250 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2251              	.LVL359:
 2252              	.L198:
 2253 00a4 0220     		movs	r0, #2
 2254              	.LVL360:
 2255 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2256              	.LVL361:
 2257              	.L199:
1461:.\ff.c        **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2258              		.loc 1 1461 0
 2259 00aa 0220     		movs	r0, #2
1466:.\ff.c        **** 
 2260              		.loc 1 1466 0
 2261 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2262              		.cfi_endproc
 2263              	.LFE16:
 2264              		.size	dir_sdi, .-dir_sdi
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 149


 2265              		.section	.text.create_chain,"ax",%progbits
 2266              		.align	2
 2267              		.thumb
 2268              		.thumb_func
 2269              		.type	create_chain, %function
 2270              	create_chain:
 2271              	.LFB15:
1316:.\ff.c        **** 	DWORD cs, ncl, scl;
 2272              		.loc 1 1316 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 0
 2275              		@ frame_needed = 0, uses_anonymous_args = 0
 2276              	.LVL362:
 2277 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2278              		.cfi_def_cfa_offset 24
 2279              		.cfi_offset 4, -24
 2280              		.cfi_offset 5, -20
 2281              		.cfi_offset 6, -16
 2282              		.cfi_offset 7, -12
 2283              		.cfi_offset 8, -8
 2284              		.cfi_offset 14, -4
 2285 0004 0746     		mov	r7, r0
1319:.\ff.c        **** 
 2286              		.loc 1 1319 0
 2287 0006 0668     		ldr	r6, [r0]
 2288              	.LVL363:
1322:.\ff.c        **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
 2289              		.loc 1 1322 0
 2290 0008 8846     		mov	r8, r1
 2291 000a 29B9     		cbnz	r1, .L202
1323:.\ff.c        **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2292              		.loc 1 1323 0
 2293 000c F568     		ldr	r5, [r6, #12]
 2294              	.LVL364:
1324:.\ff.c        **** 	}
 2295              		.loc 1 1324 0
 2296 000e 7DB1     		cbz	r5, .L215
1324:.\ff.c        **** 	}
 2297              		.loc 1 1324 0 is_stmt 0 discriminator 2
 2298 0010 7369     		ldr	r3, [r6, #20]
 2299 0012 AB42     		cmp	r3, r5
 2300 0014 0ED9     		bls	.L216
 2301 0016 0EE0     		b	.L203
 2302              	.LVL365:
 2303              	.L202:
1327:.\ff.c        **** 		if (cs < 2) return 1;				/* Invalid value */
 2304              		.loc 1 1327 0 is_stmt 1
 2305 0018 FFF7FEFF 		bl	get_fat
 2306              	.LVL366:
1328:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2307              		.loc 1 1328 0
 2308 001c 0128     		cmp	r0, #1
 2309 001e 4BD9     		bls	.L217
1329:.\ff.c        **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2310              		.loc 1 1329 0
 2311 0020 B0F1FF3F 		cmp	r0, #-1
 2312 0024 4FD0     		beq	.L204
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 150


1330:.\ff.c        **** 		scl = clst;
 2313              		.loc 1 1330 0
 2314 0026 7369     		ldr	r3, [r6, #20]
 2315 0028 8342     		cmp	r3, r0
 2316 002a 4CD8     		bhi	.L204
1331:.\ff.c        **** 	}
 2317              		.loc 1 1331 0
 2318 002c 4546     		mov	r5, r8
 2319 002e 02E0     		b	.L203
 2320              	.LVL367:
 2321              	.L215:
1324:.\ff.c        **** 	}
 2322              		.loc 1 1324 0
 2323 0030 0125     		movs	r5, #1
 2324              	.LVL368:
 2325 0032 00E0     		b	.L203
 2326              	.LVL369:
 2327              	.L216:
 2328 0034 0125     		movs	r5, #1
 2329              	.LVL370:
 2330              	.L203:
1352:.\ff.c        **** 		for (;;) {
 2331              		.loc 1 1352 0
 2332 0036 2C46     		mov	r4, r5
 2333              	.LVL371:
 2334              	.L209:
1354:.\ff.c        **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2335              		.loc 1 1354 0
 2336 0038 0134     		adds	r4, r4, #1
 2337              	.LVL372:
1355:.\ff.c        **** 				ncl = 2;
 2338              		.loc 1 1355 0
 2339 003a 7369     		ldr	r3, [r6, #20]
 2340 003c A342     		cmp	r3, r4
 2341 003e 02D8     		bhi	.L205
 2342              	.LVL373:
1357:.\ff.c        **** 			}
 2343              		.loc 1 1357 0
 2344 0040 012D     		cmp	r5, #1
 2345 0042 3CD9     		bls	.L220
1356:.\ff.c        **** 				if (ncl > scl) return 0;	/* No free cluster */
 2346              		.loc 1 1356 0
 2347 0044 0224     		movs	r4, #2
 2348              	.LVL374:
 2349              	.L205:
1359:.\ff.c        **** 			if (cs == 0) break;				/* Found a free cluster */
 2350              		.loc 1 1359 0
 2351 0046 3846     		mov	r0, r7
 2352 0048 2146     		mov	r1, r4
 2353 004a FFF7FEFF 		bl	get_fat
 2354              	.LVL375:
1360:.\ff.c        **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 2355              		.loc 1 1360 0
 2356 004e 0346     		mov	r3, r0
 2357 0050 50B1     		cbz	r0, .L206
1361:.\ff.c        **** 			if (ncl == scl) return 0;		/* No free cluster */
 2358              		.loc 1 1361 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 151


 2359 0052 0128     		cmp	r0, #1
 2360 0054 02D0     		beq	.L207
1361:.\ff.c        **** 			if (ncl == scl) return 0;		/* No free cluster */
 2361              		.loc 1 1361 0 is_stmt 0 discriminator 2
 2362 0056 B0F1FF3F 		cmp	r0, #-1
 2363 005a 02D1     		bne	.L208
 2364              	.L207:
1361:.\ff.c        **** 			if (ncl == scl) return 0;		/* No free cluster */
 2365              		.loc 1 1361 0 discriminator 3
 2366 005c 1846     		mov	r0, r3
 2367              	.LVL376:
 2368 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2369              	.LVL377:
 2370              	.L208:
1362:.\ff.c        **** 		}
 2371              		.loc 1 1362 0 is_stmt 1
 2372 0062 AC42     		cmp	r4, r5
 2373 0064 E8D1     		bne	.L209
 2374 0066 2DE0     		b	.L221
 2375              	.L206:
1369:.\ff.c        **** 		if (res == FR_OK && clst) {
 2376              		.loc 1 1369 0
 2377 0068 3046     		mov	r0, r6
 2378              	.LVL378:
 2379 006a 2146     		mov	r1, r4
 2380 006c 4FF0FF32 		mov	r2, #-1
 2381 0070 FFF7FEFF 		bl	put_fat
 2382              	.LVL379:
1370:.\ff.c        **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 2383              		.loc 1 1370 0
 2384 0074 0346     		mov	r3, r0
 2385 0076 40B9     		cbnz	r0, .L210
1370:.\ff.c        **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 2386              		.loc 1 1370 0 is_stmt 0 discriminator 1
 2387 0078 B8F1000F 		cmp	r8, #0
 2388 007c 05D0     		beq	.L210
1371:.\ff.c        **** 		}
 2389              		.loc 1 1371 0 is_stmt 1
 2390 007e 3046     		mov	r0, r6
 2391              	.LVL380:
 2392 0080 4146     		mov	r1, r8
 2393 0082 2246     		mov	r2, r4
 2394 0084 FFF7FEFF 		bl	put_fat
 2395              	.LVL381:
 2396 0088 0346     		mov	r3, r0
 2397              	.LVL382:
 2398              	.L210:
1375:.\ff.c        **** 		fs->last_clst = ncl;
 2399              		.loc 1 1375 0
 2400 008a 63B9     		cbnz	r3, .L211
1376:.\ff.c        **** 		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 2401              		.loc 1 1376 0
 2402 008c F460     		str	r4, [r6, #12]
1377:.\ff.c        **** 		fs->fsi_flag |= 1;
 2403              		.loc 1 1377 0
 2404 008e 3269     		ldr	r2, [r6, #16]
 2405 0090 7369     		ldr	r3, [r6, #20]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 152


 2406              	.LVL383:
 2407 0092 023B     		subs	r3, r3, #2
 2408 0094 9A42     		cmp	r2, r3
 2409 0096 01D2     		bcs	.L212
1377:.\ff.c        **** 		fs->fsi_flag |= 1;
 2410              		.loc 1 1377 0 is_stmt 0 discriminator 1
 2411 0098 013A     		subs	r2, r2, #1
 2412 009a 3261     		str	r2, [r6, #16]
 2413              	.L212:
1378:.\ff.c        **** 	} else {
 2414              		.loc 1 1378 0 is_stmt 1
 2415 009c 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 2416 009e 43F00103 		orr	r3, r3, #1
 2417 00a2 3371     		strb	r3, [r6, #4]
 2418 00a4 05E0     		b	.L213
 2419              	.LVL384:
 2420              	.L211:
1380:.\ff.c        **** 	}
 2421              		.loc 1 1380 0
 2422 00a6 012B     		cmp	r3, #1
 2423 00a8 02D1     		bne	.L222
 2424 00aa 4FF0FF34 		mov	r4, #-1
 2425              	.LVL385:
 2426 00ae 00E0     		b	.L213
 2427              	.LVL386:
 2428              	.L222:
 2429 00b0 0124     		movs	r4, #1
 2430              	.LVL387:
 2431              	.L213:
1383:.\ff.c        **** }
 2432              		.loc 1 1383 0
 2433 00b2 2046     		mov	r0, r4
 2434 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2435              	.LVL388:
 2436              	.L217:
1328:.\ff.c        **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2437              		.loc 1 1328 0
 2438 00b8 0120     		movs	r0, #1
 2439              	.LVL389:
 2440 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2441              	.LVL390:
 2442              	.L220:
1357:.\ff.c        **** 			}
 2443              		.loc 1 1357 0
 2444 00be 0020     		movs	r0, #0
 2445 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2446              	.LVL391:
 2447              	.L221:
1362:.\ff.c        **** 		}
 2448              		.loc 1 1362 0
 2449 00c4 0020     		movs	r0, #0
 2450              	.LVL392:
 2451              	.L204:
1384:.\ff.c        **** 
 2452              		.loc 1 1384 0
 2453 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2454              		.cfi_endproc
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 153


 2455              	.LFE15:
 2456              		.size	create_chain, .-create_chain
 2457 00ca 00BF     		.section	.text.remove_chain,"ax",%progbits
 2458              		.align	2
 2459              		.thumb
 2460              		.thumb_func
 2461              		.type	remove_chain, %function
 2462              	remove_chain:
 2463              	.LFB14:
1237:.\ff.c        **** 	FRESULT res = FR_OK;
 2464              		.loc 1 1237 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468              	.LVL393:
 2469 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2470              		.cfi_def_cfa_offset 24
 2471              		.cfi_offset 3, -24
 2472              		.cfi_offset 4, -20
 2473              		.cfi_offset 5, -16
 2474              		.cfi_offset 6, -12
 2475              		.cfi_offset 7, -8
 2476              		.cfi_offset 14, -4
 2477 0002 0746     		mov	r7, r0
 2478 0004 0E46     		mov	r6, r1
 2479              	.LVL394:
1240:.\ff.c        **** #if _FS_EXFAT || _USE_TRIM
 2480              		.loc 1 1240 0
 2481 0006 0468     		ldr	r4, [r0]
 2482              	.LVL395:
1248:.\ff.c        **** 
 2483              		.loc 1 1248 0
 2484 0008 0129     		cmp	r1, #1
 2485 000a 2CD9     		bls	.L230
1248:.\ff.c        **** 
 2486              		.loc 1 1248 0 is_stmt 0 discriminator 2
 2487 000c 6369     		ldr	r3, [r4, #20]
 2488 000e 8B42     		cmp	r3, r1
 2489 0010 2BD9     		bls	.L231
1251:.\ff.c        **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2490              		.loc 1 1251 0 is_stmt 1
 2491 0012 32B1     		cbz	r2, .L229
1252:.\ff.c        **** 		if (res != FR_OK) return res;
 2492              		.loc 1 1252 0
 2493 0014 2046     		mov	r0, r4
 2494              	.LVL396:
 2495 0016 1146     		mov	r1, r2
 2496              	.LVL397:
 2497 0018 4FF0FF32 		mov	r2, #-1
 2498              	.LVL398:
 2499 001c FFF7FEFF 		bl	put_fat
 2500              	.LVL399:
1253:.\ff.c        **** 	}
 2501              		.loc 1 1253 0
 2502 0020 28BB     		cbnz	r0, .L232
 2503              	.LVL400:
 2504              	.L229:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 154


1258:.\ff.c        **** 		if (nxt == 0) break;				/* Empty cluster? */
 2505              		.loc 1 1258 0
 2506 0022 3846     		mov	r0, r7
 2507 0024 3146     		mov	r1, r6
 2508 0026 FFF7FEFF 		bl	get_fat
 2509              	.LVL401:
1259:.\ff.c        **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2510              		.loc 1 1259 0
 2511 002a 0546     		mov	r5, r0
 2512 002c 00B3     		cbz	r0, .L233
1260:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2513              		.loc 1 1260 0
 2514 002e 0128     		cmp	r0, #1
 2515 0030 20D0     		beq	.L234
1261:.\ff.c        **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2516              		.loc 1 1261 0
 2517 0032 B0F1FF3F 		cmp	r0, #-1
 2518 0036 1FD0     		beq	.L235
1263:.\ff.c        **** 			if (res != FR_OK) return res;
 2519              		.loc 1 1263 0
 2520 0038 2046     		mov	r0, r4
 2521              	.LVL402:
 2522 003a 3146     		mov	r1, r6
 2523 003c 0022     		movs	r2, #0
 2524 003e FFF7FEFF 		bl	put_fat
 2525              	.LVL403:
1264:.\ff.c        **** 		}
 2526              		.loc 1 1264 0
 2527 0042 00B1     		cbz	r0, .L227
1264:.\ff.c        **** 		}
 2528              		.loc 1 1264 0 is_stmt 0 discriminator 1
 2529 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2530              	.LVL404:
 2531              	.L227:
1266:.\ff.c        **** 			fs->free_clst++;
 2532              		.loc 1 1266 0 is_stmt 1
 2533 0046 2369     		ldr	r3, [r4, #16]
 2534 0048 6269     		ldr	r2, [r4, #20]
 2535 004a 911E     		subs	r1, r2, #2
 2536 004c 8B42     		cmp	r3, r1
 2537 004e 05D2     		bcs	.L228
1267:.\ff.c        **** 			fs->fsi_flag |= 1;
 2538              		.loc 1 1267 0
 2539 0050 0133     		adds	r3, r3, #1
 2540 0052 2361     		str	r3, [r4, #16]
1268:.\ff.c        **** 		}
 2541              		.loc 1 1268 0
 2542 0054 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2543 0056 43F00103 		orr	r3, r3, #1
 2544 005a 2371     		strb	r3, [r4, #4]
 2545              	.L228:
 2546              	.LVL405:
1288:.\ff.c        **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2547              		.loc 1 1288 0
 2548 005c 2E46     		mov	r6, r5
1289:.\ff.c        **** 
 2549              		.loc 1 1289 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 155


 2550 005e 9542     		cmp	r5, r2
 2551 0060 DFD3     		bcc	.L229
1302:.\ff.c        **** }
 2552              		.loc 1 1302 0
 2553 0062 0020     		movs	r0, #0
 2554              	.LVL406:
 2555 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2556              	.LVL407:
 2557              	.L230:
1248:.\ff.c        **** 
 2558              		.loc 1 1248 0
 2559 0066 0220     		movs	r0, #2
 2560              	.LVL408:
 2561 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2562              	.LVL409:
 2563              	.L231:
 2564 006a 0220     		movs	r0, #2
 2565              	.LVL410:
 2566 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2567              	.LVL411:
 2568              	.L232:
 2569 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2570              	.LVL412:
 2571              	.L233:
1302:.\ff.c        **** }
 2572              		.loc 1 1302 0
 2573 0070 0020     		movs	r0, #0
 2574              	.LVL413:
 2575 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2576              	.LVL414:
 2577              	.L234:
1260:.\ff.c        **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2578              		.loc 1 1260 0
 2579 0074 0220     		movs	r0, #2
 2580              	.LVL415:
 2581 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2582              	.LVL416:
 2583              	.L235:
1261:.\ff.c        **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2584              		.loc 1 1261 0
 2585 0078 0120     		movs	r0, #1
 2586              	.LVL417:
1303:.\ff.c        **** 
 2587              		.loc 1 1303 0
 2588 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2589              		.cfi_endproc
 2590              	.LFE14:
 2591              		.size	remove_chain, .-remove_chain
 2592              		.section	.text.dir_remove,"ax",%progbits
 2593              		.align	2
 2594              		.thumb
 2595              		.thumb_func
 2596              		.type	dir_remove, %function
 2597              	dir_remove:
 2598              	.LFB24:
2351:.\ff.c        **** 	FRESULT res;
 2599              		.loc 1 2351 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 156


 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 0
 2602              		@ frame_needed = 0, uses_anonymous_args = 0
 2603              	.LVL418:
 2604 0000 38B5     		push	{r3, r4, r5, lr}
 2605              		.cfi_def_cfa_offset 16
 2606              		.cfi_offset 3, -16
 2607              		.cfi_offset 4, -12
 2608              		.cfi_offset 5, -8
 2609              		.cfi_offset 14, -4
 2610 0002 0446     		mov	r4, r0
2353:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
 2611              		.loc 1 2353 0
 2612 0004 0568     		ldr	r5, [r0]
 2613              	.LVL419:
2376:.\ff.c        **** 	if (res == FR_OK) {
 2614              		.loc 1 2376 0
 2615 0006 2846     		mov	r0, r5
 2616              	.LVL420:
 2617 0008 A169     		ldr	r1, [r4, #24]
 2618 000a FFF7FEFF 		bl	move_window
 2619              	.LVL421:
2377:.\ff.c        **** 		dp->dir[DIR_Name] = DDEM;
 2620              		.loc 1 2377 0
 2621 000e 0346     		mov	r3, r0
 2622 0010 20B9     		cbnz	r0, .L238
2378:.\ff.c        **** 		fs->wflag = 1;
 2623              		.loc 1 2378 0
 2624 0012 E269     		ldr	r2, [r4, #28]
 2625 0014 E521     		movs	r1, #229
 2626 0016 1170     		strb	r1, [r2]
2379:.\ff.c        **** 	}
 2627              		.loc 1 2379 0
 2628 0018 0122     		movs	r2, #1
 2629 001a EA70     		strb	r2, [r5, #3]
 2630              	.L238:
2384:.\ff.c        **** 
 2631              		.loc 1 2384 0
 2632 001c 1846     		mov	r0, r3
 2633              	.LVL422:
 2634 001e 38BD     		pop	{r3, r4, r5, pc}
 2635              		.cfi_endproc
 2636              	.LFE24:
 2637              		.size	dir_remove, .-dir_remove
 2638              		.section	.text.dir_next,"ax",%progbits
 2639              		.align	2
 2640              		.thumb
 2641              		.thumb_func
 2642              		.type	dir_next, %function
 2643              	dir_next:
 2644              	.LFB17:
1480:.\ff.c        **** 	DWORD ofs, clst;
 2645              		.loc 1 1480 0
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 0
 2648              		@ frame_needed = 0, uses_anonymous_args = 0
 2649              	.LVL423:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 157


 2650 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2651              		.cfi_def_cfa_offset 32
 2652              		.cfi_offset 3, -32
 2653              		.cfi_offset 4, -28
 2654              		.cfi_offset 5, -24
 2655              		.cfi_offset 6, -20
 2656              		.cfi_offset 7, -16
 2657              		.cfi_offset 8, -12
 2658              		.cfi_offset 9, -8
 2659              		.cfi_offset 14, -4
1482:.\ff.c        **** #if !_FS_READONLY
 2660              		.loc 1 1482 0
 2661 0004 0668     		ldr	r6, [r0]
 2662              	.LVL424:
1487:.\ff.c        **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 2663              		.loc 1 1487 0
 2664 0006 0369     		ldr	r3, [r0, #16]
 2665 0008 03F12005 		add	r5, r3, #32
 2666              	.LVL425:
1488:.\ff.c        **** 
 2667              		.loc 1 1488 0
 2668 000c 8369     		ldr	r3, [r0, #24]
 2669 000e 002B     		cmp	r3, #0
 2670 0010 6ED0     		beq	.L248
1488:.\ff.c        **** 
 2671              		.loc 1 1488 0 is_stmt 0 discriminator 2
 2672 0012 B5F5001F 		cmp	r5, #2097152
 2673 0016 6ED2     		bcs	.L249
 2674 0018 8846     		mov	r8, r1
 2675 001a 0446     		mov	r4, r0
1490:.\ff.c        **** 		dp->sect++;				/* Next sector */
 2676              		.loc 1 1490 0 is_stmt 1
 2677 001c C5F30807 		ubfx	r7, r5, #0, #9
 2678 0020 002F     		cmp	r7, #0
 2679 0022 5DD1     		bne	.L242
1491:.\ff.c        **** 
 2680              		.loc 1 1491 0
 2681 0024 0133     		adds	r3, r3, #1
 2682 0026 8361     		str	r3, [r0, #24]
1493:.\ff.c        **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 2683              		.loc 1 1493 0
 2684 0028 4169     		ldr	r1, [r0, #20]
 2685              	.LVL426:
 2686 002a 41B9     		cbnz	r1, .L243
1494:.\ff.c        **** 				dp->sect = 0; return FR_NO_FILE;
 2687              		.loc 1 1494 0
 2688 002c 3389     		ldrh	r3, [r6, #8]
 2689 002e B3EB551F 		cmp	r3, r5, lsr #5
 2690 0032 55D8     		bhi	.L242
1495:.\ff.c        **** 			}
 2691              		.loc 1 1495 0
 2692 0034 0023     		movs	r3, #0
 2693 0036 8361     		str	r3, [r0, #24]
 2694 0038 0420     		movs	r0, #4
 2695              	.LVL427:
 2696 003a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2697              	.LVL428:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 158


 2698              	.L243:
1499:.\ff.c        **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 2699              		.loc 1 1499 0
 2700 003e 7389     		ldrh	r3, [r6, #10]
 2701 0040 013B     		subs	r3, r3, #1
 2702 0042 13EA5523 		ands	r3, r3, r5, lsr #9
 2703 0046 4BD1     		bne	.L242
1500:.\ff.c        **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 2704              		.loc 1 1500 0
 2705 0048 FFF7FEFF 		bl	get_fat
 2706              	.LVL429:
 2707 004c 8146     		mov	r9, r0
 2708              	.LVL430:
1501:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 2709              		.loc 1 1501 0
 2710 004e 0128     		cmp	r0, #1
 2711 0050 54D9     		bls	.L250
1502:.\ff.c        **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 2712              		.loc 1 1502 0
 2713 0052 B0F1FF3F 		cmp	r0, #-1
 2714 0056 54D0     		beq	.L251
1503:.\ff.c        **** #if !_FS_READONLY
 2715              		.loc 1 1503 0
 2716 0058 7369     		ldr	r3, [r6, #20]
 2717 005a 8342     		cmp	r3, r0
 2718 005c 39D8     		bhi	.L244
1505:.\ff.c        **** 						dp->sect = 0; return FR_NO_FILE;
 2719              		.loc 1 1505 0
 2720 005e B8F1000F 		cmp	r8, #0
 2721 0062 04D1     		bne	.L245
1506:.\ff.c        **** 					}
 2722              		.loc 1 1506 0
 2723 0064 0023     		movs	r3, #0
 2724 0066 A361     		str	r3, [r4, #24]
 2725 0068 0420     		movs	r0, #4
 2726              	.LVL431:
 2727 006a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2728              	.LVL432:
 2729              	.L245:
1508:.\ff.c        **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2730              		.loc 1 1508 0
 2731 006e 2046     		mov	r0, r4
 2732              	.LVL433:
 2733 0070 6169     		ldr	r1, [r4, #20]
 2734 0072 FFF7FEFF 		bl	create_chain
 2735              	.LVL434:
1509:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 2736              		.loc 1 1509 0
 2737 0076 8146     		mov	r9, r0
 2738 0078 0028     		cmp	r0, #0
 2739 007a 45D0     		beq	.L252
1510:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2740              		.loc 1 1510 0
 2741 007c 0128     		cmp	r0, #1
 2742 007e 46D0     		beq	.L253
1511:.\ff.c        **** 					/* Clean-up the stretched table */
 2743              		.loc 1 1511 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 159


 2744 0080 B0F1FF3F 		cmp	r0, #-1
 2745 0084 46D0     		beq	.L254
1514:.\ff.c        **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 2746              		.loc 1 1514 0
 2747 0086 3046     		mov	r0, r6
 2748              	.LVL435:
 2749 0088 FFF7FEFF 		bl	sync_window
 2750              	.LVL436:
 2751 008c 0028     		cmp	r0, #0
 2752 008e 44D1     		bne	.L255
1515:.\ff.c        **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 2753              		.loc 1 1515 0
 2754 0090 06F13000 		add	r0, r6, #48
 2755 0094 0021     		movs	r1, #0
 2756 0096 4FF40072 		mov	r2, #512
 2757 009a FFF7FEFF 		bl	mem_set
 2758              	.LVL437:
1516:.\ff.c        **** 						fs->wflag = 1;
 2759              		.loc 1 1516 0
 2760 009e 3046     		mov	r0, r6
 2761 00a0 4946     		mov	r1, r9
 2762 00a2 FFF7FEFF 		bl	clust2sect
 2763              	.LVL438:
 2764 00a6 F062     		str	r0, [r6, #44]
 2765 00a8 4FF00008 		mov	r8, #0
 2766              	.LVL439:
 2767 00ac 0AE0     		b	.L246
 2768              	.LVL440:
 2769              	.L247:
1517:.\ff.c        **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 2770              		.loc 1 1517 0
 2771 00ae 0123     		movs	r3, #1
 2772 00b0 F370     		strb	r3, [r6, #3]
1518:.\ff.c        **** 					}
 2773              		.loc 1 1518 0
 2774 00b2 3046     		mov	r0, r6
 2775 00b4 FFF7FEFF 		bl	sync_window
 2776              	.LVL441:
 2777 00b8 90BB     		cbnz	r0, .L256
1516:.\ff.c        **** 						fs->wflag = 1;
 2778              		.loc 1 1516 0 discriminator 2
 2779 00ba 08F10108 		add	r8, r8, #1
 2780              	.LVL442:
 2781 00be F36A     		ldr	r3, [r6, #44]
 2782 00c0 0133     		adds	r3, r3, #1
 2783 00c2 F362     		str	r3, [r6, #44]
 2784              	.LVL443:
 2785              	.L246:
1516:.\ff.c        **** 						fs->wflag = 1;
 2786              		.loc 1 1516 0 is_stmt 0 discriminator 1
 2787 00c4 7389     		ldrh	r3, [r6, #10]
 2788 00c6 4345     		cmp	r3, r8
 2789 00c8 F1D8     		bhi	.L247
1520:.\ff.c        **** #else
 2790              		.loc 1 1520 0 is_stmt 1
 2791 00ca F36A     		ldr	r3, [r6, #44]
 2792 00cc C8EB0303 		rsb	r3, r8, r3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 160


 2793 00d0 F362     		str	r3, [r6, #44]
 2794              	.LVL444:
 2795              	.L244:
1526:.\ff.c        **** 				dp->sect = clust2sect(fs, clst);
 2796              		.loc 1 1526 0
 2797 00d2 C4F81490 		str	r9, [r4, #20]
1527:.\ff.c        **** 			}
 2798              		.loc 1 1527 0
 2799 00d6 3046     		mov	r0, r6
 2800 00d8 4946     		mov	r1, r9
 2801 00da FFF7FEFF 		bl	clust2sect
 2802              	.LVL445:
 2803 00de A061     		str	r0, [r4, #24]
 2804              	.LVL446:
 2805              	.L242:
1531:.\ff.c        **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 2806              		.loc 1 1531 0
 2807 00e0 2561     		str	r5, [r4, #16]
1532:.\ff.c        **** 
 2808              		.loc 1 1532 0
 2809 00e2 07F13008 		add	r8, r7, #48
 2810 00e6 4644     		add	r6, r6, r8
 2811              	.LVL447:
 2812 00e8 E661     		str	r6, [r4, #28]
1534:.\ff.c        **** }
 2813              		.loc 1 1534 0
 2814 00ea 0020     		movs	r0, #0
 2815 00ec BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2816              	.LVL448:
 2817              	.L248:
1488:.\ff.c        **** 
 2818              		.loc 1 1488 0
 2819 00f0 0420     		movs	r0, #4
 2820              	.LVL449:
 2821 00f2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2822              	.LVL450:
 2823              	.L249:
 2824 00f6 0420     		movs	r0, #4
 2825              	.LVL451:
 2826 00f8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2827              	.LVL452:
 2828              	.L250:
1501:.\ff.c        **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 2829              		.loc 1 1501 0
 2830 00fc 0220     		movs	r0, #2
 2831              	.LVL453:
 2832 00fe BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2833              	.LVL454:
 2834              	.L251:
1502:.\ff.c        **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 2835              		.loc 1 1502 0
 2836 0102 0120     		movs	r0, #1
 2837              	.LVL455:
 2838 0104 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2839              	.LVL456:
 2840              	.L252:
1509:.\ff.c        **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 161


 2841              		.loc 1 1509 0
 2842 0108 0720     		movs	r0, #7
 2843              	.LVL457:
 2844 010a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2845              	.LVL458:
 2846              	.L253:
1510:.\ff.c        **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2847              		.loc 1 1510 0
 2848 010e 0220     		movs	r0, #2
 2849              	.LVL459:
 2850 0110 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2851              	.LVL460:
 2852              	.L254:
1511:.\ff.c        **** 					/* Clean-up the stretched table */
 2853              		.loc 1 1511 0
 2854 0114 0120     		movs	r0, #1
 2855              	.LVL461:
 2856 0116 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2857              	.LVL462:
 2858              	.L255:
1514:.\ff.c        **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 2859              		.loc 1 1514 0
 2860 011a 0120     		movs	r0, #1
 2861 011c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2862              	.LVL463:
 2863              	.L256:
1518:.\ff.c        **** 					}
 2864              		.loc 1 1518 0
 2865 0120 0120     		movs	r0, #1
1535:.\ff.c        **** 
 2866              		.loc 1 1535 0
 2867 0122 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2868              		.cfi_endproc
 2869              	.LFE17:
 2870              		.size	dir_next, .-dir_next
 2871 0126 00BF     		.section	.text.dir_find,"ax",%progbits
 2872              		.align	2
 2873              		.thumb
 2874              		.thumb_func
 2875              		.type	dir_find, %function
 2876              	dir_find:
 2877              	.LFB22:
2169:.\ff.c        **** 	FRESULT res;
 2878              		.loc 1 2169 0
 2879              		.cfi_startproc
 2880              		@ args = 0, pretend = 0, frame = 0
 2881              		@ frame_needed = 0, uses_anonymous_args = 0
 2882              	.LVL464:
 2883 0000 70B5     		push	{r4, r5, r6, lr}
 2884              		.cfi_def_cfa_offset 16
 2885              		.cfi_offset 4, -16
 2886              		.cfi_offset 5, -12
 2887              		.cfi_offset 6, -8
 2888              		.cfi_offset 14, -4
 2889 0002 0446     		mov	r4, r0
2171:.\ff.c        **** 	BYTE c;
 2890              		.loc 1 2171 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 162


 2891 0004 0668     		ldr	r6, [r0]
 2892              	.LVL465:
2177:.\ff.c        **** 	if (res != FR_OK) return res;
 2893              		.loc 1 2177 0
 2894 0006 0021     		movs	r1, #0
 2895 0008 FFF7FEFF 		bl	dir_sdi
 2896              	.LVL466:
2178:.\ff.c        **** #if _FS_EXFAT
 2897              		.loc 1 2178 0
 2898 000c 08BB     		cbnz	r0, .L263
 2899              	.L262:
2201:.\ff.c        **** 		if (res != FR_OK) break;
 2900              		.loc 1 2201 0
 2901 000e 3046     		mov	r0, r6
 2902              	.LVL467:
 2903 0010 A169     		ldr	r1, [r4, #24]
 2904 0012 FFF7FEFF 		bl	move_window
 2905              	.LVL468:
2202:.\ff.c        **** 		c = dp->dir[DIR_Name];
 2906              		.loc 1 2202 0
 2907 0016 0546     		mov	r5, r0
 2908 0018 C8B9     		cbnz	r0, .L260
2203:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2909              		.loc 1 2203 0
 2910 001a E069     		ldr	r0, [r4, #28]
 2911              	.LVL469:
 2912 001c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2913              	.LVL470:
2204:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
 2914              		.loc 1 2204 0
 2915 001e ABB1     		cbz	r3, .L264
2227:.\ff.c        **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 2916              		.loc 1 2227 0
 2917 0020 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 2918              	.LVL471:
 2919 0022 03F03F03 		and	r3, r3, #63
 2920 0026 A371     		strb	r3, [r4, #6]
 2921              	.LVL472:
2228:.\ff.c        **** #endif
 2922              		.loc 1 2228 0
 2923 0028 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 2924 002a 13F0080F 		tst	r3, #8
 2925 002e 05D1     		bne	.L261
2228:.\ff.c        **** #endif
 2926              		.loc 1 2228 0 is_stmt 0 discriminator 1
 2927 0030 04F12001 		add	r1, r4, #32
 2928 0034 0B22     		movs	r2, #11
 2929 0036 FFF7FEFF 		bl	mem_cmp
 2930              	.LVL473:
 2931 003a 40B1     		cbz	r0, .L260
 2932              	.L261:
2230:.\ff.c        **** 	} while (res == FR_OK);
 2933              		.loc 1 2230 0 is_stmt 1
 2934 003c 2046     		mov	r0, r4
 2935 003e 0021     		movs	r1, #0
 2936 0040 FFF7FEFF 		bl	dir_next
 2937              	.LVL474:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 163


2231:.\ff.c        **** 
 2938              		.loc 1 2231 0
 2939 0044 0546     		mov	r5, r0
 2940 0046 0028     		cmp	r0, #0
 2941 0048 E1D0     		beq	.L262
 2942 004a 00E0     		b	.L260
 2943              	.LVL475:
 2944              	.L264:
2204:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
 2945              		.loc 1 2204 0
 2946 004c 0425     		movs	r5, #4
 2947              	.LVL476:
 2948              	.L260:
2233:.\ff.c        **** }
 2949              		.loc 1 2233 0
 2950 004e 2846     		mov	r0, r5
 2951 0050 70BD     		pop	{r4, r5, r6, pc}
 2952              	.LVL477:
 2953              	.L263:
2234:.\ff.c        **** 
 2954              		.loc 1 2234 0
 2955 0052 70BD     		pop	{r4, r5, r6, pc}
 2956              		.cfi_endproc
 2957              	.LFE22:
 2958              		.size	dir_find, .-dir_find
 2959              		.section	.text.follow_path,"ax",%progbits
 2960              		.align	2
 2961              		.thumb
 2962              		.thumb_func
 2963              		.type	follow_path, %function
 2964              	follow_path:
 2965              	.LFB27:
2769:.\ff.c        **** 	FRESULT res;
 2966              		.loc 1 2769 0
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 8
 2969              		@ frame_needed = 0, uses_anonymous_args = 0
 2970              	.LVL478:
 2971 0000 30B5     		push	{r4, r5, lr}
 2972              		.cfi_def_cfa_offset 12
 2973              		.cfi_offset 4, -12
 2974              		.cfi_offset 5, -8
 2975              		.cfi_offset 14, -4
 2976 0002 83B0     		sub	sp, sp, #12
 2977              		.cfi_def_cfa_offset 24
 2978 0004 0446     		mov	r4, r0
 2979 0006 0191     		str	r1, [sp, #4]
 2980              	.LVL479:
2773:.\ff.c        **** 
 2981              		.loc 1 2773 0
 2982 0008 0568     		ldr	r5, [r0]
 2983              	.LVL480:
2782:.\ff.c        **** 		obj->sclust = 0;					/* Start from the root directory */
 2984              		.loc 1 2782 0
 2985 000a 01E0     		b	.L267
 2986              	.L268:
2782:.\ff.c        **** 		obj->sclust = 0;					/* Start from the root directory */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 164


 2987              		.loc 1 2782 0 is_stmt 0 discriminator 4
 2988 000c 0133     		adds	r3, r3, #1
 2989 000e 0193     		str	r3, [sp, #4]
 2990              	.L267:
2782:.\ff.c        **** 		obj->sclust = 0;					/* Start from the root directory */
 2991              		.loc 1 2782 0 discriminator 1
 2992 0010 019B     		ldr	r3, [sp, #4]
 2993 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2994 0014 2F2A     		cmp	r2, #47
 2995 0016 F9D0     		beq	.L268
2782:.\ff.c        **** 		obj->sclust = 0;					/* Start from the root directory */
 2996              		.loc 1 2782 0 discriminator 3
 2997 0018 5C2A     		cmp	r2, #92
 2998 001a F7D0     		beq	.L268
2783:.\ff.c        **** 	}
 2999              		.loc 1 2783 0 is_stmt 1
 3000 001c 0022     		movs	r2, #0
 3001 001e A260     		str	r2, [r4, #8]
2799:.\ff.c        **** 		dp->fn[NSFLAG] = NS_NONAME;
 3002              		.loc 1 2799 0
 3003 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3004 0022 1F2B     		cmp	r3, #31
 3005 0024 08D8     		bhi	.L269
2800:.\ff.c        **** 		res = dir_sdi(dp, 0);
 3006              		.loc 1 2800 0
 3007 0026 8023     		movs	r3, #128
 3008 0028 84F82B30 		strb	r3, [r4, #43]
2801:.\ff.c        **** 
 3009              		.loc 1 2801 0
 3010 002c 2046     		mov	r0, r4
 3011              	.LVL481:
 3012 002e 1146     		mov	r1, r2
 3013              	.LVL482:
 3014 0030 FFF7FEFF 		bl	dir_sdi
 3015              	.LVL483:
 3016 0034 0346     		mov	r3, r0
 3017              	.LVL484:
 3018 0036 26E0     		b	.L270
 3019              	.LVL485:
 3020              	.L269:
2805:.\ff.c        **** 			if (res != FR_OK) break;
 3021              		.loc 1 2805 0
 3022 0038 2046     		mov	r0, r4
 3023 003a 01A9     		add	r1, sp, #4
 3024 003c FFF7FEFF 		bl	create_name
 3025              	.LVL486:
2806:.\ff.c        **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3026              		.loc 1 2806 0
 3027 0040 0346     		mov	r3, r0
 3028 0042 00BB     		cbnz	r0, .L270
2807:.\ff.c        **** 			ns = dp->fn[NSFLAG];
 3029              		.loc 1 2807 0
 3030 0044 2046     		mov	r0, r4
 3031              	.LVL487:
 3032 0046 FFF7FEFF 		bl	dir_find
 3033              	.LVL488:
2808:.\ff.c        **** 			if (res != FR_OK) {				/* Failed to find the object */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 165


 3034              		.loc 1 2808 0
 3035 004a 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 3036              	.LVL489:
2809:.\ff.c        **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3037              		.loc 1 2809 0
 3038 004e 0346     		mov	r3, r0
 3039 0050 28B1     		cbz	r0, .L271
2810:.\ff.c        **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 3040              		.loc 1 2810 0
 3041 0052 0428     		cmp	r0, #4
 3042 0054 17D1     		bne	.L270
2816:.\ff.c        **** 					}
 3043              		.loc 1 2816 0
 3044 0056 12F0040F 		tst	r2, #4
 3045 005a 11D0     		beq	.L272
 3046 005c 13E0     		b	.L270
 3047              	.L271:
2821:.\ff.c        **** 			/* Get into the sub-directory */
 3048              		.loc 1 2821 0
 3049 005e 12F0040F 		tst	r2, #4
 3050 0062 10D1     		bne	.L270
2823:.\ff.c        **** 				res = FR_NO_PATH; break;
 3051              		.loc 1 2823 0
 3052 0064 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3053 0066 13F0100F 		tst	r3, #16
 3054 006a 0BD0     		beq	.L273
2837:.\ff.c        **** 			}
 3055              		.loc 1 2837 0
 3056 006c 2169     		ldr	r1, [r4, #16]
 3057 006e C1F30801 		ubfx	r1, r1, #0, #9
 3058 0072 3031     		adds	r1, r1, #48
 3059 0074 2846     		mov	r0, r5
 3060              	.LVL490:
 3061 0076 2944     		add	r1, r1, r5
 3062 0078 FFF7FEFF 		bl	ld_clust
 3063              	.LVL491:
 3064 007c A060     		str	r0, [r4, #8]
2839:.\ff.c        **** 	}
 3065              		.loc 1 2839 0
 3066 007e DBE7     		b	.L269
 3067              	.LVL492:
 3068              	.L272:
2816:.\ff.c        **** 					}
 3069              		.loc 1 2816 0
 3070 0080 0523     		movs	r3, #5
 3071 0082 00E0     		b	.L270
 3072              	.L273:
2824:.\ff.c        **** 			}
 3073              		.loc 1 2824 0
 3074 0084 0523     		movs	r3, #5
 3075              	.LVL493:
 3076              	.L270:
2843:.\ff.c        **** 
 3077              		.loc 1 2843 0
 3078 0086 1846     		mov	r0, r3
 3079 0088 03B0     		add	sp, sp, #12
 3080              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 166


 3081              		@ sp needed
 3082 008a 30BD     		pop	{r4, r5, pc}
 3083              		.cfi_endproc
 3084              	.LFE27:
 3085              		.size	follow_path, .-follow_path
 3086              		.section	.text.dir_alloc,"ax",%progbits
 3087              		.align	2
 3088              		.thumb
 3089              		.thumb_func
 3090              		.type	dir_alloc, %function
 3091              	dir_alloc:
 3092              	.LFB18:
1550:.\ff.c        **** 	FRESULT res;
 3093              		.loc 1 1550 0
 3094              		.cfi_startproc
 3095              		@ args = 0, pretend = 0, frame = 0
 3096              		@ frame_needed = 0, uses_anonymous_args = 0
 3097              	.LVL494:
 3098 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3099              		.cfi_def_cfa_offset 24
 3100              		.cfi_offset 3, -24
 3101              		.cfi_offset 4, -20
 3102              		.cfi_offset 5, -16
 3103              		.cfi_offset 6, -12
 3104              		.cfi_offset 7, -8
 3105              		.cfi_offset 14, -4
 3106 0002 0446     		mov	r4, r0
 3107 0004 0F46     		mov	r7, r1
1553:.\ff.c        **** 
 3108              		.loc 1 1553 0
 3109 0006 0668     		ldr	r6, [r0]
 3110              	.LVL495:
1556:.\ff.c        **** 	if (res == FR_OK) {
 3111              		.loc 1 1556 0
 3112 0008 0021     		movs	r1, #0
 3113              	.LVL496:
 3114 000a FFF7FEFF 		bl	dir_sdi
 3115              	.LVL497:
1557:.\ff.c        **** 		n = 0;
 3116              		.loc 1 1557 0
 3117 000e 0246     		mov	r2, r0
 3118 0010 B8B9     		cbnz	r0, .L276
 3119 0012 0025     		movs	r5, #0
 3120              	.L279:
 3121              	.LVL498:
1560:.\ff.c        **** 			if (res != FR_OK) break;
 3122              		.loc 1 1560 0
 3123 0014 3046     		mov	r0, r6
 3124              	.LVL499:
 3125 0016 A169     		ldr	r1, [r4, #24]
 3126 0018 FFF7FEFF 		bl	move_window
 3127              	.LVL500:
1561:.\ff.c        **** #if _FS_EXFAT
 3128              		.loc 1 1561 0
 3129 001c 0246     		mov	r2, r0
 3130 001e 80B9     		cbnz	r0, .L276
1565:.\ff.c        **** #endif
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 167


 3131              		.loc 1 1565 0
 3132 0020 E369     		ldr	r3, [r4, #28]
 3133 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3134 0024 E52B     		cmp	r3, #229
 3135 0026 00D0     		beq	.L277
1565:.\ff.c        **** #endif
 3136              		.loc 1 1565 0 is_stmt 0 discriminator 1
 3137 0028 1BB9     		cbnz	r3, .L281
 3138              	.L277:
1567:.\ff.c        **** 			} else {
 3139              		.loc 1 1567 0 is_stmt 1
 3140 002a 0135     		adds	r5, r5, #1
 3141              	.LVL501:
 3142 002c BD42     		cmp	r5, r7
 3143 002e 01D1     		bne	.L278
 3144 0030 07E0     		b	.L276
 3145              	.L281:
1569:.\ff.c        **** 			}
 3146              		.loc 1 1569 0
 3147 0032 0025     		movs	r5, #0
 3148              	.LVL502:
 3149              	.L278:
1571:.\ff.c        **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3150              		.loc 1 1571 0
 3151 0034 2046     		mov	r0, r4
 3152              	.LVL503:
 3153 0036 0121     		movs	r1, #1
 3154 0038 FFF7FEFF 		bl	dir_next
 3155              	.LVL504:
1572:.\ff.c        **** 	}
 3156              		.loc 1 1572 0
 3157 003c 0246     		mov	r2, r0
 3158 003e 0028     		cmp	r0, #0
 3159 0040 E8D0     		beq	.L279
 3160              	.LVL505:
 3161              	.L276:
1575:.\ff.c        **** 	return res;
 3162              		.loc 1 1575 0
 3163 0042 042A     		cmp	r2, #4
 3164 0044 00D1     		bne	.L280
 3165 0046 0722     		movs	r2, #7
 3166              	.LVL506:
 3167              	.L280:
1577:.\ff.c        **** 
 3168              		.loc 1 1577 0
 3169 0048 1046     		mov	r0, r2
 3170 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3171              		.cfi_endproc
 3172              	.LFE18:
 3173              		.size	dir_alloc, .-dir_alloc
 3174              		.section	.text.dir_register,"ax",%progbits
 3175              		.align	2
 3176              		.thumb
 3177              		.thumb_func
 3178              		.type	dir_register, %function
 3179              	dir_register:
 3180              	.LFB23:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 168


2248:.\ff.c        **** 	FRESULT res;
 3181              		.loc 1 2248 0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 3185              	.LVL507:
 3186 0000 70B5     		push	{r4, r5, r6, lr}
 3187              		.cfi_def_cfa_offset 16
 3188              		.cfi_offset 4, -16
 3189              		.cfi_offset 5, -12
 3190              		.cfi_offset 6, -8
 3191              		.cfi_offset 14, -4
 3192 0002 0446     		mov	r4, r0
2250:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
 3193              		.loc 1 2250 0
 3194 0004 0668     		ldr	r6, [r0]
 3195              	.LVL508:
2318:.\ff.c        **** 
 3196              		.loc 1 2318 0
 3197 0006 0121     		movs	r1, #1
 3198 0008 FFF7FEFF 		bl	dir_alloc
 3199              	.LVL509:
2323:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3200              		.loc 1 2323 0
 3201 000c 0546     		mov	r5, r0
 3202 000e 90B9     		cbnz	r0, .L285
2324:.\ff.c        **** 		if (res == FR_OK) {
 3203              		.loc 1 2324 0
 3204 0010 3046     		mov	r0, r6
 3205              	.LVL510:
 3206 0012 A169     		ldr	r1, [r4, #24]
 3207 0014 FFF7FEFF 		bl	move_window
 3208              	.LVL511:
2325:.\ff.c        **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3209              		.loc 1 2325 0
 3210 0018 0546     		mov	r5, r0
 3211 001a 60B9     		cbnz	r0, .L285
2326:.\ff.c        **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3212              		.loc 1 2326 0
 3213 001c E069     		ldr	r0, [r4, #28]
 3214              	.LVL512:
 3215 001e 0021     		movs	r1, #0
 3216 0020 2022     		movs	r2, #32
 3217 0022 FFF7FEFF 		bl	mem_set
 3218              	.LVL513:
2327:.\ff.c        **** #if _USE_LFN != 0
 3219              		.loc 1 2327 0
 3220 0026 E069     		ldr	r0, [r4, #28]
 3221 0028 04F12001 		add	r1, r4, #32
 3222 002c 0B22     		movs	r2, #11
 3223 002e FFF7FEFF 		bl	mem_cpy
 3224              	.LVL514:
2331:.\ff.c        **** 		}
 3225              		.loc 1 2331 0
 3226 0032 0123     		movs	r3, #1
 3227 0034 F370     		strb	r3, [r6, #3]
 3228              	.L285:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 169


 3229              	.LVL515:
2336:.\ff.c        **** 
 3230              		.loc 1 2336 0
 3231 0036 2846     		mov	r0, r5
 3232 0038 70BD     		pop	{r4, r5, r6, pc}
 3233              		.cfi_endproc
 3234              	.LFE23:
 3235              		.size	dir_register, .-dir_register
 3236 003a 00BF     		.section	.text.dir_read,"ax",%progbits
 3237              		.align	2
 3238              		.thumb
 3239              		.thumb_func
 3240              		.type	dir_read, %function
 3241              	dir_read:
 3242              	.LFB21:
2093:.\ff.c        **** 	FRESULT res = FR_NO_FILE;
 3243              		.loc 1 2093 0
 3244              		.cfi_startproc
 3245              		@ args = 0, pretend = 0, frame = 0
 3246              		@ frame_needed = 0, uses_anonymous_args = 0
 3247              	.LVL516:
 3248 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3249              		.cfi_def_cfa_offset 24
 3250              		.cfi_offset 3, -24
 3251              		.cfi_offset 4, -20
 3252              		.cfi_offset 5, -16
 3253              		.cfi_offset 6, -12
 3254              		.cfi_offset 7, -8
 3255              		.cfi_offset 14, -4
 3256 0002 0446     		mov	r4, r0
 3257 0004 0E46     		mov	r6, r1
 3258              	.LVL517:
2095:.\ff.c        **** 	BYTE a, c;
 3259              		.loc 1 2095 0
 3260 0006 0568     		ldr	r5, [r0]
 3261              	.LVL518:
2094:.\ff.c        **** 	FATFS *fs = dp->obj.fs;
 3262              		.loc 1 2094 0
 3263 0008 0427     		movs	r7, #4
2101:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3264              		.loc 1 2101 0
 3265 000a 1FE0     		b	.L288
 3266              	.LVL519:
 3267              	.L291:
2102:.\ff.c        **** 		if (res != FR_OK) break;
 3268              		.loc 1 2102 0
 3269 000c 2846     		mov	r0, r5
 3270 000e FFF7FEFF 		bl	move_window
 3271              	.LVL520:
2103:.\ff.c        **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3272              		.loc 1 2103 0
 3273 0012 0746     		mov	r7, r0
 3274 0014 F8B9     		cbnz	r0, .L289
2104:.\ff.c        **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 3275              		.loc 1 2104 0
 3276 0016 E369     		ldr	r3, [r4, #28]
 3277 0018 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 170


 3278              	.LVL521:
2105:.\ff.c        **** #if _FS_EXFAT
 3279              		.loc 1 2105 0
 3280 001a DAB1     		cbz	r2, .L293
2123:.\ff.c        **** #if _USE_LFN != 0	/* LFN configuration */
 3281              		.loc 1 2123 0
 3282 001c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3283 001e 03F03F03 		and	r3, r3, #63
 3284              	.LVL522:
 3285 0022 A371     		strb	r3, [r4, #6]
2144:.\ff.c        **** 				break;
 3286              		.loc 1 2144 0
 3287 0024 E52A     		cmp	r2, #229
 3288 0026 0BD0     		beq	.L290
2144:.\ff.c        **** 				break;
 3289              		.loc 1 2144 0 is_stmt 0 discriminator 1
 3290 0028 2E2A     		cmp	r2, #46
 3291 002a 09D0     		beq	.L290
2144:.\ff.c        **** 				break;
 3292              		.loc 1 2144 0 discriminator 2
 3293 002c 0F2B     		cmp	r3, #15
 3294 002e 07D0     		beq	.L290
2144:.\ff.c        **** 				break;
 3295              		.loc 1 2144 0 discriminator 3
 3296 0030 23F02003 		bic	r3, r3, #32
 3297              	.LVL523:
 3298 0034 082B     		cmp	r3, #8
 3299 0036 14BF     		ite	ne
 3300 0038 0023     		movne	r3, #0
 3301 003a 0123     		moveq	r3, #1
 3302 003c B342     		cmp	r3, r6
 3303 003e 0AD0     		beq	.L289
 3304              	.L290:
2149:.\ff.c        **** 		if (res != FR_OK) break;
 3305              		.loc 1 2149 0 is_stmt 1
 3306 0040 2046     		mov	r0, r4
 3307              	.LVL524:
 3308 0042 0021     		movs	r1, #0
 3309 0044 FFF7FEFF 		bl	dir_next
 3310              	.LVL525:
2150:.\ff.c        **** 	}
 3311              		.loc 1 2150 0
 3312 0048 0746     		mov	r7, r0
 3313 004a 20B9     		cbnz	r0, .L289
 3314              	.LVL526:
 3315              	.L288:
2101:.\ff.c        **** 		res = move_window(fs, dp->sect);
 3316              		.loc 1 2101 0
 3317 004c A169     		ldr	r1, [r4, #24]
 3318 004e 0029     		cmp	r1, #0
 3319 0050 DCD1     		bne	.L291
 3320 0052 00E0     		b	.L289
 3321              	.LVL527:
 3322              	.L293:
2105:.\ff.c        **** #if _FS_EXFAT
 3323              		.loc 1 2105 0
 3324 0054 0427     		movs	r7, #4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 171


 3325              	.LVL528:
 3326              	.L289:
2153:.\ff.c        **** 	return res;
 3327              		.loc 1 2153 0
 3328 0056 0FB1     		cbz	r7, .L292
2153:.\ff.c        **** 	return res;
 3329              		.loc 1 2153 0 is_stmt 0 discriminator 1
 3330 0058 0023     		movs	r3, #0
 3331 005a A361     		str	r3, [r4, #24]
 3332              	.L292:
2155:.\ff.c        **** 
 3333              		.loc 1 2155 0 is_stmt 1
 3334 005c 3846     		mov	r0, r7
 3335 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3336              		.cfi_endproc
 3337              	.LFE21:
 3338              		.size	dir_read, .-dir_read
 3339              		.section	.text.sync_fs,"ax",%progbits
 3340              		.align	2
 3341              		.thumb
 3342              		.thumb_func
 3343              		.type	sync_fs, %function
 3344              	sync_fs:
 3345              	.LFB10:
 932:.\ff.c        **** 	FRESULT res;
 3346              		.loc 1 932 0
 3347              		.cfi_startproc
 3348              		@ args = 0, pretend = 0, frame = 0
 3349              		@ frame_needed = 0, uses_anonymous_args = 0
 3350              	.LVL529:
 3351 0000 70B5     		push	{r4, r5, r6, lr}
 3352              		.cfi_def_cfa_offset 16
 3353              		.cfi_offset 4, -16
 3354              		.cfi_offset 5, -12
 3355              		.cfi_offset 6, -8
 3356              		.cfi_offset 14, -4
 3357 0002 0446     		mov	r4, r0
 936:.\ff.c        **** 	if (res == FR_OK) {
 3358              		.loc 1 936 0
 3359 0004 FFF7FEFF 		bl	sync_window
 3360              	.LVL530:
 937:.\ff.c        **** 		/* Update FSInfo sector if needed */
 3361              		.loc 1 937 0
 3362 0008 0546     		mov	r5, r0
 3363 000a 0028     		cmp	r0, #0
 3364 000c 37D1     		bne	.L296
 939:.\ff.c        **** 			/* Create FSInfo structure */
 3365              		.loc 1 939 0
 3366 000e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3367 0010 032B     		cmp	r3, #3
 3368 0012 2DD1     		bne	.L297
 939:.\ff.c        **** 			/* Create FSInfo structure */
 3369              		.loc 1 939 0 is_stmt 0 discriminator 1
 3370 0014 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3371 0016 012B     		cmp	r3, #1
 3372 0018 2AD1     		bne	.L297
 941:.\ff.c        **** 			st_word(fs->win + BS_55AA, 0xAA55);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 172


 3373              		.loc 1 941 0 is_stmt 1
 3374 001a 04F13006 		add	r6, r4, #48
 3375 001e 3046     		mov	r0, r6
 3376              	.LVL531:
 3377 0020 0021     		movs	r1, #0
 3378 0022 4FF40072 		mov	r2, #512
 3379 0026 FFF7FEFF 		bl	mem_set
 3380              	.LVL532:
 942:.\ff.c        **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 3381              		.loc 1 942 0
 3382 002a 04F22E20 		addw	r0, r4, #558
 3383 002e 4AF65521 		movw	r1, #43605
 3384 0032 FFF7FEFF 		bl	st_word
 3385              	.LVL533:
 943:.\ff.c        **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 3386              		.loc 1 943 0
 3387 0036 3046     		mov	r0, r6
 3388 0038 1249     		ldr	r1, .L300
 3389 003a FFF7FEFF 		bl	st_dword
 3390              	.LVL534:
 944:.\ff.c        **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 3391              		.loc 1 944 0
 3392 003e 04F50570 		add	r0, r4, #532
 3393 0042 1149     		ldr	r1, .L300+4
 3394 0044 FFF7FEFF 		bl	st_dword
 3395              	.LVL535:
 945:.\ff.c        **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 3396              		.loc 1 945 0
 3397 0048 04F50670 		add	r0, r4, #536
 3398 004c 2169     		ldr	r1, [r4, #16]
 3399 004e FFF7FEFF 		bl	st_dword
 3400              	.LVL536:
 946:.\ff.c        **** 			/* Write it into the FSInfo sector */
 3401              		.loc 1 946 0
 3402 0052 04F50770 		add	r0, r4, #540
 3403 0056 E168     		ldr	r1, [r4, #12]
 3404 0058 FFF7FEFF 		bl	st_dword
 3405              	.LVL537:
 948:.\ff.c        **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 3406              		.loc 1 948 0
 3407 005c E269     		ldr	r2, [r4, #28]
 3408 005e 0132     		adds	r2, r2, #1
 3409 0060 E262     		str	r2, [r4, #44]
 949:.\ff.c        **** 			fs->fsi_flag = 0;
 3410              		.loc 1 949 0
 3411 0062 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3412 0064 3146     		mov	r1, r6
 3413 0066 0123     		movs	r3, #1
 3414 0068 FFF7FEFF 		bl	disk_write
 3415              	.LVL538:
 950:.\ff.c        **** 		}
 3416              		.loc 1 950 0
 3417 006c 0023     		movs	r3, #0
 3418 006e 2371     		strb	r3, [r4, #4]
 3419              	.L297:
 953:.\ff.c        **** 	}
 3420              		.loc 1 953 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 173


 3421 0070 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3422 0072 0021     		movs	r1, #0
 3423 0074 0A46     		mov	r2, r1
 3424 0076 FFF7FEFF 		bl	disk_ioctl
 3425              	.LVL539:
 3426 007a 00B1     		cbz	r0, .L296
 3427 007c 0125     		movs	r5, #1
 3428              	.L296:
 3429              	.LVL540:
 957:.\ff.c        **** 
 3430              		.loc 1 957 0
 3431 007e 2846     		mov	r0, r5
 3432 0080 70BD     		pop	{r4, r5, r6, pc}
 3433              	.LVL541:
 3434              	.L301:
 3435 0082 00BF     		.align	2
 3436              	.L300:
 3437 0084 52526141 		.word	1096897106
 3438 0088 72724161 		.word	1631679090
 3439              		.cfi_endproc
 3440              	.LFE10:
 3441              		.size	sync_fs, .-sync_fs
 3442              		.section	.text.f_mount,"ax",%progbits
 3443              		.align	2
 3444              		.global	f_mount
 3445              		.thumb
 3446              		.thumb_func
 3447              		.type	f_mount, %function
 3448              	f_mount:
 3449              	.LFB32:
3202:.\ff.c        **** 	FATFS *cfs;
 3450              		.loc 1 3202 0
 3451              		.cfi_startproc
 3452              		@ args = 0, pretend = 0, frame = 16
 3453              		@ frame_needed = 0, uses_anonymous_args = 0
 3454              	.LVL542:
 3455 0000 10B5     		push	{r4, lr}
 3456              		.cfi_def_cfa_offset 8
 3457              		.cfi_offset 4, -8
 3458              		.cfi_offset 14, -4
 3459 0002 84B0     		sub	sp, sp, #16
 3460              		.cfi_def_cfa_offset 24
 3461 0004 0190     		str	r0, [sp, #4]
 3462 0006 0091     		str	r1, [sp]
 3463 0008 1446     		mov	r4, r2
3206:.\ff.c        **** 
 3464              		.loc 1 3206 0
 3465 000a 04A8     		add	r0, sp, #16
 3466              	.LVL543:
 3467 000c 40F8041D 		str	r1, [r0, #-4]!
3210:.\ff.c        **** 	if (vol < 0) return FR_INVALID_DRIVE;
 3468              		.loc 1 3210 0
 3469 0010 FFF7FEFF 		bl	get_ldnumber
 3470              	.LVL544:
3211:.\ff.c        **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 3471              		.loc 1 3211 0
 3472 0014 0028     		cmp	r0, #0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 174


 3473 0016 16DB     		blt	.L306
3212:.\ff.c        **** 
 3474              		.loc 1 3212 0
 3475 0018 0E4B     		ldr	r3, .L310
 3476 001a 53F82030 		ldr	r3, [r3, r0, lsl #2]
 3477              	.LVL545:
3214:.\ff.c        **** #if _FS_LOCK != 0
 3478              		.loc 1 3214 0
 3479 001e 0BB1     		cbz	r3, .L304
3221:.\ff.c        **** 	}
 3480              		.loc 1 3221 0
 3481 0020 0022     		movs	r2, #0
 3482 0022 1A70     		strb	r2, [r3]
 3483              	.L304:
3224:.\ff.c        **** 		fs->fs_type = 0;				/* Clear new fs object */
 3484              		.loc 1 3224 0
 3485 0024 019B     		ldr	r3, [sp, #4]
 3486              	.LVL546:
 3487 0026 0BB1     		cbz	r3, .L305
3225:.\ff.c        **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 3488              		.loc 1 3225 0
 3489 0028 0022     		movs	r2, #0
 3490 002a 1A70     		strb	r2, [r3]
 3491              	.L305:
3230:.\ff.c        **** 
 3492              		.loc 1 3230 0
 3493 002c 019B     		ldr	r3, [sp, #4]
 3494 002e 094A     		ldr	r2, .L310
 3495 0030 42F82030 		str	r3, [r2, r0, lsl #2]
3232:.\ff.c        **** 
 3496              		.loc 1 3232 0
 3497 0034 4BB1     		cbz	r3, .L307
3232:.\ff.c        **** 
 3498              		.loc 1 3232 0 is_stmt 0 discriminator 2
 3499 0036 012C     		cmp	r4, #1
 3500 0038 09D1     		bne	.L308
3234:.\ff.c        **** 	LEAVE_FF(fs, res);
 3501              		.loc 1 3234 0 is_stmt 1
 3502 003a 6846     		mov	r0, sp
 3503              	.LVL547:
 3504 003c 01A9     		add	r1, sp, #4
 3505              	.LVL548:
 3506 003e 0022     		movs	r2, #0
 3507 0040 FFF7FEFF 		bl	find_volume
 3508              	.LVL549:
3235:.\ff.c        **** }
 3509              		.loc 1 3235 0
 3510 0044 04E0     		b	.L303
 3511              	.LVL550:
 3512              	.L306:
3211:.\ff.c        **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 3513              		.loc 1 3211 0
 3514 0046 0B20     		movs	r0, #11
 3515              	.LVL551:
 3516 0048 02E0     		b	.L303
 3517              	.LVL552:
 3518              	.L307:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 175


3232:.\ff.c        **** 
 3519              		.loc 1 3232 0
 3520 004a 0020     		movs	r0, #0
 3521              	.LVL553:
 3522 004c 00E0     		b	.L303
 3523              	.LVL554:
 3524              	.L308:
 3525 004e 0020     		movs	r0, #0
 3526              	.LVL555:
 3527              	.L303:
3236:.\ff.c        **** 
 3528              		.loc 1 3236 0
 3529 0050 04B0     		add	sp, sp, #16
 3530              		.cfi_def_cfa_offset 8
 3531              	.LVL556:
 3532              		@ sp needed
 3533 0052 10BD     		pop	{r4, pc}
 3534              	.LVL557:
 3535              	.L311:
 3536              		.align	2
 3537              	.L310:
 3538 0054 00000000 		.word	.LANCHOR0
 3539              		.cfi_endproc
 3540              	.LFE32:
 3541              		.size	f_mount, .-f_mount
 3542              		.section	.text.f_open,"ax",%progbits
 3543              		.align	2
 3544              		.global	f_open
 3545              		.thumb
 3546              		.thumb_func
 3547              		.type	f_open, %function
 3548              	f_open:
 3549              	.LFB33:
3250:.\ff.c        **** 	FRESULT res;
 3550              		.loc 1 3250 0
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 56
 3553              		@ frame_needed = 0, uses_anonymous_args = 0
 3554              	.LVL558:
 3555 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3556              		.cfi_def_cfa_offset 28
 3557              		.cfi_offset 4, -28
 3558              		.cfi_offset 5, -24
 3559              		.cfi_offset 6, -20
 3560              		.cfi_offset 7, -16
 3561              		.cfi_offset 8, -12
 3562              		.cfi_offset 9, -8
 3563              		.cfi_offset 14, -4
 3564 0004 8FB0     		sub	sp, sp, #60
 3565              		.cfi_def_cfa_offset 88
 3566 0006 0191     		str	r1, [sp, #4]
3261:.\ff.c        **** 
 3567              		.loc 1 3261 0
 3568 0008 0028     		cmp	r0, #0
 3569 000a 00F0E080 		beq	.L329
 3570 000e 0646     		mov	r6, r0
 3571 0010 1546     		mov	r5, r2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 176


3264:.\ff.c        **** 	res = find_volume(&path, &fs, mode);
 3572              		.loc 1 3264 0
 3573 0012 02F03F07 		and	r7, r2, #63
 3574              	.LVL559:
3265:.\ff.c        **** 	if (res == FR_OK) {
 3575              		.loc 1 3265 0
 3576 0016 01A8     		add	r0, sp, #4
 3577              	.LVL560:
 3578 0018 02A9     		add	r1, sp, #8
 3579              	.LVL561:
 3580 001a 3A46     		mov	r2, r7
 3581 001c FFF7FEFF 		bl	find_volume
 3582              	.LVL562:
3266:.\ff.c        **** 		dj.obj.fs = fs;
 3583              		.loc 1 3266 0
 3584 0020 0446     		mov	r4, r0
 3585 0022 0028     		cmp	r0, #0
 3586 0024 40F0CE80 		bne	.L314
3267:.\ff.c        **** 		INIT_NAMBUF(fs);
 3587              		.loc 1 3267 0
 3588 0028 029B     		ldr	r3, [sp, #8]
 3589 002a 0393     		str	r3, [sp, #12]
3269:.\ff.c        **** #if !_FS_READONLY	/* R/W configuration */
 3590              		.loc 1 3269 0
 3591 002c 03A8     		add	r0, sp, #12
 3592              	.LVL563:
 3593 002e 0199     		ldr	r1, [sp, #4]
 3594 0030 FFF7FEFF 		bl	follow_path
 3595              	.LVL564:
3271:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 3596              		.loc 1 3271 0
 3597 0034 0446     		mov	r4, r0
 3598 0036 20B9     		cbnz	r0, .L315
3272:.\ff.c        **** 				res = FR_INVALID_NAME;
 3599              		.loc 1 3272 0
 3600 0038 9DF93730 		ldrsb	r3, [sp, #55]
 3601 003c 002B     		cmp	r3, #0
 3602 003e 00DA     		bge	.L315
3273:.\ff.c        **** 			}
 3603              		.loc 1 3273 0
 3604 0040 0624     		movs	r4, #6
 3605              	.L315:
 3606              	.LVL565:
3282:.\ff.c        **** 			if (res != FR_OK) {					/* No file, create new */
 3607              		.loc 1 3282 0
 3608 0042 15F01C0F 		tst	r5, #28
 3609 0046 53D0     		beq	.L316
3283:.\ff.c        **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 3610              		.loc 1 3283 0
 3611 0048 44B1     		cbz	r4, .L317
3284:.\ff.c        **** #if _FS_LOCK != 0
 3612              		.loc 1 3284 0
 3613 004a 042C     		cmp	r4, #4
 3614 004c 03D1     		bne	.L318
3288:.\ff.c        **** #endif
 3615              		.loc 1 3288 0
 3616 004e 03A8     		add	r0, sp, #12
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 177


 3617 0050 FFF7FEFF 		bl	dir_register
 3618              	.LVL566:
 3619 0054 0446     		mov	r4, r0
 3620              	.LVL567:
 3621              	.L318:
3290:.\ff.c        **** 			}
 3622              		.loc 1 3290 0
 3623 0056 47F00807 		orr	r7, r7, #8
 3624              	.LVL568:
 3625 005a 0BE0     		b	.L319
 3626              	.L317:
3293:.\ff.c        **** 					res = FR_DENIED;
 3627              		.loc 1 3293 0
 3628 005c 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 3629 0060 13F0110F 		tst	r3, #17
 3630 0064 03D1     		bne	.L331
3296:.\ff.c        **** 				}
 3631              		.loc 1 3296 0
 3632 0066 15F0040F 		tst	r5, #4
 3633 006a 02D1     		bne	.L332
 3634 006c 02E0     		b	.L319
 3635              	.L331:
3294:.\ff.c        **** 				} else {
 3636              		.loc 1 3294 0
 3637 006e 0724     		movs	r4, #7
 3638              	.LVL569:
 3639 0070 00E0     		b	.L319
 3640              	.LVL570:
 3641              	.L332:
3296:.\ff.c        **** 				}
 3642              		.loc 1 3296 0
 3643 0072 0824     		movs	r4, #8
 3644              	.LVL571:
 3645              	.L319:
3299:.\ff.c        **** 				dw = GET_FATTIME();
 3646              		.loc 1 3299 0
 3647 0074 002C     		cmp	r4, #0
 3648 0076 4BD1     		bne	.L320
3299:.\ff.c        **** 				dw = GET_FATTIME();
 3649              		.loc 1 3299 0 is_stmt 0 discriminator 1
 3650 0078 17F0080F 		tst	r7, #8
 3651 007c 48D0     		beq	.L320
 3652              	.LVL572:
3327:.\ff.c        **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 3653              		.loc 1 3327 0 is_stmt 1
 3654 007e 564D     		ldr	r5, .L340
 3655 0080 0A98     		ldr	r0, [sp, #40]
 3656 0082 0E30     		adds	r0, r0, #14
 3657 0084 2946     		mov	r1, r5
 3658 0086 FFF7FEFF 		bl	st_dword
 3659              	.LVL573:
3328:.\ff.c        **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 3660              		.loc 1 3328 0
 3661 008a 0A98     		ldr	r0, [sp, #40]
 3662 008c 1630     		adds	r0, r0, #22
 3663 008e 2946     		mov	r1, r5
 3664 0090 FFF7FEFF 		bl	st_dword
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 178


 3665              	.LVL574:
3329:.\ff.c        **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 3666              		.loc 1 3329 0
 3667 0094 2022     		movs	r2, #32
 3668 0096 0A9B     		ldr	r3, [sp, #40]
 3669 0098 DA72     		strb	r2, [r3, #11]
3330:.\ff.c        **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 3670              		.loc 1 3330 0
 3671 009a DDF80880 		ldr	r8, [sp, #8]
 3672 009e 0A9D     		ldr	r5, [sp, #40]
 3673 00a0 4046     		mov	r0, r8
 3674 00a2 2946     		mov	r1, r5
 3675 00a4 FFF7FEFF 		bl	ld_clust
 3676              	.LVL575:
 3677 00a8 8146     		mov	r9, r0
 3678              	.LVL576:
3331:.\ff.c        **** 					st_dword(dj.dir + DIR_FileSize, 0);
 3679              		.loc 1 3331 0
 3680 00aa 4046     		mov	r0, r8
 3681              	.LVL577:
 3682 00ac 2946     		mov	r1, r5
 3683 00ae 0022     		movs	r2, #0
 3684 00b0 FFF7FEFF 		bl	st_clust
 3685              	.LVL578:
3332:.\ff.c        **** 					fs->wflag = 1;
 3686              		.loc 1 3332 0
 3687 00b4 0A98     		ldr	r0, [sp, #40]
 3688 00b6 1C30     		adds	r0, r0, #28
 3689 00b8 0021     		movs	r1, #0
 3690 00ba FFF7FEFF 		bl	st_dword
 3691              	.LVL579:
3333:.\ff.c        **** 
 3692              		.loc 1 3333 0
 3693 00be 0122     		movs	r2, #1
 3694 00c0 029B     		ldr	r3, [sp, #8]
 3695 00c2 DA70     		strb	r2, [r3, #3]
3335:.\ff.c        **** 						dw = fs->winsect;
 3696              		.loc 1 3335 0
 3697 00c4 B9F1000F 		cmp	r9, #0
 3698 00c8 22D0     		beq	.L320
3336:.\ff.c        **** 						res = remove_chain(&dj.obj, cl, 0);
 3699              		.loc 1 3336 0
 3700 00ca 029B     		ldr	r3, [sp, #8]
 3701 00cc DD6A     		ldr	r5, [r3, #44]
 3702              	.LVL580:
3337:.\ff.c        **** 						if (res == FR_OK) {
 3703              		.loc 1 3337 0
 3704 00ce 03A8     		add	r0, sp, #12
 3705 00d0 4946     		mov	r1, r9
 3706 00d2 0022     		movs	r2, #0
 3707 00d4 FFF7FEFF 		bl	remove_chain
 3708              	.LVL581:
3338:.\ff.c        **** 							res = move_window(fs, dw);
 3709              		.loc 1 3338 0
 3710 00d8 0446     		mov	r4, r0
 3711 00da C8B9     		cbnz	r0, .L320
3339:.\ff.c        **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 179


 3712              		.loc 1 3339 0
 3713 00dc 0298     		ldr	r0, [sp, #8]
 3714              	.LVL582:
 3715 00de 2946     		mov	r1, r5
 3716 00e0 FFF7FEFF 		bl	move_window
 3717              	.LVL583:
 3718 00e4 0446     		mov	r4, r0
 3719              	.LVL584:
3340:.\ff.c        **** 						}
 3720              		.loc 1 3340 0
 3721 00e6 09F1FF33 		add	r3, r9, #-1
 3722 00ea 029A     		ldr	r2, [sp, #8]
 3723 00ec D360     		str	r3, [r2, #12]
 3724 00ee 0FE0     		b	.L320
 3725              	.LVL585:
 3726              	.L316:
3347:.\ff.c        **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 3727              		.loc 1 3347 0
 3728 00f0 74B9     		cbnz	r4, .L320
3348:.\ff.c        **** 					res = FR_NO_FILE;
 3729              		.loc 1 3348 0
 3730 00f2 9DF81230 		ldrb	r3, [sp, #18]	@ zero_extendqisi2
 3731 00f6 13F0100F 		tst	r3, #16
 3732 00fa 06D1     		bne	.L333
3351:.\ff.c        **** 						res = FR_DENIED;
 3733              		.loc 1 3351 0
 3734 00fc 15F0020F 		tst	r5, #2
 3735 0100 06D0     		beq	.L320
3351:.\ff.c        **** 						res = FR_DENIED;
 3736              		.loc 1 3351 0 is_stmt 0 discriminator 1
 3737 0102 13F0010F 		tst	r3, #1
 3738 0106 02D1     		bne	.L334
 3739 0108 02E0     		b	.L320
 3740              	.L333:
3349:.\ff.c        **** 				} else {
 3741              		.loc 1 3349 0 is_stmt 1
 3742 010a 0424     		movs	r4, #4
 3743              	.LVL586:
 3744 010c 00E0     		b	.L320
 3745              	.LVL587:
 3746              	.L334:
3352:.\ff.c        **** 					}
 3747              		.loc 1 3352 0
 3748 010e 0724     		movs	r4, #7
 3749              	.LVL588:
 3750              	.L320:
3357:.\ff.c        **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 3751              		.loc 1 3357 0
 3752 0110 4CB9     		cbnz	r4, .L321
3358:.\ff.c        **** 				mode |= FA_MODIFIED;
 3753              		.loc 1 3358 0
 3754 0112 17F0080F 		tst	r7, #8
 3755 0116 01D0     		beq	.L322
3359:.\ff.c        **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 3756              		.loc 1 3359 0
 3757 0118 47F04007 		orr	r7, r7, #64
 3758              	.LVL589:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 180


 3759              	.L322:
3360:.\ff.c        **** 			fp->dir_ptr = dj.dir;
 3760              		.loc 1 3360 0
 3761 011c 029B     		ldr	r3, [sp, #8]
 3762 011e DB6A     		ldr	r3, [r3, #44]
 3763 0120 3362     		str	r3, [r6, #32]
3361:.\ff.c        **** #if _FS_LOCK != 0
 3764              		.loc 1 3361 0
 3765 0122 0A9B     		ldr	r3, [sp, #40]
 3766 0124 7362     		str	r3, [r6, #36]
 3767              	.L321:
3379:.\ff.c        **** #if _FS_EXFAT
 3768              		.loc 1 3379 0
 3769 0126 002C     		cmp	r4, #0
 3770 0128 4CD1     		bne	.L314
3391:.\ff.c        **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 3771              		.loc 1 3391 0
 3772 012a 029D     		ldr	r5, [sp, #8]
 3773 012c DDF82880 		ldr	r8, [sp, #40]
 3774 0130 2846     		mov	r0, r5
 3775 0132 4146     		mov	r1, r8
 3776 0134 FFF7FEFF 		bl	ld_clust
 3777              	.LVL590:
 3778 0138 B060     		str	r0, [r6, #8]
3392:.\ff.c        **** 			}
 3779              		.loc 1 3392 0
 3780 013a 08F11C00 		add	r0, r8, #28
 3781 013e FFF7FEFF 		bl	ld_dword
 3782              	.LVL591:
 3783 0142 F060     		str	r0, [r6, #12]
3397:.\ff.c        **** 			fp->obj.id = fs->id;
 3784              		.loc 1 3397 0
 3785 0144 3560     		str	r5, [r6]
3398:.\ff.c        **** 			fp->flag = mode;		/* Set file access mode */
 3786              		.loc 1 3398 0
 3787 0146 EB88     		ldrh	r3, [r5, #6]
 3788 0148 B380     		strh	r3, [r6, #4]	@ movhi
3399:.\ff.c        **** 			fp->err = 0;			/* Clear error flag */
 3789              		.loc 1 3399 0
 3790 014a 3774     		strb	r7, [r6, #16]
3400:.\ff.c        **** 			fp->sect = 0;			/* Invalidate current data sector */
 3791              		.loc 1 3400 0
 3792 014c 0021     		movs	r1, #0
 3793 014e 7174     		strb	r1, [r6, #17]
3401:.\ff.c        **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 3794              		.loc 1 3401 0
 3795 0150 F161     		str	r1, [r6, #28]
3402:.\ff.c        **** #if !_FS_READONLY
 3796              		.loc 1 3402 0
 3797 0152 7161     		str	r1, [r6, #20]
3405:.\ff.c        **** #endif
 3798              		.loc 1 3405 0
 3799 0154 06F12808 		add	r8, r6, #40
 3800 0158 4046     		mov	r0, r8
 3801 015a 4FF40072 		mov	r2, #512
 3802 015e FFF7FEFF 		bl	mem_set
 3803              	.LVL592:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 181


3407:.\ff.c        **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 3804              		.loc 1 3407 0
 3805 0162 17F0200F 		tst	r7, #32
 3806 0166 2DD0     		beq	.L314
3407:.\ff.c        **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 3807              		.loc 1 3407 0 is_stmt 0 discriminator 1
 3808 0168 F568     		ldr	r5, [r6, #12]
 3809 016a 5DB3     		cbz	r5, .L314
3408:.\ff.c        **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 3810              		.loc 1 3408 0 is_stmt 1
 3811 016c 7561     		str	r5, [r6, #20]
3409:.\ff.c        **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 3812              		.loc 1 3409 0
 3813 016e 029B     		ldr	r3, [sp, #8]
 3814 0170 5F89     		ldrh	r7, [r3, #10]
 3815              	.LVL593:
 3816 0172 7F02     		lsls	r7, r7, #9
 3817              	.LVL594:
3410:.\ff.c        **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 3818              		.loc 1 3410 0
 3819 0174 B168     		ldr	r1, [r6, #8]
 3820              	.LVL595:
3411:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 3821              		.loc 1 3411 0
 3822 0176 0BE0     		b	.L323
 3823              	.L327:
3412:.\ff.c        **** 					if (clst <= 1) res = FR_INT_ERR;
 3824              		.loc 1 3412 0
 3825 0178 3046     		mov	r0, r6
 3826 017a FFF7FEFF 		bl	get_fat
 3827              	.LVL596:
 3828 017e 0146     		mov	r1, r0
 3829              	.LVL597:
3413:.\ff.c        **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 3830              		.loc 1 3413 0
 3831 0180 0128     		cmp	r0, #1
 3832 0182 00D8     		bhi	.L324
 3833 0184 0224     		movs	r4, #2
 3834              	.LVL598:
 3835              	.L324:
3414:.\ff.c        **** 				}
 3836              		.loc 1 3414 0
 3837 0186 B1F1FF3F 		cmp	r1, #-1
 3838 018a 00D1     		bne	.L325
 3839 018c 0124     		movs	r4, #1
 3840              	.LVL599:
 3841              	.L325:
3411:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 3842              		.loc 1 3411 0 discriminator 2
 3843 018e ED1B     		subs	r5, r5, r7
 3844              	.LVL600:
 3845              	.L323:
3411:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 3846              		.loc 1 3411 0 is_stmt 0 discriminator 1
 3847 0190 0CB9     		cbnz	r4, .L326
3411:.\ff.c        **** 					clst = get_fat(&fp->obj, clst);
 3848              		.loc 1 3411 0 discriminator 3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 182


 3849 0192 BD42     		cmp	r5, r7
 3850 0194 F0D8     		bhi	.L327
 3851              	.L326:
3416:.\ff.c        **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 3852              		.loc 1 3416 0 is_stmt 1
 3853 0196 B161     		str	r1, [r6, #24]
3417:.\ff.c        **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 3854              		.loc 1 3417 0
 3855 0198 A4B9     		cbnz	r4, .L314
3417:.\ff.c        **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 3856              		.loc 1 3417 0 is_stmt 0 discriminator 1
 3857 019a C5F30803 		ubfx	r3, r5, #0, #9
 3858 019e 8BB1     		cbz	r3, .L314
3418:.\ff.c        **** 						res = FR_INT_ERR;
 3859              		.loc 1 3418 0 is_stmt 1
 3860 01a0 029F     		ldr	r7, [sp, #8]
 3861              	.LVL601:
 3862 01a2 3846     		mov	r0, r7
 3863 01a4 FFF7FEFF 		bl	clust2sect
 3864              	.LVL602:
 3865 01a8 48B1     		cbz	r0, .L337
3421:.\ff.c        **** #if !_FS_TINY
 3866              		.loc 1 3421 0
 3867 01aa 00EB5522 		add	r2, r0, r5, lsr #9
 3868 01ae F261     		str	r2, [r6, #28]
3423:.\ff.c        **** #endif
 3869              		.loc 1 3423 0
 3870 01b0 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 3871              	.LVL603:
 3872 01b2 4146     		mov	r1, r8
 3873 01b4 0123     		movs	r3, #1
 3874 01b6 FFF7FEFF 		bl	disk_read
 3875              	.LVL604:
 3876 01ba 10B9     		cbnz	r0, .L338
 3877 01bc 02E0     		b	.L314
 3878              	.LVL605:
 3879              	.L337:
3419:.\ff.c        **** 					} else {
 3880              		.loc 1 3419 0
 3881 01be 0224     		movs	r4, #2
 3882              	.LVL606:
 3883 01c0 00E0     		b	.L314
 3884              	.LVL607:
 3885              	.L338:
3423:.\ff.c        **** #endif
 3886              		.loc 1 3423 0
 3887 01c2 0124     		movs	r4, #1
 3888              	.LVL608:
 3889              	.L314:
3434:.\ff.c        **** 
 3890              		.loc 1 3434 0
 3891 01c4 0CB1     		cbz	r4, .L328
3434:.\ff.c        **** 
 3892              		.loc 1 3434 0 is_stmt 0 discriminator 1
 3893 01c6 0023     		movs	r3, #0
 3894 01c8 3360     		str	r3, [r6]
 3895              	.L328:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 183


3436:.\ff.c        **** }
 3896              		.loc 1 3436 0 is_stmt 1
 3897 01ca 2046     		mov	r0, r4
 3898 01cc 00E0     		b	.L313
 3899              	.LVL609:
 3900              	.L329:
3261:.\ff.c        **** 
 3901              		.loc 1 3261 0
 3902 01ce 0920     		movs	r0, #9
 3903              	.LVL610:
 3904              	.L313:
3437:.\ff.c        **** 
 3905              		.loc 1 3437 0
 3906 01d0 0FB0     		add	sp, sp, #60
 3907              		.cfi_def_cfa_offset 28
 3908              		@ sp needed
 3909 01d2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3910              	.LVL611:
 3911              	.L341:
 3912 01d6 00BF     		.align	2
 3913              	.L340:
 3914 01d8 00002148 		.word	1210122240
 3915              		.cfi_endproc
 3916              	.LFE33:
 3917              		.size	f_open, .-f_open
 3918              		.section	.text.f_read,"ax",%progbits
 3919              		.align	2
 3920              		.global	f_read
 3921              		.thumb
 3922              		.thumb_func
 3923              		.type	f_read, %function
 3924              	f_read:
 3925              	.LFB34:
3452:.\ff.c        **** 	FRESULT res;
 3926              		.loc 1 3452 0
 3927              		.cfi_startproc
 3928              		@ args = 0, pretend = 0, frame = 16
 3929              		@ frame_needed = 0, uses_anonymous_args = 0
 3930              	.LVL612:
 3931 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3932              		.cfi_def_cfa_offset 36
 3933              		.cfi_offset 4, -36
 3934              		.cfi_offset 5, -32
 3935              		.cfi_offset 6, -28
 3936              		.cfi_offset 7, -24
 3937              		.cfi_offset 8, -20
 3938              		.cfi_offset 9, -16
 3939              		.cfi_offset 10, -12
 3940              		.cfi_offset 11, -8
 3941              		.cfi_offset 14, -4
 3942 0004 85B0     		sub	sp, sp, #20
 3943              		.cfi_def_cfa_offset 56
 3944 0006 0446     		mov	r4, r0
 3945 0008 8846     		mov	r8, r1
 3946 000a 1546     		mov	r5, r2
 3947 000c 1F46     		mov	r7, r3
 3948              	.LVL613:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 184


3461:.\ff.c        **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 3949              		.loc 1 3461 0
 3950 000e 0023     		movs	r3, #0
 3951              	.LVL614:
 3952 0010 3B60     		str	r3, [r7]
3462:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 3953              		.loc 1 3462 0
 3954 0012 0190     		str	r0, [sp, #4]
 3955 0014 03A9     		add	r1, sp, #12
 3956              	.LVL615:
 3957 0016 FFF7FEFF 		bl	validate
 3958              	.LVL616:
3463:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 3959              		.loc 1 3463 0
 3960 001a 0346     		mov	r3, r0
 3961 001c 08B9     		cbnz	r0, .L343
3463:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 3962              		.loc 1 3463 0 is_stmt 0 discriminator 2
 3963 001e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 3964              	.LVL617:
 3965 0020 0BB1     		cbz	r3, .L344
 3966              	.LVL618:
 3967              	.L343:
3463:.\ff.c        **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 3968              		.loc 1 3463 0 discriminator 3
 3969 0022 1846     		mov	r0, r3
 3970 0024 A4E0     		b	.L345
 3971              	.L344:
3464:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
 3972              		.loc 1 3464 0 is_stmt 1
 3973 0026 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 3974              	.LVL619:
 3975 0028 13F0010F 		tst	r3, #1
 3976 002c 00F09F80 		beq	.L365
3465:.\ff.c        **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 3977              		.loc 1 3465 0
 3978 0030 E668     		ldr	r6, [r4, #12]
 3979 0032 6369     		ldr	r3, [r4, #20]
 3980 0034 F61A     		subs	r6, r6, r3
 3981              	.LVL620:
3466:.\ff.c        **** 
 3982              		.loc 1 3466 0
 3983 0036 B542     		cmp	r5, r6
 3984 0038 00F29480 		bhi	.L347
 3985 003c 2E46     		mov	r6, r5
 3986              	.LVL621:
 3987 003e 91E0     		b	.L347
 3988              	.LVL622:
 3989              	.L364:
3470:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 3990              		.loc 1 3470 0
 3991 0040 6369     		ldr	r3, [r4, #20]
 3992 0042 C3F30802 		ubfx	r2, r3, #0, #9
 3993 0046 002A     		cmp	r2, #0
 3994 0048 76D1     		bne	.L348
3471:.\ff.c        **** 			if (csect == 0) {					/* On the cluster boundary? */
 3995              		.loc 1 3471 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 185


 3996 004a 039A     		ldr	r2, [sp, #12]
 3997 004c B2F80A90 		ldrh	r9, [r2, #10]
 3998 0050 09F1FF39 		add	r9, r9, #-1
 3999              	.LVL623:
3472:.\ff.c        **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 4000              		.loc 1 3472 0
 4001 0054 19EA5329 		ands	r9, r9, r3, lsr #9
 4002              	.LVL624:
 4003 0058 14D1     		bne	.L349
3473:.\ff.c        **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 4004              		.loc 1 3473 0
 4005 005a 0BB9     		cbnz	r3, .L350
3474:.\ff.c        **** 				} else {						/* Middle or end of the file */
 4006              		.loc 1 3474 0
 4007 005c A068     		ldr	r0, [r4, #8]
 4008              	.LVL625:
 4009 005e 03E0     		b	.L351
 4010              	.LVL626:
 4011              	.L350:
3482:.\ff.c        **** 					}
 4012              		.loc 1 3482 0
 4013 0060 0198     		ldr	r0, [sp, #4]
 4014 0062 A169     		ldr	r1, [r4, #24]
 4015 0064 FFF7FEFF 		bl	get_fat
 4016              	.LVL627:
 4017              	.L351:
3485:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4018              		.loc 1 3485 0
 4019 0068 0128     		cmp	r0, #1
 4020 006a 03D8     		bhi	.L352
3485:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4021              		.loc 1 3485 0 is_stmt 0 discriminator 1
 4022 006c 0223     		movs	r3, #2
 4023 006e 6374     		strb	r3, [r4, #17]
 4024 0070 1846     		mov	r0, r3
 4025              	.LVL628:
 4026 0072 7DE0     		b	.L345
 4027              	.LVL629:
 4028              	.L352:
3486:.\ff.c        **** 				fp->clust = clst;				/* Update current cluster */
 4029              		.loc 1 3486 0 is_stmt 1
 4030 0074 B0F1FF3F 		cmp	r0, #-1
 4031 0078 03D1     		bne	.L353
3486:.\ff.c        **** 				fp->clust = clst;				/* Update current cluster */
 4032              		.loc 1 3486 0 is_stmt 0 discriminator 1
 4033 007a 0123     		movs	r3, #1
 4034 007c 6374     		strb	r3, [r4, #17]
 4035 007e 1846     		mov	r0, r3
 4036              	.LVL630:
 4037 0080 76E0     		b	.L345
 4038              	.LVL631:
 4039              	.L353:
3487:.\ff.c        **** 			}
 4040              		.loc 1 3487 0 is_stmt 1
 4041 0082 A061     		str	r0, [r4, #24]
 4042              	.LVL632:
 4043              	.L349:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 186


3489:.\ff.c        **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 4044              		.loc 1 3489 0
 4045 0084 DDF80CB0 		ldr	fp, [sp, #12]
 4046 0088 5846     		mov	r0, fp
 4047 008a A169     		ldr	r1, [r4, #24]
 4048 008c FFF7FEFF 		bl	clust2sect
 4049              	.LVL633:
3490:.\ff.c        **** 			sect += csect;
 4050              		.loc 1 3490 0
 4051 0090 8246     		mov	r10, r0
 4052 0092 10B9     		cbnz	r0, .L354
3490:.\ff.c        **** 			sect += csect;
 4053              		.loc 1 3490 0 is_stmt 0 discriminator 1
 4054 0094 0220     		movs	r0, #2
 4055              	.LVL634:
 4056 0096 6074     		strb	r0, [r4, #17]
 4057 0098 6AE0     		b	.L345
 4058              	.LVL635:
 4059              	.L354:
3491:.\ff.c        **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 4060              		.loc 1 3491 0 is_stmt 1
 4061 009a CA44     		add	r10, r10, r9
 4062              	.LVL636:
3493:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4063              		.loc 1 3493 0
 4064 009c 750A     		lsrs	r5, r6, #9
 4065              	.LVL637:
 4066 009e 25D0     		beq	.L355
3494:.\ff.c        **** 					cc = fs->csize - csect;
 4067              		.loc 1 3494 0
 4068 00a0 09EB0503 		add	r3, r9, r5
 4069 00a4 BBF80A20 		ldrh	r2, [fp, #10]
 4070 00a8 9342     		cmp	r3, r2
 4071 00aa 01D9     		bls	.L356
3495:.\ff.c        **** 				}
 4072              		.loc 1 3495 0
 4073 00ac C9EB0205 		rsb	r5, r9, r2
 4074              	.LVL638:
 4075              	.L356:
3497:.\ff.c        **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 4076              		.loc 1 3497 0
 4077 00b0 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4078 00b4 4146     		mov	r1, r8
 4079 00b6 5246     		mov	r2, r10
 4080 00b8 2B46     		mov	r3, r5
 4081 00ba FFF7FEFF 		bl	disk_read
 4082              	.LVL639:
 4083 00be 10B1     		cbz	r0, .L357
3497:.\ff.c        **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 4084              		.loc 1 3497 0 is_stmt 0 discriminator 1
 4085 00c0 0120     		movs	r0, #1
 4086 00c2 6074     		strb	r0, [r4, #17]
 4087 00c4 54E0     		b	.L345
 4088              	.L357:
3504:.\ff.c        **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4089              		.loc 1 3504 0 is_stmt 1
 4090 00c6 94F91030 		ldrsb	r3, [r4, #16]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 187


 4091 00ca 002B     		cmp	r3, #0
 4092 00cc 0CDA     		bge	.L358
3504:.\ff.c        **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4093              		.loc 1 3504 0 is_stmt 0 discriminator 1
 4094 00ce E069     		ldr	r0, [r4, #28]
 4095 00d0 CAEB0000 		rsb	r0, r10, r0
 4096 00d4 A842     		cmp	r0, r5
 4097 00d6 07D2     		bcs	.L358
3505:.\ff.c        **** 				}
 4098              		.loc 1 3505 0 is_stmt 1
 4099 00d8 08EB4020 		add	r0, r8, r0, lsl #9
 4100 00dc 04F12801 		add	r1, r4, #40
 4101 00e0 4FF40072 		mov	r2, #512
 4102 00e4 FFF7FEFF 		bl	mem_cpy
 4103              	.LVL640:
 4104              	.L358:
3509:.\ff.c        **** 				continue;
 4105              		.loc 1 3509 0
 4106 00e8 6D02     		lsls	r5, r5, #9
 4107              	.LVL641:
3510:.\ff.c        **** 			}
 4108              		.loc 1 3510 0
 4109 00ea 33E0     		b	.L359
 4110              	.LVL642:
 4111              	.L355:
3513:.\ff.c        **** #if !_FS_READONLY
 4112              		.loc 1 3513 0
 4113 00ec E269     		ldr	r2, [r4, #28]
 4114 00ee 5245     		cmp	r2, r10
 4115 00f0 20D0     		beq	.L360
3515:.\ff.c        **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4116              		.loc 1 3515 0
 4117 00f2 94F91030 		ldrsb	r3, [r4, #16]
 4118 00f6 002B     		cmp	r3, #0
 4119 00f8 0FDA     		bge	.L361
3516:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4120              		.loc 1 3516 0
 4121 00fa 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4122 00fe 04F12801 		add	r1, r4, #40
 4123 0102 0123     		movs	r3, #1
 4124 0104 FFF7FEFF 		bl	disk_write
 4125              	.LVL643:
 4126 0108 18B1     		cbz	r0, .L362
3516:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4127              		.loc 1 3516 0 is_stmt 0 discriminator 1
 4128 010a 0123     		movs	r3, #1
 4129 010c 6374     		strb	r3, [r4, #17]
 4130 010e 1846     		mov	r0, r3
 4131 0110 2EE0     		b	.L345
 4132              	.L362:
3517:.\ff.c        **** 				}
 4133              		.loc 1 3517 0 is_stmt 1
 4134 0112 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4135 0114 03F07F03 		and	r3, r3, #127
 4136 0118 2374     		strb	r3, [r4, #16]
 4137              	.L361:
3520:.\ff.c        **** 			}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 188


 4138              		.loc 1 3520 0
 4139 011a 039B     		ldr	r3, [sp, #12]
 4140 011c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4141 011e 04F12801 		add	r1, r4, #40
 4142 0122 5246     		mov	r2, r10
 4143 0124 0123     		movs	r3, #1
 4144 0126 FFF7FEFF 		bl	disk_read
 4145              	.LVL644:
 4146 012a 18B1     		cbz	r0, .L360
3520:.\ff.c        **** 			}
 4147              		.loc 1 3520 0 is_stmt 0 discriminator 1
 4148 012c 0123     		movs	r3, #1
 4149 012e 6374     		strb	r3, [r4, #17]
 4150 0130 1846     		mov	r0, r3
 4151 0132 1DE0     		b	.L345
 4152              	.L360:
3523:.\ff.c        **** 		}
 4153              		.loc 1 3523 0 is_stmt 1
 4154 0134 C4F81CA0 		str	r10, [r4, #28]
 4155              	.LVL645:
 4156              	.L348:
3525:.\ff.c        **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 4157              		.loc 1 3525 0
 4158 0138 6169     		ldr	r1, [r4, #20]
 4159 013a C1F30801 		ubfx	r1, r1, #0, #9
 4160 013e C1F50075 		rsb	r5, r1, #512
 4161              	.LVL646:
3526:.\ff.c        **** #if _FS_TINY
 4162              		.loc 1 3526 0
 4163 0142 B542     		cmp	r5, r6
 4164 0144 00D9     		bls	.L363
 4165 0146 3546     		mov	r5, r6
 4166              	.LVL647:
 4167              	.L363:
3531:.\ff.c        **** #endif
 4168              		.loc 1 3531 0
 4169 0148 2831     		adds	r1, r1, #40
 4170 014a 4046     		mov	r0, r8
 4171 014c 2144     		add	r1, r1, r4
 4172 014e 2A46     		mov	r2, r5
 4173 0150 FFF7FEFF 		bl	mem_cpy
 4174              	.LVL648:
 4175              	.L359:
3469:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4176              		.loc 1 3469 0
 4177 0154 A844     		add	r8, r8, r5
 4178              	.LVL649:
 4179 0156 6369     		ldr	r3, [r4, #20]
 4180 0158 2B44     		add	r3, r3, r5
 4181 015a 6361     		str	r3, [r4, #20]
 4182 015c 3B68     		ldr	r3, [r7]
 4183 015e 2B44     		add	r3, r3, r5
 4184 0160 3B60     		str	r3, [r7]
 4185 0162 761B     		subs	r6, r6, r5
 4186              	.LVL650:
 4187              	.L347:
3468:.\ff.c        **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 189


 4188              		.loc 1 3468 0
 4189 0164 002E     		cmp	r6, #0
 4190 0166 7FF46BAF 		bne	.L364
3535:.\ff.c        **** }
 4191              		.loc 1 3535 0
 4192 016a 0020     		movs	r0, #0
 4193 016c 00E0     		b	.L345
 4194              	.LVL651:
 4195              	.L365:
3464:.\ff.c        **** 	remain = fp->obj.objsize - fp->fptr;
 4196              		.loc 1 3464 0
 4197 016e 0720     		movs	r0, #7
 4198              	.LVL652:
 4199              	.L345:
3536:.\ff.c        **** 
 4200              		.loc 1 3536 0
 4201 0170 05B0     		add	sp, sp, #20
 4202              		.cfi_def_cfa_offset 36
 4203              		@ sp needed
 4204 0172 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4205              		.cfi_endproc
 4206              	.LFE34:
 4207              		.size	f_read, .-f_read
 4208 0176 00BF     		.section	.text.f_write,"ax",%progbits
 4209              		.align	2
 4210              		.global	f_write
 4211              		.thumb
 4212              		.thumb_func
 4213              		.type	f_write, %function
 4214              	f_write:
 4215              	.LFB35:
3552:.\ff.c        **** 	FRESULT res;
 4216              		.loc 1 3552 0
 4217              		.cfi_startproc
 4218              		@ args = 0, pretend = 0, frame = 16
 4219              		@ frame_needed = 0, uses_anonymous_args = 0
 4220              	.LVL653:
 4221 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4222              		.cfi_def_cfa_offset 36
 4223              		.cfi_offset 4, -36
 4224              		.cfi_offset 5, -32
 4225              		.cfi_offset 6, -28
 4226              		.cfi_offset 7, -24
 4227              		.cfi_offset 8, -20
 4228              		.cfi_offset 9, -16
 4229              		.cfi_offset 10, -12
 4230              		.cfi_offset 11, -8
 4231              		.cfi_offset 14, -4
 4232 0004 85B0     		sub	sp, sp, #20
 4233              		.cfi_def_cfa_offset 56
 4234 0006 0446     		mov	r4, r0
 4235 0008 8846     		mov	r8, r1
 4236 000a 1646     		mov	r6, r2
 4237 000c 1F46     		mov	r7, r3
 4238              	.LVL654:
3560:.\ff.c        **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 4239              		.loc 1 3560 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 190


 4240 000e 0023     		movs	r3, #0
 4241              	.LVL655:
 4242 0010 3B60     		str	r3, [r7]
3561:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4243              		.loc 1 3561 0
 4244 0012 0190     		str	r0, [sp, #4]
 4245 0014 03A9     		add	r1, sp, #12
 4246              	.LVL656:
 4247 0016 FFF7FEFF 		bl	validate
 4248              	.LVL657:
3562:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4249              		.loc 1 3562 0
 4250 001a 0346     		mov	r3, r0
 4251 001c 08B9     		cbnz	r0, .L369
3562:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4252              		.loc 1 3562 0 is_stmt 0 discriminator 2
 4253 001e 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4254              	.LVL658:
 4255 0020 0BB1     		cbz	r3, .L370
 4256              	.LVL659:
 4257              	.L369:
3562:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4258              		.loc 1 3562 0 discriminator 3
 4259 0022 1846     		mov	r0, r3
 4260 0024 C0E0     		b	.L371
 4261              	.L370:
3563:.\ff.c        **** 
 4262              		.loc 1 3563 0 is_stmt 1
 4263 0026 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4264              	.LVL660:
 4265 0028 13F0020F 		tst	r3, #2
 4266 002c 00F0BB80 		beq	.L392
3566:.\ff.c        **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 4267              		.loc 1 3566 0
 4268 0030 6369     		ldr	r3, [r4, #20]
 4269 0032 F342     		cmn	r3, r6
 4270 0034 C0F0AE80 		bcc	.L373
3567:.\ff.c        **** 	}
 4271              		.loc 1 3567 0
 4272 0038 DE43     		mvns	r6, r3
 4273              	.LVL661:
 4274 003a ABE0     		b	.L373
 4275              	.LVL662:
 4276              	.L391:
3572:.\ff.c        **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 4277              		.loc 1 3572 0
 4278 003c 6369     		ldr	r3, [r4, #20]
 4279 003e C3F30802 		ubfx	r2, r3, #0, #9
 4280 0042 002A     		cmp	r2, #0
 4281 0044 40F08780 		bne	.L374
3573:.\ff.c        **** 			if (csect == 0) {				/* On the cluster boundary? */
 4282              		.loc 1 3573 0
 4283 0048 039A     		ldr	r2, [sp, #12]
 4284 004a B2F80A90 		ldrh	r9, [r2, #10]
 4285 004e 09F1FF39 		add	r9, r9, #-1
 4286              	.LVL663:
3574:.\ff.c        **** 				if (fp->fptr == 0) {		/* On the top of the file? */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 191


 4287              		.loc 1 3574 0
 4288 0052 19EA5329 		ands	r9, r9, r3, lsr #9
 4289              	.LVL664:
 4290 0056 1FD1     		bne	.L375
3575:.\ff.c        **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 4291              		.loc 1 3575 0
 4292 0058 33B9     		cbnz	r3, .L376
3576:.\ff.c        **** 					if (clst == 0) {		/* If no cluster is allocated, */
 4293              		.loc 1 3576 0
 4294 005a A068     		ldr	r0, [r4, #8]
 4295              	.LVL665:
3577:.\ff.c        **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 4296              		.loc 1 3577 0
 4297 005c 40B9     		cbnz	r0, .L377
3578:.\ff.c        **** 					}
 4298              		.loc 1 3578 0
 4299 005e 0198     		ldr	r0, [sp, #4]
 4300              	.LVL666:
 4301 0060 0021     		movs	r1, #0
 4302 0062 FFF7FEFF 		bl	create_chain
 4303              	.LVL667:
 4304 0066 03E0     		b	.L377
 4305              	.LVL668:
 4306              	.L376:
3587:.\ff.c        **** 					}
 4307              		.loc 1 3587 0
 4308 0068 0198     		ldr	r0, [sp, #4]
 4309 006a A169     		ldr	r1, [r4, #24]
 4310 006c FFF7FEFF 		bl	create_chain
 4311              	.LVL669:
 4312              	.L377:
3590:.\ff.c        **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 4313              		.loc 1 3590 0
 4314 0070 0028     		cmp	r0, #0
 4315 0072 00F09280 		beq	.L378
3591:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4316              		.loc 1 3591 0
 4317 0076 0128     		cmp	r0, #1
 4318 0078 03D1     		bne	.L379
3591:.\ff.c        **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4319              		.loc 1 3591 0 is_stmt 0 discriminator 1
 4320 007a 0223     		movs	r3, #2
 4321 007c 6374     		strb	r3, [r4, #17]
 4322 007e 1846     		mov	r0, r3
 4323              	.LVL670:
 4324 0080 92E0     		b	.L371
 4325              	.LVL671:
 4326              	.L379:
3592:.\ff.c        **** 				fp->clust = clst;			/* Update current cluster */
 4327              		.loc 1 3592 0 is_stmt 1
 4328 0082 B0F1FF3F 		cmp	r0, #-1
 4329 0086 03D1     		bne	.L380
3592:.\ff.c        **** 				fp->clust = clst;			/* Update current cluster */
 4330              		.loc 1 3592 0 is_stmt 0 discriminator 1
 4331 0088 0123     		movs	r3, #1
 4332 008a 6374     		strb	r3, [r4, #17]
 4333 008c 1846     		mov	r0, r3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 192


 4334              	.LVL672:
 4335 008e 8BE0     		b	.L371
 4336              	.LVL673:
 4337              	.L380:
3593:.\ff.c        **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 4338              		.loc 1 3593 0 is_stmt 1
 4339 0090 A061     		str	r0, [r4, #24]
3594:.\ff.c        **** 			}
 4340              		.loc 1 3594 0
 4341 0092 A368     		ldr	r3, [r4, #8]
 4342 0094 03B9     		cbnz	r3, .L375
3594:.\ff.c        **** 			}
 4343              		.loc 1 3594 0 is_stmt 0 discriminator 1
 4344 0096 A060     		str	r0, [r4, #8]
 4345              	.LVL674:
 4346              	.L375:
3599:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4347              		.loc 1 3599 0 is_stmt 1
 4348 0098 94F91030 		ldrsb	r3, [r4, #16]
 4349 009c 002B     		cmp	r3, #0
 4350 009e 10DA     		bge	.L381
3600:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4351              		.loc 1 3600 0
 4352 00a0 039B     		ldr	r3, [sp, #12]
 4353 00a2 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4354 00a4 04F12801 		add	r1, r4, #40
 4355 00a8 E269     		ldr	r2, [r4, #28]
 4356 00aa 0123     		movs	r3, #1
 4357 00ac FFF7FEFF 		bl	disk_write
 4358              	.LVL675:
 4359 00b0 18B1     		cbz	r0, .L382
3600:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4360              		.loc 1 3600 0 is_stmt 0 discriminator 1
 4361 00b2 0123     		movs	r3, #1
 4362 00b4 6374     		strb	r3, [r4, #17]
 4363 00b6 1846     		mov	r0, r3
 4364 00b8 76E0     		b	.L371
 4365              	.L382:
3601:.\ff.c        **** 			}
 4366              		.loc 1 3601 0 is_stmt 1
 4367 00ba 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4368 00bc 03F07F03 		and	r3, r3, #127
 4369 00c0 2374     		strb	r3, [r4, #16]
 4370              	.L381:
3604:.\ff.c        **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 4371              		.loc 1 3604 0
 4372 00c2 DDF80CB0 		ldr	fp, [sp, #12]
 4373 00c6 5846     		mov	r0, fp
 4374 00c8 A169     		ldr	r1, [r4, #24]
 4375 00ca FFF7FEFF 		bl	clust2sect
 4376              	.LVL676:
3605:.\ff.c        **** 			sect += csect;
 4377              		.loc 1 3605 0
 4378 00ce 8246     		mov	r10, r0
 4379 00d0 10B9     		cbnz	r0, .L383
3605:.\ff.c        **** 			sect += csect;
 4380              		.loc 1 3605 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 193


 4381 00d2 0220     		movs	r0, #2
 4382              	.LVL677:
 4383 00d4 6074     		strb	r0, [r4, #17]
 4384 00d6 67E0     		b	.L371
 4385              	.LVL678:
 4386              	.L383:
3606:.\ff.c        **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 4387              		.loc 1 3606 0 is_stmt 1
 4388 00d8 CA44     		add	r10, r10, r9
 4389              	.LVL679:
3608:.\ff.c        **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4390              		.loc 1 3608 0
 4391 00da 750A     		lsrs	r5, r6, #9
 4392              	.LVL680:
 4393 00dc 25D0     		beq	.L384
3609:.\ff.c        **** 					cc = fs->csize - csect;
 4394              		.loc 1 3609 0
 4395 00de 09EB0503 		add	r3, r9, r5
 4396 00e2 BBF80A20 		ldrh	r2, [fp, #10]
 4397 00e6 9342     		cmp	r3, r2
 4398 00e8 01D9     		bls	.L385
3610:.\ff.c        **** 				}
 4399              		.loc 1 3610 0
 4400 00ea C9EB0205 		rsb	r5, r9, r2
 4401              	.LVL681:
 4402              	.L385:
3612:.\ff.c        **** #if _FS_MINIMIZE <= 2
 4403              		.loc 1 3612 0
 4404 00ee 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4405 00f2 4146     		mov	r1, r8
 4406 00f4 5246     		mov	r2, r10
 4407 00f6 2B46     		mov	r3, r5
 4408 00f8 FFF7FEFF 		bl	disk_write
 4409              	.LVL682:
 4410 00fc 10B1     		cbz	r0, .L386
3612:.\ff.c        **** #if _FS_MINIMIZE <= 2
 4411              		.loc 1 3612 0 is_stmt 0 discriminator 1
 4412 00fe 0120     		movs	r0, #1
 4413 0100 6074     		strb	r0, [r4, #17]
 4414 0102 51E0     		b	.L371
 4415              	.L386:
3620:.\ff.c        **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 4416              		.loc 1 3620 0 is_stmt 1
 4417 0104 E169     		ldr	r1, [r4, #28]
 4418 0106 CAEB0101 		rsb	r1, r10, r1
 4419 010a A942     		cmp	r1, r5
 4420 010c 0BD2     		bcs	.L387
3621:.\ff.c        **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4421              		.loc 1 3621 0
 4422 010e 04F12800 		add	r0, r4, #40
 4423 0112 08EB4121 		add	r1, r8, r1, lsl #9
 4424 0116 4FF40072 		mov	r2, #512
 4425 011a FFF7FEFF 		bl	mem_cpy
 4426              	.LVL683:
3622:.\ff.c        **** 				}
 4427              		.loc 1 3622 0
 4428 011e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 194


 4429 0120 03F07F03 		and	r3, r3, #127
 4430 0124 2374     		strb	r3, [r4, #16]
 4431              	.L387:
3626:.\ff.c        **** 				continue;
 4432              		.loc 1 3626 0
 4433 0126 6D02     		lsls	r5, r5, #9
 4434              	.LVL684:
3627:.\ff.c        **** 			}
 4435              		.loc 1 3627 0
 4436 0128 27E0     		b	.L388
 4437              	.LVL685:
 4438              	.L384:
3635:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
 4439              		.loc 1 3635 0
 4440 012a E369     		ldr	r3, [r4, #28]
 4441 012c 5345     		cmp	r3, r10
 4442 012e 10D0     		beq	.L389
3636:.\ff.c        **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 4443              		.loc 1 3636 0 discriminator 1
 4444 0130 6269     		ldr	r2, [r4, #20]
 4445 0132 E368     		ldr	r3, [r4, #12]
3635:.\ff.c        **** 				fp->fptr < fp->obj.objsize &&
 4446              		.loc 1 3635 0 discriminator 1
 4447 0134 9A42     		cmp	r2, r3
 4448 0136 0CD2     		bcs	.L389
3637:.\ff.c        **** 					ABORT(fs, FR_DISK_ERR);
 4449              		.loc 1 3637 0
 4450 0138 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 4451 013c 04F12801 		add	r1, r4, #40
 4452 0140 5246     		mov	r2, r10
 4453 0142 0123     		movs	r3, #1
 4454 0144 FFF7FEFF 		bl	disk_read
 4455              	.LVL686:
3636:.\ff.c        **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 4456              		.loc 1 3636 0
 4457 0148 18B1     		cbz	r0, .L389
3638:.\ff.c        **** 			}
 4458              		.loc 1 3638 0
 4459 014a 0123     		movs	r3, #1
 4460 014c 6374     		strb	r3, [r4, #17]
 4461 014e 1846     		mov	r0, r3
 4462 0150 2AE0     		b	.L371
 4463              	.L389:
3641:.\ff.c        **** 		}
 4464              		.loc 1 3641 0
 4465 0152 C4F81CA0 		str	r10, [r4, #28]
 4466              	.LVL687:
 4467              	.L374:
3643:.\ff.c        **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 4468              		.loc 1 3643 0
 4469 0156 6069     		ldr	r0, [r4, #20]
 4470 0158 C0F30800 		ubfx	r0, r0, #0, #9
 4471 015c C0F50075 		rsb	r5, r0, #512
 4472              	.LVL688:
3644:.\ff.c        **** #if _FS_TINY
 4473              		.loc 1 3644 0
 4474 0160 B542     		cmp	r5, r6
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 195


 4475 0162 00D9     		bls	.L390
 4476 0164 3546     		mov	r5, r6
 4477              	.LVL689:
 4478              	.L390:
3650:.\ff.c        **** 		fp->flag |= FA_DIRTY;
 4479              		.loc 1 3650 0
 4480 0166 2830     		adds	r0, r0, #40
 4481 0168 2044     		add	r0, r0, r4
 4482 016a 4146     		mov	r1, r8
 4483 016c 2A46     		mov	r2, r5
 4484 016e FFF7FEFF 		bl	mem_cpy
 4485              	.LVL690:
3651:.\ff.c        **** #endif
 4486              		.loc 1 3651 0
 4487 0172 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4488 0174 63F07F03 		orn	r3, r3, #127
 4489 0178 2374     		strb	r3, [r4, #16]
 4490              	.L388:
3571:.\ff.c        **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 4491              		.loc 1 3571 0
 4492 017a A844     		add	r8, r8, r5
 4493              	.LVL691:
 4494 017c 6369     		ldr	r3, [r4, #20]
 4495 017e 2B44     		add	r3, r3, r5
 4496 0180 6361     		str	r3, [r4, #20]
 4497 0182 E268     		ldr	r2, [r4, #12]
 4498 0184 9342     		cmp	r3, r2
 4499 0186 38BF     		it	cc
 4500 0188 1346     		movcc	r3, r2
 4501 018a E360     		str	r3, [r4, #12]
 4502 018c 3B68     		ldr	r3, [r7]
 4503 018e 2B44     		add	r3, r3, r5
 4504 0190 3B60     		str	r3, [r7]
 4505 0192 761B     		subs	r6, r6, r5
 4506              	.LVL692:
 4507              	.L373:
3570:.\ff.c        **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 4508              		.loc 1 3570 0
 4509 0194 002E     		cmp	r6, #0
 4510 0196 7FF451AF 		bne	.L391
 4511              	.L378:
3655:.\ff.c        **** 
 4512              		.loc 1 3655 0
 4513 019a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4514 019c 43F04003 		orr	r3, r3, #64
 4515 01a0 2374     		strb	r3, [r4, #16]
3657:.\ff.c        **** }
 4516              		.loc 1 3657 0
 4517 01a2 0020     		movs	r0, #0
 4518 01a4 00E0     		b	.L371
 4519              	.LVL693:
 4520              	.L392:
3563:.\ff.c        **** 
 4521              		.loc 1 3563 0
 4522 01a6 0720     		movs	r0, #7
 4523              	.LVL694:
 4524              	.L371:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 196


3658:.\ff.c        **** 
 4525              		.loc 1 3658 0
 4526 01a8 05B0     		add	sp, sp, #20
 4527              		.cfi_def_cfa_offset 36
 4528              		@ sp needed
 4529 01aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4530              		.cfi_endproc
 4531              	.LFE35:
 4532              		.size	f_write, .-f_write
 4533 01ae 00BF     		.section	.text.putc_bfd,"ax",%progbits
 4534              		.align	2
 4535              		.thumb
 4536              		.thumb_func
 4537              		.type	putc_bfd, %function
 4538              	putc_bfd:
 4539              	.LFB49:
5830:.\ff.c        **** 	UINT bw;
 4540              		.loc 1 5830 0
 4541              		.cfi_startproc
 4542              		@ args = 0, pretend = 0, frame = 8
 4543              		@ frame_needed = 0, uses_anonymous_args = 0
 4544              	.LVL695:
 4545 0000 70B5     		push	{r4, r5, r6, lr}
 4546              		.cfi_def_cfa_offset 16
 4547              		.cfi_offset 4, -16
 4548              		.cfi_offset 5, -12
 4549              		.cfi_offset 6, -8
 4550              		.cfi_offset 14, -4
 4551 0002 82B0     		sub	sp, sp, #8
 4552              		.cfi_def_cfa_offset 24
 4553 0004 0446     		mov	r4, r0
 4554 0006 0E46     		mov	r6, r1
5835:.\ff.c        **** 		putc_bfd(pb, '\r');
 4555              		.loc 1 5835 0
 4556 0008 0A29     		cmp	r1, #10
 4557 000a 02D1     		bne	.L396
5836:.\ff.c        **** 	}
 4558              		.loc 1 5836 0
 4559 000c 0D21     		movs	r1, #13
 4560              	.LVL696:
 4561 000e FFF7F7FF 		bl	putc_bfd
 4562              	.LVL697:
 4563              	.L396:
5839:.\ff.c        **** 	if (i < 0) return;
 4564              		.loc 1 5839 0
 4565 0012 6368     		ldr	r3, [r4, #4]
 4566              	.LVL698:
5840:.\ff.c        **** 
 4567              		.loc 1 5840 0
 4568 0014 002B     		cmp	r3, #0
 4569 0016 16DB     		blt	.L395
5869:.\ff.c        **** #endif
 4570              		.loc 1 5869 0
 4571 0018 5D1C     		adds	r5, r3, #1
 4572              	.LVL699:
 4573 001a 2344     		add	r3, r3, r4
 4574 001c 1E73     		strb	r6, [r3, #12]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 197


5872:.\ff.c        **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 4575              		.loc 1 5872 0
 4576 001e 3C2D     		cmp	r5, #60
 4577 0020 0DDD     		ble	.L398
5873:.\ff.c        **** 		i = (bw == (UINT)i) ? 0 : -1;
 4578              		.loc 1 5873 0
 4579 0022 2068     		ldr	r0, [r4]
 4580 0024 04F10C01 		add	r1, r4, #12
 4581 0028 2A46     		mov	r2, r5
 4582 002a 01AB     		add	r3, sp, #4
 4583 002c FFF7FEFF 		bl	f_write
 4584              	.LVL700:
5874:.\ff.c        **** 	}
 4585              		.loc 1 5874 0
 4586 0030 019B     		ldr	r3, [sp, #4]
 4587 0032 9D42     		cmp	r5, r3
 4588 0034 01D1     		bne	.L401
 4589 0036 0025     		movs	r5, #0
 4590              	.LVL701:
 4591 0038 01E0     		b	.L398
 4592              	.LVL702:
 4593              	.L401:
 4594 003a 4FF0FF35 		mov	r5, #-1
 4595              	.LVL703:
 4596              	.L398:
5876:.\ff.c        **** 	pb->nchr++;
 4597              		.loc 1 5876 0
 4598 003e 6560     		str	r5, [r4, #4]
5877:.\ff.c        **** }
 4599              		.loc 1 5877 0
 4600 0040 A368     		ldr	r3, [r4, #8]
 4601 0042 0133     		adds	r3, r3, #1
 4602 0044 A360     		str	r3, [r4, #8]
 4603              	.LVL704:
 4604              	.L395:
5878:.\ff.c        **** 
 4605              		.loc 1 5878 0
 4606 0046 02B0     		add	sp, sp, #8
 4607              		.cfi_def_cfa_offset 16
 4608              		@ sp needed
 4609 0048 70BD     		pop	{r4, r5, r6, pc}
 4610              		.cfi_endproc
 4611              	.LFE49:
 4612              		.size	putc_bfd, .-putc_bfd
 4613 004a 00BF     		.section	.text.putc_flush,"ax",%progbits
 4614              		.align	2
 4615              		.thumb
 4616              		.thumb_func
 4617              		.type	putc_flush, %function
 4618              	putc_flush:
 4619              	.LFB50:
5885:.\ff.c        **** 	UINT nw;
 4620              		.loc 1 5885 0
 4621              		.cfi_startproc
 4622              		@ args = 0, pretend = 0, frame = 8
 4623              		@ frame_needed = 0, uses_anonymous_args = 0
 4624              	.LVL705:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 198


5888:.\ff.c        **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 4625              		.loc 1 5888 0
 4626 0000 4268     		ldr	r2, [r0, #4]
 4627 0002 002A     		cmp	r2, #0
 4628 0004 0FDB     		blt	.L405
5885:.\ff.c        **** 	UINT nw;
 4629              		.loc 1 5885 0
 4630 0006 10B5     		push	{r4, lr}
 4631              		.cfi_def_cfa_offset 8
 4632              		.cfi_offset 4, -8
 4633              		.cfi_offset 14, -4
 4634 0008 82B0     		sub	sp, sp, #8
 4635              		.cfi_def_cfa_offset 16
 4636 000a 0446     		mov	r4, r0
5889:.\ff.c        **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 4637              		.loc 1 5889 0
 4638 000c 0068     		ldr	r0, [r0]
 4639              	.LVL706:
 4640 000e 04F10C01 		add	r1, r4, #12
 4641 0012 01AB     		add	r3, sp, #4
 4642 0014 FFF7FEFF 		bl	f_write
 4643              	.LVL707:
 4644 0018 40B9     		cbnz	r0, .L406
5890:.\ff.c        **** 	return EOF;
 4645              		.loc 1 5890 0
 4646 001a 6268     		ldr	r2, [r4, #4]
 4647 001c 019B     		ldr	r3, [sp, #4]
 4648 001e 9A42     		cmp	r2, r3
 4649 0020 07D1     		bne	.L407
5890:.\ff.c        **** 	return EOF;
 4650              		.loc 1 5890 0 is_stmt 0 discriminator 1
 4651 0022 A068     		ldr	r0, [r4, #8]
 4652 0024 07E0     		b	.L404
 4653              	.LVL708:
 4654              	.L405:
 4655              		.cfi_def_cfa_offset 0
 4656              		.cfi_restore 4
 4657              		.cfi_restore 14
5891:.\ff.c        **** }
 4658              		.loc 1 5891 0 is_stmt 1
 4659 0026 4FF0FF30 		mov	r0, #-1
 4660              	.LVL709:
5892:.\ff.c        **** 
 4661              		.loc 1 5892 0
 4662 002a 7047     		bx	lr
 4663              	.LVL710:
 4664              	.L406:
 4665              		.cfi_def_cfa_offset 16
 4666              		.cfi_offset 4, -8
 4667              		.cfi_offset 14, -4
5891:.\ff.c        **** }
 4668              		.loc 1 5891 0
 4669 002c 4FF0FF30 		mov	r0, #-1
 4670 0030 01E0     		b	.L404
 4671              	.L407:
 4672 0032 4FF0FF30 		mov	r0, #-1
 4673              	.L404:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 199


5892:.\ff.c        **** 
 4674              		.loc 1 5892 0
 4675 0036 02B0     		add	sp, sp, #8
 4676              		.cfi_def_cfa_offset 8
 4677              		@ sp needed
 4678 0038 10BD     		pop	{r4, pc}
 4679              		.cfi_endproc
 4680              	.LFE50:
 4681              		.size	putc_flush, .-putc_flush
 4682 003a 00BF     		.section	.text.f_sync,"ax",%progbits
 4683              		.align	2
 4684              		.global	f_sync
 4685              		.thumb
 4686              		.thumb_func
 4687              		.type	f_sync, %function
 4688              	f_sync:
 4689              	.LFB36:
3670:.\ff.c        **** 	FRESULT res;
 4690              		.loc 1 3670 0
 4691              		.cfi_startproc
 4692              		@ args = 0, pretend = 0, frame = 8
 4693              		@ frame_needed = 0, uses_anonymous_args = 0
 4694              	.LVL711:
 4695 0000 30B5     		push	{r4, r5, lr}
 4696              		.cfi_def_cfa_offset 12
 4697              		.cfi_offset 4, -12
 4698              		.cfi_offset 5, -8
 4699              		.cfi_offset 14, -4
 4700 0002 83B0     		sub	sp, sp, #12
 4701              		.cfi_def_cfa_offset 24
 4702 0004 0446     		mov	r4, r0
3678:.\ff.c        **** 	if (res == FR_OK) {
 4703              		.loc 1 3678 0
 4704 0006 01A9     		add	r1, sp, #4
 4705 0008 FFF7FEFF 		bl	validate
 4706              	.LVL712:
3679:.\ff.c        **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 4707              		.loc 1 3679 0
 4708 000c 0346     		mov	r3, r0
 4709 000e 0028     		cmp	r0, #0
 4710 0010 3DD1     		bne	.L410
3680:.\ff.c        **** #if !_FS_TINY
 4711              		.loc 1 3680 0
 4712 0012 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4713 0014 12F0400F 		tst	r2, #64
 4714 0018 39D0     		beq	.L410
3682:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 4715              		.loc 1 3682 0
 4716 001a 12F0800F 		tst	r2, #128
 4717 001e 0CD0     		beq	.L411
3683:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4718              		.loc 1 3683 0
 4719 0020 019B     		ldr	r3, [sp, #4]
 4720 0022 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4721              	.LVL713:
 4722 0024 04F12801 		add	r1, r4, #40
 4723 0028 E269     		ldr	r2, [r4, #28]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 200


 4724 002a 0123     		movs	r3, #1
 4725 002c FFF7FEFF 		bl	disk_write
 4726              	.LVL714:
 4727 0030 78BB     		cbnz	r0, .L413
3684:.\ff.c        **** 			}
 4728              		.loc 1 3684 0
 4729 0032 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 4730 0034 03F07F03 		and	r3, r3, #127
 4731 0038 2374     		strb	r3, [r4, #16]
 4732              	.L411:
 4733              	.LVL715:
3717:.\ff.c        **** 				if (res == FR_OK) {
 4734              		.loc 1 3717 0
 4735 003a 0198     		ldr	r0, [sp, #4]
 4736 003c 216A     		ldr	r1, [r4, #32]
 4737 003e FFF7FEFF 		bl	move_window
 4738              	.LVL716:
3718:.\ff.c        **** 					dir = fp->dir_ptr;
 4739              		.loc 1 3718 0
 4740 0042 0346     		mov	r3, r0
 4741 0044 18BB     		cbnz	r0, .L410
3719:.\ff.c        **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 4742              		.loc 1 3719 0
 4743 0046 656A     		ldr	r5, [r4, #36]
 4744              	.LVL717:
3720:.\ff.c        **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 4745              		.loc 1 3720 0
 4746 0048 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 4747 004a 43F02003 		orr	r3, r3, #32
 4748 004e EB72     		strb	r3, [r5, #11]
3721:.\ff.c        **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 4749              		.loc 1 3721 0
 4750 0050 2068     		ldr	r0, [r4]
 4751              	.LVL718:
 4752 0052 2946     		mov	r1, r5
 4753 0054 A268     		ldr	r2, [r4, #8]
 4754 0056 FFF7FEFF 		bl	st_clust
 4755              	.LVL719:
3722:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 4756              		.loc 1 3722 0
 4757 005a 05F11C00 		add	r0, r5, #28
 4758 005e E168     		ldr	r1, [r4, #12]
 4759 0060 FFF7FEFF 		bl	st_dword
 4760              	.LVL720:
3723:.\ff.c        **** 					st_word(dir + DIR_LstAccDate, 0);
 4761              		.loc 1 3723 0
 4762 0064 05F11600 		add	r0, r5, #22
 4763 0068 0B49     		ldr	r1, .L415
 4764 006a FFF7FEFF 		bl	st_dword
 4765              	.LVL721:
3724:.\ff.c        **** 					fs->wflag = 1;
 4766              		.loc 1 3724 0
 4767 006e 05F11200 		add	r0, r5, #18
 4768 0072 0021     		movs	r1, #0
 4769 0074 FFF7FEFF 		bl	st_word
 4770              	.LVL722:
3725:.\ff.c        **** 					res = sync_fs(fs);					/* Restore it to the directory */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 201


 4771              		.loc 1 3725 0
 4772 0078 0122     		movs	r2, #1
 4773 007a 019B     		ldr	r3, [sp, #4]
 4774 007c DA70     		strb	r2, [r3, #3]
3726:.\ff.c        **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 4775              		.loc 1 3726 0
 4776 007e 0198     		ldr	r0, [sp, #4]
 4777 0080 FFF7FEFF 		bl	sync_fs
 4778              	.LVL723:
 4779 0084 0346     		mov	r3, r0
 4780              	.LVL724:
3727:.\ff.c        **** 				}
 4781              		.loc 1 3727 0
 4782 0086 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4783 0088 22F04002 		bic	r2, r2, #64
 4784 008c 2274     		strb	r2, [r4, #16]
 4785              	.LVL725:
 4786              	.L410:
3733:.\ff.c        **** }
 4787              		.loc 1 3733 0
 4788 008e 1846     		mov	r0, r3
 4789 0090 00E0     		b	.L412
 4790              	.LVL726:
 4791              	.L413:
3683:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 4792              		.loc 1 3683 0
 4793 0092 0120     		movs	r0, #1
 4794              	.L412:
3734:.\ff.c        **** 
 4795              		.loc 1 3734 0
 4796 0094 03B0     		add	sp, sp, #12
 4797              		.cfi_def_cfa_offset 12
 4798              		@ sp needed
 4799 0096 30BD     		pop	{r4, r5, pc}
 4800              	.LVL727:
 4801              	.L416:
 4802              		.align	2
 4803              	.L415:
 4804 0098 00002148 		.word	1210122240
 4805              		.cfi_endproc
 4806              	.LFE36:
 4807              		.size	f_sync, .-f_sync
 4808              		.section	.text.f_close,"ax",%progbits
 4809              		.align	2
 4810              		.global	f_close
 4811              		.thumb
 4812              		.thumb_func
 4813              		.type	f_close, %function
 4814              	f_close:
 4815              	.LFB37:
3748:.\ff.c        **** 	FRESULT res;
 4816              		.loc 1 3748 0
 4817              		.cfi_startproc
 4818              		@ args = 0, pretend = 0, frame = 8
 4819              		@ frame_needed = 0, uses_anonymous_args = 0
 4820              	.LVL728:
 4821 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 202


 4822              		.cfi_def_cfa_offset 8
 4823              		.cfi_offset 4, -8
 4824              		.cfi_offset 14, -4
 4825 0002 82B0     		sub	sp, sp, #8
 4826              		.cfi_def_cfa_offset 16
 4827 0004 0446     		mov	r4, r0
3753:.\ff.c        **** 	if (res == FR_OK)
 4828              		.loc 1 3753 0
 4829 0006 FFF7FEFF 		bl	f_sync
 4830              	.LVL729:
3754:.\ff.c        **** #endif
 4831              		.loc 1 3754 0
 4832 000a 0346     		mov	r3, r0
 4833 000c 38B9     		cbnz	r0, .L418
3757:.\ff.c        **** 		if (res == FR_OK) {
 4834              		.loc 1 3757 0
 4835 000e 2046     		mov	r0, r4
 4836              	.LVL730:
 4837 0010 01A9     		add	r1, sp, #4
 4838 0012 FFF7FEFF 		bl	validate
 4839              	.LVL731:
3758:.\ff.c        **** #if _FS_LOCK != 0
 4840              		.loc 1 3758 0
 4841 0016 0346     		mov	r3, r0
 4842 0018 08B9     		cbnz	r0, .L418
3764:.\ff.c        **** 			}
 4843              		.loc 1 3764 0
 4844 001a 0022     		movs	r2, #0
 4845 001c 2260     		str	r2, [r4]
 4846              	.L418:
 4847              	.LVL732:
3772:.\ff.c        **** 
 4848              		.loc 1 3772 0
 4849 001e 1846     		mov	r0, r3
 4850 0020 02B0     		add	sp, sp, #8
 4851              		.cfi_def_cfa_offset 8
 4852              		@ sp needed
 4853 0022 10BD     		pop	{r4, pc}
 4854              		.cfi_endproc
 4855              	.LFE37:
 4856              		.size	f_close, .-f_close
 4857              		.section	.text.f_lseek,"ax",%progbits
 4858              		.align	2
 4859              		.global	f_lseek
 4860              		.thumb
 4861              		.thumb_func
 4862              		.type	f_lseek, %function
 4863              	f_lseek:
 4864              	.LFB38:
3937:.\ff.c        **** 	FRESULT res;
 4865              		.loc 1 3937 0
 4866              		.cfi_startproc
 4867              		@ args = 0, pretend = 0, frame = 8
 4868              		@ frame_needed = 0, uses_anonymous_args = 0
 4869              	.LVL733:
 4870 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4871              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 203


 4872              		.cfi_offset 4, -24
 4873              		.cfi_offset 5, -20
 4874              		.cfi_offset 6, -16
 4875              		.cfi_offset 7, -12
 4876              		.cfi_offset 8, -8
 4877              		.cfi_offset 14, -4
 4878 0004 82B0     		sub	sp, sp, #8
 4879              		.cfi_def_cfa_offset 32
 4880 0006 0446     		mov	r4, r0
 4881 0008 0E46     		mov	r6, r1
3946:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4882              		.loc 1 3946 0
 4883 000a 01A9     		add	r1, sp, #4
 4884              	.LVL734:
 4885 000c FFF7FEFF 		bl	validate
 4886              	.LVL735:
3947:.\ff.c        **** #if _USE_FASTSEEK
 4887              		.loc 1 3947 0
 4888 0010 0546     		mov	r5, r0
 4889 0012 10B9     		cbnz	r0, .L421
 4890 0014 A046     		mov	r8, r4
3947:.\ff.c        **** #if _USE_FASTSEEK
 4891              		.loc 1 3947 0 is_stmt 0 discriminator 2
 4892 0016 657C     		ldrb	r5, [r4, #17]	@ zero_extendqisi2
 4893              	.LVL736:
 4894 0018 0DB1     		cbz	r5, .L422
 4895              	.LVL737:
 4896              	.L421:
3947:.\ff.c        **** #if _USE_FASTSEEK
 4897              		.loc 1 3947 0 discriminator 3
 4898 001a 2846     		mov	r0, r5
 4899 001c A4E0     		b	.L423
 4900              	.L422:
4005:.\ff.c        **** 			ofs = fp->obj.objsize;
 4901              		.loc 1 4005 0 is_stmt 1
 4902 001e E368     		ldr	r3, [r4, #12]
 4903 0020 B342     		cmp	r3, r6
 4904 0022 04D2     		bcs	.L424
4005:.\ff.c        **** 			ofs = fp->obj.objsize;
 4905              		.loc 1 4005 0 is_stmt 0 discriminator 1
 4906 0024 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 4907 0026 12F0020F 		tst	r2, #2
 4908 002a 00D1     		bne	.L424
4006:.\ff.c        **** 		}
 4909              		.loc 1 4006 0 is_stmt 1
 4910 002c 1E46     		mov	r6, r3
 4911              	.LVL738:
 4912              	.L424:
4008:.\ff.c        **** 		fp->fptr = nsect = 0;
 4913              		.loc 1 4008 0
 4914 002e 6369     		ldr	r3, [r4, #20]
 4915              	.LVL739:
4009:.\ff.c        **** 		if (ofs) {
 4916              		.loc 1 4009 0
 4917 0030 0022     		movs	r2, #0
 4918 0032 6261     		str	r2, [r4, #20]
4010:.\ff.c        **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 204


 4919              		.loc 1 4010 0
 4920 0034 002E     		cmp	r6, #0
 4921 0036 62D0     		beq	.L446
4011:.\ff.c        **** 			if (ifptr > 0 &&
 4922              		.loc 1 4011 0
 4923 0038 019A     		ldr	r2, [sp, #4]
 4924 003a 5789     		ldrh	r7, [r2, #10]
 4925 003c 7F02     		lsls	r7, r7, #9
 4926              	.LVL740:
4012:.\ff.c        **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4927              		.loc 1 4012 0
 4928 003e 6BB1     		cbz	r3, .L426
4013:.\ff.c        **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 4929              		.loc 1 4013 0 discriminator 1
 4930 0040 721E     		subs	r2, r6, #1
 4931 0042 B2FBF7F2 		udiv	r2, r2, r7
 4932 0046 013B     		subs	r3, r3, #1
 4933              	.LVL741:
 4934 0048 B3FBF7F1 		udiv	r1, r3, r7
4012:.\ff.c        **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4935              		.loc 1 4012 0 discriminator 1
 4936 004c 8A42     		cmp	r2, r1
 4937 004e 05D3     		bcc	.L426
4014:.\ff.c        **** 				ofs -= fp->fptr;
 4938              		.loc 1 4014 0
 4939 0050 7A42     		negs	r2, r7
 4940 0052 1340     		ands	r3, r3, r2
 4941              	.LVL742:
 4942 0054 6361     		str	r3, [r4, #20]
4015:.\ff.c        **** 				clst = fp->clust;
 4943              		.loc 1 4015 0
 4944 0056 F61A     		subs	r6, r6, r3
 4945              	.LVL743:
4016:.\ff.c        **** 			} else {									/* When seek to back cluster, */
 4946              		.loc 1 4016 0
 4947 0058 A169     		ldr	r1, [r4, #24]
 4948              	.LVL744:
 4949 005a 14E0     		b	.L427
 4950              	.LVL745:
 4951              	.L426:
4018:.\ff.c        **** #if !_FS_READONLY
 4952              		.loc 1 4018 0
 4953 005c A168     		ldr	r1, [r4, #8]
 4954              	.LVL746:
4020:.\ff.c        **** 					clst = create_chain(&fp->obj, 0);
 4955              		.loc 1 4020 0
 4956 005e 89B9     		cbnz	r1, .L428
4021:.\ff.c        **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 4957              		.loc 1 4021 0
 4958 0060 2046     		mov	r0, r4
 4959 0062 FFF7FEFF 		bl	create_chain
 4960              	.LVL747:
 4961 0066 0146     		mov	r1, r0
 4962              	.LVL748:
4022:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4963              		.loc 1 4022 0
 4964 0068 0128     		cmp	r0, #1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 205


 4965 006a 03D1     		bne	.L429
4022:.\ff.c        **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4966              		.loc 1 4022 0 is_stmt 0 discriminator 1
 4967 006c 0225     		movs	r5, #2
 4968              	.LVL749:
 4969 006e 6574     		strb	r5, [r4, #17]
 4970 0070 2846     		mov	r0, r5
 4971              	.LVL750:
 4972 0072 79E0     		b	.L423
 4973              	.LVL751:
 4974              	.L429:
4023:.\ff.c        **** 					fp->obj.sclust = clst;
 4975              		.loc 1 4023 0 is_stmt 1
 4976 0074 B0F1FF3F 		cmp	r0, #-1
 4977 0078 03D1     		bne	.L430
4023:.\ff.c        **** 					fp->obj.sclust = clst;
 4978              		.loc 1 4023 0 is_stmt 0 discriminator 1
 4979 007a 0125     		movs	r5, #1
 4980              	.LVL752:
 4981 007c 6574     		strb	r5, [r4, #17]
 4982 007e 2846     		mov	r0, r5
 4983              	.LVL753:
 4984 0080 72E0     		b	.L423
 4985              	.LVL754:
 4986              	.L430:
4024:.\ff.c        **** 				}
 4987              		.loc 1 4024 0 is_stmt 1
 4988 0082 A060     		str	r0, [r4, #8]
 4989              	.LVL755:
 4990              	.L428:
4027:.\ff.c        **** 			}
 4991              		.loc 1 4027 0
 4992 0084 A161     		str	r1, [r4, #24]
 4993              	.L427:
4029:.\ff.c        **** 				while (ofs > bcs) {						/* Cluster following loop */
 4994              		.loc 1 4029 0
 4995 0086 29BB     		cbnz	r1, .L431
4009:.\ff.c        **** 		if (ofs) {
 4996              		.loc 1 4009 0
 4997 0088 0026     		movs	r6, #0
 4998              	.LVL756:
 4999 008a 3BE0     		b	.L425
 5000              	.LVL757:
 5001              	.L438:
4031:.\ff.c        **** #if !_FS_READONLY
 5002              		.loc 1 4031 0
 5003 008c F61B     		subs	r6, r6, r7
 5004              	.LVL758:
 5005 008e 6369     		ldr	r3, [r4, #20]
 5006 0090 3B44     		add	r3, r3, r7
 5007 0092 6361     		str	r3, [r4, #20]
4033:.\ff.c        **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
 5008              		.loc 1 4033 0
 5009 0094 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5010 0096 13F0020F 		tst	r3, #2
 5011 009a 05D0     		beq	.L432
4038:.\ff.c        **** 						if (clst == 0) {				/* Clip file size in case of disk full */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 206


 5012              		.loc 1 4038 0
 5013 009c 4046     		mov	r0, r8
 5014 009e FFF7FEFF 		bl	create_chain
 5015              	.LVL759:
4039:.\ff.c        **** 							ofs = 0; break;
 5016              		.loc 1 4039 0
 5017 00a2 0146     		mov	r1, r0
 5018 00a4 20B9     		cbnz	r0, .L434
 5019 00a6 18E0     		b	.L447
 5020              	.LVL760:
 5021              	.L432:
4045:.\ff.c        **** 					}
 5022              		.loc 1 4045 0
 5023 00a8 4046     		mov	r0, r8
 5024 00aa FFF7FEFF 		bl	get_fat
 5025              	.LVL761:
 5026 00ae 0146     		mov	r1, r0
 5027              	.LVL762:
 5028              	.L434:
4047:.\ff.c        **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 5029              		.loc 1 4047 0
 5030 00b0 B1F1FF3F 		cmp	r1, #-1
 5031 00b4 03D1     		bne	.L435
4047:.\ff.c        **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 5032              		.loc 1 4047 0 is_stmt 0 discriminator 1
 5033 00b6 0125     		movs	r5, #1
 5034              	.LVL763:
 5035 00b8 6574     		strb	r5, [r4, #17]
 5036 00ba 2846     		mov	r0, r5
 5037              	.LVL764:
 5038 00bc 54E0     		b	.L423
 5039              	.LVL765:
 5040              	.L435:
4048:.\ff.c        **** 					fp->clust = clst;
 5041              		.loc 1 4048 0 is_stmt 1
 5042 00be 0129     		cmp	r1, #1
 5043 00c0 03D9     		bls	.L436
4048:.\ff.c        **** 					fp->clust = clst;
 5044              		.loc 1 4048 0 is_stmt 0 discriminator 2
 5045 00c2 019B     		ldr	r3, [sp, #4]
 5046 00c4 5B69     		ldr	r3, [r3, #20]
 5047 00c6 8B42     		cmp	r3, r1
 5048 00c8 03D8     		bhi	.L437
 5049              	.L436:
4048:.\ff.c        **** 					fp->clust = clst;
 5050              		.loc 1 4048 0 discriminator 3
 5051 00ca 0225     		movs	r5, #2
 5052              	.LVL766:
 5053 00cc 6574     		strb	r5, [r4, #17]
 5054 00ce 2846     		mov	r0, r5
 5055              	.LVL767:
 5056 00d0 4AE0     		b	.L423
 5057              	.LVL768:
 5058              	.L437:
4049:.\ff.c        **** 				}
 5059              		.loc 1 4049 0 is_stmt 1
 5060 00d2 A161     		str	r1, [r4, #24]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 207


 5061              	.LVL769:
 5062              	.L431:
4030:.\ff.c        **** 					ofs -= bcs; fp->fptr += bcs;
 5063              		.loc 1 4030 0
 5064 00d4 BE42     		cmp	r6, r7
 5065 00d6 D9D8     		bhi	.L438
 5066 00d8 00E0     		b	.L433
 5067              	.LVL770:
 5068              	.L447:
4040:.\ff.c        **** 						}
 5069              		.loc 1 4040 0
 5070 00da 0026     		movs	r6, #0
 5071              	.LVL771:
 5072              	.L433:
4051:.\ff.c        **** 				if (ofs % SS(fs)) {
 5073              		.loc 1 4051 0
 5074 00dc 6369     		ldr	r3, [r4, #20]
 5075 00de 3344     		add	r3, r3, r6
 5076 00e0 6361     		str	r3, [r4, #20]
4052:.\ff.c        **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 5077              		.loc 1 4052 0
 5078 00e2 C6F30803 		ubfx	r3, r6, #0, #9
 5079 00e6 63B1     		cbz	r3, .L448
4053:.\ff.c        **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 5080              		.loc 1 4053 0
 5081 00e8 0198     		ldr	r0, [sp, #4]
 5082 00ea FFF7FEFF 		bl	clust2sect
 5083              	.LVL772:
4054:.\ff.c        **** 					nsect += (DWORD)(ofs / SS(fs));
 5084              		.loc 1 4054 0
 5085 00ee 18B9     		cbnz	r0, .L439
4054:.\ff.c        **** 					nsect += (DWORD)(ofs / SS(fs));
 5086              		.loc 1 4054 0 is_stmt 0 discriminator 1
 5087 00f0 0225     		movs	r5, #2
 5088              	.LVL773:
 5089 00f2 6574     		strb	r5, [r4, #17]
 5090 00f4 2846     		mov	r0, r5
 5091              	.LVL774:
 5092 00f6 37E0     		b	.L423
 5093              	.LVL775:
 5094              	.L439:
4055:.\ff.c        **** 				}
 5095              		.loc 1 4055 0 is_stmt 1
 5096 00f8 00EB5626 		add	r6, r0, r6, lsr #9
 5097              	.LVL776:
 5098 00fc 02E0     		b	.L425
 5099              	.LVL777:
 5100              	.L446:
4009:.\ff.c        **** 		if (ofs) {
 5101              		.loc 1 4009 0
 5102 00fe 0026     		movs	r6, #0
 5103              	.LVL778:
 5104 0100 00E0     		b	.L425
 5105              	.LVL779:
 5106              	.L448:
 5107 0102 0026     		movs	r6, #0
 5108              	.LVL780:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 208


 5109              	.L425:
4059:.\ff.c        **** 			fp->obj.objsize = fp->fptr;
 5110              		.loc 1 4059 0
 5111 0104 6369     		ldr	r3, [r4, #20]
 5112 0106 E268     		ldr	r2, [r4, #12]
 5113 0108 9342     		cmp	r3, r2
 5114 010a 04D9     		bls	.L440
4060:.\ff.c        **** 			fp->flag |= FA_MODIFIED;
 5115              		.loc 1 4060 0
 5116 010c E360     		str	r3, [r4, #12]
4061:.\ff.c        **** 		}
 5117              		.loc 1 4061 0
 5118 010e 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 5119 0110 42F04002 		orr	r2, r2, #64
 5120 0114 2274     		strb	r2, [r4, #16]
 5121              	.L440:
4063:.\ff.c        **** #if !_FS_TINY
 5122              		.loc 1 4063 0
 5123 0116 C3F30803 		ubfx	r3, r3, #0, #9
 5124 011a 23B3     		cbz	r3, .L441
4063:.\ff.c        **** #if !_FS_TINY
 5125              		.loc 1 4063 0 is_stmt 0 discriminator 1
 5126 011c E269     		ldr	r2, [r4, #28]
 5127 011e B242     		cmp	r2, r6
 5128 0120 21D0     		beq	.L441
4066:.\ff.c        **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5129              		.loc 1 4066 0 is_stmt 1
 5130 0122 94F91030 		ldrsb	r3, [r4, #16]
 5131 0126 002B     		cmp	r3, #0
 5132 0128 0FDA     		bge	.L442
4067:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5133              		.loc 1 4067 0
 5134 012a 019B     		ldr	r3, [sp, #4]
 5135 012c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5136 012e 04F12801 		add	r1, r4, #40
 5137 0132 0123     		movs	r3, #1
 5138 0134 FFF7FEFF 		bl	disk_write
 5139              	.LVL781:
 5140 0138 18B1     		cbz	r0, .L443
4067:.\ff.c        **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5141              		.loc 1 4067 0 is_stmt 0 discriminator 1
 5142 013a 0125     		movs	r5, #1
 5143              	.LVL782:
 5144 013c 6574     		strb	r5, [r4, #17]
 5145 013e 2846     		mov	r0, r5
 5146 0140 12E0     		b	.L423
 5147              	.LVL783:
 5148              	.L443:
4068:.\ff.c        **** 			}
 5149              		.loc 1 4068 0 is_stmt 1
 5150 0142 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 5151 0144 03F07F03 		and	r3, r3, #127
 5152 0148 2374     		strb	r3, [r4, #16]
 5153              	.L442:
4071:.\ff.c        **** #endif
 5154              		.loc 1 4071 0
 5155 014a 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 209


 5156 014c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5157 014e 04F12801 		add	r1, r4, #40
 5158 0152 3246     		mov	r2, r6
 5159 0154 0123     		movs	r3, #1
 5160 0156 FFF7FEFF 		bl	disk_read
 5161              	.LVL784:
 5162 015a 18B1     		cbz	r0, .L444
4071:.\ff.c        **** #endif
 5163              		.loc 1 4071 0 is_stmt 0 discriminator 1
 5164 015c 0125     		movs	r5, #1
 5165              	.LVL785:
 5166 015e 6574     		strb	r5, [r4, #17]
 5167 0160 2846     		mov	r0, r5
 5168 0162 01E0     		b	.L423
 5169              	.LVL786:
 5170              	.L444:
4073:.\ff.c        **** 		}
 5171              		.loc 1 4073 0 is_stmt 1
 5172 0164 E661     		str	r6, [r4, #28]
 5173              	.L441:
4077:.\ff.c        **** }
 5174              		.loc 1 4077 0
 5175 0166 2846     		mov	r0, r5
 5176              	.LVL787:
 5177              	.L423:
4078:.\ff.c        **** 
 5178              		.loc 1 4078 0
 5179 0168 02B0     		add	sp, sp, #8
 5180              		.cfi_def_cfa_offset 24
 5181              		@ sp needed
 5182 016a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5183              		.cfi_endproc
 5184              	.LFE38:
 5185              		.size	f_lseek, .-f_lseek
 5186 016e 00BF     		.section	.text.f_opendir,"ax",%progbits
 5187              		.align	2
 5188              		.global	f_opendir
 5189              		.thumb
 5190              		.thumb_func
 5191              		.type	f_opendir, %function
 5192              	f_opendir:
 5193              	.LFB39:
4091:.\ff.c        **** 	FRESULT res;
 5194              		.loc 1 4091 0
 5195              		.cfi_startproc
 5196              		@ args = 0, pretend = 0, frame = 16
 5197              		@ frame_needed = 0, uses_anonymous_args = 0
 5198              	.LVL788:
 5199 0000 30B5     		push	{r4, r5, lr}
 5200              		.cfi_def_cfa_offset 12
 5201              		.cfi_offset 4, -12
 5202              		.cfi_offset 5, -8
 5203              		.cfi_offset 14, -4
 5204 0002 85B0     		sub	sp, sp, #20
 5205              		.cfi_def_cfa_offset 32
 5206 0004 0191     		str	r1, [sp, #4]
4098:.\ff.c        **** 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 210


 5207              		.loc 1 4098 0
 5208 0006 78B3     		cbz	r0, .L456
 5209 0008 0546     		mov	r5, r0
 5210              	.LVL789:
4102:.\ff.c        **** 	if (res == FR_OK) {
 5211              		.loc 1 4102 0
 5212 000a 01A8     		add	r0, sp, #4
 5213              	.LVL790:
 5214 000c 03A9     		add	r1, sp, #12
 5215              	.LVL791:
 5216 000e 0022     		movs	r2, #0
 5217 0010 FFF7FEFF 		bl	find_volume
 5218              	.LVL792:
4103:.\ff.c        **** 		obj->fs = fs;
 5219              		.loc 1 4103 0
 5220 0014 0446     		mov	r4, r0
 5221 0016 10BB     		cbnz	r0, .L452
4104:.\ff.c        **** 		INIT_NAMBUF(fs);
 5222              		.loc 1 4104 0
 5223 0018 039B     		ldr	r3, [sp, #12]
 5224 001a 2B60     		str	r3, [r5]
4106:.\ff.c        **** 		if (res == FR_OK) {						/* Follow completed */
 5225              		.loc 1 4106 0
 5226 001c 2846     		mov	r0, r5
 5227              	.LVL793:
 5228 001e 0199     		ldr	r1, [sp, #4]
 5229 0020 FFF7FEFF 		bl	follow_path
 5230              	.LVL794:
4107:.\ff.c        **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 5231              		.loc 1 4107 0
 5232 0024 0446     		mov	r4, r0
 5233 0026 B8B9     		cbnz	r0, .L453
4108:.\ff.c        **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 5234              		.loc 1 4108 0
 5235 0028 95F92B30 		ldrsb	r3, [r5, #43]
 5236 002c 002B     		cmp	r3, #0
 5237 002e 0ADB     		blt	.L454
4109:.\ff.c        **** #if _FS_EXFAT
 5238              		.loc 1 4109 0
 5239 0030 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 5240 0032 13F0100F 		tst	r3, #16
 5241 0036 05D0     		beq	.L457
4121:.\ff.c        **** 					}
 5242              		.loc 1 4121 0
 5243 0038 0398     		ldr	r0, [sp, #12]
 5244              	.LVL795:
 5245 003a E969     		ldr	r1, [r5, #28]
 5246 003c FFF7FEFF 		bl	ld_clust
 5247              	.LVL796:
 5248 0040 A860     		str	r0, [r5, #8]
 5249 0042 00E0     		b	.L454
 5250              	.LVL797:
 5251              	.L457:
4124:.\ff.c        **** 				}
 5252              		.loc 1 4124 0
 5253 0044 0524     		movs	r4, #5
 5254              	.LVL798:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 211


 5255              	.L454:
4127:.\ff.c        **** 				obj->id = fs->id;
 5256              		.loc 1 4127 0
 5257 0046 3CB9     		cbnz	r4, .L453
4128:.\ff.c        **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 5258              		.loc 1 4128 0
 5259 0048 039B     		ldr	r3, [sp, #12]
 5260 004a DB88     		ldrh	r3, [r3, #6]
 5261 004c AB80     		strh	r3, [r5, #4]	@ movhi
4129:.\ff.c        **** #if _FS_LOCK != 0
 5262              		.loc 1 4129 0
 5263 004e 2846     		mov	r0, r5
 5264 0050 0021     		movs	r1, #0
 5265 0052 FFF7FEFF 		bl	dir_sdi
 5266              	.LVL799:
 5267 0056 0446     		mov	r4, r0
 5268              	.LVL800:
 5269              	.L453:
4143:.\ff.c        **** 	}
 5270              		.loc 1 4143 0
 5271 0058 042C     		cmp	r4, #4
 5272 005a 00D1     		bne	.L452
 5273 005c 0524     		movs	r4, #5
 5274              	.LVL801:
 5275              	.L452:
4145:.\ff.c        **** 
 5276              		.loc 1 4145 0
 5277 005e 0CB1     		cbz	r4, .L455
4145:.\ff.c        **** 
 5278              		.loc 1 4145 0 is_stmt 0 discriminator 1
 5279 0060 0023     		movs	r3, #0
 5280 0062 2B60     		str	r3, [r5]
 5281              	.L455:
4147:.\ff.c        **** }
 5282              		.loc 1 4147 0 is_stmt 1
 5283 0064 2046     		mov	r0, r4
 5284 0066 00E0     		b	.L451
 5285              	.LVL802:
 5286              	.L456:
4098:.\ff.c        **** 
 5287              		.loc 1 4098 0
 5288 0068 0920     		movs	r0, #9
 5289              	.LVL803:
 5290              	.L451:
4148:.\ff.c        **** 
 5291              		.loc 1 4148 0
 5292 006a 05B0     		add	sp, sp, #20
 5293              		.cfi_def_cfa_offset 12
 5294              		@ sp needed
 5295 006c 30BD     		pop	{r4, r5, pc}
 5296              		.cfi_endproc
 5297              	.LFE39:
 5298              		.size	f_opendir, .-f_opendir
 5299 006e 00BF     		.section	.text.f_closedir,"ax",%progbits
 5300              		.align	2
 5301              		.global	f_closedir
 5302              		.thumb
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 212


 5303              		.thumb_func
 5304              		.type	f_closedir, %function
 5305              	f_closedir:
 5306              	.LFB40:
4160:.\ff.c        **** 	FRESULT res;
 5307              		.loc 1 4160 0
 5308              		.cfi_startproc
 5309              		@ args = 0, pretend = 0, frame = 8
 5310              		@ frame_needed = 0, uses_anonymous_args = 0
 5311              	.LVL804:
 5312 0000 10B5     		push	{r4, lr}
 5313              		.cfi_def_cfa_offset 8
 5314              		.cfi_offset 4, -8
 5315              		.cfi_offset 14, -4
 5316 0002 82B0     		sub	sp, sp, #8
 5317              		.cfi_def_cfa_offset 16
 5318 0004 0446     		mov	r4, r0
4165:.\ff.c        **** 	if (res == FR_OK) {
 5319              		.loc 1 4165 0
 5320 0006 01A9     		add	r1, sp, #4
 5321 0008 FFF7FEFF 		bl	validate
 5322              	.LVL805:
4166:.\ff.c        **** #if _FS_LOCK != 0
 5323              		.loc 1 4166 0
 5324 000c 0346     		mov	r3, r0
 5325 000e 08B9     		cbnz	r0, .L461
4174:.\ff.c        **** 		}
 5326              		.loc 1 4174 0
 5327 0010 0022     		movs	r2, #0
 5328 0012 2260     		str	r2, [r4]
 5329              	.L461:
4181:.\ff.c        **** 
 5330              		.loc 1 4181 0
 5331 0014 1846     		mov	r0, r3
 5332              	.LVL806:
 5333 0016 02B0     		add	sp, sp, #8
 5334              		.cfi_def_cfa_offset 8
 5335              		@ sp needed
 5336 0018 10BD     		pop	{r4, pc}
 5337              		.cfi_endproc
 5338              	.LFE40:
 5339              		.size	f_closedir, .-f_closedir
 5340 001a 00BF     		.section	.text.f_readdir,"ax",%progbits
 5341              		.align	2
 5342              		.global	f_readdir
 5343              		.thumb
 5344              		.thumb_func
 5345              		.type	f_readdir, %function
 5346              	f_readdir:
 5347              	.LFB41:
4194:.\ff.c        **** 	FRESULT res;
 5348              		.loc 1 4194 0
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 8
 5351              		@ frame_needed = 0, uses_anonymous_args = 0
 5352              	.LVL807:
 5353 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 213


 5354              		.cfi_def_cfa_offset 16
 5355              		.cfi_offset 4, -16
 5356              		.cfi_offset 5, -12
 5357              		.cfi_offset 6, -8
 5358              		.cfi_offset 14, -4
 5359 0002 82B0     		sub	sp, sp, #8
 5360              		.cfi_def_cfa_offset 24
 5361 0004 0546     		mov	r5, r0
 5362 0006 0E46     		mov	r6, r1
4200:.\ff.c        **** 	if (res == FR_OK) {
 5363              		.loc 1 4200 0
 5364 0008 01A9     		add	r1, sp, #4
 5365              	.LVL808:
 5366 000a FFF7FEFF 		bl	validate
 5367              	.LVL809:
4201:.\ff.c        **** 		if (!fno) {
 5368              		.loc 1 4201 0
 5369 000e 0446     		mov	r4, r0
 5370 0010 C8B9     		cbnz	r0, .L464
4202:.\ff.c        **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 5371              		.loc 1 4202 0
 5372 0012 2EB9     		cbnz	r6, .L465
4203:.\ff.c        **** 		} else {
 5373              		.loc 1 4203 0
 5374 0014 2846     		mov	r0, r5
 5375              	.LVL810:
 5376 0016 0021     		movs	r1, #0
 5377 0018 FFF7FEFF 		bl	dir_sdi
 5378              	.LVL811:
 5379 001c 0446     		mov	r4, r0
 5380              	.LVL812:
 5381 001e 12E0     		b	.L464
 5382              	.LVL813:
 5383              	.L465:
4206:.\ff.c        **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5384              		.loc 1 4206 0
 5385 0020 2846     		mov	r0, r5
 5386              	.LVL814:
 5387 0022 0021     		movs	r1, #0
 5388 0024 FFF7FEFF 		bl	dir_read
 5389              	.LVL815:
4207:.\ff.c        **** 			if (res == FR_OK) {				/* A valid entry is found */
 5390              		.loc 1 4207 0
 5391 0028 0428     		cmp	r0, #4
 5392 002a 00D0     		beq	.L466
4206:.\ff.c        **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 5393              		.loc 1 4206 0
 5394 002c 0446     		mov	r4, r0
 5395              	.L466:
 5396              	.LVL816:
4208:.\ff.c        **** 				get_fileinfo(dp, fno);		/* Get the object information */
 5397              		.loc 1 4208 0
 5398 002e 54B9     		cbnz	r4, .L464
4209:.\ff.c        **** 				res = dir_next(dp, 0);		/* Increment index for next */
 5399              		.loc 1 4209 0
 5400 0030 2846     		mov	r0, r5
 5401 0032 3146     		mov	r1, r6
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 214


 5402 0034 FFF7FEFF 		bl	get_fileinfo
 5403              	.LVL817:
4210:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 5404              		.loc 1 4210 0
 5405 0038 2846     		mov	r0, r5
 5406 003a 0021     		movs	r1, #0
 5407 003c FFF7FEFF 		bl	dir_next
 5408              	.LVL818:
4211:.\ff.c        **** 			}
 5409              		.loc 1 4211 0
 5410 0040 0428     		cmp	r0, #4
 5411 0042 00D0     		beq	.L464
4210:.\ff.c        **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 5412              		.loc 1 4210 0
 5413 0044 0446     		mov	r4, r0
 5414              	.LVL819:
 5415              	.L464:
4217:.\ff.c        **** 
 5416              		.loc 1 4217 0
 5417 0046 2046     		mov	r0, r4
 5418 0048 02B0     		add	sp, sp, #8
 5419              		.cfi_def_cfa_offset 16
 5420              		@ sp needed
 5421 004a 70BD     		pop	{r4, r5, r6, pc}
 5422              		.cfi_endproc
 5423              	.LFE41:
 5424              		.size	f_readdir, .-f_readdir
 5425              		.section	.text.f_stat,"ax",%progbits
 5426              		.align	2
 5427              		.global	f_stat
 5428              		.thumb
 5429              		.thumb_func
 5430              		.type	f_stat, %function
 5431              	f_stat:
 5432              	.LFB42:
4282:.\ff.c        **** 	FRESULT res;
 5433              		.loc 1 4282 0
 5434              		.cfi_startproc
 5435              		@ args = 0, pretend = 0, frame = 56
 5436              		@ frame_needed = 0, uses_anonymous_args = 0
 5437              	.LVL820:
 5438 0000 30B5     		push	{r4, r5, lr}
 5439              		.cfi_def_cfa_offset 12
 5440              		.cfi_offset 4, -12
 5441              		.cfi_offset 5, -8
 5442              		.cfi_offset 14, -4
 5443 0002 8FB0     		sub	sp, sp, #60
 5444              		.cfi_def_cfa_offset 72
 5445 0004 0EAB     		add	r3, sp, #56
 5446 0006 43F8340D 		str	r0, [r3, #-52]!
 5447 000a 0D46     		mov	r5, r1
4289:.\ff.c        **** 	if (res == FR_OK) {
 5448              		.loc 1 4289 0
 5449 000c 1846     		mov	r0, r3
 5450              	.LVL821:
 5451 000e 03A9     		add	r1, sp, #12
 5452              	.LVL822:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 215


 5453 0010 0022     		movs	r2, #0
 5454 0012 FFF7FEFF 		bl	find_volume
 5455              	.LVL823:
4290:.\ff.c        **** 		INIT_NAMBUF(dj.obj.fs);
 5456              		.loc 1 4290 0
 5457 0016 0446     		mov	r4, r0
 5458 0018 80B9     		cbnz	r0, .L469
4292:.\ff.c        **** 		if (res == FR_OK) {				/* Follow completed */
 5459              		.loc 1 4292 0
 5460 001a 03A8     		add	r0, sp, #12
 5461              	.LVL824:
 5462 001c 0199     		ldr	r1, [sp, #4]
 5463 001e FFF7FEFF 		bl	follow_path
 5464              	.LVL825:
4293:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 5465              		.loc 1 4293 0
 5466 0022 0446     		mov	r4, r0
 5467 0024 50B9     		cbnz	r0, .L469
4294:.\ff.c        **** 				res = FR_INVALID_NAME;
 5468              		.loc 1 4294 0
 5469 0026 9DF93730 		ldrsb	r3, [sp, #55]
 5470 002a 002B     		cmp	r3, #0
 5471 002c 05DB     		blt	.L470
4297:.\ff.c        **** 			}
 5472              		.loc 1 4297 0
 5473 002e 2DB1     		cbz	r5, .L469
4297:.\ff.c        **** 			}
 5474              		.loc 1 4297 0 is_stmt 0 discriminator 1
 5475 0030 03A8     		add	r0, sp, #12
 5476              	.LVL826:
 5477 0032 2946     		mov	r1, r5
 5478 0034 FFF7FEFF 		bl	get_fileinfo
 5479              	.LVL827:
 5480 0038 00E0     		b	.L469
 5481              	.LVL828:
 5482              	.L470:
4295:.\ff.c        **** 			} else {							/* Found an object */
 5483              		.loc 1 4295 0 is_stmt 1
 5484 003a 0624     		movs	r4, #6
 5485              	.LVL829:
 5486              	.L469:
4304:.\ff.c        **** 
 5487              		.loc 1 4304 0
 5488 003c 2046     		mov	r0, r4
 5489 003e 0FB0     		add	sp, sp, #60
 5490              		.cfi_def_cfa_offset 12
 5491              		@ sp needed
 5492 0040 30BD     		pop	{r4, r5, pc}
 5493              		.cfi_endproc
 5494              	.LFE42:
 5495              		.size	f_stat, .-f_stat
 5496              		.section	.text.f_getfree,"ax",%progbits
 5497              		.align	2
 5498              		.global	f_getfree
 5499              		.thumb
 5500              		.thumb_func
 5501              		.type	f_getfree, %function
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 216


 5502              	f_getfree:
 5503              	.LFB43:
4318:.\ff.c        **** 	FRESULT res;
 5504              		.loc 1 4318 0
 5505              		.cfi_startproc
 5506              		@ args = 0, pretend = 0, frame = 32
 5507              		@ frame_needed = 0, uses_anonymous_args = 0
 5508              	.LVL830:
 5509 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5510              		.cfi_def_cfa_offset 32
 5511              		.cfi_offset 4, -32
 5512              		.cfi_offset 5, -28
 5513              		.cfi_offset 6, -24
 5514              		.cfi_offset 7, -20
 5515              		.cfi_offset 8, -16
 5516              		.cfi_offset 9, -12
 5517              		.cfi_offset 10, -8
 5518              		.cfi_offset 14, -4
 5519 0004 88B0     		sub	sp, sp, #32
 5520              		.cfi_def_cfa_offset 64
 5521 0006 08AB     		add	r3, sp, #32
 5522 0008 43F81C0D 		str	r0, [r3, #-28]!
 5523 000c 8A46     		mov	r10, r1
 5524 000e 1446     		mov	r4, r2
4328:.\ff.c        **** 	if (res == FR_OK) {
 5525              		.loc 1 4328 0
 5526 0010 1846     		mov	r0, r3
 5527              	.LVL831:
 5528 0012 07A9     		add	r1, sp, #28
 5529              	.LVL832:
 5530 0014 0022     		movs	r2, #0
 5531              	.LVL833:
 5532 0016 FFF7FEFF 		bl	find_volume
 5533              	.LVL834:
4329:.\ff.c        **** 		*fatfs = fs;				/* Return ptr to the fs object */
 5534              		.loc 1 4329 0
 5535 001a 8146     		mov	r9, r0
 5536 001c 0028     		cmp	r0, #0
 5537 001e 58D1     		bne	.L473
4330:.\ff.c        **** 		/* If free_clst is valid, return it without full cluster scan */
 5538              		.loc 1 4330 0
 5539 0020 079B     		ldr	r3, [sp, #28]
 5540 0022 2360     		str	r3, [r4]
4332:.\ff.c        **** 			*nclst = fs->free_clst;
 5541              		.loc 1 4332 0
 5542 0024 1A69     		ldr	r2, [r3, #16]
 5543 0026 5E69     		ldr	r6, [r3, #20]
 5544 0028 B11E     		subs	r1, r6, #2
 5545 002a 8A42     		cmp	r2, r1
 5546 002c 02D8     		bhi	.L474
4333:.\ff.c        **** 		} else {
 5547              		.loc 1 4333 0
 5548 002e CAF80020 		str	r2, [r10]
 5549 0032 4EE0     		b	.L473
 5550              	.L474:
 5551              	.LVL835:
4337:.\ff.c        **** 				clst = 2; obj.fs = fs;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 217


 5552              		.loc 1 4337 0
 5553 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5554 0036 012A     		cmp	r2, #1
 5555 0038 13D1     		bne	.L475
 5556              	.LVL836:
4338:.\ff.c        **** 				do {
 5557              		.loc 1 4338 0
 5558 003a 0393     		str	r3, [sp, #12]
 5559 003c 0224     		movs	r4, #2
 5560              	.LVL837:
4336:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 5561              		.loc 1 4336 0
 5562 003e 0027     		movs	r7, #0
 5563              	.LVL838:
 5564              	.L478:
4340:.\ff.c        **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 5565              		.loc 1 4340 0
 5566 0040 03A8     		add	r0, sp, #12
 5567 0042 2146     		mov	r1, r4
 5568 0044 FFF7FEFF 		bl	get_fat
 5569              	.LVL839:
4341:.\ff.c        **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 5570              		.loc 1 4341 0
 5571 0048 B0F1FF3F 		cmp	r0, #-1
 5572 004c 34D0     		beq	.L485
4342:.\ff.c        **** 					if (stat == 0) nfree++;
 5573              		.loc 1 4342 0
 5574 004e 0128     		cmp	r0, #1
 5575 0050 35D0     		beq	.L486
4343:.\ff.c        **** 				} while (++clst < fs->n_fatent);
 5576              		.loc 1 4343 0
 5577 0052 00B9     		cbnz	r0, .L477
4343:.\ff.c        **** 				} while (++clst < fs->n_fatent);
 5578              		.loc 1 4343 0 is_stmt 0 discriminator 1
 5579 0054 0137     		adds	r7, r7, #1
 5580              	.LVL840:
 5581              	.L477:
4344:.\ff.c        **** 			} else {
 5582              		.loc 1 4344 0 is_stmt 1
 5583 0056 0134     		adds	r4, r4, #1
 5584              	.LVL841:
 5585 0058 079B     		ldr	r3, [sp, #28]
 5586 005a 5B69     		ldr	r3, [r3, #20]
 5587 005c 9C42     		cmp	r4, r3
 5588 005e EFD3     		bcc	.L478
 5589 0060 2FE0     		b	.L476
 5590              	.LVL842:
 5591              	.L475:
4365:.\ff.c        **** 					i = 0; p = 0;
 5592              		.loc 1 4365 0
 5593 0062 D3F82080 		ldr	r8, [r3, #32]
 5594              	.LVL843:
4366:.\ff.c        **** 					do {
 5595              		.loc 1 4366 0
 5596 0066 0024     		movs	r4, #0
 5597              	.LVL844:
 5598 0068 2546     		mov	r5, r4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 218


4336:.\ff.c        **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 5599              		.loc 1 4336 0
 5600 006a 2746     		mov	r7, r4
 5601              	.LVL845:
 5602              	.L484:
4368:.\ff.c        **** 							res = move_window(fs, sect++);
 5603              		.loc 1 4368 0
 5604 006c 65B9     		cbnz	r5, .L479
4369:.\ff.c        **** 							if (res != FR_OK) break;
 5605              		.loc 1 4369 0
 5606 006e 08F10105 		add	r5, r8, #1
 5607              	.LVL846:
 5608 0072 0798     		ldr	r0, [sp, #28]
 5609 0074 4146     		mov	r1, r8
 5610 0076 FFF7FEFF 		bl	move_window
 5611              	.LVL847:
4370:.\ff.c        **** 							p = fs->win;
 5612              		.loc 1 4370 0
 5613 007a 8146     		mov	r9, r0
 5614 007c 08BB     		cbnz	r0, .L476
4371:.\ff.c        **** 							i = SS(fs);
 5615              		.loc 1 4371 0
 5616 007e 079C     		ldr	r4, [sp, #28]
 5617              	.LVL848:
 5618 0080 3034     		adds	r4, r4, #48
 5619              	.LVL849:
4369:.\ff.c        **** 							if (res != FR_OK) break;
 5620              		.loc 1 4369 0
 5621 0082 A846     		mov	r8, r5
4372:.\ff.c        **** 						}
 5622              		.loc 1 4372 0
 5623 0084 4FF40075 		mov	r5, #512
 5624              	.LVL850:
 5625              	.L479:
4374:.\ff.c        **** 							if (ld_word(p) == 0) nfree++;
 5626              		.loc 1 4374 0
 5627 0088 079B     		ldr	r3, [sp, #28]
 5628 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5629 008c 022B     		cmp	r3, #2
 5630 008e 07D1     		bne	.L480
4375:.\ff.c        **** 							p += 2; i -= 2;
 5631              		.loc 1 4375 0
 5632 0090 2046     		mov	r0, r4
 5633 0092 FFF7FEFF 		bl	ld_word
 5634              	.LVL851:
 5635 0096 00B9     		cbnz	r0, .L481
4375:.\ff.c        **** 							p += 2; i -= 2;
 5636              		.loc 1 4375 0 is_stmt 0 discriminator 1
 5637 0098 0137     		adds	r7, r7, #1
 5638              	.LVL852:
 5639              	.L481:
4376:.\ff.c        **** 						} else {
 5640              		.loc 1 4376 0 is_stmt 1
 5641 009a 0234     		adds	r4, r4, #2
 5642              	.LVL853:
 5643 009c 023D     		subs	r5, r5, #2
 5644              	.LVL854:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 219


 5645 009e 08E0     		b	.L482
 5646              	.L480:
4378:.\ff.c        **** 							p += 4; i -= 4;
 5647              		.loc 1 4378 0
 5648 00a0 2046     		mov	r0, r4
 5649 00a2 FFF7FEFF 		bl	ld_dword
 5650              	.LVL855:
 5651 00a6 20F07040 		bic	r0, r0, #-268435456
 5652 00aa 00B9     		cbnz	r0, .L483
4378:.\ff.c        **** 							p += 4; i -= 4;
 5653              		.loc 1 4378 0 is_stmt 0 discriminator 1
 5654 00ac 0137     		adds	r7, r7, #1
 5655              	.LVL856:
 5656              	.L483:
4379:.\ff.c        **** 						}
 5657              		.loc 1 4379 0 is_stmt 1
 5658 00ae 0434     		adds	r4, r4, #4
 5659              	.LVL857:
 5660 00b0 043D     		subs	r5, r5, #4
 5661              	.LVL858:
 5662              	.L482:
4381:.\ff.c        **** 				}
 5663              		.loc 1 4381 0
 5664 00b2 013E     		subs	r6, r6, #1
 5665              	.LVL859:
 5666 00b4 DAD1     		bne	.L484
 5667 00b6 04E0     		b	.L476
 5668              	.LVL860:
 5669              	.L485:
4341:.\ff.c        **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 5670              		.loc 1 4341 0
 5671 00b8 4FF00109 		mov	r9, #1
 5672 00bc 01E0     		b	.L476
 5673              	.L486:
4342:.\ff.c        **** 					if (stat == 0) nfree++;
 5674              		.loc 1 4342 0
 5675 00be 4FF00209 		mov	r9, #2
 5676              	.LVL861:
 5677              	.L476:
4384:.\ff.c        **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 5678              		.loc 1 4384 0
 5679 00c2 CAF80070 		str	r7, [r10]
4385:.\ff.c        **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 5680              		.loc 1 4385 0
 5681 00c6 079B     		ldr	r3, [sp, #28]
 5682 00c8 1F61     		str	r7, [r3, #16]
4386:.\ff.c        **** 		}
 5683              		.loc 1 4386 0
 5684 00ca 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 5685 00cc 42F00102 		orr	r2, r2, #1
 5686 00d0 1A71     		strb	r2, [r3, #4]
 5687              	.LVL862:
 5688              	.L473:
4391:.\ff.c        **** 
 5689              		.loc 1 4391 0
 5690 00d2 4846     		mov	r0, r9
 5691 00d4 08B0     		add	sp, sp, #32
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 220


 5692              		.cfi_def_cfa_offset 32
 5693              	.LVL863:
 5694              		@ sp needed
 5695 00d6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5696              		.cfi_endproc
 5697              	.LFE43:
 5698              		.size	f_getfree, .-f_getfree
 5699 00da 00BF     		.section	.text.f_truncate,"ax",%progbits
 5700              		.align	2
 5701              		.global	f_truncate
 5702              		.thumb
 5703              		.thumb_func
 5704              		.type	f_truncate, %function
 5705              	f_truncate:
 5706              	.LFB44:
4403:.\ff.c        **** 	FRESULT res;
 5707              		.loc 1 4403 0
 5708              		.cfi_startproc
 5709              		@ args = 0, pretend = 0, frame = 8
 5710              		@ frame_needed = 0, uses_anonymous_args = 0
 5711              	.LVL864:
 5712 0000 30B5     		push	{r4, r5, lr}
 5713              		.cfi_def_cfa_offset 12
 5714              		.cfi_offset 4, -12
 5715              		.cfi_offset 5, -8
 5716              		.cfi_offset 14, -4
 5717 0002 83B0     		sub	sp, sp, #12
 5718              		.cfi_def_cfa_offset 24
 5719 0004 0546     		mov	r5, r0
4409:.\ff.c        **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 5720              		.loc 1 4409 0
 5721 0006 01A9     		add	r1, sp, #4
 5722 0008 FFF7FEFF 		bl	validate
 5723              	.LVL865:
4410:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5724              		.loc 1 4410 0
 5725 000c 0446     		mov	r4, r0
 5726 000e 08B9     		cbnz	r0, .L489
4410:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5727              		.loc 1 4410 0 is_stmt 0 discriminator 2
 5728 0010 6C7C     		ldrb	r4, [r5, #17]	@ zero_extendqisi2
 5729              	.LVL866:
 5730 0012 0CB1     		cbz	r4, .L490
 5731              	.LVL867:
 5732              	.L489:
4410:.\ff.c        **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 5733              		.loc 1 4410 0 discriminator 3
 5734 0014 2046     		mov	r0, r4
 5735 0016 47E0     		b	.L491
 5736              	.L490:
4411:.\ff.c        **** 
 5737              		.loc 1 4411 0 is_stmt 1
 5738 0018 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5739 001a 13F0020F 		tst	r3, #2
 5740 001e 42D0     		beq	.L498
4413:.\ff.c        **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 5741              		.loc 1 4413 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 221


 5742 0020 EA68     		ldr	r2, [r5, #12]
 5743 0022 6B69     		ldr	r3, [r5, #20]
 5744 0024 9A42     		cmp	r2, r3
 5745 0026 3CD9     		bls	.L492
4414:.\ff.c        **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 5746              		.loc 1 4414 0
 5747 0028 43B9     		cbnz	r3, .L493
4415:.\ff.c        **** 			fp->obj.sclust = 0;
 5748              		.loc 1 4415 0
 5749 002a 2846     		mov	r0, r5
 5750 002c A968     		ldr	r1, [r5, #8]
 5751 002e 0022     		movs	r2, #0
 5752 0030 FFF7FEFF 		bl	remove_chain
 5753              	.LVL868:
 5754 0034 0446     		mov	r4, r0
 5755              	.LVL869:
4416:.\ff.c        **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
 5756              		.loc 1 4416 0
 5757 0036 0023     		movs	r3, #0
 5758 0038 AB60     		str	r3, [r5, #8]
 5759 003a 15E0     		b	.L494
 5760              	.L493:
4418:.\ff.c        **** 			res = FR_OK;
 5761              		.loc 1 4418 0
 5762 003c 2846     		mov	r0, r5
 5763 003e A969     		ldr	r1, [r5, #24]
 5764 0040 FFF7FEFF 		bl	get_fat
 5765              	.LVL870:
 5766 0044 0146     		mov	r1, r0
 5767              	.LVL871:
4420:.\ff.c        **** 			if (ncl == 1) res = FR_INT_ERR;
 5768              		.loc 1 4420 0
 5769 0046 B0F1FF3F 		cmp	r0, #-1
 5770 004a 00D1     		bne	.L495
 5771 004c 0124     		movs	r4, #1
 5772              	.L495:
 5773              	.LVL872:
4421:.\ff.c        **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 5774              		.loc 1 4421 0
 5775 004e 0129     		cmp	r1, #1
 5776 0050 00D1     		bne	.L496
 5777 0052 0224     		movs	r4, #2
 5778              	.LVL873:
 5779              	.L496:
4422:.\ff.c        **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 5780              		.loc 1 4422 0
 5781 0054 44B9     		cbnz	r4, .L494
4422:.\ff.c        **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 5782              		.loc 1 4422 0 is_stmt 0 discriminator 1
 5783 0056 019B     		ldr	r3, [sp, #4]
 5784 0058 5B69     		ldr	r3, [r3, #20]
 5785 005a 8B42     		cmp	r3, r1
 5786 005c 04D9     		bls	.L494
4423:.\ff.c        **** 			}
 5787              		.loc 1 4423 0 is_stmt 1
 5788 005e 2846     		mov	r0, r5
 5789              	.LVL874:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 222


 5790 0060 AA69     		ldr	r2, [r5, #24]
 5791 0062 FFF7FEFF 		bl	remove_chain
 5792              	.LVL875:
 5793 0066 0446     		mov	r4, r0
 5794              	.LVL876:
 5795              	.L494:
4426:.\ff.c        **** 		fp->flag |= FA_MODIFIED;
 5796              		.loc 1 4426 0
 5797 0068 6B69     		ldr	r3, [r5, #20]
 5798 006a EB60     		str	r3, [r5, #12]
4427:.\ff.c        **** #if !_FS_TINY
 5799              		.loc 1 4427 0
 5800 006c 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5801 006e 43F04003 		orr	r3, r3, #64
 5802 0072 2B74     		strb	r3, [r5, #16]
4429:.\ff.c        **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 5803              		.loc 1 4429 0
 5804 0074 8CB9     		cbnz	r4, .L497
4429:.\ff.c        **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 5805              		.loc 1 4429 0 is_stmt 0 discriminator 1
 5806 0076 13F0800F 		tst	r3, #128
 5807 007a 0ED0     		beq	.L497
4430:.\ff.c        **** 				res = FR_DISK_ERR;
 5808              		.loc 1 4430 0 is_stmt 1
 5809 007c 019B     		ldr	r3, [sp, #4]
 5810 007e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5811 0080 05F12801 		add	r1, r5, #40
 5812 0084 EA69     		ldr	r2, [r5, #28]
 5813 0086 0123     		movs	r3, #1
 5814 0088 FFF7FEFF 		bl	disk_write
 5815              	.LVL877:
 5816 008c 20B9     		cbnz	r0, .L501
4433:.\ff.c        **** 			}
 5817              		.loc 1 4433 0
 5818 008e 2B7C     		ldrb	r3, [r5, #16]	@ zero_extendqisi2
 5819 0090 03F07F03 		and	r3, r3, #127
 5820 0094 2B74     		strb	r3, [r5, #16]
 5821 0096 00E0     		b	.L497
 5822              	.L501:
4431:.\ff.c        **** 			} else {
 5823              		.loc 1 4431 0
 5824 0098 0124     		movs	r4, #1
 5825              	.LVL878:
 5826              	.L497:
4437:.\ff.c        **** 	}
 5827              		.loc 1 4437 0
 5828 009a 14B1     		cbz	r4, .L492
4437:.\ff.c        **** 	}
 5829              		.loc 1 4437 0 is_stmt 0 discriminator 1
 5830 009c 6C74     		strb	r4, [r5, #17]
 5831 009e 2046     		mov	r0, r4
 5832 00a0 02E0     		b	.L491
 5833              	.L492:
4440:.\ff.c        **** }
 5834              		.loc 1 4440 0 is_stmt 1
 5835 00a2 2046     		mov	r0, r4
 5836 00a4 00E0     		b	.L491
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 223


 5837              	.L498:
4411:.\ff.c        **** 
 5838              		.loc 1 4411 0
 5839 00a6 0720     		movs	r0, #7
 5840              	.L491:
4441:.\ff.c        **** 
 5841              		.loc 1 4441 0
 5842 00a8 03B0     		add	sp, sp, #12
 5843              		.cfi_def_cfa_offset 12
 5844              		@ sp needed
 5845 00aa 30BD     		pop	{r4, r5, pc}
 5846              		.cfi_endproc
 5847              	.LFE44:
 5848              		.size	f_truncate, .-f_truncate
 5849              		.section	.text.f_unlink,"ax",%progbits
 5850              		.align	2
 5851              		.global	f_unlink
 5852              		.thumb
 5853              		.thumb_func
 5854              		.type	f_unlink, %function
 5855              	f_unlink:
 5856              	.LFB45:
4453:.\ff.c        **** 	FRESULT res;
 5857              		.loc 1 4453 0
 5858              		.cfi_startproc
 5859              		@ args = 0, pretend = 0, frame = 104
 5860              		@ frame_needed = 0, uses_anonymous_args = 0
 5861              	.LVL879:
 5862 0000 70B5     		push	{r4, r5, r6, lr}
 5863              		.cfi_def_cfa_offset 16
 5864              		.cfi_offset 4, -16
 5865              		.cfi_offset 5, -12
 5866              		.cfi_offset 6, -8
 5867              		.cfi_offset 14, -4
 5868 0002 9AB0     		sub	sp, sp, #104
 5869              		.cfi_def_cfa_offset 120
 5870 0004 1AAB     		add	r3, sp, #104
 5871 0006 43F8640D 		str	r0, [r3, #-100]!
 5872              	.LVL880:
4465:.\ff.c        **** 	dj.obj.fs = fs;
 5873              		.loc 1 4465 0
 5874 000a 1846     		mov	r0, r3
 5875              	.LVL881:
 5876 000c 03A9     		add	r1, sp, #12
 5877 000e 0222     		movs	r2, #2
 5878 0010 FFF7FEFF 		bl	find_volume
 5879              	.LVL882:
4466:.\ff.c        **** 	if (res == FR_OK) {
 5880              		.loc 1 4466 0
 5881 0014 039B     		ldr	r3, [sp, #12]
 5882 0016 0F93     		str	r3, [sp, #60]
4467:.\ff.c        **** 		INIT_NAMBUF(fs);
 5883              		.loc 1 4467 0
 5884 0018 0446     		mov	r4, r0
 5885 001a 0028     		cmp	r0, #0
 5886 001c 45D1     		bne	.L504
4469:.\ff.c        **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 224


 5887              		.loc 1 4469 0
 5888 001e 0FA8     		add	r0, sp, #60
 5889              	.LVL883:
 5890 0020 0199     		ldr	r1, [sp, #4]
 5891 0022 FFF7FEFF 		bl	follow_path
 5892              	.LVL884:
4476:.\ff.c        **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 5893              		.loc 1 4476 0
 5894 0026 0446     		mov	r4, r0
 5895 0028 0028     		cmp	r0, #0
 5896 002a 3ED1     		bne	.L504
4477:.\ff.c        **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 5897              		.loc 1 4477 0
 5898 002c 9DF96730 		ldrsb	r3, [sp, #103]
 5899 0030 002B     		cmp	r3, #0
 5900 0032 05DB     		blt	.L509
4480:.\ff.c        **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 5901              		.loc 1 4480 0
 5902 0034 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 5903 0038 13F0010F 		tst	r3, #1
 5904 003c 02D1     		bne	.L510
 5905 003e 02E0     		b	.L505
 5906              	.L509:
4478:.\ff.c        **** 			} else {
 5907              		.loc 1 4478 0
 5908 0040 0624     		movs	r4, #6
 5909 0042 00E0     		b	.L505
 5910              	.L510:
4481:.\ff.c        **** 				}
 5911              		.loc 1 4481 0
 5912 0044 0724     		movs	r4, #7
 5913              	.L505:
 5914              	.LVL885:
4484:.\ff.c        **** #if _FS_EXFAT
 5915              		.loc 1 4484 0
 5916 0046 ECB9     		cbnz	r4, .L511
4494:.\ff.c        **** 				}
 5917              		.loc 1 4494 0
 5918 0048 039E     		ldr	r6, [sp, #12]
 5919 004a 3046     		mov	r0, r6
 5920 004c 1699     		ldr	r1, [sp, #88]
 5921 004e FFF7FEFF 		bl	ld_clust
 5922              	.LVL886:
 5923 0052 0546     		mov	r5, r0
 5924              	.LVL887:
4496:.\ff.c        **** #if _FS_RPATH != 0
 5925              		.loc 1 4496 0
 5926 0054 9DF84230 		ldrb	r3, [sp, #66]	@ zero_extendqisi2
 5927 0058 13F0100F 		tst	r3, #16
 5928 005c 13D0     		beq	.L506
4503:.\ff.c        **** 						sdj.obj.sclust = dclst;
 5929              		.loc 1 4503 0
 5930 005e 0496     		str	r6, [sp, #16]
4504:.\ff.c        **** #if _FS_EXFAT
 5931              		.loc 1 4504 0
 5932 0060 0690     		str	r0, [sp, #24]
4511:.\ff.c        **** 						if (res == FR_OK) {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 225


 5933              		.loc 1 4511 0
 5934 0062 04A8     		add	r0, sp, #16
 5935              	.LVL888:
 5936 0064 0021     		movs	r1, #0
 5937 0066 FFF7FEFF 		bl	dir_sdi
 5938              	.LVL889:
4512:.\ff.c        **** 							res = dir_read(&sdj, 0);			/* Read an item */
 5939              		.loc 1 4512 0
 5940 006a 0446     		mov	r4, r0
 5941 006c 58B9     		cbnz	r0, .L506
4513:.\ff.c        **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 5942              		.loc 1 4513 0
 5943 006e 04A8     		add	r0, sp, #16
 5944              	.LVL890:
 5945 0070 0021     		movs	r1, #0
 5946 0072 FFF7FEFF 		bl	dir_read
 5947              	.LVL891:
4514:.\ff.c        **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 5948              		.loc 1 4514 0
 5949 0076 0346     		mov	r3, r0
 5950 0078 00B9     		cbnz	r0, .L507
 5951 007a 0723     		movs	r3, #7
 5952              	.L507:
 5953              	.LVL892:
4515:.\ff.c        **** 						}
 5954              		.loc 1 4515 0
 5955 007c 042B     		cmp	r3, #4
 5956 007e 02D0     		beq	.L506
 5957 0080 1C46     		mov	r4, r3
 5958 0082 00E0     		b	.L506
 5959              	.LVL893:
 5960              	.L511:
4456:.\ff.c        **** 	FATFS *fs;
 5961              		.loc 1 4456 0
 5962 0084 0025     		movs	r5, #0
 5963              	.LVL894:
 5964              	.L506:
4520:.\ff.c        **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 5965              		.loc 1 4520 0
 5966 0086 84B9     		cbnz	r4, .L504
4521:.\ff.c        **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 5967              		.loc 1 4521 0
 5968 0088 0FA8     		add	r0, sp, #60
 5969 008a FFF7FEFF 		bl	dir_remove
 5970              	.LVL895:
4522:.\ff.c        **** #if _FS_EXFAT
 5971              		.loc 1 4522 0
 5972 008e 0446     		mov	r4, r0
 5973 0090 30B9     		cbnz	r0, .L508
4522:.\ff.c        **** #if _FS_EXFAT
 5974              		.loc 1 4522 0 is_stmt 0 discriminator 1
 5975 0092 2DB1     		cbz	r5, .L508
4526:.\ff.c        **** #endif
 5976              		.loc 1 4526 0 is_stmt 1
 5977 0094 0FA8     		add	r0, sp, #60
 5978              	.LVL896:
 5979 0096 2946     		mov	r1, r5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 226


 5980 0098 0022     		movs	r2, #0
 5981 009a FFF7FEFF 		bl	remove_chain
 5982              	.LVL897:
 5983 009e 0446     		mov	r4, r0
 5984              	.LVL898:
 5985              	.L508:
4529:.\ff.c        **** 			}
 5986              		.loc 1 4529 0
 5987 00a0 1CB9     		cbnz	r4, .L504
4529:.\ff.c        **** 			}
 5988              		.loc 1 4529 0 is_stmt 0 discriminator 1
 5989 00a2 0398     		ldr	r0, [sp, #12]
 5990 00a4 FFF7FEFF 		bl	sync_fs
 5991              	.LVL899:
 5992 00a8 0446     		mov	r4, r0
 5993              	.LVL900:
 5994              	.L504:
4536:.\ff.c        **** 
 5995              		.loc 1 4536 0 is_stmt 1
 5996 00aa 2046     		mov	r0, r4
 5997 00ac 1AB0     		add	sp, sp, #104
 5998              		.cfi_def_cfa_offset 16
 5999              	.LVL901:
 6000              		@ sp needed
 6001 00ae 70BD     		pop	{r4, r5, r6, pc}
 6002              		.cfi_endproc
 6003              	.LFE45:
 6004              		.size	f_unlink, .-f_unlink
 6005              		.section	.text.f_mkdir,"ax",%progbits
 6006              		.align	2
 6007              		.global	f_mkdir
 6008              		.thumb
 6009              		.thumb_func
 6010              		.type	f_mkdir, %function
 6011              	f_mkdir:
 6012              	.LFB46:
4548:.\ff.c        **** 	FRESULT res;
 6013              		.loc 1 4548 0
 6014              		.cfi_startproc
 6015              		@ args = 0, pretend = 0, frame = 56
 6016              		@ frame_needed = 0, uses_anonymous_args = 0
 6017              	.LVL902:
 6018 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6019              		.cfi_def_cfa_offset 32
 6020              		.cfi_offset 4, -32
 6021              		.cfi_offset 5, -28
 6022              		.cfi_offset 6, -24
 6023              		.cfi_offset 7, -20
 6024              		.cfi_offset 8, -16
 6025              		.cfi_offset 9, -12
 6026              		.cfi_offset 10, -8
 6027              		.cfi_offset 14, -4
 6028 0004 8EB0     		sub	sp, sp, #56
 6029              		.cfi_def_cfa_offset 88
 6030 0006 0EAB     		add	r3, sp, #56
 6031 0008 43F8340D 		str	r0, [r3, #-52]!
4559:.\ff.c        **** 	dj.obj.fs = fs;
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 227


 6032              		.loc 1 4559 0
 6033 000c 1846     		mov	r0, r3
 6034              	.LVL903:
 6035 000e 02A9     		add	r1, sp, #8
 6036 0010 0222     		movs	r2, #2
 6037 0012 FFF7FEFF 		bl	find_volume
 6038              	.LVL904:
4560:.\ff.c        **** 	if (res == FR_OK) {
 6039              		.loc 1 4560 0
 6040 0016 029B     		ldr	r3, [sp, #8]
 6041 0018 0393     		str	r3, [sp, #12]
4561:.\ff.c        **** 		INIT_NAMBUF(fs);
 6042              		.loc 1 4561 0
 6043 001a 0446     		mov	r4, r0
 6044 001c 0028     		cmp	r0, #0
 6045 001e 40F09780 		bne	.L515
4563:.\ff.c        **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 6046              		.loc 1 4563 0
 6047 0022 03A8     		add	r0, sp, #12
 6048              	.LVL905:
 6049 0024 0199     		ldr	r1, [sp, #4]
 6050 0026 FFF7FEFF 		bl	follow_path
 6051              	.LVL906:
4564:.\ff.c        **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 6052              		.loc 1 4564 0
 6053 002a 0346     		mov	r3, r0
 6054 002c 00B9     		cbnz	r0, .L516
 6055 002e 0823     		movs	r3, #8
 6056              	.L516:
 6057              	.LVL907:
4568:.\ff.c        **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 6058              		.loc 1 4568 0
 6059 0030 042B     		cmp	r3, #4
 6060 0032 40F08C80 		bne	.L528
4569:.\ff.c        **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 6061              		.loc 1 4569 0
 6062 0036 03A8     		add	r0, sp, #12
 6063 0038 0021     		movs	r1, #0
 6064 003a FFF7FEFF 		bl	create_chain
 6065              	.LVL908:
4570:.\ff.c        **** 			res = FR_OK;
 6066              		.loc 1 4570 0
 6067 003e 029A     		ldr	r2, [sp, #8]
 6068 0040 5389     		ldrh	r3, [r2, #10]
 6069 0042 5B02     		lsls	r3, r3, #9
 6070 0044 0693     		str	r3, [sp, #24]
 6071              	.LVL909:
4572:.\ff.c        **** 			if (dcl == 1) res = FR_INT_ERR;
 6072              		.loc 1 4572 0
 6073 0046 8046     		mov	r8, r0
 6074 0048 00B9     		cbnz	r0, .L517
 6075 004a 0724     		movs	r4, #7
 6076              	.L517:
 6077              	.LVL910:
4573:.\ff.c        **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 6078              		.loc 1 4573 0
 6079 004c B8F1010F 		cmp	r8, #1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 228


 6080 0050 00D1     		bne	.L518
 6081 0052 0224     		movs	r4, #2
 6082              	.LVL911:
 6083              	.L518:
4574:.\ff.c        **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 6084              		.loc 1 4574 0
 6085 0054 B8F1FF3F 		cmp	r8, #-1
 6086 0058 00D1     		bne	.L519
 6087 005a 0124     		movs	r4, #1
 6088              	.LVL912:
 6089              	.L519:
4575:.\ff.c        **** 			tm = GET_FATTIME();
 6090              		.loc 1 4575 0
 6091 005c 1CB9     		cbnz	r4, .L520
4575:.\ff.c        **** 			tm = GET_FATTIME();
 6092              		.loc 1 4575 0 is_stmt 0 discriminator 1
 6093 005e 1046     		mov	r0, r2
 6094              	.LVL913:
 6095 0060 FFF7FEFF 		bl	sync_window
 6096              	.LVL914:
 6097 0064 0446     		mov	r4, r0
 6098              	.LVL915:
 6099              	.L520:
4577:.\ff.c        **** 				dsc = clust2sect(fs, dcl);
 6100              		.loc 1 4577 0 is_stmt 1
 6101 0066 002C     		cmp	r4, #0
 6102 0068 4FD1     		bne	.L521
4578:.\ff.c        **** 				dir = fs->win;
 6103              		.loc 1 4578 0
 6104 006a 029D     		ldr	r5, [sp, #8]
 6105 006c 2846     		mov	r0, r5
 6106 006e 4146     		mov	r1, r8
 6107 0070 FFF7FEFF 		bl	clust2sect
 6108              	.LVL916:
 6109 0074 0646     		mov	r6, r0
 6110              	.LVL917:
4579:.\ff.c        **** 				mem_set(dir, 0, SS(fs));
 6111              		.loc 1 4579 0
 6112 0076 05F13009 		add	r9, r5, #48
 6113              	.LVL918:
4580:.\ff.c        **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 6114              		.loc 1 4580 0
 6115 007a 4846     		mov	r0, r9
 6116              	.LVL919:
 6117 007c 0021     		movs	r1, #0
 6118 007e 4FF40072 		mov	r2, #512
 6119 0082 FFF7FEFF 		bl	mem_set
 6120              	.LVL920:
4582:.\ff.c        **** 					dir[DIR_Name] = '.';
 6121              		.loc 1 4582 0
 6122 0086 4846     		mov	r0, r9
 6123 0088 2021     		movs	r1, #32
 6124 008a 0B22     		movs	r2, #11
 6125 008c FFF7FEFF 		bl	mem_set
 6126              	.LVL921:
4583:.\ff.c        **** 					dir[DIR_Attr] = AM_DIR;
 6127              		.loc 1 4583 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 229


 6128 0090 4FF02E0A 		mov	r10, #46
 6129 0094 85F830A0 		strb	r10, [r5, #48]
4584:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);
 6130              		.loc 1 4584 0
 6131 0098 1023     		movs	r3, #16
 6132 009a 85F83B30 		strb	r3, [r5, #59]
4585:.\ff.c        **** 					st_clust(fs, dir, dcl);
 6133              		.loc 1 4585 0
 6134 009e 05F14600 		add	r0, r5, #70
 6135 00a2 2D49     		ldr	r1, .L534
 6136 00a4 FFF7FEFF 		bl	st_dword
 6137              	.LVL922:
4586:.\ff.c        **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 6138              		.loc 1 4586 0
 6139 00a8 0298     		ldr	r0, [sp, #8]
 6140 00aa 4946     		mov	r1, r9
 6141 00ac 4246     		mov	r2, r8
 6142 00ae FFF7FEFF 		bl	st_clust
 6143              	.LVL923:
4587:.\ff.c        **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 6144              		.loc 1 4587 0
 6145 00b2 05F15007 		add	r7, r5, #80
 6146 00b6 3846     		mov	r0, r7
 6147 00b8 4946     		mov	r1, r9
 6148 00ba 2022     		movs	r2, #32
 6149 00bc FFF7FEFF 		bl	mem_cpy
 6150              	.LVL924:
4588:.\ff.c        **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 6151              		.loc 1 4588 0
 6152 00c0 85F851A0 		strb	r10, [r5, #81]
 6153 00c4 059A     		ldr	r2, [sp, #20]
 6154              	.LVL925:
4589:.\ff.c        **** 					st_clust(fs, dir + SZDIRE, pcl);
 6155              		.loc 1 4589 0
 6156 00c6 0298     		ldr	r0, [sp, #8]
 6157 00c8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 6158 00ca 032B     		cmp	r3, #3
 6159 00cc 03D1     		bne	.L522
4589:.\ff.c        **** 					st_clust(fs, dir + SZDIRE, pcl);
 6160              		.loc 1 4589 0 is_stmt 0 discriminator 1
 6161 00ce 436A     		ldr	r3, [r0, #36]
 6162 00d0 9342     		cmp	r3, r2
 6163 00d2 00D1     		bne	.L522
4589:.\ff.c        **** 					st_clust(fs, dir + SZDIRE, pcl);
 6164              		.loc 1 4589 0
 6165 00d4 0022     		movs	r2, #0
 6166              	.LVL926:
 6167              	.L522:
4590:.\ff.c        **** 				}
 6168              		.loc 1 4590 0 is_stmt 1
 6169 00d6 3946     		mov	r1, r7
 6170 00d8 FFF7FEFF 		bl	st_clust
 6171              	.LVL927:
4592:.\ff.c        **** 					fs->winsect = dsc++;
 6172              		.loc 1 4592 0
 6173 00dc 029B     		ldr	r3, [sp, #8]
 6174 00de 5D89     		ldrh	r5, [r3, #10]
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 230


 6175              	.LVL928:
 6176 00e0 11E0     		b	.L523
 6177              	.L524:
4593:.\ff.c        **** 					fs->wflag = 1;
 6178              		.loc 1 4593 0
 6179 00e2 029B     		ldr	r3, [sp, #8]
 6180 00e4 771C     		adds	r7, r6, #1
 6181              	.LVL929:
 6182 00e6 DE62     		str	r6, [r3, #44]
4594:.\ff.c        **** 					res = sync_window(fs);
 6183              		.loc 1 4594 0
 6184 00e8 0122     		movs	r2, #1
 6185 00ea DA70     		strb	r2, [r3, #3]
4595:.\ff.c        **** 					if (res != FR_OK) break;
 6186              		.loc 1 4595 0
 6187 00ec 0298     		ldr	r0, [sp, #8]
 6188 00ee FFF7FEFF 		bl	sync_window
 6189              	.LVL930:
4596:.\ff.c        **** 					mem_set(dir, 0, SS(fs));
 6190              		.loc 1 4596 0
 6191 00f2 0446     		mov	r4, r0
 6192 00f4 48B9     		cbnz	r0, .L521
4597:.\ff.c        **** 				}
 6193              		.loc 1 4597 0 discriminator 2
 6194 00f6 4846     		mov	r0, r9
 6195              	.LVL931:
 6196 00f8 0021     		movs	r1, #0
 6197 00fa 4FF40072 		mov	r2, #512
 6198 00fe FFF7FEFF 		bl	mem_set
 6199              	.LVL932:
4592:.\ff.c        **** 					fs->winsect = dsc++;
 6200              		.loc 1 4592 0 discriminator 2
 6201 0102 013D     		subs	r5, r5, #1
 6202              	.LVL933:
4593:.\ff.c        **** 					fs->wflag = 1;
 6203              		.loc 1 4593 0 discriminator 2
 6204 0104 3E46     		mov	r6, r7
 6205              	.LVL934:
 6206              	.L523:
4592:.\ff.c        **** 					fs->winsect = dsc++;
 6207              		.loc 1 4592 0 discriminator 1
 6208 0106 002D     		cmp	r5, #0
 6209 0108 EBD1     		bne	.L524
 6210              	.LVL935:
 6211              	.L521:
4600:.\ff.c        **** 			if (res == FR_OK) {
 6212              		.loc 1 4600 0
 6213 010a 1CB9     		cbnz	r4, .L525
4600:.\ff.c        **** 			if (res == FR_OK) {
 6214              		.loc 1 4600 0 is_stmt 0 discriminator 1
 6215 010c 03A8     		add	r0, sp, #12
 6216 010e FFF7FEFF 		bl	dir_register
 6217              	.LVL936:
 6218 0112 0446     		mov	r4, r0
 6219              	.LVL937:
 6220              	.L525:
4601:.\ff.c        **** #if _FS_EXFAT
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 231


 6221              		.loc 1 4601 0 is_stmt 1
 6222 0114 ACB9     		cbnz	r4, .L526
4614:.\ff.c        **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 6223              		.loc 1 4614 0
 6224 0116 0A9D     		ldr	r5, [sp, #40]
 6225              	.LVL938:
4615:.\ff.c        **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 6226              		.loc 1 4615 0
 6227 0118 05F11600 		add	r0, r5, #22
 6228 011c 0E49     		ldr	r1, .L534
 6229 011e FFF7FEFF 		bl	st_dword
 6230              	.LVL939:
4616:.\ff.c        **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 6231              		.loc 1 4616 0
 6232 0122 0298     		ldr	r0, [sp, #8]
 6233 0124 2946     		mov	r1, r5
 6234 0126 4246     		mov	r2, r8
 6235 0128 FFF7FEFF 		bl	st_clust
 6236              	.LVL940:
4617:.\ff.c        **** 					fs->wflag = 1;
 6237              		.loc 1 4617 0
 6238 012c 1023     		movs	r3, #16
 6239 012e EB72     		strb	r3, [r5, #11]
4618:.\ff.c        **** 				}
 6240              		.loc 1 4618 0
 6241 0130 0122     		movs	r2, #1
 6242 0132 029B     		ldr	r3, [sp, #8]
 6243 0134 DA70     		strb	r2, [r3, #3]
4620:.\ff.c        **** 			} else {
 6244              		.loc 1 4620 0
 6245 0136 5CB9     		cbnz	r4, .L515
4620:.\ff.c        **** 			} else {
 6246              		.loc 1 4620 0 is_stmt 0 discriminator 1
 6247 0138 0298     		ldr	r0, [sp, #8]
 6248 013a FFF7FEFF 		bl	sync_fs
 6249              	.LVL941:
 6250 013e 0446     		mov	r4, r0
 6251              	.LVL942:
 6252 0140 06E0     		b	.L515
 6253              	.LVL943:
 6254              	.L526:
4622:.\ff.c        **** 			}
 6255              		.loc 1 4622 0 is_stmt 1
 6256 0142 03A8     		add	r0, sp, #12
 6257 0144 4146     		mov	r1, r8
 6258 0146 0022     		movs	r2, #0
 6259 0148 FFF7FEFF 		bl	remove_chain
 6260              	.LVL944:
 6261 014c 00E0     		b	.L515
 6262              	.LVL945:
 6263              	.L528:
 6264 014e 1C46     		mov	r4, r3
 6265              	.LVL946:
 6266              	.L515:
4629:.\ff.c        **** 
 6267              		.loc 1 4629 0
 6268 0150 2046     		mov	r0, r4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 232


 6269 0152 0EB0     		add	sp, sp, #56
 6270              		.cfi_def_cfa_offset 32
 6271              	.LVL947:
 6272              		@ sp needed
 6273 0154 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 6274              	.LVL948:
 6275              	.L535:
 6276              		.align	2
 6277              	.L534:
 6278 0158 00002148 		.word	1210122240
 6279              		.cfi_endproc
 6280              	.LFE46:
 6281              		.size	f_mkdir, .-f_mkdir
 6282              		.section	.text.f_rename,"ax",%progbits
 6283              		.align	2
 6284              		.global	f_rename
 6285              		.thumb
 6286              		.thumb_func
 6287              		.type	f_rename, %function
 6288              	f_rename:
 6289              	.LFB47:
4642:.\ff.c        **** 	FRESULT res;
 6290              		.loc 1 4642 0
 6291              		.cfi_startproc
 6292              		@ args = 0, pretend = 0, frame = 128
 6293              		@ frame_needed = 0, uses_anonymous_args = 0
 6294              	.LVL949:
 6295 0000 30B5     		push	{r4, r5, lr}
 6296              		.cfi_def_cfa_offset 12
 6297              		.cfi_offset 4, -12
 6298              		.cfi_offset 5, -8
 6299              		.cfi_offset 14, -4
 6300 0002 A1B0     		sub	sp, sp, #132
 6301              		.cfi_def_cfa_offset 144
 6302 0004 0190     		str	r0, [sp, #4]
 6303 0006 20A8     		add	r0, sp, #128
 6304              	.LVL950:
 6305 0008 40F8801D 		str	r1, [r0, #-128]!
4651:.\ff.c        **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 6306              		.loc 1 4651 0
 6307 000c FFF7FEFF 		bl	get_ldnumber
 6308              	.LVL951:
4652:.\ff.c        **** 	if (res == FR_OK) {
 6309              		.loc 1 4652 0
 6310 0010 01A8     		add	r0, sp, #4
 6311              	.LVL952:
 6312 0012 09A9     		add	r1, sp, #36
 6313 0014 0222     		movs	r2, #2
 6314 0016 FFF7FEFF 		bl	find_volume
 6315              	.LVL953:
4653:.\ff.c        **** 		djo.obj.fs = fs;
 6316              		.loc 1 4653 0
 6317 001a 0446     		mov	r4, r0
 6318 001c 0028     		cmp	r0, #0
 6319 001e 77D1     		bne	.L537
4654:.\ff.c        **** 		INIT_NAMBUF(fs);
 6320              		.loc 1 4654 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 233


 6321 0020 099B     		ldr	r3, [sp, #36]
 6322 0022 1593     		str	r3, [sp, #84]
4656:.\ff.c        **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 6323              		.loc 1 4656 0
 6324 0024 15A8     		add	r0, sp, #84
 6325              	.LVL954:
 6326 0026 0199     		ldr	r1, [sp, #4]
 6327 0028 FFF7FEFF 		bl	follow_path
 6328              	.LVL955:
4657:.\ff.c        **** #if _FS_LOCK != 0
 6329              		.loc 1 4657 0
 6330 002c 0446     		mov	r4, r0
 6331 002e 28B9     		cbnz	r0, .L538
4657:.\ff.c        **** #if _FS_LOCK != 0
 6332              		.loc 1 4657 0 is_stmt 0 discriminator 1
 6333 0030 9DF87F30 		ldrb	r3, [sp, #127]	@ zero_extendqisi2
 6334 0034 13F0A00F 		tst	r3, #160
 6335 0038 00D0     		beq	.L538
4657:.\ff.c        **** #if _FS_LOCK != 0
 6336              		.loc 1 4657 0
 6337 003a 0624     		movs	r4, #6
 6338              	.L538:
 6339              	.LVL956:
4661:.\ff.c        **** #if _FS_EXFAT
 6340              		.loc 1 4661 0 is_stmt 1
 6341 003c 002C     		cmp	r4, #0
 6342 003e 67D1     		bne	.L537
4688:.\ff.c        **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 6343              		.loc 1 4688 0
 6344 0040 03A8     		add	r0, sp, #12
 6345 0042 1C99     		ldr	r1, [sp, #112]
 6346 0044 0B31     		adds	r1, r1, #11
 6347 0046 1522     		movs	r2, #21
 6348 0048 FFF7FEFF 		bl	mem_cpy
 6349              	.LVL957:
4689:.\ff.c        **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 6350              		.loc 1 4689 0
 6351 004c 0AA8     		add	r0, sp, #40
 6352 004e 15A9     		add	r1, sp, #84
 6353 0050 2C22     		movs	r2, #44
 6354 0052 FFF7FEFF 		bl	mem_cpy
 6355              	.LVL958:
4690:.\ff.c        **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 6356              		.loc 1 4690 0
 6357 0056 0AA8     		add	r0, sp, #40
 6358 0058 0099     		ldr	r1, [sp]
 6359 005a FFF7FEFF 		bl	follow_path
 6360              	.LVL959:
4691:.\ff.c        **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 6361              		.loc 1 4691 0
 6362 005e 0446     		mov	r4, r0
 6363 0060 60B9     		cbnz	r0, .L539
4692:.\ff.c        **** 				}
 6364              		.loc 1 4692 0
 6365 0062 179B     		ldr	r3, [sp, #92]
 6366 0064 0C9A     		ldr	r2, [sp, #48]
 6367 0066 9A42     		cmp	r2, r3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 234


 6368 0068 05D1     		bne	.L543
4692:.\ff.c        **** 				}
 6369              		.loc 1 4692 0 is_stmt 0 discriminator 1
 6370 006a 199B     		ldr	r3, [sp, #100]
 6371 006c 0E9A     		ldr	r2, [sp, #56]
 6372 006e 9A42     		cmp	r2, r3
 6373 0070 03D0     		beq	.L544
4692:.\ff.c        **** 				}
 6374              		.loc 1 4692 0
 6375 0072 0824     		movs	r4, #8
 6376 0074 02E0     		b	.L539
 6377              	.L543:
 6378 0076 0824     		movs	r4, #8
 6379 0078 00E0     		b	.L539
 6380              	.L544:
 6381 007a 0424     		movs	r4, #4
 6382              	.LVL960:
 6383              	.L539:
4694:.\ff.c        **** 					res = dir_register(&djn);			/* Register the new entry */
 6384              		.loc 1 4694 0 is_stmt 1
 6385 007c 042C     		cmp	r4, #4
 6386 007e 3DD1     		bne	.L541
4695:.\ff.c        **** 					if (res == FR_OK) {
 6387              		.loc 1 4695 0
 6388 0080 0AA8     		add	r0, sp, #40
 6389 0082 FFF7FEFF 		bl	dir_register
 6390              	.LVL961:
4696:.\ff.c        **** 						dir = djn.dir;					/* Copy information about object except name */
 6391              		.loc 1 4696 0
 6392 0086 0446     		mov	r4, r0
 6393 0088 0028     		cmp	r0, #0
 6394 008a 37D1     		bne	.L541
4697:.\ff.c        **** 						mem_cpy(dir + 13, buf + 2, 19);
 6395              		.loc 1 4697 0
 6396 008c 119D     		ldr	r5, [sp, #68]
 6397              	.LVL962:
4698:.\ff.c        **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 6398              		.loc 1 4698 0
 6399 008e 05F10D00 		add	r0, r5, #13
 6400              	.LVL963:
 6401 0092 0DF10E01 		add	r1, sp, #14
 6402 0096 1322     		movs	r2, #19
 6403 0098 FFF7FEFF 		bl	mem_cpy
 6404              	.LVL964:
4699:.\ff.c        **** 						fs->wflag = 1;
 6405              		.loc 1 4699 0
 6406 009c 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 6407 00a0 43F02003 		orr	r3, r3, #32
 6408 00a4 EB72     		strb	r3, [r5, #11]
4700:.\ff.c        **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 6409              		.loc 1 4700 0
 6410 00a6 0122     		movs	r2, #1
 6411 00a8 099B     		ldr	r3, [sp, #36]
 6412 00aa DA70     		strb	r2, [r3, #3]
4701:.\ff.c        **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 6413              		.loc 1 4701 0
 6414 00ac EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 235


 6415 00ae 13F0100F 		tst	r3, #16
 6416 00b2 23D0     		beq	.L541
4701:.\ff.c        **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 6417              		.loc 1 4701 0 is_stmt 0 discriminator 1
 6418 00b4 0C9B     		ldr	r3, [sp, #48]
 6419 00b6 179A     		ldr	r2, [sp, #92]
 6420 00b8 9A42     		cmp	r2, r3
 6421 00ba 1FD0     		beq	.L541
4702:.\ff.c        **** 							if (!dw) {
 6422              		.loc 1 4702 0 is_stmt 1
 6423 00bc 099C     		ldr	r4, [sp, #36]
 6424 00be 2046     		mov	r0, r4
 6425 00c0 2946     		mov	r1, r5
 6426 00c2 FFF7FEFF 		bl	ld_clust
 6427              	.LVL965:
 6428 00c6 0146     		mov	r1, r0
 6429 00c8 2046     		mov	r0, r4
 6430 00ca FFF7FEFF 		bl	clust2sect
 6431              	.LVL966:
4703:.\ff.c        **** 								res = FR_INT_ERR;
 6432              		.loc 1 4703 0
 6433 00ce 0146     		mov	r1, r0
 6434 00d0 98B1     		cbz	r0, .L545
4707:.\ff.c        **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 6435              		.loc 1 4707 0
 6436 00d2 2046     		mov	r0, r4
 6437              	.LVL967:
 6438 00d4 FFF7FEFF 		bl	move_window
 6439              	.LVL968:
4708:.\ff.c        **** 								if (res == FR_OK && dir[1] == '.') {
 6440              		.loc 1 4708 0
 6441 00d8 099B     		ldr	r3, [sp, #36]
 6442 00da 03F15001 		add	r1, r3, #80
 6443              	.LVL969:
4709:.\ff.c        **** 									st_clust(fs, dir, djn.obj.sclust);
 6444              		.loc 1 4709 0
 6445 00de 0446     		mov	r4, r0
 6446 00e0 60B9     		cbnz	r0, .L541
4709:.\ff.c        **** 									st_clust(fs, dir, djn.obj.sclust);
 6447              		.loc 1 4709 0 is_stmt 0 discriminator 1
 6448 00e2 93F85120 		ldrb	r2, [r3, #81]	@ zero_extendqisi2
 6449 00e6 2E2A     		cmp	r2, #46
 6450 00e8 08D1     		bne	.L541
4710:.\ff.c        **** 									fs->wflag = 1;
 6451              		.loc 1 4710 0 is_stmt 1
 6452 00ea 1846     		mov	r0, r3
 6453              	.LVL970:
 6454 00ec 0C9A     		ldr	r2, [sp, #48]
 6455 00ee FFF7FEFF 		bl	st_clust
 6456              	.LVL971:
4711:.\ff.c        **** 								}
 6457              		.loc 1 4711 0
 6458 00f2 0122     		movs	r2, #1
 6459 00f4 099B     		ldr	r3, [sp, #36]
 6460 00f6 DA70     		strb	r2, [r3, #3]
 6461 00f8 00E0     		b	.L541
 6462              	.LVL972:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 236


 6463              	.L545:
4704:.\ff.c        **** 							} else {
 6464              		.loc 1 4704 0
 6465 00fa 0224     		movs	r4, #2
 6466              	.LVL973:
 6467              	.L541:
4718:.\ff.c        **** 				res = dir_remove(&djo);		/* Remove old entry */
 6468              		.loc 1 4718 0
 6469 00fc 44B9     		cbnz	r4, .L537
4719:.\ff.c        **** 				if (res == FR_OK) {
 6470              		.loc 1 4719 0
 6471 00fe 15A8     		add	r0, sp, #84
 6472 0100 FFF7FEFF 		bl	dir_remove
 6473              	.LVL974:
4720:.\ff.c        **** 					res = sync_fs(fs);
 6474              		.loc 1 4720 0
 6475 0104 0446     		mov	r4, r0
 6476 0106 18B9     		cbnz	r0, .L537
4721:.\ff.c        **** 				}
 6477              		.loc 1 4721 0
 6478 0108 0998     		ldr	r0, [sp, #36]
 6479              	.LVL975:
 6480 010a FFF7FEFF 		bl	sync_fs
 6481              	.LVL976:
 6482 010e 0446     		mov	r4, r0
 6483              	.LVL977:
 6484              	.L537:
4730:.\ff.c        **** 
 6485              		.loc 1 4730 0
 6486 0110 2046     		mov	r0, r4
 6487 0112 21B0     		add	sp, sp, #132
 6488              		.cfi_def_cfa_offset 12
 6489              		@ sp needed
 6490 0114 30BD     		pop	{r4, r5, pc}
 6491              		.cfi_endproc
 6492              	.LFE47:
 6493              		.size	f_rename, .-f_rename
 6494 0116 00BF     		.section	.text.f_gets,"ax",%progbits
 6495              		.align	2
 6496              		.global	f_gets
 6497              		.thumb
 6498              		.thumb_func
 6499              		.type	f_gets, %function
 6500              	f_gets:
 6501              	.LFB48:
5744:.\ff.c        **** 	int n = 0;
 6502              		.loc 1 5744 0
 6503              		.cfi_startproc
 6504              		@ args = 0, pretend = 0, frame = 8
 6505              		@ frame_needed = 0, uses_anonymous_args = 0
 6506              	.LVL978:
 6507 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6508              		.cfi_def_cfa_offset 24
 6509              		.cfi_offset 4, -24
 6510              		.cfi_offset 5, -20
 6511              		.cfi_offset 6, -16
 6512              		.cfi_offset 7, -12
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 237


 6513              		.cfi_offset 8, -8
 6514              		.cfi_offset 14, -4
 6515 0004 82B0     		sub	sp, sp, #8
 6516              		.cfi_def_cfa_offset 32
 6517 0006 8046     		mov	r8, r0
 6518 0008 0E46     		mov	r6, r1
 6519 000a 1746     		mov	r7, r2
 6520              	.LVL979:
5746:.\ff.c        **** 	BYTE s[2];
 6521              		.loc 1 5746 0
 6522 000c 0546     		mov	r5, r0
5745:.\ff.c        **** 	TCHAR c, *p = buff;
 6523              		.loc 1 5745 0
 6524 000e 0024     		movs	r4, #0
5751:.\ff.c        **** #if _LFN_UNICODE
 6525              		.loc 1 5751 0
 6526 0010 12E0     		b	.L548
 6527              	.LVL980:
 6528              	.L551:
5796:.\ff.c        **** 		if (rc != 1) break;
 6529              		.loc 1 5796 0
 6530 0012 3846     		mov	r0, r7
 6531 0014 01A9     		add	r1, sp, #4
 6532 0016 0122     		movs	r2, #1
 6533 0018 6B46     		mov	r3, sp
 6534 001a FFF7FEFF 		bl	f_read
 6535              	.LVL981:
5797:.\ff.c        **** 		c = s[0];
 6536              		.loc 1 5797 0
 6537 001e 009B     		ldr	r3, [sp]
 6538 0020 012B     		cmp	r3, #1
 6539 0022 0ED1     		bne	.L549
5798:.\ff.c        **** #endif
 6540              		.loc 1 5798 0
 6541 0024 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 6542              	.LVL982:
5800:.\ff.c        **** 		*p++ = c;
 6543              		.loc 1 5800 0
 6544 0028 0D2B     		cmp	r3, #13
 6545 002a 05D0     		beq	.L548
5801:.\ff.c        **** 		n++;
 6546              		.loc 1 5801 0
 6547 002c 6A1C     		adds	r2, r5, #1
 6548              	.LVL983:
 6549 002e 2B70     		strb	r3, [r5]
5802:.\ff.c        **** 		if (c == '\n') break;		/* Break on EOL */
 6550              		.loc 1 5802 0
 6551 0030 0134     		adds	r4, r4, #1
 6552              	.LVL984:
5803:.\ff.c        **** 	}
 6553              		.loc 1 5803 0
 6554 0032 0A2B     		cmp	r3, #10
 6555 0034 04D0     		beq	.L553
5801:.\ff.c        **** 		n++;
 6556              		.loc 1 5801 0
 6557 0036 1546     		mov	r5, r2
 6558              	.LVL985:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 238


 6559              	.L548:
5751:.\ff.c        **** #if _LFN_UNICODE
 6560              		.loc 1 5751 0
 6561 0038 731E     		subs	r3, r6, #1
 6562 003a A342     		cmp	r3, r4
 6563 003c E9DC     		bgt	.L551
 6564 003e 00E0     		b	.L549
 6565              	.LVL986:
 6566              	.L553:
5801:.\ff.c        **** 		n++;
 6567              		.loc 1 5801 0
 6568 0040 1546     		mov	r5, r2
 6569              	.LVL987:
 6570              	.L549:
5805:.\ff.c        **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 6571              		.loc 1 5805 0
 6572 0042 0023     		movs	r3, #0
 6573 0044 2B70     		strb	r3, [r5]
5806:.\ff.c        **** }
 6574              		.loc 1 5806 0
 6575 0046 0CB9     		cbnz	r4, .L554
 6576 0048 1846     		mov	r0, r3
 6577 004a 00E0     		b	.L552
 6578              	.L554:
 6579 004c 4046     		mov	r0, r8
 6580              	.L552:
5807:.\ff.c        **** 
 6581              		.loc 1 5807 0 discriminator 4
 6582 004e 02B0     		add	sp, sp, #8
 6583              		.cfi_def_cfa_offset 24
 6584              		@ sp needed
 6585 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6586              		.cfi_endproc
 6587              	.LFE48:
 6588              		.size	f_gets, .-f_gets
 6589              		.section	.text.f_putc,"ax",%progbits
 6590              		.align	2
 6591              		.global	f_putc
 6592              		.thumb
 6593              		.thumb_func
 6594              		.type	f_putc, %function
 6595              	f_putc:
 6596              	.LFB52:
5903:.\ff.c        **** }
5904:.\ff.c        **** 
5905:.\ff.c        **** 
5906:.\ff.c        **** 
5907:.\ff.c        **** int f_putc (
5908:.\ff.c        **** 	TCHAR c,	/* A character to be output */
5909:.\ff.c        **** 	FIL* fp		/* Pointer to the file object */
5910:.\ff.c        **** )
5911:.\ff.c        **** {
 6597              		.loc 1 5911 0
 6598              		.cfi_startproc
 6599              		@ args = 0, pretend = 0, frame = 80
 6600              		@ frame_needed = 0, uses_anonymous_args = 0
 6601              	.LVL988:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 239


 6602 0000 10B5     		push	{r4, lr}
 6603              		.cfi_def_cfa_offset 8
 6604              		.cfi_offset 4, -8
 6605              		.cfi_offset 14, -4
 6606 0002 94B0     		sub	sp, sp, #80
 6607              		.cfi_def_cfa_offset 88
 6608 0004 0446     		mov	r4, r0
5912:.\ff.c        **** 	putbuff pb;
5913:.\ff.c        **** 
5914:.\ff.c        **** 
5915:.\ff.c        **** 	putc_init(&pb, fp);
 6609              		.loc 1 5915 0
 6610 0006 01A8     		add	r0, sp, #4
 6611              	.LVL989:
 6612 0008 FFF7FEFF 		bl	putc_init
 6613              	.LVL990:
5916:.\ff.c        **** 	putc_bfd(&pb, c);	/* Put the character */
 6614              		.loc 1 5916 0
 6615 000c 01A8     		add	r0, sp, #4
 6616 000e 2146     		mov	r1, r4
 6617 0010 FFF7FEFF 		bl	putc_bfd
 6618              	.LVL991:
5917:.\ff.c        **** 	return putc_flush(&pb);
 6619              		.loc 1 5917 0
 6620 0014 01A8     		add	r0, sp, #4
 6621 0016 FFF7FEFF 		bl	putc_flush
 6622              	.LVL992:
5918:.\ff.c        **** }
 6623              		.loc 1 5918 0
 6624 001a 14B0     		add	sp, sp, #80
 6625              		.cfi_def_cfa_offset 8
 6626              		@ sp needed
 6627 001c 10BD     		pop	{r4, pc}
 6628              		.cfi_endproc
 6629              	.LFE52:
 6630              		.size	f_putc, .-f_putc
 6631 001e 00BF     		.section	.text.f_puts,"ax",%progbits
 6632              		.align	2
 6633              		.global	f_puts
 6634              		.thumb
 6635              		.thumb_func
 6636              		.type	f_puts, %function
 6637              	f_puts:
 6638              	.LFB53:
5919:.\ff.c        **** 
5920:.\ff.c        **** 
5921:.\ff.c        **** 
5922:.\ff.c        **** 
5923:.\ff.c        **** /*-----------------------------------------------------------------------*/
5924:.\ff.c        **** /* Put a string to the file                                              */
5925:.\ff.c        **** /*-----------------------------------------------------------------------*/
5926:.\ff.c        **** 
5927:.\ff.c        **** int f_puts (
5928:.\ff.c        **** 	const TCHAR* str,	/* Pointer to the string to be output */
5929:.\ff.c        **** 	FIL* fp				/* Pointer to the file object */
5930:.\ff.c        **** )
5931:.\ff.c        **** {
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 240


 6639              		.loc 1 5931 0
 6640              		.cfi_startproc
 6641              		@ args = 0, pretend = 0, frame = 80
 6642              		@ frame_needed = 0, uses_anonymous_args = 0
 6643              	.LVL993:
 6644 0000 10B5     		push	{r4, lr}
 6645              		.cfi_def_cfa_offset 8
 6646              		.cfi_offset 4, -8
 6647              		.cfi_offset 14, -4
 6648 0002 94B0     		sub	sp, sp, #80
 6649              		.cfi_def_cfa_offset 88
 6650 0004 0446     		mov	r4, r0
5932:.\ff.c        **** 	putbuff pb;
5933:.\ff.c        **** 
5934:.\ff.c        **** 
5935:.\ff.c        **** 	putc_init(&pb, fp);
 6651              		.loc 1 5935 0
 6652 0006 01A8     		add	r0, sp, #4
 6653              	.LVL994:
 6654 0008 FFF7FEFF 		bl	putc_init
 6655              	.LVL995:
5936:.\ff.c        **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 6656              		.loc 1 5936 0
 6657 000c 03E0     		b	.L559
 6658              	.L560:
 6659              		.loc 1 5936 0 is_stmt 0 discriminator 2
 6660 000e 0134     		adds	r4, r4, #1
 6661              	.LVL996:
 6662 0010 01A8     		add	r0, sp, #4
 6663 0012 FFF7FEFF 		bl	putc_bfd
 6664              	.LVL997:
 6665              	.L559:
 6666              		.loc 1 5936 0 discriminator 1
 6667 0016 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 6668 0018 0029     		cmp	r1, #0
 6669 001a F8D1     		bne	.L560
5937:.\ff.c        **** 	return putc_flush(&pb);
 6670              		.loc 1 5937 0 is_stmt 1
 6671 001c 01A8     		add	r0, sp, #4
 6672 001e FFF7FEFF 		bl	putc_flush
 6673              	.LVL998:
5938:.\ff.c        **** }
 6674              		.loc 1 5938 0
 6675 0022 14B0     		add	sp, sp, #80
 6676              		.cfi_def_cfa_offset 8
 6677              		@ sp needed
 6678 0024 10BD     		pop	{r4, pc}
 6679              		.cfi_endproc
 6680              	.LFE53:
 6681              		.size	f_puts, .-f_puts
 6682 0026 00BF     		.section	.text.f_printf,"ax",%progbits
 6683              		.align	2
 6684              		.global	f_printf
 6685              		.thumb
 6686              		.thumb_func
 6687              		.type	f_printf, %function
 6688              	f_printf:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 241


 6689              	.LFB54:
5939:.\ff.c        **** 
5940:.\ff.c        **** 
5941:.\ff.c        **** 
5942:.\ff.c        **** 
5943:.\ff.c        **** /*-----------------------------------------------------------------------*/
5944:.\ff.c        **** /* Put a formatted string to the file                                    */
5945:.\ff.c        **** /*-----------------------------------------------------------------------*/
5946:.\ff.c        **** 
5947:.\ff.c        **** int f_printf (
5948:.\ff.c        **** 	FIL* fp,			/* Pointer to the file object */
5949:.\ff.c        **** 	const TCHAR* fmt,	/* Pointer to the format string */
5950:.\ff.c        **** 	...					/* Optional arguments... */
5951:.\ff.c        **** )
5952:.\ff.c        **** {
 6690              		.loc 1 5952 0
 6691              		.cfi_startproc
 6692              		@ args = 4, pretend = 12, frame = 112
 6693              		@ frame_needed = 0, uses_anonymous_args = 1
 6694              	.LVL999:
 6695 0000 0EB4     		push	{r1, r2, r3}
 6696              		.cfi_def_cfa_offset 12
 6697              		.cfi_offset 1, -12
 6698              		.cfi_offset 2, -8
 6699              		.cfi_offset 3, -4
 6700 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6701              		.cfi_def_cfa_offset 44
 6702              		.cfi_offset 4, -44
 6703              		.cfi_offset 5, -40
 6704              		.cfi_offset 6, -36
 6705              		.cfi_offset 7, -32
 6706              		.cfi_offset 8, -28
 6707              		.cfi_offset 9, -24
 6708              		.cfi_offset 10, -20
 6709              		.cfi_offset 14, -16
 6710 0006 9DB0     		sub	sp, sp, #116
 6711              		.cfi_def_cfa_offset 160
 6712 0008 0146     		mov	r1, r0
 6713 000a 25AC     		add	r4, sp, #148
 6714 000c 54F8046B 		ldr	r6, [r4], #4
5953:.\ff.c        **** 	va_list arp;
5954:.\ff.c        **** 	putbuff pb;
5955:.\ff.c        **** 	BYTE f, r;
5956:.\ff.c        **** 	UINT i, j, w;
5957:.\ff.c        **** 	DWORD v;
5958:.\ff.c        **** 	TCHAR c, d, str[32], *p;
5959:.\ff.c        **** 
5960:.\ff.c        **** 
5961:.\ff.c        **** 	putc_init(&pb, fp);
 6715              		.loc 1 5961 0
 6716 0010 08A8     		add	r0, sp, #32
 6717              	.LVL1000:
 6718 0012 FFF7FEFF 		bl	putc_init
 6719              	.LVL1001:
5962:.\ff.c        **** 
5963:.\ff.c        **** 	va_start(arp, fmt);
 6720              		.loc 1 5963 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 242


 6721 0016 1B94     		str	r4, [sp, #108]
 6722              	.LVL1002:
 6723              	.L563:
5964:.\ff.c        **** 
5965:.\ff.c        **** 	for (;;) {
5966:.\ff.c        **** 		c = *fmt++;
 6724              		.loc 1 5966 0
 6725 0018 741C     		adds	r4, r6, #1
 6726              	.LVL1003:
 6727 001a 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 6728              	.LVL1004:
5967:.\ff.c        **** 		if (c == 0) break;			/* End of string */
 6729              		.loc 1 5967 0
 6730 001c 0029     		cmp	r1, #0
 6731 001e 00F00281 		beq	.L564
5968:.\ff.c        **** 		if (c != '%') {				/* Non escape character */
 6732              		.loc 1 5968 0
 6733 0022 2529     		cmp	r1, #37
 6734 0024 04D0     		beq	.L565
5969:.\ff.c        **** 			putc_bfd(&pb, c);
 6735              		.loc 1 5969 0
 6736 0026 08A8     		add	r0, sp, #32
 6737 0028 FFF7FEFF 		bl	putc_bfd
 6738              	.LVL1005:
5966:.\ff.c        **** 		if (c == 0) break;			/* End of string */
 6739              		.loc 1 5966 0
 6740 002c 2646     		mov	r6, r4
5970:.\ff.c        **** 			continue;
 6741              		.loc 1 5970 0
 6742 002e F3E7     		b	.L563
 6743              	.LVL1006:
 6744              	.L565:
5971:.\ff.c        **** 		}
5972:.\ff.c        **** 		w = f = 0;
5973:.\ff.c        **** 		c = *fmt++;
 6745              		.loc 1 5973 0
 6746 0030 B31C     		adds	r3, r6, #2
 6747              	.LVL1007:
 6748 0032 7178     		ldrb	r1, [r6, #1]	@ zero_extendqisi2
 6749              	.LVL1008:
5974:.\ff.c        **** 		if (c == '0') {				/* Flag: '0' padding */
 6750              		.loc 1 5974 0
 6751 0034 3029     		cmp	r1, #48
 6752 0036 03D1     		bne	.L567
 6753              	.LVL1009:
5975:.\ff.c        **** 			f = 1; c = *fmt++;
 6754              		.loc 1 5975 0
 6755 0038 F31C     		adds	r3, r6, #3
 6756              	.LVL1010:
 6757 003a B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 6758              	.LVL1011:
 6759 003c 0127     		movs	r7, #1
 6760 003e 06E0     		b	.L568
 6761              	.LVL1012:
 6762              	.L567:
5976:.\ff.c        **** 		} else {
5977:.\ff.c        **** 			if (c == '-') {			/* Flag: left justified */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 243


 6763              		.loc 1 5977 0
 6764 0040 2D29     		cmp	r1, #45
 6765 0042 03D1     		bne	.L608
 6766              	.LVL1013:
5978:.\ff.c        **** 				f = 2; c = *fmt++;
 6767              		.loc 1 5978 0
 6768 0044 F31C     		adds	r3, r6, #3
 6769              	.LVL1014:
 6770 0046 B178     		ldrb	r1, [r6, #2]	@ zero_extendqisi2
 6771              	.LVL1015:
 6772 0048 0227     		movs	r7, #2
 6773 004a 00E0     		b	.L568
 6774              	.LVL1016:
 6775              	.L608:
5972:.\ff.c        **** 		c = *fmt++;
 6776              		.loc 1 5972 0
 6777 004c 0027     		movs	r7, #0
 6778              	.LVL1017:
 6779              	.L568:
5975:.\ff.c        **** 		} else {
 6780              		.loc 1 5975 0
 6781 004e 1E46     		mov	r6, r3
 6782 0050 0024     		movs	r4, #0
 6783 0052 06E0     		b	.L569
 6784              	.LVL1018:
 6785              	.L570:
5979:.\ff.c        **** 			}
5980:.\ff.c        **** 		}
5981:.\ff.c        **** 		while (IsDigit(c)) {		/* Precision */
5982:.\ff.c        **** 			w = w * 10 + c - '0';
 6786              		.loc 1 5982 0
 6787 0054 04EB8404 		add	r4, r4, r4, lsl #2
 6788              	.LVL1019:
 6789 0058 6400     		lsls	r4, r4, #1
 6790 005a 0C44     		add	r4, r4, r1
 6791 005c 303C     		subs	r4, r4, #48
 6792              	.LVL1020:
5983:.\ff.c        **** 			c = *fmt++;
 6793              		.loc 1 5983 0
 6794 005e 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 6795              	.LVL1021:
 6796 0060 0136     		adds	r6, r6, #1
 6797              	.LVL1022:
 6798              	.L569:
5981:.\ff.c        **** 			w = w * 10 + c - '0';
 6799              		.loc 1 5981 0
 6800 0062 A1F13003 		sub	r3, r1, #48
 6801 0066 DBB2     		uxtb	r3, r3
 6802 0068 092B     		cmp	r3, #9
 6803 006a F3D9     		bls	.L570
5984:.\ff.c        **** 		}
5985:.\ff.c        **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 6804              		.loc 1 5985 0
 6805 006c 6C29     		cmp	r1, #108
 6806 006e 01D0     		beq	.L571
 6807              		.loc 1 5985 0 is_stmt 0 discriminator 1
 6808 0070 4C29     		cmp	r1, #76
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 244


 6809 0072 03D1     		bne	.L572
 6810              	.L571:
5986:.\ff.c        **** 			f |= 4; c = *fmt++;
 6811              		.loc 1 5986 0 is_stmt 1
 6812 0074 47F00407 		orr	r7, r7, #4
 6813              	.LVL1023:
 6814 0078 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 6815              	.LVL1024:
 6816 007a 0136     		adds	r6, r6, #1
 6817              	.LVL1025:
 6818              	.L572:
5987:.\ff.c        **** 		}
5988:.\ff.c        **** 		if (!c) break;
 6819              		.loc 1 5988 0
 6820 007c 0029     		cmp	r1, #0
 6821 007e 00F0D280 		beq	.L564
 6822              	.LVL1026:
5989:.\ff.c        **** 		d = c;
5990:.\ff.c        **** 		if (IsLower(d)) d -= 0x20;
 6823              		.loc 1 5990 0
 6824 0082 A1F16103 		sub	r3, r1, #97
 6825 0086 DBB2     		uxtb	r3, r3
 6826 0088 192B     		cmp	r3, #25
 6827 008a 03D8     		bhi	.L609
 6828              		.loc 1 5990 0 is_stmt 0 discriminator 1
 6829 008c A1F12003 		sub	r3, r1, #32
 6830 0090 DBB2     		uxtb	r3, r3
 6831              	.LVL1027:
 6832 0092 00E0     		b	.L573
 6833              	.LVL1028:
 6834              	.L609:
5989:.\ff.c        **** 		d = c;
 6835              		.loc 1 5989 0 is_stmt 1
 6836 0094 0B46     		mov	r3, r1
 6837              	.LVL1029:
 6838              	.L573:
5991:.\ff.c        **** 		switch (d) {				/* Type is... */
 6839              		.loc 1 5991 0
 6840 0096 A3F14202 		sub	r2, r3, #66
 6841 009a 162A     		cmp	r2, #22
 6842 009c 48D8     		bhi	.L574
 6843 009e DFE802F0 		tbb	[pc, r2]
 6844              	.L576:
 6845 00a2 4B       		.byte	(.L575-.L576)/2
 6846 00a3 39       		.byte	(.L577-.L576)/2
 6847 00a4 41       		.byte	(.L578-.L576)/2
 6848 00a5 47       		.byte	(.L574-.L576)/2
 6849 00a6 47       		.byte	(.L574-.L576)/2
 6850 00a7 47       		.byte	(.L574-.L576)/2
 6851 00a8 47       		.byte	(.L574-.L576)/2
 6852 00a9 47       		.byte	(.L574-.L576)/2
 6853 00aa 47       		.byte	(.L574-.L576)/2
 6854 00ab 47       		.byte	(.L574-.L576)/2
 6855 00ac 47       		.byte	(.L574-.L576)/2
 6856 00ad 47       		.byte	(.L574-.L576)/2
 6857 00ae 47       		.byte	(.L574-.L576)/2
 6858 00af 4E       		.byte	(.L610-.L576)/2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 245


 6859 00b0 47       		.byte	(.L574-.L576)/2
 6860 00b1 47       		.byte	(.L574-.L576)/2
 6861 00b2 47       		.byte	(.L574-.L576)/2
 6862 00b3 0C       		.byte	(.L580-.L576)/2
 6863 00b4 47       		.byte	(.L574-.L576)/2
 6864 00b5 41       		.byte	(.L578-.L576)/2
 6865 00b6 47       		.byte	(.L574-.L576)/2
 6866 00b7 47       		.byte	(.L574-.L576)/2
 6867 00b8 44       		.byte	(.L581-.L576)/2
 6868 00b9 00       		.p2align 1
 6869              	.L580:
5992:.\ff.c        **** 		case 'S' :					/* String */
5993:.\ff.c        **** 			p = va_arg(arp, TCHAR*);
 6870              		.loc 1 5993 0
 6871 00ba 1B9B     		ldr	r3, [sp, #108]
 6872              	.LVL1030:
 6873 00bc 1A1D     		adds	r2, r3, #4
 6874 00be 1B92     		str	r2, [sp, #108]
 6875 00c0 D3F80080 		ldr	r8, [r3]
 6876              	.LVL1031:
5994:.\ff.c        **** 			for (j = 0; p[j]; j++) ;
 6877              		.loc 1 5994 0
 6878 00c4 0025     		movs	r5, #0
 6879 00c6 00E0     		b	.L582
 6880              	.LVL1032:
 6881              	.L583:
 6882              		.loc 1 5994 0 is_stmt 0 discriminator 3
 6883 00c8 0135     		adds	r5, r5, #1
 6884              	.LVL1033:
 6885              	.L582:
 6886              		.loc 1 5994 0 discriminator 1
 6887 00ca 18F80530 		ldrb	r3, [r8, r5]	@ zero_extendqisi2
 6888 00ce 002B     		cmp	r3, #0
 6889 00d0 FAD1     		bne	.L583
5995:.\ff.c        **** 			if (!(f & 2)) {
 6890              		.loc 1 5995 0 is_stmt 1
 6891 00d2 17F0020F 		tst	r7, #2
 6892 00d6 0FD1     		bne	.L587
 6893              		.loc 1 5995 0 is_stmt 0 discriminator 1
 6894 00d8 2B46     		mov	r3, r5
 6895 00da 04E0     		b	.L585
 6896              	.LVL1034:
 6897              	.L586:
5996:.\ff.c        **** 				while (j++ < w) putc_bfd(&pb, ' ');
 6898              		.loc 1 5996 0 is_stmt 1 discriminator 2
 6899 00dc 08A8     		add	r0, sp, #32
 6900 00de 2021     		movs	r1, #32
 6901 00e0 FFF7FEFF 		bl	putc_bfd
 6902              	.LVL1035:
 6903 00e4 2B46     		mov	r3, r5
 6904              	.LVL1036:
 6905              	.L585:
 6906              		.loc 1 5996 0 is_stmt 0 discriminator 1
 6907 00e6 5D1C     		adds	r5, r3, #1
 6908              	.LVL1037:
 6909 00e8 A342     		cmp	r3, r4
 6910 00ea F7D3     		bcc	.L586
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 246


 6911 00ec 04E0     		b	.L587
 6912              	.L588:
5997:.\ff.c        **** 			}
5998:.\ff.c        **** 			while (*p) putc_bfd(&pb, *p++);
 6913              		.loc 1 5998 0 is_stmt 1 discriminator 2
 6914 00ee 08F10108 		add	r8, r8, #1
 6915              	.LVL1038:
 6916 00f2 08A8     		add	r0, sp, #32
 6917 00f4 FFF7FEFF 		bl	putc_bfd
 6918              	.LVL1039:
 6919              	.L587:
 6920              		.loc 1 5998 0 is_stmt 0 discriminator 1
 6921 00f8 98F80010 		ldrb	r1, [r8]	@ zero_extendqisi2
 6922 00fc 0029     		cmp	r1, #0
 6923 00fe F6D1     		bne	.L588
 6924 0100 04E0     		b	.L589
 6925              	.LVL1040:
 6926              	.L590:
5999:.\ff.c        **** 			while (j++ < w) putc_bfd(&pb, ' ');
 6927              		.loc 1 5999 0 is_stmt 1 discriminator 2
 6928 0102 08A8     		add	r0, sp, #32
 6929 0104 2021     		movs	r1, #32
 6930 0106 FFF7FEFF 		bl	putc_bfd
 6931              	.LVL1041:
 6932 010a 3D46     		mov	r5, r7
 6933              	.LVL1042:
 6934              	.L589:
 6935              		.loc 1 5999 0 is_stmt 0 discriminator 1
 6936 010c 6F1C     		adds	r7, r5, #1
 6937              	.LVL1043:
 6938 010e A542     		cmp	r5, r4
 6939 0110 F7D3     		bcc	.L590
 6940 0112 81E7     		b	.L563
 6941              	.LVL1044:
 6942              	.L577:
6000:.\ff.c        **** 			continue;
6001:.\ff.c        **** 		case 'C' :					/* Character */
6002:.\ff.c        **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 6943              		.loc 1 6002 0 is_stmt 1
 6944 0114 1B9B     		ldr	r3, [sp, #108]
 6945              	.LVL1045:
 6946 0116 1A1D     		adds	r2, r3, #4
 6947 0118 1B92     		str	r2, [sp, #108]
 6948 011a 08A8     		add	r0, sp, #32
 6949 011c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 6950              	.LVL1046:
 6951 011e FFF7FEFF 		bl	putc_bfd
 6952              	.LVL1047:
 6953 0122 79E7     		b	.L563
 6954              	.LVL1048:
 6955              	.L578:
6003:.\ff.c        **** 		case 'B' :					/* Binary */
6004:.\ff.c        **** 			r = 2; break;
6005:.\ff.c        **** 		case 'O' :					/* Octal */
6006:.\ff.c        **** 			r = 8; break;
6007:.\ff.c        **** 		case 'D' :					/* Signed decimal */
6008:.\ff.c        **** 		case 'U' :					/* Unsigned decimal */
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 247


6009:.\ff.c        **** 			r = 10; break;
 6956              		.loc 1 6009 0
 6957 0124 4FF00A08 		mov	r8, #10
 6958 0128 0BE0     		b	.L579
 6959              	.LVL1049:
 6960              	.L581:
6010:.\ff.c        **** 		case 'X' :					/* Hexdecimal */
6011:.\ff.c        **** 			r = 16; break;
 6961              		.loc 1 6011 0
 6962 012a 4FF01008 		mov	r8, #16
 6963 012e 08E0     		b	.L579
 6964              	.LVL1050:
 6965              	.L574:
6012:.\ff.c        **** 		default:					/* Unknown type (pass-through) */
6013:.\ff.c        **** 			putc_bfd(&pb, c); continue;
 6966              		.loc 1 6013 0
 6967 0130 08A8     		add	r0, sp, #32
 6968 0132 FFF7FEFF 		bl	putc_bfd
 6969              	.LVL1051:
 6970 0136 6FE7     		b	.L563
 6971              	.LVL1052:
 6972              	.L575:
6004:.\ff.c        **** 		case 'O' :					/* Octal */
 6973              		.loc 1 6004 0
 6974 0138 4FF00208 		mov	r8, #2
 6975 013c 01E0     		b	.L579
 6976              	.L610:
6006:.\ff.c        **** 		case 'D' :					/* Signed decimal */
 6977              		.loc 1 6006 0
 6978 013e 4FF00808 		mov	r8, #8
 6979              	.L579:
 6980              	.LVL1053:
6014:.\ff.c        **** 		}
6015:.\ff.c        **** 
6016:.\ff.c        **** 		/* Get an argument and put it in numeral */
6017:.\ff.c        **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 6981              		.loc 1 6017 0
 6982 0142 17F0040F 		tst	r7, #4
 6983 0146 05D0     		beq	.L591
 6984              		.loc 1 6017 0 is_stmt 0 discriminator 1
 6985 0148 1B9A     		ldr	r2, [sp, #108]
 6986 014a 101D     		adds	r0, r2, #4
 6987 014c 1B90     		str	r0, [sp, #108]
 6988 014e D2F800C0 		ldr	ip, [r2]
 6989 0152 0CE0     		b	.L592
 6990              	.L591:
 6991              		.loc 1 6017 0 discriminator 2
 6992 0154 442B     		cmp	r3, #68
 6993 0156 05D1     		bne	.L593
 6994              		.loc 1 6017 0 discriminator 4
 6995 0158 1B9A     		ldr	r2, [sp, #108]
 6996 015a 101D     		adds	r0, r2, #4
 6997 015c 1B90     		str	r0, [sp, #108]
 6998 015e D2F800C0 		ldr	ip, [r2]
 6999 0162 04E0     		b	.L592
 7000              	.L593:
 7001              		.loc 1 6017 0 discriminator 5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 248


 7002 0164 1B9A     		ldr	r2, [sp, #108]
 7003 0166 101D     		adds	r0, r2, #4
 7004 0168 1B90     		str	r0, [sp, #108]
 7005 016a D2F800C0 		ldr	ip, [r2]
 7006              	.L592:
 7007              	.LVL1054:
6018:.\ff.c        **** 		if (d == 'D' && (v & 0x80000000)) {
 7008              		.loc 1 6018 0 is_stmt 1 discriminator 8
 7009 016e 442B     		cmp	r3, #68
 7010 0170 06D1     		bne	.L595
 7011              		.loc 1 6018 0 is_stmt 0 discriminator 1
 7012 0172 BCF1000F 		cmp	ip, #0
 7013 0176 03DA     		bge	.L595
6019:.\ff.c        **** 			v = 0 - v;
 7014              		.loc 1 6019 0 is_stmt 1
 7015 0178 CCF1000C 		rsb	ip, ip, #0
 7016              	.LVL1055:
6020:.\ff.c        **** 			f |= 8;
 7017              		.loc 1 6020 0
 7018 017c 47F00807 		orr	r7, r7, #8
 7019              	.LVL1056:
 7020              	.L595:
6021:.\ff.c        **** 		}
6022:.\ff.c        **** 		i = 0;
 7021              		.loc 1 6022 0
 7022 0180 0020     		movs	r0, #0
 7023 0182 00E0     		b	.L599
 7024              	.LVL1057:
 7025              	.L612:
6023:.\ff.c        **** 		do {
6024:.\ff.c        **** 			d = (TCHAR)(v % r); v /= r;
6025:.\ff.c        **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
6026:.\ff.c        **** 			str[i++] = d + '0';
 7026              		.loc 1 6026 0
 7027 0184 2846     		mov	r0, r5
 7028              	.LVL1058:
 7029              	.L599:
6024:.\ff.c        **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 7030              		.loc 1 6024 0
 7031 0186 BCFBF8FE 		udiv	lr, ip, r8
 7032 018a 08FB1EC3 		mls	r3, r8, lr, ip
 7033 018e DBB2     		uxtb	r3, r3
 7034              	.LVL1059:
 7035 0190 F446     		mov	ip, lr
 7036              	.LVL1060:
6025:.\ff.c        **** 			str[i++] = d + '0';
 7037              		.loc 1 6025 0
 7038 0192 092B     		cmp	r3, #9
 7039 0194 06D9     		bls	.L596
6025:.\ff.c        **** 			str[i++] = d + '0';
 7040              		.loc 1 6025 0 is_stmt 0 discriminator 1
 7041 0196 7829     		cmp	r1, #120
 7042 0198 01D1     		bne	.L611
6025:.\ff.c        **** 			str[i++] = d + '0';
 7043              		.loc 1 6025 0
 7044 019a 2722     		movs	r2, #39
 7045 019c 00E0     		b	.L597
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 249


 7046              	.L611:
 7047 019e 0722     		movs	r2, #7
 7048              	.L597:
6025:.\ff.c        **** 			str[i++] = d + '0';
 7049              		.loc 1 6025 0 discriminator 5
 7050 01a0 1A44     		add	r2, r2, r3
 7051 01a2 D3B2     		uxtb	r3, r2
 7052              	.LVL1061:
 7053              	.L596:
 7054              		.loc 1 6026 0 is_stmt 1
 7055 01a4 451C     		adds	r5, r0, #1
 7056              	.LVL1062:
 7057 01a6 1CAA     		add	r2, sp, #112
 7058 01a8 1044     		add	r0, r0, r2
 7059 01aa 3033     		adds	r3, r3, #48
 7060              	.LVL1063:
 7061 01ac 00F8703C 		strb	r3, [r0, #-112]
6027:.\ff.c        **** 		} while (v && i < sizeof str / sizeof str[0]);
 7062              		.loc 1 6027 0
 7063 01b0 BEF1000F 		cmp	lr, #0
 7064 01b4 01D0     		beq	.L598
 7065              		.loc 1 6027 0 is_stmt 0 discriminator 1
 7066 01b6 1F2D     		cmp	r5, #31
 7067 01b8 E4D9     		bls	.L612
 7068              	.L598:
6028:.\ff.c        **** 		if (f & 8) str[i++] = '-';
 7069              		.loc 1 6028 0 is_stmt 1
 7070 01ba 17F0080F 		tst	r7, #8
 7071 01be 06D0     		beq	.L600
 7072              		.loc 1 6028 0 is_stmt 0 discriminator 1
 7073 01c0 2B46     		mov	r3, r5
 7074              	.LVL1064:
 7075 01c2 1CAA     		add	r2, sp, #112
 7076 01c4 1344     		add	r3, r3, r2
 7077              	.LVL1065:
 7078 01c6 0135     		adds	r5, r5, #1
 7079              	.LVL1066:
 7080 01c8 2D22     		movs	r2, #45
 7081 01ca 03F8702C 		strb	r2, [r3, #-112]
 7082              	.LVL1067:
 7083              	.L600:
6029:.\ff.c        **** 		j = i; d = (f & 1) ? '0' : ' ';
 7084              		.loc 1 6029 0 is_stmt 1
 7085 01ce 17F0010F 		tst	r7, #1
 7086 01d2 02D0     		beq	.L613
 7087 01d4 4FF0300A 		mov	r10, #48
 7088 01d8 01E0     		b	.L601
 7089              	.L613:
 7090 01da 4FF0200A 		mov	r10, #32
 7091              	.L601:
 7092              	.LVL1068:
 7093              		.loc 1 6029 0 is_stmt 0 discriminator 4
 7094 01de A846     		mov	r8, r5
 7095              	.LVL1069:
6030:.\ff.c        **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 7096              		.loc 1 6030 0 is_stmt 1 discriminator 4
 7097 01e0 04E0     		b	.L602
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 250


 7098              	.LVL1070:
 7099              	.L604:
 7100              		.loc 1 6030 0 is_stmt 0 discriminator 3
 7101 01e2 08A8     		add	r0, sp, #32
 7102 01e4 5146     		mov	r1, r10
 7103 01e6 FFF7FEFF 		bl	putc_bfd
 7104              	.LVL1071:
 7105 01ea C846     		mov	r8, r9
 7106              	.LVL1072:
 7107              	.L602:
 7108              		.loc 1 6030 0 discriminator 1
 7109 01ec 17F0020F 		tst	r7, #2
 7110 01f0 04D1     		bne	.L605
 7111              		.loc 1 6030 0 discriminator 2
 7112 01f2 08F10109 		add	r9, r8, #1
 7113              	.LVL1073:
 7114 01f6 A045     		cmp	r8, r4
 7115 01f8 F3D3     		bcc	.L604
 7116              		.loc 1 6030 0
 7117 01fa C846     		mov	r8, r9
 7118              	.LVL1074:
 7119              	.L605:
6031:.\ff.c        **** 		do putc_bfd(&pb, str[--i]); while (i);
 7120              		.loc 1 6031 0 is_stmt 1 discriminator 1
 7121 01fc 013D     		subs	r5, r5, #1
 7122              	.LVL1075:
 7123 01fe 1CAB     		add	r3, sp, #112
 7124 0200 2B44     		add	r3, r3, r5
 7125 0202 08A8     		add	r0, sp, #32
 7126 0204 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 7127 0208 FFF7FEFF 		bl	putc_bfd
 7128              	.LVL1076:
 7129 020c 002D     		cmp	r5, #0
 7130 020e F5D1     		bne	.L605
 7131 0210 04E0     		b	.L606
 7132              	.LVL1077:
 7133              	.L607:
6032:.\ff.c        **** 		while (j++ < w) putc_bfd(&pb, d);
 7134              		.loc 1 6032 0 discriminator 2
 7135 0212 08A8     		add	r0, sp, #32
 7136 0214 5146     		mov	r1, r10
 7137 0216 FFF7FEFF 		bl	putc_bfd
 7138              	.LVL1078:
 7139 021a A846     		mov	r8, r5
 7140              	.LVL1079:
 7141              	.L606:
 7142              		.loc 1 6032 0 is_stmt 0 discriminator 1
 7143 021c 08F10105 		add	r5, r8, #1
 7144              	.LVL1080:
 7145 0220 A045     		cmp	r8, r4
 7146 0222 F6D3     		bcc	.L607
 7147 0224 F8E6     		b	.L563
 7148              	.LVL1081:
 7149              	.L564:
6033:.\ff.c        **** 	}
6034:.\ff.c        **** 
6035:.\ff.c        **** 	va_end(arp);
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 251


6036:.\ff.c        **** 
6037:.\ff.c        **** 	return putc_flush(&pb);
 7150              		.loc 1 6037 0 is_stmt 1
 7151 0226 08A8     		add	r0, sp, #32
 7152 0228 FFF7FEFF 		bl	putc_flush
 7153              	.LVL1082:
6038:.\ff.c        **** }
 7154              		.loc 1 6038 0
 7155 022c 1DB0     		add	sp, sp, #116
 7156              		.cfi_def_cfa_offset 44
 7157              		@ sp needed
 7158 022e BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 7159              		.cfi_restore 14
 7160              		.cfi_restore 10
 7161              		.cfi_restore 9
 7162              		.cfi_restore 8
 7163              		.cfi_restore 7
 7164              		.cfi_restore 6
 7165              		.cfi_restore 5
 7166              		.cfi_restore 4
 7167              		.cfi_def_cfa_offset 12
 7168 0232 03B0     		add	sp, sp, #12
 7169              		.cfi_restore 3
 7170              		.cfi_restore 2
 7171              		.cfi_restore 1
 7172              		.cfi_def_cfa_offset 0
 7173 0234 7047     		bx	lr
 7174              		.cfi_endproc
 7175              	.LFE54:
 7176              		.size	f_printf, .-f_printf
 7177 0236 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 7178              		.align	2
 7179              	.LC0:
 7180 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 7180      3A3B3C3D 
 7180      3E3F5B5D 
 7180      7C7F00
 7181 000f 00       		.bss
 7182              		.align	2
 7183              		.set	.LANCHOR0,. + 0
 7184              		.type	FatFs, %object
 7185              		.size	FatFs, 4
 7186              	FatFs:
 7187 0000 00000000 		.space	4
 7188              		.type	Fsid, %object
 7189              		.size	Fsid, 2
 7190              	Fsid:
 7191 0004 0000     		.space	2
 7192 0006 0000     		.text
 7193              	.Letext0:
 7194              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 7195              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 7196              		.file 4 ".\\integer.h"
 7197              		.file 5 ".\\ff.h"
 7198              		.file 6 ".\\diskio.h"
 7199              		.file 7 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 7200              		.file 8 "<built-in>"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 252


 7201              		.section	.debug_info,"",%progbits
 7202              	.Ldebug_info0:
 7203 0000 9E320000 		.4byte	0x329e
 7204 0004 0400     		.2byte	0x4
 7205 0006 00000000 		.4byte	.Ldebug_abbrev0
 7206 000a 04       		.byte	0x4
 7207 000b 01       		.uleb128 0x1
 7208 000c 1A060000 		.4byte	.LASF178
 7209 0010 01       		.byte	0x1
 7210 0011 62020000 		.4byte	.LASF179
 7211 0015 97020000 		.4byte	.LASF180
 7212 0019 00000000 		.4byte	.Ldebug_ranges0+0
 7213 001d 00000000 		.4byte	0
 7214 0021 00000000 		.4byte	.Ldebug_line0
 7215 0025 02       		.uleb128 0x2
 7216 0026 01       		.byte	0x1
 7217 0027 06       		.byte	0x6
 7218 0028 EF000000 		.4byte	.LASF0
 7219 002c 03       		.uleb128 0x3
 7220 002d 45000000 		.4byte	.LASF3
 7221 0031 02       		.byte	0x2
 7222 0032 1D       		.byte	0x1d
 7223 0033 37000000 		.4byte	0x37
 7224 0037 02       		.uleb128 0x2
 7225 0038 01       		.byte	0x1
 7226 0039 08       		.byte	0x8
 7227 003a 8A040000 		.4byte	.LASF1
 7228 003e 02       		.uleb128 0x2
 7229 003f 02       		.byte	0x2
 7230 0040 05       		.byte	0x5
 7231 0041 AB040000 		.4byte	.LASF2
 7232 0045 03       		.uleb128 0x3
 7233 0046 69050000 		.4byte	.LASF4
 7234 004a 02       		.byte	0x2
 7235 004b 2B       		.byte	0x2b
 7236 004c 50000000 		.4byte	0x50
 7237 0050 02       		.uleb128 0x2
 7238 0051 02       		.byte	0x2
 7239 0052 07       		.byte	0x7
 7240 0053 E9020000 		.4byte	.LASF5
 7241 0057 02       		.uleb128 0x2
 7242 0058 04       		.byte	0x4
 7243 0059 05       		.byte	0x5
 7244 005a 24010000 		.4byte	.LASF6
 7245 005e 03       		.uleb128 0x3
 7246 005f E0010000 		.4byte	.LASF7
 7247 0063 02       		.byte	0x2
 7248 0064 41       		.byte	0x41
 7249 0065 69000000 		.4byte	0x69
 7250 0069 02       		.uleb128 0x2
 7251 006a 04       		.byte	0x4
 7252 006b 07       		.byte	0x7
 7253 006c 74020000 		.4byte	.LASF8
 7254 0070 02       		.uleb128 0x2
 7255 0071 08       		.byte	0x8
 7256 0072 05       		.byte	0x5
 7257 0073 E1000000 		.4byte	.LASF9
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 253


 7258 0077 02       		.uleb128 0x2
 7259 0078 08       		.byte	0x8
 7260 0079 07       		.byte	0x7
 7261 007a 84000000 		.4byte	.LASF10
 7262 007e 04       		.uleb128 0x4
 7263 007f 04       		.byte	0x4
 7264 0080 05       		.byte	0x5
 7265 0081 696E7400 		.ascii	"int\000"
 7266 0085 02       		.uleb128 0x2
 7267 0086 04       		.byte	0x4
 7268 0087 07       		.byte	0x7
 7269 0088 4B020000 		.4byte	.LASF11
 7270 008c 03       		.uleb128 0x3
 7271 008d C7060000 		.4byte	.LASF12
 7272 0091 03       		.byte	0x3
 7273 0092 15       		.byte	0x15
 7274 0093 2C000000 		.4byte	0x2c
 7275 0097 03       		.uleb128 0x3
 7276 0098 6F010000 		.4byte	.LASF13
 7277 009c 03       		.byte	0x3
 7278 009d 21       		.byte	0x21
 7279 009e 45000000 		.4byte	0x45
 7280 00a2 03       		.uleb128 0x3
 7281 00a3 35050000 		.4byte	.LASF14
 7282 00a7 03       		.byte	0x3
 7283 00a8 2D       		.byte	0x2d
 7284 00a9 5E000000 		.4byte	0x5e
 7285 00ad 03       		.uleb128 0x3
 7286 00ae 69020000 		.4byte	.LASF15
 7287 00b2 04       		.byte	0x4
 7288 00b3 15       		.byte	0x15
 7289 00b4 A2000000 		.4byte	0xa2
 7290 00b8 03       		.uleb128 0x3
 7291 00b9 0B020000 		.4byte	.LASF16
 7292 00bd 04       		.byte	0x4
 7293 00be 18       		.byte	0x18
 7294 00bf 8C000000 		.4byte	0x8c
 7295 00c3 03       		.uleb128 0x3
 7296 00c4 F4030000 		.4byte	.LASF17
 7297 00c8 04       		.byte	0x4
 7298 00c9 1C       		.byte	0x1c
 7299 00ca 97000000 		.4byte	0x97
 7300 00ce 03       		.uleb128 0x3
 7301 00cf 9C010000 		.4byte	.LASF18
 7302 00d3 04       		.byte	0x4
 7303 00d4 21       		.byte	0x21
 7304 00d5 A2000000 		.4byte	0xa2
 7305 00d9 03       		.uleb128 0x3
 7306 00da 18040000 		.4byte	.LASF19
 7307 00de 05       		.byte	0x5
 7308 00df 45       		.byte	0x45
 7309 00e0 E4000000 		.4byte	0xe4
 7310 00e4 02       		.uleb128 0x2
 7311 00e5 01       		.byte	0x1
 7312 00e6 08       		.byte	0x8
 7313 00e7 58050000 		.4byte	.LASF20
 7314 00eb 03       		.uleb128 0x3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 254


 7315 00ec AA010000 		.4byte	.LASF21
 7316 00f0 05       		.byte	0x5
 7317 00f1 55       		.byte	0x55
 7318 00f2 CE000000 		.4byte	0xce
 7319 00f6 05       		.uleb128 0x5
 7320 00f7 3002     		.2byte	0x230
 7321 00f9 05       		.byte	0x5
 7322 00fa 5C       		.byte	0x5c
 7323 00fb D7010000 		.4byte	0x1d7
 7324 00ff 06       		.uleb128 0x6
 7325 0100 29000000 		.4byte	.LASF22
 7326 0104 05       		.byte	0x5
 7327 0105 5D       		.byte	0x5d
 7328 0106 B8000000 		.4byte	0xb8
 7329 010a 00       		.byte	0
 7330 010b 07       		.uleb128 0x7
 7331 010c 64727600 		.ascii	"drv\000"
 7332 0110 05       		.byte	0x5
 7333 0111 5E       		.byte	0x5e
 7334 0112 B8000000 		.4byte	0xb8
 7335 0116 01       		.byte	0x1
 7336 0117 06       		.uleb128 0x6
 7337 0118 4E010000 		.4byte	.LASF23
 7338 011c 05       		.byte	0x5
 7339 011d 5F       		.byte	0x5f
 7340 011e B8000000 		.4byte	0xb8
 7341 0122 02       		.byte	0x2
 7342 0123 06       		.uleb128 0x6
 7343 0124 2F050000 		.4byte	.LASF24
 7344 0128 05       		.byte	0x5
 7345 0129 60       		.byte	0x60
 7346 012a B8000000 		.4byte	0xb8
 7347 012e 03       		.byte	0x3
 7348 012f 06       		.uleb128 0x6
 7349 0130 FA050000 		.4byte	.LASF25
 7350 0134 05       		.byte	0x5
 7351 0135 61       		.byte	0x61
 7352 0136 B8000000 		.4byte	0xb8
 7353 013a 04       		.byte	0x4
 7354 013b 07       		.uleb128 0x7
 7355 013c 696400   		.ascii	"id\000"
 7356 013f 05       		.byte	0x5
 7357 0140 62       		.byte	0x62
 7358 0141 C3000000 		.4byte	0xc3
 7359 0145 06       		.byte	0x6
 7360 0146 06       		.uleb128 0x6
 7361 0147 62000000 		.4byte	.LASF26
 7362 014b 05       		.byte	0x5
 7363 014c 63       		.byte	0x63
 7364 014d C3000000 		.4byte	0xc3
 7365 0151 08       		.byte	0x8
 7366 0152 06       		.uleb128 0x6
 7367 0153 EB010000 		.4byte	.LASF27
 7368 0157 05       		.byte	0x5
 7369 0158 64       		.byte	0x64
 7370 0159 C3000000 		.4byte	0xc3
 7371 015d 0A       		.byte	0xa
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 255


 7372 015e 06       		.uleb128 0x6
 7373 015f 36040000 		.4byte	.LASF28
 7374 0163 05       		.byte	0x5
 7375 0164 72       		.byte	0x72
 7376 0165 CE000000 		.4byte	0xce
 7377 0169 0C       		.byte	0xc
 7378 016a 06       		.uleb128 0x6
 7379 016b 01020000 		.4byte	.LASF29
 7380 016f 05       		.byte	0x5
 7381 0170 73       		.byte	0x73
 7382 0171 CE000000 		.4byte	0xce
 7383 0175 10       		.byte	0x10
 7384 0176 06       		.uleb128 0x6
 7385 0177 1B010000 		.4byte	.LASF30
 7386 017b 05       		.byte	0x5
 7387 017c 7D       		.byte	0x7d
 7388 017d CE000000 		.4byte	0xce
 7389 0181 14       		.byte	0x14
 7390 0182 06       		.uleb128 0x6
 7391 0183 15010000 		.4byte	.LASF31
 7392 0187 05       		.byte	0x5
 7393 0188 7E       		.byte	0x7e
 7394 0189 CE000000 		.4byte	0xce
 7395 018d 18       		.byte	0x18
 7396 018e 06       		.uleb128 0x6
 7397 018f AB050000 		.4byte	.LASF32
 7398 0193 05       		.byte	0x5
 7399 0194 7F       		.byte	0x7f
 7400 0195 CE000000 		.4byte	0xce
 7401 0199 1C       		.byte	0x1c
 7402 019a 06       		.uleb128 0x6
 7403 019b 94010000 		.4byte	.LASF33
 7404 019f 05       		.byte	0x5
 7405 01a0 80       		.byte	0x80
 7406 01a1 CE000000 		.4byte	0xce
 7407 01a5 20       		.byte	0x20
 7408 01a6 06       		.uleb128 0x6
 7409 01a7 D0000000 		.4byte	.LASF34
 7410 01ab 05       		.byte	0x5
 7411 01ac 81       		.byte	0x81
 7412 01ad CE000000 		.4byte	0xce
 7413 01b1 24       		.byte	0x24
 7414 01b2 06       		.uleb128 0x6
 7415 01b3 FC020000 		.4byte	.LASF35
 7416 01b7 05       		.byte	0x5
 7417 01b8 82       		.byte	0x82
 7418 01b9 CE000000 		.4byte	0xce
 7419 01bd 28       		.byte	0x28
 7420 01be 06       		.uleb128 0x6
 7421 01bf 42030000 		.4byte	.LASF36
 7422 01c3 05       		.byte	0x5
 7423 01c4 83       		.byte	0x83
 7424 01c5 CE000000 		.4byte	0xce
 7425 01c9 2C       		.byte	0x2c
 7426 01ca 07       		.uleb128 0x7
 7427 01cb 77696E00 		.ascii	"win\000"
 7428 01cf 05       		.byte	0x5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 256


 7429 01d0 84       		.byte	0x84
 7430 01d1 D7010000 		.4byte	0x1d7
 7431 01d5 30       		.byte	0x30
 7432 01d6 00       		.byte	0
 7433 01d7 08       		.uleb128 0x8
 7434 01d8 B8000000 		.4byte	0xb8
 7435 01dc E8010000 		.4byte	0x1e8
 7436 01e0 09       		.uleb128 0x9
 7437 01e1 E8010000 		.4byte	0x1e8
 7438 01e5 FF01     		.2byte	0x1ff
 7439 01e7 00       		.byte	0
 7440 01e8 02       		.uleb128 0x2
 7441 01e9 04       		.byte	0x4
 7442 01ea 07       		.byte	0x7
 7443 01eb CD030000 		.4byte	.LASF37
 7444 01ef 03       		.uleb128 0x3
 7445 01f0 9C030000 		.4byte	.LASF38
 7446 01f4 05       		.byte	0x5
 7447 01f5 85       		.byte	0x85
 7448 01f6 F6000000 		.4byte	0xf6
 7449 01fa 0A       		.uleb128 0xa
 7450 01fb 10       		.byte	0x10
 7451 01fc 05       		.byte	0x5
 7452 01fd 8B       		.byte	0x8b
 7453 01fe 49020000 		.4byte	0x249
 7454 0202 07       		.uleb128 0x7
 7455 0203 667300   		.ascii	"fs\000"
 7456 0206 05       		.byte	0x5
 7457 0207 8C       		.byte	0x8c
 7458 0208 49020000 		.4byte	0x249
 7459 020c 00       		.byte	0
 7460 020d 07       		.uleb128 0x7
 7461 020e 696400   		.ascii	"id\000"
 7462 0211 05       		.byte	0x5
 7463 0212 8D       		.byte	0x8d
 7464 0213 C3000000 		.4byte	0xc3
 7465 0217 04       		.byte	0x4
 7466 0218 06       		.uleb128 0x6
 7467 0219 29020000 		.4byte	.LASF39
 7468 021d 05       		.byte	0x5
 7469 021e 8E       		.byte	0x8e
 7470 021f B8000000 		.4byte	0xb8
 7471 0223 06       		.byte	0x6
 7472 0224 06       		.uleb128 0x6
 7473 0225 E1060000 		.4byte	.LASF40
 7474 0229 05       		.byte	0x5
 7475 022a 8F       		.byte	0x8f
 7476 022b B8000000 		.4byte	0xb8
 7477 022f 07       		.byte	0x7
 7478 0230 06       		.uleb128 0x6
 7479 0231 F9030000 		.4byte	.LASF41
 7480 0235 05       		.byte	0x5
 7481 0236 90       		.byte	0x90
 7482 0237 CE000000 		.4byte	0xce
 7483 023b 08       		.byte	0x8
 7484 023c 06       		.uleb128 0x6
 7485 023d 57040000 		.4byte	.LASF42
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 257


 7486 0241 05       		.byte	0x5
 7487 0242 91       		.byte	0x91
 7488 0243 EB000000 		.4byte	0xeb
 7489 0247 0C       		.byte	0xc
 7490 0248 00       		.byte	0
 7491 0249 0B       		.uleb128 0xb
 7492 024a 04       		.byte	0x4
 7493 024b EF010000 		.4byte	0x1ef
 7494 024f 03       		.uleb128 0x3
 7495 0250 B6060000 		.4byte	.LASF43
 7496 0254 05       		.byte	0x5
 7497 0255 9B       		.byte	0x9b
 7498 0256 FA010000 		.4byte	0x1fa
 7499 025a 05       		.uleb128 0x5
 7500 025b 2802     		.2byte	0x228
 7501 025d 05       		.byte	0x5
 7502 025e A1       		.byte	0xa1
 7503 025f D0020000 		.4byte	0x2d0
 7504 0263 07       		.uleb128 0x7
 7505 0264 6F626A00 		.ascii	"obj\000"
 7506 0268 05       		.byte	0x5
 7507 0269 A2       		.byte	0xa2
 7508 026a 4F020000 		.4byte	0x24f
 7509 026e 00       		.byte	0
 7510 026f 06       		.uleb128 0x6
 7511 0270 C8040000 		.4byte	.LASF44
 7512 0274 05       		.byte	0x5
 7513 0275 A3       		.byte	0xa3
 7514 0276 B8000000 		.4byte	0xb8
 7515 027a 10       		.byte	0x10
 7516 027b 07       		.uleb128 0x7
 7517 027c 65727200 		.ascii	"err\000"
 7518 0280 05       		.byte	0x5
 7519 0281 A4       		.byte	0xa4
 7520 0282 B8000000 		.4byte	0xb8
 7521 0286 11       		.byte	0x11
 7522 0287 06       		.uleb128 0x6
 7523 0288 B5030000 		.4byte	.LASF45
 7524 028c 05       		.byte	0x5
 7525 028d A5       		.byte	0xa5
 7526 028e EB000000 		.4byte	0xeb
 7527 0292 14       		.byte	0x14
 7528 0293 06       		.uleb128 0x6
 7529 0294 40070000 		.4byte	.LASF46
 7530 0298 05       		.byte	0x5
 7531 0299 A6       		.byte	0xa6
 7532 029a CE000000 		.4byte	0xce
 7533 029e 18       		.byte	0x18
 7534 029f 06       		.uleb128 0x6
 7535 02a0 A4000000 		.4byte	.LASF47
 7536 02a4 05       		.byte	0x5
 7537 02a5 A7       		.byte	0xa7
 7538 02a6 CE000000 		.4byte	0xce
 7539 02aa 1C       		.byte	0x1c
 7540 02ab 06       		.uleb128 0x6
 7541 02ac C7000000 		.4byte	.LASF48
 7542 02b0 05       		.byte	0x5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 258


 7543 02b1 A9       		.byte	0xa9
 7544 02b2 CE000000 		.4byte	0xce
 7545 02b6 20       		.byte	0x20
 7546 02b7 06       		.uleb128 0x6
 7547 02b8 21020000 		.4byte	.LASF49
 7548 02bc 05       		.byte	0x5
 7549 02bd AA       		.byte	0xaa
 7550 02be D0020000 		.4byte	0x2d0
 7551 02c2 24       		.byte	0x24
 7552 02c3 07       		.uleb128 0x7
 7553 02c4 62756600 		.ascii	"buf\000"
 7554 02c8 05       		.byte	0x5
 7555 02c9 B0       		.byte	0xb0
 7556 02ca D7010000 		.4byte	0x1d7
 7557 02ce 28       		.byte	0x28
 7558 02cf 00       		.byte	0
 7559 02d0 0B       		.uleb128 0xb
 7560 02d1 04       		.byte	0x4
 7561 02d2 B8000000 		.4byte	0xb8
 7562 02d6 0C       		.uleb128 0xc
 7563 02d7 46494C00 		.ascii	"FIL\000"
 7564 02db 05       		.byte	0x5
 7565 02dc B2       		.byte	0xb2
 7566 02dd 5A020000 		.4byte	0x25a
 7567 02e1 0A       		.uleb128 0xa
 7568 02e2 2C       		.byte	0x2c
 7569 02e3 05       		.byte	0x5
 7570 02e4 B8       		.byte	0xb8
 7571 02e5 31030000 		.4byte	0x331
 7572 02e9 07       		.uleb128 0x7
 7573 02ea 6F626A00 		.ascii	"obj\000"
 7574 02ee 05       		.byte	0x5
 7575 02ef B9       		.byte	0xb9
 7576 02f0 4F020000 		.4byte	0x24f
 7577 02f4 00       		.byte	0
 7578 02f5 06       		.uleb128 0x6
 7579 02f6 06050000 		.4byte	.LASF50
 7580 02fa 05       		.byte	0x5
 7581 02fb BA       		.byte	0xba
 7582 02fc CE000000 		.4byte	0xce
 7583 0300 10       		.byte	0x10
 7584 0301 06       		.uleb128 0x6
 7585 0302 40070000 		.4byte	.LASF46
 7586 0306 05       		.byte	0x5
 7587 0307 BB       		.byte	0xbb
 7588 0308 CE000000 		.4byte	0xce
 7589 030c 14       		.byte	0x14
 7590 030d 06       		.uleb128 0x6
 7591 030e A4000000 		.4byte	.LASF47
 7592 0312 05       		.byte	0x5
 7593 0313 BC       		.byte	0xbc
 7594 0314 CE000000 		.4byte	0xce
 7595 0318 18       		.byte	0x18
 7596 0319 07       		.uleb128 0x7
 7597 031a 64697200 		.ascii	"dir\000"
 7598 031e 05       		.byte	0x5
 7599 031f BD       		.byte	0xbd
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 259


 7600 0320 D0020000 		.4byte	0x2d0
 7601 0324 1C       		.byte	0x1c
 7602 0325 07       		.uleb128 0x7
 7603 0326 666E00   		.ascii	"fn\000"
 7604 0329 05       		.byte	0x5
 7605 032a BE       		.byte	0xbe
 7606 032b 31030000 		.4byte	0x331
 7607 032f 20       		.byte	0x20
 7608 0330 00       		.byte	0
 7609 0331 08       		.uleb128 0x8
 7610 0332 B8000000 		.4byte	0xb8
 7611 0336 41030000 		.4byte	0x341
 7612 033a 0D       		.uleb128 0xd
 7613 033b E8010000 		.4byte	0x1e8
 7614 033f 0B       		.byte	0xb
 7615 0340 00       		.byte	0
 7616 0341 0C       		.uleb128 0xc
 7617 0342 44495200 		.ascii	"DIR\000"
 7618 0346 05       		.byte	0x5
 7619 0347 C5       		.byte	0xc5
 7620 0348 E1020000 		.4byte	0x2e1
 7621 034c 0A       		.uleb128 0xa
 7622 034d 18       		.byte	0x18
 7623 034e 05       		.byte	0x5
 7624 034f CB       		.byte	0xcb
 7625 0350 91030000 		.4byte	0x391
 7626 0354 06       		.uleb128 0x6
 7627 0355 15010000 		.4byte	.LASF31
 7628 0359 05       		.byte	0x5
 7629 035a CC       		.byte	0xcc
 7630 035b EB000000 		.4byte	0xeb
 7631 035f 00       		.byte	0
 7632 0360 06       		.uleb128 0x6
 7633 0361 AA030000 		.4byte	.LASF51
 7634 0365 05       		.byte	0x5
 7635 0366 CD       		.byte	0xcd
 7636 0367 C3000000 		.4byte	0xc3
 7637 036b 04       		.byte	0x4
 7638 036c 06       		.uleb128 0x6
 7639 036d 6E020000 		.4byte	.LASF52
 7640 0371 05       		.byte	0x5
 7641 0372 CE       		.byte	0xce
 7642 0373 C3000000 		.4byte	0xc3
 7643 0377 06       		.byte	0x6
 7644 0378 06       		.uleb128 0x6
 7645 0379 12060000 		.4byte	.LASF53
 7646 037d 05       		.byte	0x5
 7647 037e CF       		.byte	0xcf
 7648 037f B8000000 		.4byte	0xb8
 7649 0383 08       		.byte	0x8
 7650 0384 06       		.uleb128 0x6
 7651 0385 6F030000 		.4byte	.LASF54
 7652 0389 05       		.byte	0x5
 7653 038a D4       		.byte	0xd4
 7654 038b 91030000 		.4byte	0x391
 7655 038f 09       		.byte	0x9
 7656 0390 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 260


 7657 0391 08       		.uleb128 0x8
 7658 0392 D9000000 		.4byte	0xd9
 7659 0396 A1030000 		.4byte	0x3a1
 7660 039a 0D       		.uleb128 0xd
 7661 039b E8010000 		.4byte	0x1e8
 7662 039f 0C       		.byte	0xc
 7663 03a0 00       		.byte	0
 7664 03a1 03       		.uleb128 0x3
 7665 03a2 CC010000 		.4byte	.LASF55
 7666 03a6 05       		.byte	0x5
 7667 03a7 D6       		.byte	0xd6
 7668 03a8 4C030000 		.4byte	0x34c
 7669 03ac 0E       		.uleb128 0xe
 7670 03ad 01       		.byte	0x1
 7671 03ae 05       		.byte	0x5
 7672 03af DC       		.byte	0xdc
 7673 03b0 2D040000 		.4byte	0x42d
 7674 03b4 0F       		.uleb128 0xf
 7675 03b5 74050000 		.4byte	.LASF56
 7676 03b9 00       		.sleb128 0
 7677 03ba 0F       		.uleb128 0xf
 7678 03bb 36030000 		.4byte	.LASF57
 7679 03bf 01       		.sleb128 1
 7680 03c0 0F       		.uleb128 0xf
 7681 03c1 22030000 		.4byte	.LASF58
 7682 03c5 02       		.sleb128 2
 7683 03c6 0F       		.uleb128 0xf
 7684 03c7 24070000 		.4byte	.LASF59
 7685 03cb 03       		.sleb128 3
 7686 03cc 0F       		.uleb128 0xf
 7687 03cd 07040000 		.4byte	.LASF60
 7688 03d1 04       		.sleb128 4
 7689 03d2 0F       		.uleb128 0xf
 7690 03d3 0E070000 		.4byte	.LASF61
 7691 03d7 05       		.sleb128 5
 7692 03d8 0F       		.uleb128 0xf
 7693 03d9 CA050000 		.4byte	.LASF62
 7694 03dd 06       		.sleb128 6
 7695 03de 0F       		.uleb128 0xf
 7696 03df F3040000 		.4byte	.LASF63
 7697 03e3 07       		.sleb128 7
 7698 03e4 0F       		.uleb128 0xf
 7699 03e5 8B010000 		.4byte	.LASF64
 7700 03e9 08       		.sleb128 8
 7701 03ea 0F       		.uleb128 0xf
 7702 03eb A9000000 		.4byte	.LASF65
 7703 03ef 09       		.sleb128 9
 7704 03f0 0F       		.uleb128 0xf
 7705 03f1 7E030000 		.4byte	.LASF66
 7706 03f5 0A       		.sleb128 10
 7707 03f6 0F       		.uleb128 0xf
 7708 03f7 E2040000 		.4byte	.LASF67
 7709 03fb 0B       		.sleb128 11
 7710 03fc 0F       		.uleb128 0xf
 7711 03fd 27040000 		.4byte	.LASF68
 7712 0401 0C       		.sleb128 12
 7713 0402 0F       		.uleb128 0xf
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 261


 7714 0403 5E010000 		.4byte	.LASF69
 7715 0407 0D       		.sleb128 13
 7716 0408 0F       		.uleb128 0xf
 7717 0409 0B050000 		.4byte	.LASF70
 7718 040d 0E       		.sleb128 14
 7719 040e 0F       		.uleb128 0xf
 7720 040f E9030000 		.4byte	.LASF71
 7721 0413 0F       		.sleb128 15
 7722 0414 0F       		.uleb128 0xf
 7723 0415 25050000 		.4byte	.LASF72
 7724 0419 10       		.sleb128 16
 7725 041a 0F       		.uleb128 0xf
 7726 041b 78010000 		.4byte	.LASF73
 7727 041f 11       		.sleb128 17
 7728 0420 0F       		.uleb128 0xf
 7729 0421 0A000000 		.4byte	.LASF74
 7730 0425 12       		.sleb128 18
 7731 0426 0F       		.uleb128 0xf
 7732 0427 00010000 		.4byte	.LASF75
 7733 042b 13       		.sleb128 19
 7734 042c 00       		.byte	0
 7735 042d 03       		.uleb128 0x3
 7736 042e E6060000 		.4byte	.LASF76
 7737 0432 05       		.byte	0x5
 7738 0433 F1       		.byte	0xf1
 7739 0434 AC030000 		.4byte	0x3ac
 7740 0438 03       		.uleb128 0x3
 7741 0439 97050000 		.4byte	.LASF77
 7742 043d 06       		.byte	0x6
 7743 043e 10       		.byte	0x10
 7744 043f B8000000 		.4byte	0xb8
 7745 0443 0E       		.uleb128 0xe
 7746 0444 01       		.byte	0x1
 7747 0445 06       		.byte	0x6
 7748 0446 13       		.byte	0x13
 7749 0447 6A040000 		.4byte	0x46a
 7750 044b 0F       		.uleb128 0xf
 7751 044c 00040000 		.4byte	.LASF78
 7752 0450 00       		.sleb128 0
 7753 0451 0F       		.uleb128 0xf
 7754 0452 EE060000 		.4byte	.LASF79
 7755 0456 01       		.sleb128 1
 7756 0457 0F       		.uleb128 0xf
 7757 0458 00000000 		.4byte	.LASF80
 7758 045c 02       		.sleb128 2
 7759 045d 0F       		.uleb128 0xf
 7760 045e 57000000 		.4byte	.LASF81
 7761 0462 03       		.sleb128 3
 7762 0463 0F       		.uleb128 0xf
 7763 0464 43010000 		.4byte	.LASF82
 7764 0468 04       		.sleb128 4
 7765 0469 00       		.byte	0
 7766 046a 03       		.uleb128 0x3
 7767 046b 47050000 		.4byte	.LASF83
 7768 046f 06       		.byte	0x6
 7769 0470 19       		.byte	0x19
 7770 0471 43040000 		.4byte	0x443
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 262


 7771 0475 0B       		.uleb128 0xb
 7772 0476 04       		.byte	0x4
 7773 0477 7B040000 		.4byte	0x47b
 7774 047b 10       		.uleb128 0x10
 7775 047c B8000000 		.4byte	0xb8
 7776 0480 03       		.uleb128 0x3
 7777 0481 F8060000 		.4byte	.LASF84
 7778 0485 07       		.byte	0x7
 7779 0486 28       		.byte	0x28
 7780 0487 8B040000 		.4byte	0x48b
 7781 048b 11       		.uleb128 0x11
 7782 048c B2010000 		.4byte	.LASF181
 7783 0490 04       		.byte	0x4
 7784 0491 08       		.byte	0x8
 7785 0492 00       		.byte	0
 7786 0493 A2040000 		.4byte	0x4a2
 7787 0497 12       		.uleb128 0x12
 7788 0498 BB050000 		.4byte	.LASF182
 7789 049c A2040000 		.4byte	0x4a2
 7790 04a0 00       		.byte	0
 7791 04a1 00       		.byte	0
 7792 04a2 13       		.uleb128 0x13
 7793 04a3 04       		.byte	0x4
 7794 04a4 03       		.uleb128 0x3
 7795 04a5 4F000000 		.4byte	.LASF85
 7796 04a9 07       		.byte	0x7
 7797 04aa 62       		.byte	0x62
 7798 04ab 80040000 		.4byte	0x480
 7799 04af 14       		.uleb128 0x14
 7800 04b0 4C       		.byte	0x4c
 7801 04b1 01       		.byte	0x1
 7802 04b2 BA16     		.2byte	0x16ba
 7803 04b4 EC040000 		.4byte	0x4ec
 7804 04b8 15       		.uleb128 0x15
 7805 04b9 667000   		.ascii	"fp\000"
 7806 04bc 01       		.byte	0x1
 7807 04bd BB16     		.2byte	0x16bb
 7808 04bf EC040000 		.4byte	0x4ec
 7809 04c3 00       		.byte	0
 7810 04c4 15       		.uleb128 0x15
 7811 04c5 69647800 		.ascii	"idx\000"
 7812 04c9 01       		.byte	0x1
 7813 04ca BC16     		.2byte	0x16bc
 7814 04cc 7E000000 		.4byte	0x7e
 7815 04d0 04       		.byte	0x4
 7816 04d1 16       		.uleb128 0x16
 7817 04d2 92020000 		.4byte	.LASF86
 7818 04d6 01       		.byte	0x1
 7819 04d7 BC16     		.2byte	0x16bc
 7820 04d9 7E000000 		.4byte	0x7e
 7821 04dd 08       		.byte	0x8
 7822 04de 15       		.uleb128 0x15
 7823 04df 62756600 		.ascii	"buf\000"
 7824 04e3 01       		.byte	0x1
 7825 04e4 BD16     		.2byte	0x16bd
 7826 04e6 F2040000 		.4byte	0x4f2
 7827 04ea 0C       		.byte	0xc
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 263


 7828 04eb 00       		.byte	0
 7829 04ec 0B       		.uleb128 0xb
 7830 04ed 04       		.byte	0x4
 7831 04ee D6020000 		.4byte	0x2d6
 7832 04f2 08       		.uleb128 0x8
 7833 04f3 B8000000 		.4byte	0xb8
 7834 04f7 02050000 		.4byte	0x502
 7835 04fb 0D       		.uleb128 0xd
 7836 04fc E8010000 		.4byte	0x1e8
 7837 0500 3F       		.byte	0x3f
 7838 0501 00       		.byte	0
 7839 0502 17       		.uleb128 0x17
 7840 0503 19020000 		.4byte	.LASF87
 7841 0507 01       		.byte	0x1
 7842 0508 BE16     		.2byte	0x16be
 7843 050a AF040000 		.4byte	0x4af
 7844 050e 18       		.uleb128 0x18
 7845 050f B3050000 		.4byte	.LASF88
 7846 0513 01       		.byte	0x1
 7847 0514 5A02     		.2byte	0x25a
 7848 0516 C3000000 		.4byte	0xc3
 7849 051a 00000000 		.4byte	.LFB0
 7850 051e 0A000000 		.4byte	.LFE0-.LFB0
 7851 0522 01       		.uleb128 0x1
 7852 0523 9C       		.byte	0x9c
 7853 0524 48050000 		.4byte	0x548
 7854 0528 19       		.uleb128 0x19
 7855 0529 70747200 		.ascii	"ptr\000"
 7856 052d 01       		.byte	0x1
 7857 052e 5A02     		.2byte	0x25a
 7858 0530 75040000 		.4byte	0x475
 7859 0534 00000000 		.4byte	.LLST0
 7860 0538 1A       		.uleb128 0x1a
 7861 0539 727600   		.ascii	"rv\000"
 7862 053c 01       		.byte	0x1
 7863 053d 5C02     		.2byte	0x25c
 7864 053f C3000000 		.4byte	0xc3
 7865 0543 21000000 		.4byte	.LLST1
 7866 0547 00       		.byte	0
 7867 0548 18       		.uleb128 0x18
 7868 0549 F1050000 		.4byte	.LASF89
 7869 054d 01       		.byte	0x1
 7870 054e 6402     		.2byte	0x264
 7871 0550 CE000000 		.4byte	0xce
 7872 0554 00000000 		.4byte	.LFB1
 7873 0558 16000000 		.4byte	.LFE1-.LFB1
 7874 055c 01       		.uleb128 0x1
 7875 055d 9C       		.byte	0x9c
 7876 055e 82050000 		.4byte	0x582
 7877 0562 19       		.uleb128 0x19
 7878 0563 70747200 		.ascii	"ptr\000"
 7879 0567 01       		.byte	0x1
 7880 0568 6402     		.2byte	0x264
 7881 056a 75040000 		.4byte	0x475
 7882 056e 63000000 		.4byte	.LLST2
 7883 0572 1A       		.uleb128 0x1a
 7884 0573 727600   		.ascii	"rv\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 264


 7885 0576 01       		.byte	0x1
 7886 0577 6602     		.2byte	0x266
 7887 0579 CE000000 		.4byte	0xce
 7888 057d 84000000 		.4byte	.LLST3
 7889 0581 00       		.byte	0
 7890 0582 1B       		.uleb128 0x1b
 7891 0583 AE060000 		.4byte	.LASF90
 7892 0587 01       		.byte	0x1
 7893 0588 8302     		.2byte	0x283
 7894 058a 00000000 		.4byte	.LFB2
 7895 058e 08000000 		.4byte	.LFE2-.LFB2
 7896 0592 01       		.uleb128 0x1
 7897 0593 9C       		.byte	0x9c
 7898 0594 B9050000 		.4byte	0x5b9
 7899 0598 19       		.uleb128 0x19
 7900 0599 70747200 		.ascii	"ptr\000"
 7901 059d 01       		.byte	0x1
 7902 059e 8302     		.2byte	0x283
 7903 05a0 D0020000 		.4byte	0x2d0
 7904 05a4 BF000000 		.4byte	.LLST4
 7905 05a8 19       		.uleb128 0x19
 7906 05a9 76616C00 		.ascii	"val\000"
 7907 05ad 01       		.byte	0x1
 7908 05ae 8302     		.2byte	0x283
 7909 05b0 C3000000 		.4byte	0xc3
 7910 05b4 EC000000 		.4byte	.LLST5
 7911 05b8 00       		.byte	0
 7912 05b9 1B       		.uleb128 0x1b
 7913 05ba 1E040000 		.4byte	.LASF91
 7914 05be 01       		.byte	0x1
 7915 05bf 8A02     		.2byte	0x28a
 7916 05c1 00000000 		.4byte	.LFB3
 7917 05c5 14000000 		.4byte	.LFE3-.LFB3
 7918 05c9 01       		.uleb128 0x1
 7919 05ca 9C       		.byte	0x9c
 7920 05cb F0050000 		.4byte	0x5f0
 7921 05cf 19       		.uleb128 0x19
 7922 05d0 70747200 		.ascii	"ptr\000"
 7923 05d4 01       		.byte	0x1
 7924 05d5 8A02     		.2byte	0x28a
 7925 05d7 D0020000 		.4byte	0x2d0
 7926 05db 0E010000 		.4byte	.LLST6
 7927 05df 19       		.uleb128 0x19
 7928 05e0 76616C00 		.ascii	"val\000"
 7929 05e4 01       		.byte	0x1
 7930 05e5 8A02     		.2byte	0x28a
 7931 05e7 CE000000 		.4byte	0xce
 7932 05eb 55010000 		.4byte	.LLST7
 7933 05ef 00       		.byte	0
 7934 05f0 1B       		.uleb128 0x1b
 7935 05f1 03060000 		.4byte	.LASF92
 7936 05f5 01       		.byte	0x1
 7937 05f6 AA02     		.2byte	0x2aa
 7938 05f8 00000000 		.4byte	.LFB4
 7939 05fc 12000000 		.4byte	.LFE4-.LFB4
 7940 0600 01       		.uleb128 0x1
 7941 0601 9C       		.byte	0x9c
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 265


 7942 0602 53060000 		.4byte	0x653
 7943 0606 19       		.uleb128 0x19
 7944 0607 64737400 		.ascii	"dst\000"
 7945 060b 01       		.byte	0x1
 7946 060c AA02     		.2byte	0x2aa
 7947 060e A2040000 		.4byte	0x4a2
 7948 0612 A0010000 		.4byte	.LLST8
 7949 0616 19       		.uleb128 0x19
 7950 0617 73726300 		.ascii	"src\000"
 7951 061b 01       		.byte	0x1
 7952 061c AA02     		.2byte	0x2aa
 7953 061e 53060000 		.4byte	0x653
 7954 0622 C1010000 		.4byte	.LLST9
 7955 0626 19       		.uleb128 0x19
 7956 0627 636E7400 		.ascii	"cnt\000"
 7957 062b 01       		.byte	0x1
 7958 062c AA02     		.2byte	0x2aa
 7959 062e AD000000 		.4byte	0xad
 7960 0632 E2010000 		.4byte	.LLST10
 7961 0636 1A       		.uleb128 0x1a
 7962 0637 6400     		.ascii	"d\000"
 7963 0639 01       		.byte	0x1
 7964 063a AB02     		.2byte	0x2ab
 7965 063c D0020000 		.4byte	0x2d0
 7966 0640 18020000 		.4byte	.LLST11
 7967 0644 1A       		.uleb128 0x1a
 7968 0645 7300     		.ascii	"s\000"
 7969 0647 01       		.byte	0x1
 7970 0648 AC02     		.2byte	0x2ac
 7971 064a 75040000 		.4byte	0x475
 7972 064e 43020000 		.4byte	.LLST12
 7973 0652 00       		.byte	0
 7974 0653 0B       		.uleb128 0xb
 7975 0654 04       		.byte	0x4
 7976 0655 59060000 		.4byte	0x659
 7977 0659 1C       		.uleb128 0x1c
 7978 065a 1B       		.uleb128 0x1b
 7979 065b C5030000 		.4byte	.LASF93
 7980 065f 01       		.byte	0x1
 7981 0660 B502     		.2byte	0x2b5
 7982 0662 00000000 		.4byte	.LFB5
 7983 0666 0A000000 		.4byte	.LFE5-.LFB5
 7984 066a 01       		.uleb128 0x1
 7985 066b 9C       		.byte	0x9c
 7986 066c AE060000 		.4byte	0x6ae
 7987 0670 1D       		.uleb128 0x1d
 7988 0671 64737400 		.ascii	"dst\000"
 7989 0675 01       		.byte	0x1
 7990 0676 B502     		.2byte	0x2b5
 7991 0678 A2040000 		.4byte	0x4a2
 7992 067c 04       		.uleb128 0x4
 7993 067d F3       		.byte	0xf3
 7994 067e 01       		.uleb128 0x1
 7995 067f 50       		.byte	0x50
 7996 0680 9F       		.byte	0x9f
 7997 0681 1D       		.uleb128 0x1d
 7998 0682 76616C00 		.ascii	"val\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 266


 7999 0686 01       		.byte	0x1
 8000 0687 B502     		.2byte	0x2b5
 8001 0689 7E000000 		.4byte	0x7e
 8002 068d 01       		.uleb128 0x1
 8003 068e 51       		.byte	0x51
 8004 068f 19       		.uleb128 0x19
 8005 0690 636E7400 		.ascii	"cnt\000"
 8006 0694 01       		.byte	0x1
 8007 0695 B502     		.2byte	0x2b5
 8008 0697 AD000000 		.4byte	0xad
 8009 069b 6E020000 		.4byte	.LLST13
 8010 069f 1A       		.uleb128 0x1a
 8011 06a0 6400     		.ascii	"d\000"
 8012 06a2 01       		.byte	0x1
 8013 06a3 B602     		.2byte	0x2b6
 8014 06a5 D0020000 		.4byte	0x2d0
 8015 06a9 AA020000 		.4byte	.LLST14
 8016 06ad 00       		.byte	0
 8017 06ae 18       		.uleb128 0x18
 8018 06af 4A030000 		.4byte	.LASF94
 8019 06b3 01       		.byte	0x1
 8020 06b4 BD02     		.2byte	0x2bd
 8021 06b6 7E000000 		.4byte	0x7e
 8022 06ba 00000000 		.4byte	.LFB6
 8023 06be 1E000000 		.4byte	.LFE6-.LFB6
 8024 06c2 01       		.uleb128 0x1
 8025 06c3 9C       		.byte	0x9c
 8026 06c4 21070000 		.4byte	0x721
 8027 06c8 19       		.uleb128 0x19
 8028 06c9 64737400 		.ascii	"dst\000"
 8029 06cd 01       		.byte	0x1
 8030 06ce BD02     		.2byte	0x2bd
 8031 06d0 53060000 		.4byte	0x653
 8032 06d4 CD020000 		.4byte	.LLST15
 8033 06d8 19       		.uleb128 0x19
 8034 06d9 73726300 		.ascii	"src\000"
 8035 06dd 01       		.byte	0x1
 8036 06de BD02     		.2byte	0x2bd
 8037 06e0 53060000 		.4byte	0x653
 8038 06e4 EE020000 		.4byte	.LLST16
 8039 06e8 19       		.uleb128 0x19
 8040 06e9 636E7400 		.ascii	"cnt\000"
 8041 06ed 01       		.byte	0x1
 8042 06ee BD02     		.2byte	0x2bd
 8043 06f0 AD000000 		.4byte	0xad
 8044 06f4 0F030000 		.4byte	.LLST17
 8045 06f8 1A       		.uleb128 0x1a
 8046 06f9 6400     		.ascii	"d\000"
 8047 06fb 01       		.byte	0x1
 8048 06fc BE02     		.2byte	0x2be
 8049 06fe 75040000 		.4byte	0x475
 8050 0702 3A030000 		.4byte	.LLST18
 8051 0706 1A       		.uleb128 0x1a
 8052 0707 7300     		.ascii	"s\000"
 8053 0709 01       		.byte	0x1
 8054 070a BE02     		.2byte	0x2be
 8055 070c 75040000 		.4byte	0x475
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 267


 8056 0710 58030000 		.4byte	.LLST19
 8057 0714 1E       		.uleb128 0x1e
 8058 0715 7200     		.ascii	"r\000"
 8059 0717 01       		.byte	0x1
 8060 0718 BF02     		.2byte	0x2bf
 8061 071a 7E000000 		.4byte	0x7e
 8062 071e 01       		.uleb128 0x1
 8063 071f 53       		.byte	0x53
 8064 0720 00       		.byte	0
 8065 0721 18       		.uleb128 0x18
 8066 0722 37000000 		.4byte	.LASF95
 8067 0726 01       		.byte	0x1
 8068 0727 CA02     		.2byte	0x2ca
 8069 0729 7E000000 		.4byte	0x7e
 8070 072d 00000000 		.4byte	.LFB7
 8071 0731 10000000 		.4byte	.LFE7-.LFB7
 8072 0735 01       		.uleb128 0x1
 8073 0736 9C       		.byte	0x9c
 8074 0737 5A070000 		.4byte	0x75a
 8075 073b 19       		.uleb128 0x19
 8076 073c 73747200 		.ascii	"str\000"
 8077 0740 01       		.byte	0x1
 8078 0741 CA02     		.2byte	0x2ca
 8079 0743 5A070000 		.4byte	0x75a
 8080 0747 76030000 		.4byte	.LLST20
 8081 074b 1D       		.uleb128 0x1d
 8082 074c 63687200 		.ascii	"chr\000"
 8083 0750 01       		.byte	0x1
 8084 0751 CA02     		.2byte	0x2ca
 8085 0753 7E000000 		.4byte	0x7e
 8086 0757 01       		.uleb128 0x1
 8087 0758 51       		.byte	0x51
 8088 0759 00       		.byte	0
 8089 075a 0B       		.uleb128 0xb
 8090 075b 04       		.byte	0x4
 8091 075c 60070000 		.4byte	0x760
 8092 0760 10       		.uleb128 0x10
 8093 0761 E4000000 		.4byte	0xe4
 8094 0765 18       		.uleb128 0x18
 8095 0766 BA030000 		.4byte	.LASF96
 8096 076a 01       		.byte	0x1
 8097 076b C803     		.2byte	0x3c8
 8098 076d CE000000 		.4byte	0xce
 8099 0771 00000000 		.4byte	.LFB11
 8100 0775 18000000 		.4byte	.LFE11-.LFB11
 8101 0779 01       		.uleb128 0x1
 8102 077a 9C       		.byte	0x9c
 8103 077b 9F070000 		.4byte	0x79f
 8104 077f 19       		.uleb128 0x19
 8105 0780 667300   		.ascii	"fs\000"
 8106 0783 01       		.byte	0x1
 8107 0784 C903     		.2byte	0x3c9
 8108 0786 49020000 		.4byte	0x249
 8109 078a 94030000 		.4byte	.LLST21
 8110 078e 1F       		.uleb128 0x1f
 8111 078f 16030000 		.4byte	.LASF97
 8112 0793 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 268


 8113 0794 CA03     		.2byte	0x3ca
 8114 0796 CE000000 		.4byte	0xce
 8115 079a CE030000 		.4byte	.LLST22
 8116 079e 00       		.byte	0
 8117 079f 18       		.uleb128 0x18
 8118 07a0 4F050000 		.4byte	.LASF98
 8119 07a4 01       		.byte	0x1
 8120 07a5 3506     		.2byte	0x635
 8121 07a7 CE000000 		.4byte	0xce
 8122 07ab 00000000 		.4byte	.LFB19
 8123 07af 24000000 		.4byte	.LFE19-.LFB19
 8124 07b3 01       		.uleb128 0x1
 8125 07b4 9C       		.byte	0x9c
 8126 07b5 0C080000 		.4byte	0x80c
 8127 07b9 19       		.uleb128 0x19
 8128 07ba 667300   		.ascii	"fs\000"
 8129 07bd 01       		.byte	0x1
 8130 07be 3606     		.2byte	0x636
 8131 07c0 49020000 		.4byte	0x249
 8132 07c4 EC030000 		.4byte	.LLST23
 8133 07c8 19       		.uleb128 0x19
 8134 07c9 64697200 		.ascii	"dir\000"
 8135 07cd 01       		.byte	0x1
 8136 07ce 3706     		.2byte	0x637
 8137 07d0 75040000 		.4byte	0x475
 8138 07d4 0A040000 		.4byte	.LLST24
 8139 07d8 1A       		.uleb128 0x1a
 8140 07d9 636C00   		.ascii	"cl\000"
 8141 07dc 01       		.byte	0x1
 8142 07dd 3A06     		.2byte	0x63a
 8143 07df CE000000 		.4byte	0xce
 8144 07e3 28040000 		.4byte	.LLST25
 8145 07e7 20       		.uleb128 0x20
 8146 07e8 0E000000 		.4byte	.LVL45
 8147 07ec 0E050000 		.4byte	0x50e
 8148 07f0 FB070000 		.4byte	0x7fb
 8149 07f4 21       		.uleb128 0x21
 8150 07f5 01       		.uleb128 0x1
 8151 07f6 50       		.byte	0x50
 8152 07f7 02       		.uleb128 0x2
 8153 07f8 75       		.byte	0x75
 8154 07f9 1A       		.sleb128 26
 8155 07fa 00       		.byte	0
 8156 07fb 22       		.uleb128 0x22
 8157 07fc 1E000000 		.4byte	.LVL48
 8158 0800 0E050000 		.4byte	0x50e
 8159 0804 21       		.uleb128 0x21
 8160 0805 01       		.uleb128 0x1
 8161 0806 50       		.byte	0x50
 8162 0807 02       		.uleb128 0x2
 8163 0808 75       		.byte	0x75
 8164 0809 14       		.sleb128 20
 8165 080a 00       		.byte	0
 8166 080b 00       		.byte	0
 8167 080c 1B       		.uleb128 0x1b
 8168 080d 55010000 		.4byte	.LASF99
 8169 0811 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 269


 8170 0812 4706     		.2byte	0x647
 8171 0814 00000000 		.4byte	.LFB20
 8172 0818 24000000 		.4byte	.LFE20-.LFB20
 8173 081c 01       		.uleb128 0x1
 8174 081d 9C       		.byte	0x9c
 8175 081e 83080000 		.4byte	0x883
 8176 0822 19       		.uleb128 0x19
 8177 0823 667300   		.ascii	"fs\000"
 8178 0826 01       		.byte	0x1
 8179 0827 4806     		.2byte	0x648
 8180 0829 49020000 		.4byte	0x249
 8181 082d 51040000 		.4byte	.LLST26
 8182 0831 19       		.uleb128 0x19
 8183 0832 64697200 		.ascii	"dir\000"
 8184 0836 01       		.byte	0x1
 8185 0837 4906     		.2byte	0x649
 8186 0839 D0020000 		.4byte	0x2d0
 8187 083d 6F040000 		.4byte	.LLST27
 8188 0841 19       		.uleb128 0x19
 8189 0842 636C00   		.ascii	"cl\000"
 8190 0845 01       		.byte	0x1
 8191 0846 4A06     		.2byte	0x64a
 8192 0848 CE000000 		.4byte	0xce
 8193 084c 8D040000 		.4byte	.LLST28
 8194 0850 20       		.uleb128 0x20
 8195 0851 12000000 		.4byte	.LVL53
 8196 0855 82050000 		.4byte	0x582
 8197 0859 6A080000 		.4byte	0x86a
 8198 085d 21       		.uleb128 0x21
 8199 085e 01       		.uleb128 0x1
 8200 085f 51       		.byte	0x51
 8201 0860 02       		.uleb128 0x2
 8202 0861 74       		.byte	0x74
 8203 0862 00       		.sleb128 0
 8204 0863 21       		.uleb128 0x21
 8205 0864 01       		.uleb128 0x1
 8206 0865 50       		.byte	0x50
 8207 0866 02       		.uleb128 0x2
 8208 0867 75       		.byte	0x75
 8209 0868 1A       		.sleb128 26
 8210 0869 00       		.byte	0
 8211 086a 22       		.uleb128 0x22
 8212 086b 22000000 		.4byte	.LVL54
 8213 086f 82050000 		.4byte	0x582
 8214 0873 21       		.uleb128 0x21
 8215 0874 01       		.uleb128 0x1
 8216 0875 51       		.byte	0x51
 8217 0876 04       		.uleb128 0x4
 8218 0877 74       		.byte	0x74
 8219 0878 00       		.sleb128 0
 8220 0879 40       		.byte	0x40
 8221 087a 25       		.byte	0x25
 8222 087b 21       		.uleb128 0x21
 8223 087c 01       		.uleb128 0x1
 8224 087d 50       		.byte	0x50
 8225 087e 02       		.uleb128 0x2
 8226 087f 75       		.byte	0x75
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 270


 8227 0880 14       		.sleb128 20
 8228 0881 00       		.byte	0
 8229 0882 00       		.byte	0
 8230 0883 1B       		.uleb128 0x1b
 8231 0884 D6030000 		.4byte	.LASF100
 8232 0888 01       		.byte	0x1
 8233 0889 5C09     		.2byte	0x95c
 8234 088b 00000000 		.4byte	.LFB25
 8235 088f 64000000 		.4byte	.LFE25-.LFB25
 8236 0893 01       		.uleb128 0x1
 8237 0894 9C       		.byte	0x9c
 8238 0895 04090000 		.4byte	0x904
 8239 0899 19       		.uleb128 0x19
 8240 089a 647000   		.ascii	"dp\000"
 8241 089d 01       		.byte	0x1
 8242 089e 5D09     		.2byte	0x95d
 8243 08a0 04090000 		.4byte	0x904
 8244 08a4 AB040000 		.4byte	.LLST29
 8245 08a8 19       		.uleb128 0x19
 8246 08a9 666E6F00 		.ascii	"fno\000"
 8247 08ad 01       		.byte	0x1
 8248 08ae 5E09     		.2byte	0x95e
 8249 08b0 0A090000 		.4byte	0x90a
 8250 08b4 D4040000 		.4byte	.LLST30
 8251 08b8 1A       		.uleb128 0x1a
 8252 08b9 6900     		.ascii	"i\000"
 8253 08bb 01       		.byte	0x1
 8254 08bc 6109     		.2byte	0x961
 8255 08be AD000000 		.4byte	0xad
 8256 08c2 FD040000 		.4byte	.LLST31
 8257 08c6 1A       		.uleb128 0x1a
 8258 08c7 6A00     		.ascii	"j\000"
 8259 08c9 01       		.byte	0x1
 8260 08ca 6109     		.2byte	0x961
 8261 08cc AD000000 		.4byte	0xad
 8262 08d0 26050000 		.4byte	.LLST32
 8263 08d4 1A       		.uleb128 0x1a
 8264 08d5 6300     		.ascii	"c\000"
 8265 08d7 01       		.byte	0x1
 8266 08d8 6209     		.2byte	0x962
 8267 08da D9000000 		.4byte	0xd9
 8268 08de 51050000 		.4byte	.LLST33
 8269 08e2 1A       		.uleb128 0x1a
 8270 08e3 746D00   		.ascii	"tm\000"
 8271 08e6 01       		.byte	0x1
 8272 08e7 6309     		.2byte	0x963
 8273 08e9 CE000000 		.4byte	0xce
 8274 08ed 64050000 		.4byte	.LLST34
 8275 08f1 23       		.uleb128 0x23
 8276 08f2 50000000 		.4byte	.LVL67
 8277 08f6 48050000 		.4byte	0x548
 8278 08fa 23       		.uleb128 0x23
 8279 08fb 5A000000 		.4byte	.LVL68
 8280 08ff 48050000 		.4byte	0x548
 8281 0903 00       		.byte	0
 8282 0904 0B       		.uleb128 0xb
 8283 0905 04       		.byte	0x4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 271


 8284 0906 41030000 		.4byte	0x341
 8285 090a 0B       		.uleb128 0xb
 8286 090b 04       		.byte	0x4
 8287 090c A1030000 		.4byte	0x3a1
 8288 0910 18       		.uleb128 0x18
 8289 0911 5D050000 		.4byte	.LASF101
 8290 0915 01       		.byte	0x1
 8291 0916 0A0A     		.2byte	0xa0a
 8292 0918 2D040000 		.4byte	0x42d
 8293 091c 00000000 		.4byte	.LFB26
 8294 0920 10010000 		.4byte	.LFE26-.LFB26
 8295 0924 01       		.uleb128 0x1
 8296 0925 9C       		.byte	0x9c
 8297 0926 E8090000 		.4byte	0x9e8
 8298 092a 19       		.uleb128 0x19
 8299 092b 647000   		.ascii	"dp\000"
 8300 092e 01       		.byte	0x1
 8301 092f 0B0A     		.2byte	0xa0b
 8302 0931 04090000 		.4byte	0x904
 8303 0935 77050000 		.4byte	.LLST35
 8304 0939 1F       		.uleb128 0x1f
 8305 093a 6C000000 		.4byte	.LASF102
 8306 093e 01       		.byte	0x1
 8307 093f 0C0A     		.2byte	0xa0c
 8308 0941 E8090000 		.4byte	0x9e8
 8309 0945 A3050000 		.4byte	.LLST36
 8310 0949 1A       		.uleb128 0x1a
 8311 094a 6300     		.ascii	"c\000"
 8312 094c 01       		.byte	0x1
 8313 094d 860A     		.2byte	0xa86
 8314 094f B8000000 		.4byte	0xb8
 8315 0953 CF050000 		.4byte	.LLST37
 8316 0957 1A       		.uleb128 0x1a
 8317 0958 6400     		.ascii	"d\000"
 8318 095a 01       		.byte	0x1
 8319 095b 860A     		.2byte	0xa86
 8320 095d B8000000 		.4byte	0xb8
 8321 0961 FA050000 		.4byte	.LLST38
 8322 0965 1A       		.uleb128 0x1a
 8323 0966 73666E00 		.ascii	"sfn\000"
 8324 096a 01       		.byte	0x1
 8325 096b 860A     		.2byte	0xa86
 8326 096d D0020000 		.4byte	0x2d0
 8327 0971 18060000 		.4byte	.LLST39
 8328 0975 1A       		.uleb128 0x1a
 8329 0976 6E6900   		.ascii	"ni\000"
 8330 0979 01       		.byte	0x1
 8331 097a 870A     		.2byte	0xa87
 8332 097c AD000000 		.4byte	0xad
 8333 0980 3B060000 		.4byte	.LLST40
 8334 0984 1A       		.uleb128 0x1a
 8335 0985 736900   		.ascii	"si\000"
 8336 0988 01       		.byte	0x1
 8337 0989 870A     		.2byte	0xa87
 8338 098b AD000000 		.4byte	0xad
 8339 098f 65060000 		.4byte	.LLST41
 8340 0993 1A       		.uleb128 0x1a
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 272


 8341 0994 6900     		.ascii	"i\000"
 8342 0996 01       		.byte	0x1
 8343 0997 870A     		.2byte	0xa87
 8344 0999 AD000000 		.4byte	0xad
 8345 099d C6060000 		.4byte	.LLST42
 8346 09a1 1A       		.uleb128 0x1a
 8347 09a2 7000     		.ascii	"p\000"
 8348 09a4 01       		.byte	0x1
 8349 09a5 880A     		.2byte	0xa88
 8350 09a7 5A070000 		.4byte	0x75a
 8351 09ab 1E070000 		.4byte	.LLST43
 8352 09af 20       		.uleb128 0x20
 8353 09b0 18000000 		.4byte	.LVL76
 8354 09b4 5A060000 		.4byte	0x65a
 8355 09b8 CE090000 		.4byte	0x9ce
 8356 09bc 21       		.uleb128 0x21
 8357 09bd 01       		.uleb128 0x1
 8358 09be 52       		.byte	0x52
 8359 09bf 01       		.uleb128 0x1
 8360 09c0 3B       		.byte	0x3b
 8361 09c1 21       		.uleb128 0x21
 8362 09c2 01       		.uleb128 0x1
 8363 09c3 51       		.byte	0x51
 8364 09c4 02       		.uleb128 0x2
 8365 09c5 08       		.byte	0x8
 8366 09c6 20       		.byte	0x20
 8367 09c7 21       		.uleb128 0x21
 8368 09c8 01       		.uleb128 0x1
 8369 09c9 50       		.byte	0x50
 8370 09ca 02       		.uleb128 0x2
 8371 09cb 7B       		.byte	0x7b
 8372 09cc 00       		.sleb128 0
 8373 09cd 00       		.byte	0
 8374 09ce 22       		.uleb128 0x22
 8375 09cf A4000000 		.4byte	.LVL89
 8376 09d3 21070000 		.4byte	0x721
 8377 09d7 21       		.uleb128 0x21
 8378 09d8 01       		.uleb128 0x1
 8379 09d9 51       		.byte	0x51
 8380 09da 02       		.uleb128 0x2
 8381 09db 74       		.byte	0x74
 8382 09dc 00       		.sleb128 0
 8383 09dd 21       		.uleb128 0x21
 8384 09de 01       		.uleb128 0x1
 8385 09df 50       		.byte	0x50
 8386 09e0 05       		.uleb128 0x5
 8387 09e1 03       		.byte	0x3
 8388 09e2 00000000 		.4byte	.LC0
 8389 09e6 00       		.byte	0
 8390 09e7 00       		.byte	0
 8391 09e8 0B       		.uleb128 0xb
 8392 09e9 04       		.byte	0x4
 8393 09ea EE090000 		.4byte	0x9ee
 8394 09ee 0B       		.uleb128 0xb
 8395 09ef 04       		.byte	0x4
 8396 09f0 F4090000 		.4byte	0x9f4
 8397 09f4 10       		.uleb128 0x10
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 273


 8398 09f5 D9000000 		.4byte	0xd9
 8399 09f9 18       		.uleb128 0x18
 8400 09fa 4A040000 		.4byte	.LASF103
 8401 09fe 01       		.byte	0x1
 8402 09ff 250B     		.2byte	0xb25
 8403 0a01 7E000000 		.4byte	0x7e
 8404 0a05 00000000 		.4byte	.LFB28
 8405 0a09 56000000 		.4byte	.LFE28-.LFB28
 8406 0a0d 01       		.uleb128 0x1
 8407 0a0e 9C       		.byte	0x9c
 8408 0a0f 600A0000 		.4byte	0xa60
 8409 0a13 1F       		.uleb128 0x1f
 8410 0a14 6C000000 		.4byte	.LASF102
 8411 0a18 01       		.byte	0x1
 8412 0a19 260B     		.2byte	0xb26
 8413 0a1b E8090000 		.4byte	0x9e8
 8414 0a1f 31070000 		.4byte	.LLST44
 8415 0a23 1A       		.uleb128 0x1a
 8416 0a24 747000   		.ascii	"tp\000"
 8417 0a27 01       		.byte	0x1
 8418 0a28 290B     		.2byte	0xb29
 8419 0a2a EE090000 		.4byte	0x9ee
 8420 0a2e 6B070000 		.4byte	.LLST45
 8421 0a32 1A       		.uleb128 0x1a
 8422 0a33 747400   		.ascii	"tt\000"
 8423 0a36 01       		.byte	0x1
 8424 0a37 290B     		.2byte	0xb29
 8425 0a39 EE090000 		.4byte	0x9ee
 8426 0a3d A1070000 		.4byte	.LLST46
 8427 0a41 1A       		.uleb128 0x1a
 8428 0a42 6900     		.ascii	"i\000"
 8429 0a44 01       		.byte	0x1
 8430 0a45 2A0B     		.2byte	0xb2a
 8431 0a47 AD000000 		.4byte	0xad
 8432 0a4b E2070000 		.4byte	.LLST47
 8433 0a4f 1A       		.uleb128 0x1a
 8434 0a50 766F6C00 		.ascii	"vol\000"
 8435 0a54 01       		.byte	0x1
 8436 0a55 2B0B     		.2byte	0xb2b
 8437 0a57 7E000000 		.4byte	0x7e
 8438 0a5b 4A080000 		.4byte	.LLST48
 8439 0a5f 00       		.byte	0
 8440 0a60 1B       		.uleb128 0x1b
 8441 0a61 58020000 		.4byte	.LASF104
 8442 0a65 01       		.byte	0x1
 8443 0a66 0817     		.2byte	0x1708
 8444 0a68 00000000 		.4byte	.LFB51
 8445 0a6c 0A000000 		.4byte	.LFE51-.LFB51
 8446 0a70 01       		.uleb128 0x1
 8447 0a71 9C       		.byte	0x9c
 8448 0a72 910A0000 		.4byte	0xa91
 8449 0a76 1D       		.uleb128 0x1d
 8450 0a77 706200   		.ascii	"pb\000"
 8451 0a7a 01       		.byte	0x1
 8452 0a7b 0917     		.2byte	0x1709
 8453 0a7d 910A0000 		.4byte	0xa91
 8454 0a81 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 274


 8455 0a82 50       		.byte	0x50
 8456 0a83 1D       		.uleb128 0x1d
 8457 0a84 667000   		.ascii	"fp\000"
 8458 0a87 01       		.byte	0x1
 8459 0a88 0A17     		.2byte	0x170a
 8460 0a8a EC040000 		.4byte	0x4ec
 8461 0a8e 01       		.uleb128 0x1
 8462 0a8f 51       		.byte	0x51
 8463 0a90 00       		.byte	0
 8464 0a91 0B       		.uleb128 0xb
 8465 0a92 04       		.byte	0x4
 8466 0a93 02050000 		.4byte	0x502
 8467 0a97 18       		.uleb128 0x18
 8468 0a98 FD040000 		.4byte	.LASF105
 8469 0a9c 01       		.byte	0x1
 8470 0a9d 5B0C     		.2byte	0xc5b
 8471 0a9f 2D040000 		.4byte	0x42d
 8472 0aa3 00000000 		.4byte	.LFB31
 8473 0aa7 34000000 		.4byte	.LFE31-.LFB31
 8474 0aab 01       		.uleb128 0x1
 8475 0aac 9C       		.byte	0x9c
 8476 0aad EA0A0000 		.4byte	0xaea
 8477 0ab1 19       		.uleb128 0x19
 8478 0ab2 6F626A00 		.ascii	"obj\000"
 8479 0ab6 01       		.byte	0x1
 8480 0ab7 5C0C     		.2byte	0xc5c
 8481 0ab9 EA0A0000 		.4byte	0xaea
 8482 0abd 77080000 		.4byte	.LLST49
 8483 0ac1 19       		.uleb128 0x19
 8484 0ac2 667300   		.ascii	"fs\000"
 8485 0ac5 01       		.byte	0x1
 8486 0ac6 5D0C     		.2byte	0xc5d
 8487 0ac8 F00A0000 		.4byte	0xaf0
 8488 0acc AE080000 		.4byte	.LLST50
 8489 0ad0 1A       		.uleb128 0x1a
 8490 0ad1 72657300 		.ascii	"res\000"
 8491 0ad5 01       		.byte	0x1
 8492 0ad6 600C     		.2byte	0xc60
 8493 0ad8 2D040000 		.4byte	0x42d
 8494 0adc CC080000 		.4byte	.LLST51
 8495 0ae0 23       		.uleb128 0x23
 8496 0ae1 1E000000 		.4byte	.LVL127
 8497 0ae5 14320000 		.4byte	0x3214
 8498 0ae9 00       		.byte	0
 8499 0aea 0B       		.uleb128 0xb
 8500 0aeb 04       		.byte	0x4
 8501 0aec 4F020000 		.4byte	0x24f
 8502 0af0 0B       		.uleb128 0xb
 8503 0af1 04       		.byte	0x4
 8504 0af2 49020000 		.4byte	0x249
 8505 0af6 18       		.uleb128 0x18
 8506 0af7 D4010000 		.4byte	.LASF106
 8507 0afb 01       		.byte	0x1
 8508 0afc 6403     		.2byte	0x364
 8509 0afe 2D040000 		.4byte	0x42d
 8510 0b02 00000000 		.4byte	.LFB8
 8511 0b06 54000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 275


 8512 0b0a 01       		.uleb128 0x1
 8513 0b0b 9C       		.byte	0x9c
 8514 0b0c 890B0000 		.4byte	0xb89
 8515 0b10 19       		.uleb128 0x19
 8516 0b11 667300   		.ascii	"fs\000"
 8517 0b14 01       		.byte	0x1
 8518 0b15 6503     		.2byte	0x365
 8519 0b17 49020000 		.4byte	0x249
 8520 0b1b F7080000 		.4byte	.LLST52
 8521 0b1f 24       		.uleb128 0x24
 8522 0b20 A8060000 		.4byte	.LASF107
 8523 0b24 01       		.byte	0x1
 8524 0b25 6803     		.2byte	0x368
 8525 0b27 CE000000 		.4byte	0xce
 8526 0b2b 39090000 		.4byte	.LLST53
 8527 0b2f 1A       		.uleb128 0x1a
 8528 0b30 6E6600   		.ascii	"nf\000"
 8529 0b33 01       		.byte	0x1
 8530 0b34 6903     		.2byte	0x369
 8531 0b36 AD000000 		.4byte	0xad
 8532 0b3a 57090000 		.4byte	.LLST54
 8533 0b3e 1A       		.uleb128 0x1a
 8534 0b3f 72657300 		.ascii	"res\000"
 8535 0b43 01       		.byte	0x1
 8536 0b44 6A03     		.2byte	0x36a
 8537 0b46 2D040000 		.4byte	0x42d
 8538 0b4a 6A090000 		.4byte	.LLST55
 8539 0b4e 20       		.uleb128 0x20
 8540 0b4f 1A000000 		.4byte	.LVL137
 8541 0b53 29320000 		.4byte	0x3229
 8542 0b57 6D0B0000 		.4byte	0xb6d
 8543 0b5b 21       		.uleb128 0x21
 8544 0b5c 01       		.uleb128 0x1
 8545 0b5d 53       		.byte	0x53
 8546 0b5e 01       		.uleb128 0x1
 8547 0b5f 31       		.byte	0x31
 8548 0b60 21       		.uleb128 0x21
 8549 0b61 01       		.uleb128 0x1
 8550 0b62 52       		.byte	0x52
 8551 0b63 02       		.uleb128 0x2
 8552 0b64 76       		.byte	0x76
 8553 0b65 00       		.sleb128 0
 8554 0b66 21       		.uleb128 0x21
 8555 0b67 01       		.uleb128 0x1
 8556 0b68 51       		.byte	0x51
 8557 0b69 02       		.uleb128 0x2
 8558 0b6a 77       		.byte	0x77
 8559 0b6b 00       		.sleb128 0
 8560 0b6c 00       		.byte	0
 8561 0b6d 22       		.uleb128 0x22
 8562 0b6e 3E000000 		.4byte	.LVL140
 8563 0b72 29320000 		.4byte	0x3229
 8564 0b76 21       		.uleb128 0x21
 8565 0b77 01       		.uleb128 0x1
 8566 0b78 53       		.byte	0x53
 8567 0b79 01       		.uleb128 0x1
 8568 0b7a 31       		.byte	0x31
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 276


 8569 0b7b 21       		.uleb128 0x21
 8570 0b7c 01       		.uleb128 0x1
 8571 0b7d 52       		.byte	0x52
 8572 0b7e 02       		.uleb128 0x2
 8573 0b7f 76       		.byte	0x76
 8574 0b80 00       		.sleb128 0
 8575 0b81 21       		.uleb128 0x21
 8576 0b82 01       		.uleb128 0x1
 8577 0b83 51       		.byte	0x51
 8578 0b84 02       		.uleb128 0x2
 8579 0b85 77       		.byte	0x77
 8580 0b86 00       		.sleb128 0
 8581 0b87 00       		.byte	0
 8582 0b88 00       		.byte	0
 8583 0b89 18       		.uleb128 0x18
 8584 0b8a E5050000 		.4byte	.LASF108
 8585 0b8e 01       		.byte	0x1
 8586 0b8f 8103     		.2byte	0x381
 8587 0b91 2D040000 		.4byte	0x42d
 8588 0b95 00000000 		.4byte	.LFB9
 8589 0b99 34000000 		.4byte	.LFE9-.LFB9
 8590 0b9d 01       		.uleb128 0x1
 8591 0b9e 9C       		.byte	0x9c
 8592 0b9f 020C0000 		.4byte	0xc02
 8593 0ba3 19       		.uleb128 0x19
 8594 0ba4 667300   		.ascii	"fs\000"
 8595 0ba7 01       		.byte	0x1
 8596 0ba8 8203     		.2byte	0x382
 8597 0baa 49020000 		.4byte	0x249
 8598 0bae 89090000 		.4byte	.LLST56
 8599 0bb2 1F       		.uleb128 0x1f
 8600 0bb3 52030000 		.4byte	.LASF109
 8601 0bb7 01       		.byte	0x1
 8602 0bb8 8303     		.2byte	0x383
 8603 0bba CE000000 		.4byte	0xce
 8604 0bbe BD090000 		.4byte	.LLST57
 8605 0bc2 1A       		.uleb128 0x1a
 8606 0bc3 72657300 		.ascii	"res\000"
 8607 0bc7 01       		.byte	0x1
 8608 0bc8 8603     		.2byte	0x386
 8609 0bca 2D040000 		.4byte	0x42d
 8610 0bce F1090000 		.4byte	.LLST58
 8611 0bd2 20       		.uleb128 0x20
 8612 0bd3 10000000 		.4byte	.LVL149
 8613 0bd7 F60A0000 		.4byte	0xaf6
 8614 0bdb E60B0000 		.4byte	0xbe6
 8615 0bdf 21       		.uleb128 0x21
 8616 0be0 01       		.uleb128 0x1
 8617 0be1 50       		.byte	0x50
 8618 0be2 02       		.uleb128 0x2
 8619 0be3 74       		.byte	0x74
 8620 0be4 00       		.sleb128 0
 8621 0be5 00       		.byte	0
 8622 0be6 22       		.uleb128 0x22
 8623 0be7 22000000 		.4byte	.LVL151
 8624 0beb 4D320000 		.4byte	0x324d
 8625 0bef 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 277


 8626 0bf0 01       		.uleb128 0x1
 8627 0bf1 53       		.byte	0x53
 8628 0bf2 01       		.uleb128 0x1
 8629 0bf3 31       		.byte	0x31
 8630 0bf4 21       		.uleb128 0x21
 8631 0bf5 01       		.uleb128 0x1
 8632 0bf6 52       		.byte	0x52
 8633 0bf7 02       		.uleb128 0x2
 8634 0bf8 75       		.byte	0x75
 8635 0bf9 00       		.sleb128 0
 8636 0bfa 21       		.uleb128 0x21
 8637 0bfb 01       		.uleb128 0x1
 8638 0bfc 51       		.byte	0x51
 8639 0bfd 02       		.uleb128 0x2
 8640 0bfe 74       		.byte	0x74
 8641 0bff 30       		.sleb128 48
 8642 0c00 00       		.byte	0
 8643 0c01 00       		.byte	0
 8644 0c02 18       		.uleb128 0x18
 8645 0c03 D9040000 		.4byte	.LASF110
 8646 0c07 01       		.byte	0x1
 8647 0c08 620B     		.2byte	0xb62
 8648 0c0a B8000000 		.4byte	0xb8
 8649 0c0e 00000000 		.4byte	.LFB29
 8650 0c12 7C000000 		.4byte	.LFE29-.LFB29
 8651 0c16 01       		.uleb128 0x1
 8652 0c17 9C       		.byte	0x9c
 8653 0c18 920C0000 		.4byte	0xc92
 8654 0c1c 19       		.uleb128 0x19
 8655 0c1d 667300   		.ascii	"fs\000"
 8656 0c20 01       		.byte	0x1
 8657 0c21 630B     		.2byte	0xb63
 8658 0c23 49020000 		.4byte	0x249
 8659 0c27 320A0000 		.4byte	.LLST59
 8660 0c2b 1F       		.uleb128 0x1f
 8661 0c2c A4000000 		.4byte	.LASF47
 8662 0c30 01       		.byte	0x1
 8663 0c31 640B     		.2byte	0xb64
 8664 0c33 CE000000 		.4byte	0xce
 8665 0c37 5E0A0000 		.4byte	.LLST60
 8666 0c3b 20       		.uleb128 0x20
 8667 0c3c 12000000 		.4byte	.LVL156
 8668 0c40 890B0000 		.4byte	0xb89
 8669 0c44 560C0000 		.4byte	0xc56
 8670 0c48 21       		.uleb128 0x21
 8671 0c49 01       		.uleb128 0x1
 8672 0c4a 51       		.byte	0x51
 8673 0c4b 03       		.uleb128 0x3
 8674 0c4c F3       		.byte	0xf3
 8675 0c4d 01       		.uleb128 0x1
 8676 0c4e 51       		.byte	0x51
 8677 0c4f 21       		.uleb128 0x21
 8678 0c50 01       		.uleb128 0x1
 8679 0c51 50       		.byte	0x50
 8680 0c52 02       		.uleb128 0x2
 8681 0c53 74       		.byte	0x74
 8682 0c54 00       		.sleb128 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 278


 8683 0c55 00       		.byte	0
 8684 0c56 20       		.uleb128 0x20
 8685 0c57 1C000000 		.4byte	.LVL157
 8686 0c5b 0E050000 		.4byte	0x50e
 8687 0c5f 6B0C0000 		.4byte	0xc6b
 8688 0c63 21       		.uleb128 0x21
 8689 0c64 01       		.uleb128 0x1
 8690 0c65 50       		.byte	0x50
 8691 0c66 03       		.uleb128 0x3
 8692 0c67 74       		.byte	0x74
 8693 0c68 AE04     		.sleb128 558
 8694 0c6a 00       		.byte	0
 8695 0c6b 20       		.uleb128 0x20
 8696 0c6c 40000000 		.4byte	.LVL158
 8697 0c70 48050000 		.4byte	0x548
 8698 0c74 800C0000 		.4byte	0xc80
 8699 0c78 21       		.uleb128 0x21
 8700 0c79 01       		.uleb128 0x1
 8701 0c7a 50       		.byte	0x50
 8702 0c7b 03       		.uleb128 0x3
 8703 0c7c 74       		.byte	0x74
 8704 0c7d E600     		.sleb128 102
 8705 0c7f 00       		.byte	0
 8706 0c80 22       		.uleb128 0x22
 8707 0c81 52000000 		.4byte	.LVL159
 8708 0c85 48050000 		.4byte	0x548
 8709 0c89 21       		.uleb128 0x21
 8710 0c8a 01       		.uleb128 0x1
 8711 0c8b 50       		.byte	0x50
 8712 0c8c 03       		.uleb128 0x3
 8713 0c8d 74       		.byte	0x74
 8714 0c8e 8201     		.sleb128 130
 8715 0c90 00       		.byte	0
 8716 0c91 00       		.byte	0
 8717 0c92 18       		.uleb128 0x18
 8718 0c93 BC040000 		.4byte	.LASF111
 8719 0c97 01       		.byte	0x1
 8720 0c98 7E0B     		.2byte	0xb7e
 8721 0c9a 2D040000 		.4byte	0x42d
 8722 0c9e 00000000 		.4byte	.LFB30
 8723 0ca2 D0020000 		.4byte	.LFE30-.LFB30
 8724 0ca6 01       		.uleb128 0x1
 8725 0ca7 9C       		.byte	0x9c
 8726 0ca8 860F0000 		.4byte	0xf86
 8727 0cac 1F       		.uleb128 0x1f
 8728 0cad 6C000000 		.4byte	.LASF102
 8729 0cb1 01       		.byte	0x1
 8730 0cb2 7F0B     		.2byte	0xb7f
 8731 0cb4 E8090000 		.4byte	0x9e8
 8732 0cb8 7F0A0000 		.4byte	.LLST61
 8733 0cbc 19       		.uleb128 0x19
 8734 0cbd 72667300 		.ascii	"rfs\000"
 8735 0cc1 01       		.byte	0x1
 8736 0cc2 800B     		.2byte	0xb80
 8737 0cc4 F00A0000 		.4byte	0xaf0
 8738 0cc8 A00A0000 		.4byte	.LLST62
 8739 0ccc 1F       		.uleb128 0x1f
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 279


 8740 0ccd 36020000 		.4byte	.LASF112
 8741 0cd1 01       		.byte	0x1
 8742 0cd2 810B     		.2byte	0xb81
 8743 0cd4 B8000000 		.4byte	0xb8
 8744 0cd8 FE0A0000 		.4byte	.LLST63
 8745 0cdc 1A       		.uleb128 0x1a
 8746 0cdd 666D7400 		.ascii	"fmt\000"
 8747 0ce1 01       		.byte	0x1
 8748 0ce2 840B     		.2byte	0xb84
 8749 0ce4 B8000000 		.4byte	0xb8
 8750 0ce8 430B0000 		.4byte	.LLST64
 8751 0cec 1A       		.uleb128 0x1a
 8752 0ced 707400   		.ascii	"pt\000"
 8753 0cf0 01       		.byte	0x1
 8754 0cf1 840B     		.2byte	0xb84
 8755 0cf3 D0020000 		.4byte	0x2d0
 8756 0cf7 A40B0000 		.4byte	.LLST65
 8757 0cfb 1A       		.uleb128 0x1a
 8758 0cfc 766F6C00 		.ascii	"vol\000"
 8759 0d00 01       		.byte	0x1
 8760 0d01 850B     		.2byte	0xb85
 8761 0d03 7E000000 		.4byte	0x7e
 8762 0d07 1C0C0000 		.4byte	.LLST66
 8763 0d0b 24       		.uleb128 0x24
 8764 0d0c E1060000 		.4byte	.LASF40
 8765 0d10 01       		.byte	0x1
 8766 0d11 860B     		.2byte	0xb86
 8767 0d13 38040000 		.4byte	0x438
 8768 0d17 710C0000 		.4byte	.LLST67
 8769 0d1b 24       		.uleb128 0x24
 8770 0d1c DC020000 		.4byte	.LASF113
 8771 0d20 01       		.byte	0x1
 8772 0d21 870B     		.2byte	0xb87
 8773 0d23 CE000000 		.4byte	0xce
 8774 0d27 BB0C0000 		.4byte	.LLST68
 8775 0d2b 24       		.uleb128 0x24
 8776 0d2c BB000000 		.4byte	.LASF114
 8777 0d30 01       		.byte	0x1
 8778 0d31 870B     		.2byte	0xb87
 8779 0d33 CE000000 		.4byte	0xce
 8780 0d37 E50C0000 		.4byte	.LLST69
 8781 0d3b 24       		.uleb128 0x24
 8782 0d3c 46070000 		.4byte	.LASF115
 8783 0d40 01       		.byte	0x1
 8784 0d41 870B     		.2byte	0xb87
 8785 0d43 CE000000 		.4byte	0xce
 8786 0d47 3A0D0000 		.4byte	.LLST70
 8787 0d4b 24       		.uleb128 0x24
 8788 0d4c E2020000 		.4byte	.LASF116
 8789 0d50 01       		.byte	0x1
 8790 0d51 870B     		.2byte	0xb87
 8791 0d53 CE000000 		.4byte	0xce
 8792 0d57 790D0000 		.4byte	.LLST71
 8793 0d5b 24       		.uleb128 0x24
 8794 0d5c E3030000 		.4byte	.LASF117
 8795 0d60 01       		.byte	0x1
 8796 0d61 870B     		.2byte	0xb87
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 280


 8797 0d63 CE000000 		.4byte	0xce
 8798 0d67 D60D0000 		.4byte	.LLST72
 8799 0d6b 24       		.uleb128 0x24
 8800 0d6c 59030000 		.4byte	.LASF118
 8801 0d70 01       		.byte	0x1
 8802 0d71 870B     		.2byte	0xb87
 8803 0d73 CE000000 		.4byte	0xce
 8804 0d77 480E0000 		.4byte	.LLST73
 8805 0d7b 1E       		.uleb128 0x1e
 8806 0d7c 627200   		.ascii	"br\000"
 8807 0d7f 01       		.byte	0x1
 8808 0d80 870B     		.2byte	0xb87
 8809 0d82 860F0000 		.4byte	0xf86
 8810 0d86 02       		.uleb128 0x2
 8811 0d87 91       		.byte	0x91
 8812 0d88 50       		.sleb128 -48
 8813 0d89 24       		.uleb128 0x24
 8814 0d8a C2000000 		.4byte	.LASF119
 8815 0d8e 01       		.byte	0x1
 8816 0d8f 880B     		.2byte	0xb88
 8817 0d91 C3000000 		.4byte	0xc3
 8818 0d95 820E0000 		.4byte	.LLST74
 8819 0d99 1A       		.uleb128 0x1a
 8820 0d9a 667300   		.ascii	"fs\000"
 8821 0d9d 01       		.byte	0x1
 8822 0d9e 890B     		.2byte	0xb89
 8823 0da0 49020000 		.4byte	0x249
 8824 0da4 CC0E0000 		.4byte	.LLST75
 8825 0da8 1A       		.uleb128 0x1a
 8826 0da9 6900     		.ascii	"i\000"
 8827 0dab 01       		.byte	0x1
 8828 0dac 8A0B     		.2byte	0xb8a
 8829 0dae AD000000 		.4byte	0xad
 8830 0db2 EA0E0000 		.4byte	.LLST76
 8831 0db6 20       		.uleb128 0x20
 8832 0db7 12000000 		.4byte	.LVL167
 8833 0dbb F9090000 		.4byte	0x9f9
 8834 0dbf CB0D0000 		.4byte	0xdcb
 8835 0dc3 21       		.uleb128 0x21
 8836 0dc4 01       		.uleb128 0x1
 8837 0dc5 50       		.byte	0x50
 8838 0dc6 03       		.uleb128 0x3
 8839 0dc7 F3       		.byte	0xf3
 8840 0dc8 01       		.uleb128 0x1
 8841 0dc9 50       		.byte	0x50
 8842 0dca 00       		.byte	0
 8843 0dcb 23       		.uleb128 0x23
 8844 0dcc 34000000 		.4byte	.LVL171
 8845 0dd0 14320000 		.4byte	0x3214
 8846 0dd4 20       		.uleb128 0x20
 8847 0dd5 58000000 		.4byte	.LVL173
 8848 0dd9 71320000 		.4byte	0x3271
 8849 0ddd E80D0000 		.4byte	0xde8
 8850 0de1 21       		.uleb128 0x21
 8851 0de2 01       		.uleb128 0x1
 8852 0de3 50       		.byte	0x50
 8853 0de4 02       		.uleb128 0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 281


 8854 0de5 75       		.byte	0x75
 8855 0de6 00       		.sleb128 0
 8856 0de7 00       		.byte	0
 8857 0de8 20       		.uleb128 0x20
 8858 0de9 72000000 		.4byte	.LVL176
 8859 0ded 020C0000 		.4byte	0xc02
 8860 0df1 010E0000 		.4byte	0xe01
 8861 0df5 21       		.uleb128 0x21
 8862 0df6 01       		.uleb128 0x1
 8863 0df7 51       		.byte	0x51
 8864 0df8 01       		.uleb128 0x1
 8865 0df9 30       		.byte	0x30
 8866 0dfa 21       		.uleb128 0x21
 8867 0dfb 01       		.uleb128 0x1
 8868 0dfc 50       		.byte	0x50
 8869 0dfd 02       		.uleb128 0x2
 8870 0dfe 74       		.byte	0x74
 8871 0dff 00       		.sleb128 0
 8872 0e00 00       		.byte	0
 8873 0e01 20       		.uleb128 0x20
 8874 0e02 8E000000 		.4byte	.LVL182
 8875 0e06 48050000 		.4byte	0x548
 8876 0e0a 1D0E0000 		.4byte	0xe1d
 8877 0e0e 21       		.uleb128 0x21
 8878 0e0f 01       		.uleb128 0x1
 8879 0e10 50       		.byte	0x50
 8880 0e11 0A       		.uleb128 0xa
 8881 0e12 75       		.byte	0x75
 8882 0e13 00       		.sleb128 0
 8883 0e14 34       		.byte	0x34
 8884 0e15 24       		.byte	0x24
 8885 0e16 74       		.byte	0x74
 8886 0e17 00       		.sleb128 0
 8887 0e18 22       		.byte	0x22
 8888 0e19 23       		.byte	0x23
 8889 0e1a F603     		.uleb128 0x1f6
 8890 0e1c 00       		.byte	0
 8891 0e1d 20       		.uleb128 0x20
 8892 0e1e BC000000 		.4byte	.LVL190
 8893 0e22 020C0000 		.4byte	0xc02
 8894 0e26 370E0000 		.4byte	0xe37
 8895 0e2a 21       		.uleb128 0x21
 8896 0e2b 01       		.uleb128 0x1
 8897 0e2c 51       		.byte	0x51
 8898 0e2d 02       		.uleb128 0x2
 8899 0e2e 76       		.byte	0x76
 8900 0e2f 00       		.sleb128 0
 8901 0e30 21       		.uleb128 0x21
 8902 0e31 01       		.uleb128 0x1
 8903 0e32 50       		.byte	0x50
 8904 0e33 02       		.uleb128 0x2
 8905 0e34 74       		.byte	0x74
 8906 0e35 00       		.sleb128 0
 8907 0e36 00       		.byte	0
 8908 0e37 20       		.uleb128 0x20
 8909 0e38 DE000000 		.4byte	.LVL195
 8910 0e3c 0E050000 		.4byte	0x50e
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 282


 8911 0e40 4B0E0000 		.4byte	0xe4b
 8912 0e44 21       		.uleb128 0x21
 8913 0e45 01       		.uleb128 0x1
 8914 0e46 50       		.byte	0x50
 8915 0e47 02       		.uleb128 0x2
 8916 0e48 74       		.byte	0x74
 8917 0e49 3B       		.sleb128 59
 8918 0e4a 00       		.byte	0
 8919 0e4b 20       		.uleb128 0x20
 8920 0e4c EE000000 		.4byte	.LVL196
 8921 0e50 0E050000 		.4byte	0x50e
 8922 0e54 600E0000 		.4byte	0xe60
 8923 0e58 21       		.uleb128 0x21
 8924 0e59 01       		.uleb128 0x1
 8925 0e5a 50       		.byte	0x50
 8926 0e5b 03       		.uleb128 0x3
 8927 0e5c 74       		.byte	0x74
 8928 0e5d C600     		.sleb128 70
 8929 0e5f 00       		.byte	0
 8930 0e60 20       		.uleb128 0x20
 8931 0e61 FA000000 		.4byte	.LVL199
 8932 0e65 48050000 		.4byte	0x548
 8933 0e69 750E0000 		.4byte	0xe75
 8934 0e6d 21       		.uleb128 0x21
 8935 0e6e 01       		.uleb128 0x1
 8936 0e6f 50       		.byte	0x50
 8937 0e70 03       		.uleb128 0x3
 8938 0e71 74       		.byte	0x74
 8939 0e72 D400     		.sleb128 84
 8940 0e74 00       		.byte	0
 8941 0e75 20       		.uleb128 0x20
 8942 0e76 34010000 		.4byte	.LVL202
 8943 0e7a 0E050000 		.4byte	0x50e
 8944 0e7e 8A0E0000 		.4byte	0xe8a
 8945 0e82 21       		.uleb128 0x21
 8946 0e83 01       		.uleb128 0x1
 8947 0e84 50       		.byte	0x50
 8948 0e85 03       		.uleb128 0x3
 8949 0e86 74       		.byte	0x74
 8950 0e87 C100     		.sleb128 65
 8951 0e89 00       		.byte	0
 8952 0e8a 20       		.uleb128 0x20
 8953 0e8b 48010000 		.4byte	.LVL203
 8954 0e8f 0E050000 		.4byte	0x50e
 8955 0e93 9F0E0000 		.4byte	0xe9f
 8956 0e97 21       		.uleb128 0x21
 8957 0e98 01       		.uleb128 0x1
 8958 0e99 50       		.byte	0x50
 8959 0e9a 03       		.uleb128 0x3
 8960 0e9b 74       		.byte	0x74
 8961 0e9c C300     		.sleb128 67
 8962 0e9e 00       		.byte	0
 8963 0e9f 20       		.uleb128 0x20
 8964 0ea0 54010000 		.4byte	.LVL206
 8965 0ea4 48050000 		.4byte	0x548
 8966 0ea8 B40E0000 		.4byte	0xeb4
 8967 0eac 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 283


 8968 0ead 01       		.uleb128 0x1
 8969 0eae 50       		.byte	0x50
 8970 0eaf 03       		.uleb128 0x3
 8971 0eb0 74       		.byte	0x74
 8972 0eb1 D000     		.sleb128 80
 8973 0eb3 00       		.byte	0
 8974 0eb4 20       		.uleb128 0x20
 8975 0eb5 5E010000 		.4byte	.LVL209
 8976 0eb9 0E050000 		.4byte	0x50e
 8977 0ebd C80E0000 		.4byte	0xec8
 8978 0ec1 21       		.uleb128 0x21
 8979 0ec2 01       		.uleb128 0x1
 8980 0ec3 50       		.byte	0x50
 8981 0ec4 02       		.uleb128 0x2
 8982 0ec5 74       		.byte	0x74
 8983 0ec6 3E       		.sleb128 62
 8984 0ec7 00       		.byte	0
 8985 0ec8 20       		.uleb128 0x20
 8986 0ec9 B2010000 		.4byte	.LVL219
 8987 0ecd 0E050000 		.4byte	0x50e
 8988 0ed1 DD0E0000 		.4byte	0xedd
 8989 0ed5 21       		.uleb128 0x21
 8990 0ed6 01       		.uleb128 0x1
 8991 0ed7 50       		.byte	0x50
 8992 0ed8 03       		.uleb128 0x3
 8993 0ed9 74       		.byte	0x74
 8994 0eda DA00     		.sleb128 90
 8995 0edc 00       		.byte	0
 8996 0edd 20       		.uleb128 0x20
 8997 0ede C4010000 		.4byte	.LVL220
 8998 0ee2 48050000 		.4byte	0x548
 8999 0ee6 F20E0000 		.4byte	0xef2
 9000 0eea 21       		.uleb128 0x21
 9001 0eeb 01       		.uleb128 0x1
 9002 0eec 50       		.byte	0x50
 9003 0eed 03       		.uleb128 0x3
 9004 0eee 74       		.byte	0x74
 9005 0eef DC00     		.sleb128 92
 9006 0ef1 00       		.byte	0
 9007 0ef2 20       		.uleb128 0x20
 9008 0ef3 0A020000 		.4byte	.LVL228
 9009 0ef7 0E050000 		.4byte	0x50e
 9010 0efb 070F0000 		.4byte	0xf07
 9011 0eff 21       		.uleb128 0x21
 9012 0f00 01       		.uleb128 0x1
 9013 0f01 50       		.byte	0x50
 9014 0f02 03       		.uleb128 0x3
 9015 0f03 74       		.byte	0x74
 9016 0f04 E000     		.sleb128 96
 9017 0f06 00       		.byte	0
 9018 0f07 20       		.uleb128 0x20
 9019 0f08 16020000 		.4byte	.LVL229
 9020 0f0c 890B0000 		.4byte	0xb89
 9021 0f10 210F0000 		.4byte	0xf21
 9022 0f14 21       		.uleb128 0x21
 9023 0f15 01       		.uleb128 0x1
 9024 0f16 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 284


 9025 0f17 02       		.uleb128 0x2
 9026 0f18 76       		.byte	0x76
 9027 0f19 01       		.sleb128 1
 9028 0f1a 21       		.uleb128 0x21
 9029 0f1b 01       		.uleb128 0x1
 9030 0f1c 50       		.byte	0x50
 9031 0f1d 02       		.uleb128 0x2
 9032 0f1e 74       		.byte	0x74
 9033 0f1f 00       		.sleb128 0
 9034 0f20 00       		.byte	0
 9035 0f21 20       		.uleb128 0x20
 9036 0f22 24020000 		.4byte	.LVL230
 9037 0f26 0E050000 		.4byte	0x50e
 9038 0f2a 360F0000 		.4byte	0xf36
 9039 0f2e 21       		.uleb128 0x21
 9040 0f2f 01       		.uleb128 0x1
 9041 0f30 50       		.byte	0x50
 9042 0f31 03       		.uleb128 0x3
 9043 0f32 74       		.byte	0x74
 9044 0f33 AE04     		.sleb128 558
 9045 0f35 00       		.byte	0
 9046 0f36 20       		.uleb128 0x20
 9047 0f37 34020000 		.4byte	.LVL231
 9048 0f3b 48050000 		.4byte	0x548
 9049 0f3f 4A0F0000 		.4byte	0xf4a
 9050 0f43 21       		.uleb128 0x21
 9051 0f44 01       		.uleb128 0x1
 9052 0f45 50       		.byte	0x50
 9053 0f46 02       		.uleb128 0x2
 9054 0f47 74       		.byte	0x74
 9055 0f48 30       		.sleb128 48
 9056 0f49 00       		.byte	0
 9057 0f4a 20       		.uleb128 0x20
 9058 0f4b 42020000 		.4byte	.LVL232
 9059 0f4f 48050000 		.4byte	0x548
 9060 0f53 5F0F0000 		.4byte	0xf5f
 9061 0f57 21       		.uleb128 0x21
 9062 0f58 01       		.uleb128 0x1
 9063 0f59 50       		.byte	0x50
 9064 0f5a 03       		.uleb128 0x3
 9065 0f5b 74       		.byte	0x74
 9066 0f5c 9404     		.sleb128 532
 9067 0f5e 00       		.byte	0
 9068 0f5f 20       		.uleb128 0x20
 9069 0f60 50020000 		.4byte	.LVL233
 9070 0f64 48050000 		.4byte	0x548
 9071 0f68 740F0000 		.4byte	0xf74
 9072 0f6c 21       		.uleb128 0x21
 9073 0f6d 01       		.uleb128 0x1
 9074 0f6e 50       		.byte	0x50
 9075 0f6f 03       		.uleb128 0x3
 9076 0f70 74       		.byte	0x74
 9077 0f71 9804     		.sleb128 536
 9078 0f73 00       		.byte	0
 9079 0f74 22       		.uleb128 0x22
 9080 0f75 5A020000 		.4byte	.LVL234
 9081 0f79 48050000 		.4byte	0x548
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 285


 9082 0f7d 21       		.uleb128 0x21
 9083 0f7e 01       		.uleb128 0x1
 9084 0f7f 50       		.byte	0x50
 9085 0f80 03       		.uleb128 0x3
 9086 0f81 74       		.byte	0x74
 9087 0f82 9C04     		.sleb128 540
 9088 0f84 00       		.byte	0
 9089 0f85 00       		.byte	0
 9090 0f86 08       		.uleb128 0x8
 9091 0f87 CE000000 		.4byte	0xce
 9092 0f8b 960F0000 		.4byte	0xf96
 9093 0f8f 0D       		.uleb128 0xd
 9094 0f90 E8010000 		.4byte	0x1e8
 9095 0f94 03       		.byte	0x3
 9096 0f95 00       		.byte	0
 9097 0f96 18       		.uleb128 0x18
 9098 0f97 21000000 		.4byte	.LASF120
 9099 0f9b 01       		.byte	0x1
 9100 0f9c 2604     		.2byte	0x426
 9101 0f9e 2D040000 		.4byte	0x42d
 9102 0fa2 00000000 		.4byte	.LFB13
 9103 0fa6 0A010000 		.4byte	.LFE13-.LFB13
 9104 0faa 01       		.uleb128 0x1
 9105 0fab 9C       		.byte	0x9c
 9106 0fac A6100000 		.4byte	0x10a6
 9107 0fb0 19       		.uleb128 0x19
 9108 0fb1 667300   		.ascii	"fs\000"
 9109 0fb4 01       		.byte	0x1
 9110 0fb5 2704     		.2byte	0x427
 9111 0fb7 49020000 		.4byte	0x249
 9112 0fbb 080F0000 		.4byte	.LLST77
 9113 0fbf 1F       		.uleb128 0x1f
 9114 0fc0 16030000 		.4byte	.LASF97
 9115 0fc4 01       		.byte	0x1
 9116 0fc5 2804     		.2byte	0x428
 9117 0fc7 CE000000 		.4byte	0xce
 9118 0fcb 6B0F0000 		.4byte	.LLST78
 9119 0fcf 19       		.uleb128 0x19
 9120 0fd0 76616C00 		.ascii	"val\000"
 9121 0fd4 01       		.byte	0x1
 9122 0fd5 2904     		.2byte	0x429
 9123 0fd7 CE000000 		.4byte	0xce
 9124 0fdb EA0F0000 		.4byte	.LLST79
 9125 0fdf 1A       		.uleb128 0x1a
 9126 0fe0 626300   		.ascii	"bc\000"
 9127 0fe3 01       		.byte	0x1
 9128 0fe4 2C04     		.2byte	0x42c
 9129 0fe6 AD000000 		.4byte	0xad
 9130 0fea 8F100000 		.4byte	.LLST80
 9131 0fee 1A       		.uleb128 0x1a
 9132 0fef 7000     		.ascii	"p\000"
 9133 0ff1 01       		.byte	0x1
 9134 0ff2 2D04     		.2byte	0x42d
 9135 0ff4 D0020000 		.4byte	0x2d0
 9136 0ff8 CE100000 		.4byte	.LLST81
 9137 0ffc 1A       		.uleb128 0x1a
 9138 0ffd 72657300 		.ascii	"res\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 286


 9139 1001 01       		.byte	0x1
 9140 1002 2E04     		.2byte	0x42e
 9141 1004 2D040000 		.4byte	0x42d
 9142 1008 33110000 		.4byte	.LLST82
 9143 100c 20       		.uleb128 0x20
 9144 100d 30000000 		.4byte	.LVL270
 9145 1011 890B0000 		.4byte	0xb89
 9146 1015 20100000 		.4byte	0x1020
 9147 1019 21       		.uleb128 0x21
 9148 101a 01       		.uleb128 0x1
 9149 101b 50       		.byte	0x50
 9150 101c 02       		.uleb128 0x2
 9151 101d 75       		.byte	0x75
 9152 101e 00       		.sleb128 0
 9153 101f 00       		.byte	0
 9154 1020 20       		.uleb128 0x20
 9155 1021 72000000 		.4byte	.LVL276
 9156 1025 890B0000 		.4byte	0xb89
 9157 1029 34100000 		.4byte	0x1034
 9158 102d 21       		.uleb128 0x21
 9159 102e 01       		.uleb128 0x1
 9160 102f 50       		.byte	0x50
 9161 1030 02       		.uleb128 0x2
 9162 1031 75       		.byte	0x75
 9163 1032 00       		.sleb128 0
 9164 1033 00       		.byte	0
 9165 1034 20       		.uleb128 0x20
 9166 1035 AC000000 		.4byte	.LVL284
 9167 1039 890B0000 		.4byte	0xb89
 9168 103d 48100000 		.4byte	0x1048
 9169 1041 21       		.uleb128 0x21
 9170 1042 01       		.uleb128 0x1
 9171 1043 50       		.byte	0x50
 9172 1044 02       		.uleb128 0x2
 9173 1045 75       		.byte	0x75
 9174 1046 00       		.sleb128 0
 9175 1047 00       		.byte	0
 9176 1048 20       		.uleb128 0x20
 9177 1049 C0000000 		.4byte	.LVL286
 9178 104d 82050000 		.4byte	0x582
 9179 1051 6D100000 		.4byte	0x106d
 9180 1055 21       		.uleb128 0x21
 9181 1056 01       		.uleb128 0x1
 9182 1057 51       		.byte	0x51
 9183 1058 02       		.uleb128 0x2
 9184 1059 77       		.byte	0x77
 9185 105a 00       		.sleb128 0
 9186 105b 21       		.uleb128 0x21
 9187 105c 01       		.uleb128 0x1
 9188 105d 50       		.byte	0x50
 9189 105e 0D       		.uleb128 0xd
 9190 105f 74       		.byte	0x74
 9191 1060 00       		.sleb128 0
 9192 1061 31       		.byte	0x31
 9193 1062 24       		.byte	0x24
 9194 1063 0A       		.byte	0xa
 9195 1064 FE01     		.2byte	0x1fe
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 287


 9196 1066 1A       		.byte	0x1a
 9197 1067 75       		.byte	0x75
 9198 1068 00       		.sleb128 0
 9199 1069 22       		.byte	0x22
 9200 106a 23       		.byte	0x23
 9201 106b 30       		.uleb128 0x30
 9202 106c 00       		.byte	0
 9203 106d 20       		.uleb128 0x20
 9204 106e D0000000 		.4byte	.LVL289
 9205 1072 890B0000 		.4byte	0xb89
 9206 1076 81100000 		.4byte	0x1081
 9207 107a 21       		.uleb128 0x21
 9208 107b 01       		.uleb128 0x1
 9209 107c 50       		.byte	0x50
 9210 107d 02       		.uleb128 0x2
 9211 107e 75       		.byte	0x75
 9212 107f 00       		.sleb128 0
 9213 1080 00       		.byte	0
 9214 1081 20       		.uleb128 0x20
 9215 1082 E8000000 		.4byte	.LVL293
 9216 1086 48050000 		.4byte	0x548
 9217 108a 95100000 		.4byte	0x1095
 9218 108e 21       		.uleb128 0x21
 9219 108f 01       		.uleb128 0x1
 9220 1090 50       		.byte	0x50
 9221 1091 02       		.uleb128 0x2
 9222 1092 74       		.byte	0x74
 9223 1093 00       		.sleb128 0
 9224 1094 00       		.byte	0
 9225 1095 22       		.uleb128 0x22
 9226 1096 F4000000 		.4byte	.LVL296
 9227 109a B9050000 		.4byte	0x5b9
 9228 109e 21       		.uleb128 0x21
 9229 109f 01       		.uleb128 0x1
 9230 10a0 50       		.byte	0x50
 9231 10a1 02       		.uleb128 0x2
 9232 10a2 74       		.byte	0x74
 9233 10a3 00       		.sleb128 0
 9234 10a4 00       		.byte	0
 9235 10a5 00       		.byte	0
 9236 10a6 18       		.uleb128 0x18
 9237 10a7 6D040000 		.4byte	.LASF121
 9238 10ab 01       		.byte	0x1
 9239 10ac DA03     		.2byte	0x3da
 9240 10ae CE000000 		.4byte	0xce
 9241 10b2 00000000 		.4byte	.LFB12
 9242 10b6 D0000000 		.4byte	.LFE12-.LFB12
 9243 10ba 01       		.uleb128 0x1
 9244 10bb 9C       		.byte	0x9c
 9245 10bc A8110000 		.4byte	0x11a8
 9246 10c0 19       		.uleb128 0x19
 9247 10c1 6F626A00 		.ascii	"obj\000"
 9248 10c5 01       		.byte	0x1
 9249 10c6 DB03     		.2byte	0x3db
 9250 10c8 EA0A0000 		.4byte	0xaea
 9251 10cc A2110000 		.4byte	.LLST83
 9252 10d0 1F       		.uleb128 0x1f
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 288


 9253 10d1 16030000 		.4byte	.LASF97
 9254 10d5 01       		.byte	0x1
 9255 10d6 DC03     		.2byte	0x3dc
 9256 10d8 CE000000 		.4byte	0xce
 9257 10dc 40120000 		.4byte	.LLST84
 9258 10e0 1A       		.uleb128 0x1a
 9259 10e1 776300   		.ascii	"wc\000"
 9260 10e4 01       		.byte	0x1
 9261 10e5 DF03     		.2byte	0x3df
 9262 10e7 AD000000 		.4byte	0xad
 9263 10eb A0120000 		.4byte	.LLST85
 9264 10ef 1A       		.uleb128 0x1a
 9265 10f0 626300   		.ascii	"bc\000"
 9266 10f3 01       		.byte	0x1
 9267 10f4 DF03     		.2byte	0x3df
 9268 10f6 AD000000 		.4byte	0xad
 9269 10fa 02130000 		.4byte	.LLST86
 9270 10fe 1A       		.uleb128 0x1a
 9271 10ff 76616C00 		.ascii	"val\000"
 9272 1103 01       		.byte	0x1
 9273 1104 E003     		.2byte	0x3e0
 9274 1106 CE000000 		.4byte	0xce
 9275 110a 55130000 		.4byte	.LLST87
 9276 110e 1A       		.uleb128 0x1a
 9277 110f 667300   		.ascii	"fs\000"
 9278 1112 01       		.byte	0x1
 9279 1113 E103     		.2byte	0x3e1
 9280 1115 49020000 		.4byte	0x249
 9281 1119 BD130000 		.4byte	.LLST88
 9282 111d 20       		.uleb128 0x20
 9283 111e 2E000000 		.4byte	.LVL306
 9284 1122 890B0000 		.4byte	0xb89
 9285 1126 31110000 		.4byte	0x1131
 9286 112a 21       		.uleb128 0x21
 9287 112b 01       		.uleb128 0x1
 9288 112c 50       		.byte	0x50
 9289 112d 02       		.uleb128 0x2
 9290 112e 76       		.byte	0x76
 9291 112f 00       		.sleb128 0
 9292 1130 00       		.byte	0
 9293 1131 20       		.uleb128 0x20
 9294 1132 4A000000 		.4byte	.LVL309
 9295 1136 890B0000 		.4byte	0xb89
 9296 113a 45110000 		.4byte	0x1145
 9297 113e 21       		.uleb128 0x21
 9298 113f 01       		.uleb128 0x1
 9299 1140 50       		.byte	0x50
 9300 1141 02       		.uleb128 0x2
 9301 1142 76       		.byte	0x76
 9302 1143 00       		.sleb128 0
 9303 1144 00       		.byte	0
 9304 1145 20       		.uleb128 0x20
 9305 1146 78000000 		.4byte	.LVL319
 9306 114a 890B0000 		.4byte	0xb89
 9307 114e 59110000 		.4byte	0x1159
 9308 1152 21       		.uleb128 0x21
 9309 1153 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 289


 9310 1154 50       		.byte	0x50
 9311 1155 02       		.uleb128 0x2
 9312 1156 76       		.byte	0x76
 9313 1157 00       		.sleb128 0
 9314 1158 00       		.byte	0
 9315 1159 20       		.uleb128 0x20
 9316 115a 88000000 		.4byte	.LVL320
 9317 115e 0E050000 		.4byte	0x50e
 9318 1162 78110000 		.4byte	0x1178
 9319 1166 21       		.uleb128 0x21
 9320 1167 01       		.uleb128 0x1
 9321 1168 50       		.byte	0x50
 9322 1169 0D       		.uleb128 0xd
 9323 116a 74       		.byte	0x74
 9324 116b 00       		.sleb128 0
 9325 116c 31       		.byte	0x31
 9326 116d 24       		.byte	0x24
 9327 116e 0A       		.byte	0xa
 9328 116f FE01     		.2byte	0x1fe
 9329 1171 1A       		.byte	0x1a
 9330 1172 76       		.byte	0x76
 9331 1173 00       		.sleb128 0
 9332 1174 22       		.byte	0x22
 9333 1175 23       		.byte	0x23
 9334 1176 30       		.uleb128 0x30
 9335 1177 00       		.byte	0
 9336 1178 20       		.uleb128 0x20
 9337 1179 96000000 		.4byte	.LVL324
 9338 117d 890B0000 		.4byte	0xb89
 9339 1181 8C110000 		.4byte	0x118c
 9340 1185 21       		.uleb128 0x21
 9341 1186 01       		.uleb128 0x1
 9342 1187 50       		.byte	0x50
 9343 1188 02       		.uleb128 0x2
 9344 1189 76       		.byte	0x76
 9345 118a 00       		.sleb128 0
 9346 118b 00       		.byte	0
 9347 118c 22       		.uleb128 0x22
 9348 118d A6000000 		.4byte	.LVL325
 9349 1191 48050000 		.4byte	0x548
 9350 1195 21       		.uleb128 0x21
 9351 1196 01       		.uleb128 0x1
 9352 1197 50       		.byte	0x50
 9353 1198 0D       		.uleb128 0xd
 9354 1199 74       		.byte	0x74
 9355 119a 00       		.sleb128 0
 9356 119b 32       		.byte	0x32
 9357 119c 24       		.byte	0x24
 9358 119d 0A       		.byte	0xa
 9359 119e FC01     		.2byte	0x1fc
 9360 11a0 1A       		.byte	0x1a
 9361 11a1 76       		.byte	0x76
 9362 11a2 00       		.sleb128 0
 9363 11a3 22       		.byte	0x22
 9364 11a4 23       		.byte	0x23
 9365 11a5 30       		.uleb128 0x30
 9366 11a6 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 290


 9367 11a7 00       		.byte	0
 9368 11a8 18       		.uleb128 0x18
 9369 11a9 43020000 		.4byte	.LASF122
 9370 11ad 01       		.byte	0x1
 9371 11ae 9305     		.2byte	0x593
 9372 11b0 2D040000 		.4byte	0x42d
 9373 11b4 00000000 		.4byte	.LFB16
 9374 11b8 B0000000 		.4byte	.LFE16-.LFB16
 9375 11bc 01       		.uleb128 0x1
 9376 11bd 9C       		.byte	0x9c
 9377 11be 3F120000 		.4byte	0x123f
 9378 11c2 19       		.uleb128 0x19
 9379 11c3 647000   		.ascii	"dp\000"
 9380 11c6 01       		.byte	0x1
 9381 11c7 9405     		.2byte	0x594
 9382 11c9 04090000 		.4byte	0x904
 9383 11cd DB130000 		.4byte	.LLST89
 9384 11d1 19       		.uleb128 0x19
 9385 11d2 6F667300 		.ascii	"ofs\000"
 9386 11d6 01       		.byte	0x1
 9387 11d7 9505     		.2byte	0x595
 9388 11d9 CE000000 		.4byte	0xce
 9389 11dd 3B140000 		.4byte	.LLST90
 9390 11e1 1A       		.uleb128 0x1a
 9391 11e2 63737A00 		.ascii	"csz\000"
 9392 11e6 01       		.byte	0x1
 9393 11e7 9805     		.2byte	0x598
 9394 11e9 CE000000 		.4byte	0xce
 9395 11ed 6F140000 		.4byte	.LLST91
 9396 11f1 24       		.uleb128 0x24
 9397 11f2 16030000 		.4byte	.LASF97
 9398 11f6 01       		.byte	0x1
 9399 11f7 9805     		.2byte	0x598
 9400 11f9 CE000000 		.4byte	0xce
 9401 11fd 8D140000 		.4byte	.LLST92
 9402 1201 1E       		.uleb128 0x1e
 9403 1202 667300   		.ascii	"fs\000"
 9404 1205 01       		.byte	0x1
 9405 1206 9905     		.2byte	0x599
 9406 1208 49020000 		.4byte	0x249
 9407 120c 01       		.uleb128 0x1
 9408 120d 57       		.byte	0x57
 9409 120e 20       		.uleb128 0x20
 9410 120f 46000000 		.4byte	.LVL344
 9411 1213 A6100000 		.4byte	0x10a6
 9412 1217 28120000 		.4byte	0x1228
 9413 121b 21       		.uleb128 0x21
 9414 121c 01       		.uleb128 0x1
 9415 121d 51       		.byte	0x51
 9416 121e 02       		.uleb128 0x2
 9417 121f 75       		.byte	0x75
 9418 1220 00       		.sleb128 0
 9419 1221 21       		.uleb128 0x21
 9420 1222 01       		.uleb128 0x1
 9421 1223 50       		.byte	0x50
 9422 1224 02       		.uleb128 0x2
 9423 1225 76       		.byte	0x76
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 291


 9424 1226 00       		.sleb128 0
 9425 1227 00       		.byte	0
 9426 1228 22       		.uleb128 0x22
 9427 1229 68000000 		.4byte	.LVL347
 9428 122d 65070000 		.4byte	0x765
 9429 1231 21       		.uleb128 0x21
 9430 1232 01       		.uleb128 0x1
 9431 1233 51       		.byte	0x51
 9432 1234 02       		.uleb128 0x2
 9433 1235 75       		.byte	0x75
 9434 1236 00       		.sleb128 0
 9435 1237 21       		.uleb128 0x21
 9436 1238 01       		.uleb128 0x1
 9437 1239 50       		.byte	0x50
 9438 123a 02       		.uleb128 0x2
 9439 123b 77       		.byte	0x77
 9440 123c 00       		.sleb128 0
 9441 123d 00       		.byte	0
 9442 123e 00       		.byte	0
 9443 123f 18       		.uleb128 0x18
 9444 1240 75040000 		.4byte	.LASF123
 9445 1244 01       		.byte	0x1
 9446 1245 2005     		.2byte	0x520
 9447 1247 CE000000 		.4byte	0xce
 9448 124b 00000000 		.4byte	.LFB15
 9449 124f CA000000 		.4byte	.LFE15-.LFB15
 9450 1253 01       		.uleb128 0x1
 9451 1254 9C       		.byte	0x9c
 9452 1255 25130000 		.4byte	0x1325
 9453 1259 19       		.uleb128 0x19
 9454 125a 6F626A00 		.ascii	"obj\000"
 9455 125e 01       		.byte	0x1
 9456 125f 2105     		.2byte	0x521
 9457 1261 EA0A0000 		.4byte	0xaea
 9458 1265 03150000 		.4byte	.LLST93
 9459 1269 1F       		.uleb128 0x1f
 9460 126a 16030000 		.4byte	.LASF97
 9461 126e 01       		.byte	0x1
 9462 126f 2205     		.2byte	0x522
 9463 1271 CE000000 		.4byte	0xce
 9464 1275 37150000 		.4byte	.LLST94
 9465 1279 1A       		.uleb128 0x1a
 9466 127a 637300   		.ascii	"cs\000"
 9467 127d 01       		.byte	0x1
 9468 127e 2505     		.2byte	0x525
 9469 1280 CE000000 		.4byte	0xce
 9470 1284 6B150000 		.4byte	.LLST95
 9471 1288 1A       		.uleb128 0x1a
 9472 1289 6E636C00 		.ascii	"ncl\000"
 9473 128d 01       		.byte	0x1
 9474 128e 2505     		.2byte	0x525
 9475 1290 CE000000 		.4byte	0xce
 9476 1294 C0150000 		.4byte	.LLST96
 9477 1298 1A       		.uleb128 0x1a
 9478 1299 73636C00 		.ascii	"scl\000"
 9479 129d 01       		.byte	0x1
 9480 129e 2505     		.2byte	0x525
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 292


 9481 12a0 CE000000 		.4byte	0xce
 9482 12a4 17160000 		.4byte	.LLST97
 9483 12a8 1A       		.uleb128 0x1a
 9484 12a9 72657300 		.ascii	"res\000"
 9485 12ad 01       		.byte	0x1
 9486 12ae 2605     		.2byte	0x526
 9487 12b0 2D040000 		.4byte	0x42d
 9488 12b4 57160000 		.4byte	.LLST98
 9489 12b8 1E       		.uleb128 0x1e
 9490 12b9 667300   		.ascii	"fs\000"
 9491 12bc 01       		.byte	0x1
 9492 12bd 2705     		.2byte	0x527
 9493 12bf 49020000 		.4byte	0x249
 9494 12c3 01       		.uleb128 0x1
 9495 12c4 56       		.byte	0x56
 9496 12c5 23       		.uleb128 0x23
 9497 12c6 1C000000 		.4byte	.LVL366
 9498 12ca A6100000 		.4byte	0x10a6
 9499 12ce 20       		.uleb128 0x20
 9500 12cf 4E000000 		.4byte	.LVL375
 9501 12d3 A6100000 		.4byte	0x10a6
 9502 12d7 E8120000 		.4byte	0x12e8
 9503 12db 21       		.uleb128 0x21
 9504 12dc 01       		.uleb128 0x1
 9505 12dd 51       		.byte	0x51
 9506 12de 02       		.uleb128 0x2
 9507 12df 74       		.byte	0x74
 9508 12e0 00       		.sleb128 0
 9509 12e1 21       		.uleb128 0x21
 9510 12e2 01       		.uleb128 0x1
 9511 12e3 50       		.byte	0x50
 9512 12e4 02       		.uleb128 0x2
 9513 12e5 77       		.byte	0x77
 9514 12e6 00       		.sleb128 0
 9515 12e7 00       		.byte	0
 9516 12e8 20       		.uleb128 0x20
 9517 12e9 74000000 		.4byte	.LVL379
 9518 12ed 960F0000 		.4byte	0xf96
 9519 12f1 08130000 		.4byte	0x1308
 9520 12f5 21       		.uleb128 0x21
 9521 12f6 01       		.uleb128 0x1
 9522 12f7 52       		.byte	0x52
 9523 12f8 02       		.uleb128 0x2
 9524 12f9 09       		.byte	0x9
 9525 12fa FF       		.byte	0xff
 9526 12fb 21       		.uleb128 0x21
 9527 12fc 01       		.uleb128 0x1
 9528 12fd 51       		.byte	0x51
 9529 12fe 02       		.uleb128 0x2
 9530 12ff 74       		.byte	0x74
 9531 1300 00       		.sleb128 0
 9532 1301 21       		.uleb128 0x21
 9533 1302 01       		.uleb128 0x1
 9534 1303 50       		.byte	0x50
 9535 1304 02       		.uleb128 0x2
 9536 1305 76       		.byte	0x76
 9537 1306 00       		.sleb128 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 293


 9538 1307 00       		.byte	0
 9539 1308 22       		.uleb128 0x22
 9540 1309 88000000 		.4byte	.LVL381
 9541 130d 960F0000 		.4byte	0xf96
 9542 1311 21       		.uleb128 0x21
 9543 1312 01       		.uleb128 0x1
 9544 1313 52       		.byte	0x52
 9545 1314 02       		.uleb128 0x2
 9546 1315 74       		.byte	0x74
 9547 1316 00       		.sleb128 0
 9548 1317 21       		.uleb128 0x21
 9549 1318 01       		.uleb128 0x1
 9550 1319 51       		.byte	0x51
 9551 131a 02       		.uleb128 0x2
 9552 131b 78       		.byte	0x78
 9553 131c 00       		.sleb128 0
 9554 131d 21       		.uleb128 0x21
 9555 131e 01       		.uleb128 0x1
 9556 131f 50       		.byte	0x50
 9557 1320 02       		.uleb128 0x2
 9558 1321 76       		.byte	0x76
 9559 1322 00       		.sleb128 0
 9560 1323 00       		.byte	0
 9561 1324 00       		.byte	0
 9562 1325 18       		.uleb128 0x18
 9563 1326 8A050000 		.4byte	.LASF124
 9564 132a 01       		.byte	0x1
 9565 132b D004     		.2byte	0x4d0
 9566 132d 2D040000 		.4byte	0x42d
 9567 1331 00000000 		.4byte	.LFB14
 9568 1335 7C000000 		.4byte	.LFE14-.LFB14
 9569 1339 01       		.uleb128 0x1
 9570 133a 9C       		.byte	0x9c
 9571 133b F3130000 		.4byte	0x13f3
 9572 133f 19       		.uleb128 0x19
 9573 1340 6F626A00 		.ascii	"obj\000"
 9574 1344 01       		.byte	0x1
 9575 1345 D104     		.2byte	0x4d1
 9576 1347 EA0A0000 		.4byte	0xaea
 9577 134b 80160000 		.4byte	.LLST99
 9578 134f 1F       		.uleb128 0x1f
 9579 1350 16030000 		.4byte	.LASF97
 9580 1354 01       		.byte	0x1
 9581 1355 D204     		.2byte	0x4d2
 9582 1357 CE000000 		.4byte	0xce
 9583 135b CA160000 		.4byte	.LLST100
 9584 135f 1F       		.uleb128 0x1f
 9585 1360 7A050000 		.4byte	.LASF125
 9586 1364 01       		.byte	0x1
 9587 1365 D304     		.2byte	0x4d3
 9588 1367 CE000000 		.4byte	0xce
 9589 136b 09170000 		.4byte	.LLST101
 9590 136f 1A       		.uleb128 0x1a
 9591 1370 72657300 		.ascii	"res\000"
 9592 1374 01       		.byte	0x1
 9593 1375 D604     		.2byte	0x4d6
 9594 1377 2D040000 		.4byte	0x42d
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 294


 9595 137b 4E170000 		.4byte	.LLST102
 9596 137f 1A       		.uleb128 0x1a
 9597 1380 6E787400 		.ascii	"nxt\000"
 9598 1384 01       		.byte	0x1
 9599 1385 D704     		.2byte	0x4d7
 9600 1387 CE000000 		.4byte	0xce
 9601 138b 8F170000 		.4byte	.LLST103
 9602 138f 1E       		.uleb128 0x1e
 9603 1390 667300   		.ascii	"fs\000"
 9604 1393 01       		.byte	0x1
 9605 1394 D804     		.2byte	0x4d8
 9606 1396 49020000 		.4byte	0x249
 9607 139a 01       		.uleb128 0x1
 9608 139b 54       		.byte	0x54
 9609 139c 20       		.uleb128 0x20
 9610 139d 20000000 		.4byte	.LVL399
 9611 13a1 960F0000 		.4byte	0xf96
 9612 13a5 BD130000 		.4byte	0x13bd
 9613 13a9 21       		.uleb128 0x21
 9614 13aa 01       		.uleb128 0x1
 9615 13ab 52       		.byte	0x52
 9616 13ac 02       		.uleb128 0x2
 9617 13ad 09       		.byte	0x9
 9618 13ae FF       		.byte	0xff
 9619 13af 21       		.uleb128 0x21
 9620 13b0 01       		.uleb128 0x1
 9621 13b1 51       		.byte	0x51
 9622 13b2 03       		.uleb128 0x3
 9623 13b3 F3       		.byte	0xf3
 9624 13b4 01       		.uleb128 0x1
 9625 13b5 52       		.byte	0x52
 9626 13b6 21       		.uleb128 0x21
 9627 13b7 01       		.uleb128 0x1
 9628 13b8 50       		.byte	0x50
 9629 13b9 02       		.uleb128 0x2
 9630 13ba 74       		.byte	0x74
 9631 13bb 00       		.sleb128 0
 9632 13bc 00       		.byte	0
 9633 13bd 20       		.uleb128 0x20
 9634 13be 2A000000 		.4byte	.LVL401
 9635 13c2 A6100000 		.4byte	0x10a6
 9636 13c6 D7130000 		.4byte	0x13d7
 9637 13ca 21       		.uleb128 0x21
 9638 13cb 01       		.uleb128 0x1
 9639 13cc 51       		.byte	0x51
 9640 13cd 02       		.uleb128 0x2
 9641 13ce 76       		.byte	0x76
 9642 13cf 00       		.sleb128 0
 9643 13d0 21       		.uleb128 0x21
 9644 13d1 01       		.uleb128 0x1
 9645 13d2 50       		.byte	0x50
 9646 13d3 02       		.uleb128 0x2
 9647 13d4 77       		.byte	0x77
 9648 13d5 00       		.sleb128 0
 9649 13d6 00       		.byte	0
 9650 13d7 22       		.uleb128 0x22
 9651 13d8 42000000 		.4byte	.LVL403
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 295


 9652 13dc 960F0000 		.4byte	0xf96
 9653 13e0 21       		.uleb128 0x21
 9654 13e1 01       		.uleb128 0x1
 9655 13e2 52       		.byte	0x52
 9656 13e3 01       		.uleb128 0x1
 9657 13e4 30       		.byte	0x30
 9658 13e5 21       		.uleb128 0x21
 9659 13e6 01       		.uleb128 0x1
 9660 13e7 51       		.byte	0x51
 9661 13e8 02       		.uleb128 0x2
 9662 13e9 76       		.byte	0x76
 9663 13ea 00       		.sleb128 0
 9664 13eb 21       		.uleb128 0x21
 9665 13ec 01       		.uleb128 0x1
 9666 13ed 50       		.byte	0x50
 9667 13ee 02       		.uleb128 0x2
 9668 13ef 74       		.byte	0x74
 9669 13f0 00       		.sleb128 0
 9670 13f1 00       		.byte	0
 9671 13f2 00       		.byte	0
 9672 13f3 18       		.uleb128 0x18
 9673 13f4 2D010000 		.4byte	.LASF126
 9674 13f8 01       		.byte	0x1
 9675 13f9 2C09     		.2byte	0x92c
 9676 13fb 2D040000 		.4byte	0x42d
 9677 13ff 00000000 		.4byte	.LFB24
 9678 1403 20000000 		.4byte	.LFE24-.LFB24
 9679 1407 01       		.uleb128 0x1
 9680 1408 9C       		.byte	0x9c
 9681 1409 4A140000 		.4byte	0x144a
 9682 140d 19       		.uleb128 0x19
 9683 140e 647000   		.ascii	"dp\000"
 9684 1411 01       		.byte	0x1
 9685 1412 2D09     		.2byte	0x92d
 9686 1414 04090000 		.4byte	0x904
 9687 1418 EF170000 		.4byte	.LLST104
 9688 141c 1A       		.uleb128 0x1a
 9689 141d 72657300 		.ascii	"res\000"
 9690 1421 01       		.byte	0x1
 9691 1422 3009     		.2byte	0x930
 9692 1424 2D040000 		.4byte	0x42d
 9693 1428 0D180000 		.4byte	.LLST105
 9694 142c 1E       		.uleb128 0x1e
 9695 142d 667300   		.ascii	"fs\000"
 9696 1430 01       		.byte	0x1
 9697 1431 3109     		.2byte	0x931
 9698 1433 49020000 		.4byte	0x249
 9699 1437 01       		.uleb128 0x1
 9700 1438 55       		.byte	0x55
 9701 1439 22       		.uleb128 0x22
 9702 143a 0E000000 		.4byte	.LVL421
 9703 143e 890B0000 		.4byte	0xb89
 9704 1442 21       		.uleb128 0x21
 9705 1443 01       		.uleb128 0x1
 9706 1444 50       		.byte	0x50
 9707 1445 02       		.uleb128 0x2
 9708 1446 75       		.byte	0x75
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 296


 9709 1447 00       		.sleb128 0
 9710 1448 00       		.byte	0
 9711 1449 00       		.byte	0
 9712 144a 18       		.uleb128 0x18
 9713 144b 60030000 		.4byte	.LASF127
 9714 144f 01       		.byte	0x1
 9715 1450 C405     		.2byte	0x5c4
 9716 1452 2D040000 		.4byte	0x42d
 9717 1456 00000000 		.4byte	.LFB17
 9718 145a 26010000 		.4byte	.LFE17-.LFB17
 9719 145e 01       		.uleb128 0x1
 9720 145f 9C       		.byte	0x9c
 9721 1460 54150000 		.4byte	0x1554
 9722 1464 19       		.uleb128 0x19
 9723 1465 647000   		.ascii	"dp\000"
 9724 1468 01       		.byte	0x1
 9725 1469 C505     		.2byte	0x5c5
 9726 146b 04090000 		.4byte	0x904
 9727 146f 20180000 		.4byte	.LLST106
 9728 1473 1F       		.uleb128 0x1f
 9729 1474 2E020000 		.4byte	.LASF128
 9730 1478 01       		.byte	0x1
 9731 1479 C605     		.2byte	0x5c6
 9732 147b 7E000000 		.4byte	0x7e
 9733 147f 91180000 		.4byte	.LLST107
 9734 1483 1E       		.uleb128 0x1e
 9735 1484 6F667300 		.ascii	"ofs\000"
 9736 1488 01       		.byte	0x1
 9737 1489 C905     		.2byte	0x5c9
 9738 148b CE000000 		.4byte	0xce
 9739 148f 01       		.uleb128 0x1
 9740 1490 55       		.byte	0x55
 9741 1491 24       		.uleb128 0x24
 9742 1492 16030000 		.4byte	.LASF97
 9743 1496 01       		.byte	0x1
 9744 1497 C905     		.2byte	0x5c9
 9745 1499 CE000000 		.4byte	0xce
 9746 149d E1180000 		.4byte	.LLST108
 9747 14a1 1A       		.uleb128 0x1a
 9748 14a2 667300   		.ascii	"fs\000"
 9749 14a5 01       		.byte	0x1
 9750 14a6 CA05     		.2byte	0x5ca
 9751 14a8 49020000 		.4byte	0x249
 9752 14ac 99190000 		.4byte	.LLST109
 9753 14b0 1A       		.uleb128 0x1a
 9754 14b1 6E00     		.ascii	"n\000"
 9755 14b3 01       		.byte	0x1
 9756 14b4 CC05     		.2byte	0x5cc
 9757 14b6 AD000000 		.4byte	0xad
 9758 14ba B7190000 		.4byte	.LLST110
 9759 14be 23       		.uleb128 0x23
 9760 14bf 4C000000 		.4byte	.LVL429
 9761 14c3 A6100000 		.4byte	0x10a6
 9762 14c7 20       		.uleb128 0x20
 9763 14c8 76000000 		.4byte	.LVL434
 9764 14cc 3F120000 		.4byte	0x123f
 9765 14d0 DB140000 		.4byte	0x14db
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 297


 9766 14d4 21       		.uleb128 0x21
 9767 14d5 01       		.uleb128 0x1
 9768 14d6 50       		.byte	0x50
 9769 14d7 02       		.uleb128 0x2
 9770 14d8 74       		.byte	0x74
 9771 14d9 00       		.sleb128 0
 9772 14da 00       		.byte	0
 9773 14db 20       		.uleb128 0x20
 9774 14dc 8C000000 		.4byte	.LVL436
 9775 14e0 F60A0000 		.4byte	0xaf6
 9776 14e4 EF140000 		.4byte	0x14ef
 9777 14e8 21       		.uleb128 0x21
 9778 14e9 01       		.uleb128 0x1
 9779 14ea 50       		.byte	0x50
 9780 14eb 02       		.uleb128 0x2
 9781 14ec 76       		.byte	0x76
 9782 14ed 00       		.sleb128 0
 9783 14ee 00       		.byte	0
 9784 14ef 20       		.uleb128 0x20
 9785 14f0 9E000000 		.4byte	.LVL437
 9786 14f4 5A060000 		.4byte	0x65a
 9787 14f8 0F150000 		.4byte	0x150f
 9788 14fc 21       		.uleb128 0x21
 9789 14fd 01       		.uleb128 0x1
 9790 14fe 52       		.byte	0x52
 9791 14ff 03       		.uleb128 0x3
 9792 1500 0A       		.byte	0xa
 9793 1501 0002     		.2byte	0x200
 9794 1503 21       		.uleb128 0x21
 9795 1504 01       		.uleb128 0x1
 9796 1505 51       		.byte	0x51
 9797 1506 01       		.uleb128 0x1
 9798 1507 30       		.byte	0x30
 9799 1508 21       		.uleb128 0x21
 9800 1509 01       		.uleb128 0x1
 9801 150a 50       		.byte	0x50
 9802 150b 02       		.uleb128 0x2
 9803 150c 76       		.byte	0x76
 9804 150d 30       		.sleb128 48
 9805 150e 00       		.byte	0
 9806 150f 20       		.uleb128 0x20
 9807 1510 A6000000 		.4byte	.LVL438
 9808 1514 65070000 		.4byte	0x765
 9809 1518 29150000 		.4byte	0x1529
 9810 151c 21       		.uleb128 0x21
 9811 151d 01       		.uleb128 0x1
 9812 151e 51       		.byte	0x51
 9813 151f 02       		.uleb128 0x2
 9814 1520 79       		.byte	0x79
 9815 1521 00       		.sleb128 0
 9816 1522 21       		.uleb128 0x21
 9817 1523 01       		.uleb128 0x1
 9818 1524 50       		.byte	0x50
 9819 1525 02       		.uleb128 0x2
 9820 1526 76       		.byte	0x76
 9821 1527 00       		.sleb128 0
 9822 1528 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 298


 9823 1529 20       		.uleb128 0x20
 9824 152a B8000000 		.4byte	.LVL441
 9825 152e F60A0000 		.4byte	0xaf6
 9826 1532 3D150000 		.4byte	0x153d
 9827 1536 21       		.uleb128 0x21
 9828 1537 01       		.uleb128 0x1
 9829 1538 50       		.byte	0x50
 9830 1539 02       		.uleb128 0x2
 9831 153a 76       		.byte	0x76
 9832 153b 00       		.sleb128 0
 9833 153c 00       		.byte	0
 9834 153d 22       		.uleb128 0x22
 9835 153e DE000000 		.4byte	.LVL445
 9836 1542 65070000 		.4byte	0x765
 9837 1546 21       		.uleb128 0x21
 9838 1547 01       		.uleb128 0x1
 9839 1548 51       		.byte	0x51
 9840 1549 02       		.uleb128 0x2
 9841 154a 79       		.byte	0x79
 9842 154b 00       		.sleb128 0
 9843 154c 21       		.uleb128 0x21
 9844 154d 01       		.uleb128 0x1
 9845 154e 50       		.byte	0x50
 9846 154f 02       		.uleb128 0x2
 9847 1550 76       		.byte	0x76
 9848 1551 00       		.sleb128 0
 9849 1552 00       		.byte	0
 9850 1553 00       		.byte	0
 9851 1554 18       		.uleb128 0x18
 9852 1555 9B000000 		.4byte	.LASF129
 9853 1559 01       		.byte	0x1
 9854 155a 7608     		.2byte	0x876
 9855 155c 2D040000 		.4byte	0x42d
 9856 1560 00000000 		.4byte	.LFB22
 9857 1564 54000000 		.4byte	.LFE22-.LFB22
 9858 1568 01       		.uleb128 0x1
 9859 1569 9C       		.byte	0x9c
 9860 156a 04160000 		.4byte	0x1604
 9861 156e 19       		.uleb128 0x19
 9862 156f 647000   		.ascii	"dp\000"
 9863 1572 01       		.byte	0x1
 9864 1573 7708     		.2byte	0x877
 9865 1575 04090000 		.4byte	0x904
 9866 1579 E1190000 		.4byte	.LLST111
 9867 157d 1A       		.uleb128 0x1a
 9868 157e 72657300 		.ascii	"res\000"
 9869 1582 01       		.byte	0x1
 9870 1583 7A08     		.2byte	0x87a
 9871 1585 2D040000 		.4byte	0x42d
 9872 1589 FF190000 		.4byte	.LLST112
 9873 158d 1E       		.uleb128 0x1e
 9874 158e 667300   		.ascii	"fs\000"
 9875 1591 01       		.byte	0x1
 9876 1592 7B08     		.2byte	0x87b
 9877 1594 49020000 		.4byte	0x249
 9878 1598 01       		.uleb128 0x1
 9879 1599 56       		.byte	0x56
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 299


 9880 159a 1A       		.uleb128 0x1a
 9881 159b 6300     		.ascii	"c\000"
 9882 159d 01       		.byte	0x1
 9883 159e 7C08     		.2byte	0x87c
 9884 15a0 B8000000 		.4byte	0xb8
 9885 15a4 3E1A0000 		.4byte	.LLST113
 9886 15a8 20       		.uleb128 0x20
 9887 15a9 0C000000 		.4byte	.LVL466
 9888 15ad A8110000 		.4byte	0x11a8
 9889 15b1 C1150000 		.4byte	0x15c1
 9890 15b5 21       		.uleb128 0x21
 9891 15b6 01       		.uleb128 0x1
 9892 15b7 51       		.byte	0x51
 9893 15b8 01       		.uleb128 0x1
 9894 15b9 30       		.byte	0x30
 9895 15ba 21       		.uleb128 0x21
 9896 15bb 01       		.uleb128 0x1
 9897 15bc 50       		.byte	0x50
 9898 15bd 02       		.uleb128 0x2
 9899 15be 74       		.byte	0x74
 9900 15bf 00       		.sleb128 0
 9901 15c0 00       		.byte	0
 9902 15c1 20       		.uleb128 0x20
 9903 15c2 16000000 		.4byte	.LVL468
 9904 15c6 890B0000 		.4byte	0xb89
 9905 15ca D5150000 		.4byte	0x15d5
 9906 15ce 21       		.uleb128 0x21
 9907 15cf 01       		.uleb128 0x1
 9908 15d0 50       		.byte	0x50
 9909 15d1 02       		.uleb128 0x2
 9910 15d2 76       		.byte	0x76
 9911 15d3 00       		.sleb128 0
 9912 15d4 00       		.byte	0
 9913 15d5 20       		.uleb128 0x20
 9914 15d6 3A000000 		.4byte	.LVL473
 9915 15da AE060000 		.4byte	0x6ae
 9916 15de EE150000 		.4byte	0x15ee
 9917 15e2 21       		.uleb128 0x21
 9918 15e3 01       		.uleb128 0x1
 9919 15e4 52       		.byte	0x52
 9920 15e5 01       		.uleb128 0x1
 9921 15e6 3B       		.byte	0x3b
 9922 15e7 21       		.uleb128 0x21
 9923 15e8 01       		.uleb128 0x1
 9924 15e9 51       		.byte	0x51
 9925 15ea 02       		.uleb128 0x2
 9926 15eb 74       		.byte	0x74
 9927 15ec 20       		.sleb128 32
 9928 15ed 00       		.byte	0
 9929 15ee 22       		.uleb128 0x22
 9930 15ef 44000000 		.4byte	.LVL474
 9931 15f3 4A140000 		.4byte	0x144a
 9932 15f7 21       		.uleb128 0x21
 9933 15f8 01       		.uleb128 0x1
 9934 15f9 51       		.byte	0x51
 9935 15fa 01       		.uleb128 0x1
 9936 15fb 30       		.byte	0x30
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 300


 9937 15fc 21       		.uleb128 0x21
 9938 15fd 01       		.uleb128 0x1
 9939 15fe 50       		.byte	0x50
 9940 15ff 02       		.uleb128 0x2
 9941 1600 74       		.byte	0x74
 9942 1601 00       		.sleb128 0
 9943 1602 00       		.byte	0
 9944 1603 00       		.byte	0
 9945 1604 18       		.uleb128 0x18
 9946 1605 CD040000 		.4byte	.LASF130
 9947 1609 01       		.byte	0x1
 9948 160a CD0A     		.2byte	0xacd
 9949 160c 2D040000 		.4byte	0x42d
 9950 1610 00000000 		.4byte	.LFB27
 9951 1614 8C000000 		.4byte	.LFE27-.LFB27
 9952 1618 01       		.uleb128 0x1
 9953 1619 9C       		.byte	0x9c
 9954 161a D1160000 		.4byte	0x16d1
 9955 161e 19       		.uleb128 0x19
 9956 161f 647000   		.ascii	"dp\000"
 9957 1622 01       		.byte	0x1
 9958 1623 CE0A     		.2byte	0xace
 9959 1625 04090000 		.4byte	0x904
 9960 1629 681A0000 		.4byte	.LLST114
 9961 162d 1F       		.uleb128 0x1f
 9962 162e 6C000000 		.4byte	.LASF102
 9963 1632 01       		.byte	0x1
 9964 1633 CF0A     		.2byte	0xacf
 9965 1635 EE090000 		.4byte	0x9ee
 9966 1639 861A0000 		.4byte	.LLST115
 9967 163d 1A       		.uleb128 0x1a
 9968 163e 72657300 		.ascii	"res\000"
 9969 1642 01       		.byte	0x1
 9970 1643 D20A     		.2byte	0xad2
 9971 1645 2D040000 		.4byte	0x42d
 9972 1649 A71A0000 		.4byte	.LLST116
 9973 164d 1A       		.uleb128 0x1a
 9974 164e 6E7300   		.ascii	"ns\000"
 9975 1651 01       		.byte	0x1
 9976 1652 D30A     		.2byte	0xad3
 9977 1654 B8000000 		.4byte	0xb8
 9978 1658 E61A0000 		.4byte	.LLST117
 9979 165c 1A       		.uleb128 0x1a
 9980 165d 6F626A00 		.ascii	"obj\000"
 9981 1661 01       		.byte	0x1
 9982 1662 D40A     		.2byte	0xad4
 9983 1664 EA0A0000 		.4byte	0xaea
 9984 1668 041B0000 		.4byte	.LLST118
 9985 166c 1E       		.uleb128 0x1e
 9986 166d 667300   		.ascii	"fs\000"
 9987 1670 01       		.byte	0x1
 9988 1671 D50A     		.2byte	0xad5
 9989 1673 49020000 		.4byte	0x249
 9990 1677 01       		.uleb128 0x1
 9991 1678 55       		.byte	0x55
 9992 1679 20       		.uleb128 0x20
 9993 167a 34000000 		.4byte	.LVL483
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 301


 9994 167e A8110000 		.4byte	0x11a8
 9995 1682 92160000 		.4byte	0x1692
 9996 1686 21       		.uleb128 0x21
 9997 1687 01       		.uleb128 0x1
 9998 1688 51       		.byte	0x51
 9999 1689 01       		.uleb128 0x1
 10000 168a 30       		.byte	0x30
 10001 168b 21       		.uleb128 0x21
 10002 168c 01       		.uleb128 0x1
 10003 168d 50       		.byte	0x50
 10004 168e 02       		.uleb128 0x2
 10005 168f 74       		.byte	0x74
 10006 1690 00       		.sleb128 0
 10007 1691 00       		.byte	0
 10008 1692 20       		.uleb128 0x20
 10009 1693 40000000 		.4byte	.LVL486
 10010 1697 10090000 		.4byte	0x910
 10011 169b AC160000 		.4byte	0x16ac
 10012 169f 21       		.uleb128 0x21
 10013 16a0 01       		.uleb128 0x1
 10014 16a1 51       		.byte	0x51
 10015 16a2 02       		.uleb128 0x2
 10016 16a3 91       		.byte	0x91
 10017 16a4 6C       		.sleb128 -20
 10018 16a5 21       		.uleb128 0x21
 10019 16a6 01       		.uleb128 0x1
 10020 16a7 50       		.byte	0x50
 10021 16a8 02       		.uleb128 0x2
 10022 16a9 74       		.byte	0x74
 10023 16aa 00       		.sleb128 0
 10024 16ab 00       		.byte	0
 10025 16ac 20       		.uleb128 0x20
 10026 16ad 4A000000 		.4byte	.LVL488
 10027 16b1 54150000 		.4byte	0x1554
 10028 16b5 C0160000 		.4byte	0x16c0
 10029 16b9 21       		.uleb128 0x21
 10030 16ba 01       		.uleb128 0x1
 10031 16bb 50       		.byte	0x50
 10032 16bc 02       		.uleb128 0x2
 10033 16bd 74       		.byte	0x74
 10034 16be 00       		.sleb128 0
 10035 16bf 00       		.byte	0
 10036 16c0 22       		.uleb128 0x22
 10037 16c1 7C000000 		.4byte	.LVL491
 10038 16c5 9F070000 		.4byte	0x79f
 10039 16c9 21       		.uleb128 0x21
 10040 16ca 01       		.uleb128 0x1
 10041 16cb 50       		.byte	0x50
 10042 16cc 02       		.uleb128 0x2
 10043 16cd 75       		.byte	0x75
 10044 16ce 00       		.sleb128 0
 10045 16cf 00       		.byte	0
 10046 16d0 00       		.byte	0
 10047 16d1 18       		.uleb128 0x18
 10048 16d2 80050000 		.4byte	.LASF131
 10049 16d6 01       		.byte	0x1
 10050 16d7 0A06     		.2byte	0x60a
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 302


 10051 16d9 2D040000 		.4byte	0x42d
 10052 16dd 00000000 		.4byte	.LFB18
 10053 16e1 4C000000 		.4byte	.LFE18-.LFB18
 10054 16e5 01       		.uleb128 0x1
 10055 16e6 9C       		.byte	0x9c
 10056 16e7 78170000 		.4byte	0x1778
 10057 16eb 19       		.uleb128 0x19
 10058 16ec 647000   		.ascii	"dp\000"
 10059 16ef 01       		.byte	0x1
 10060 16f0 0B06     		.2byte	0x60b
 10061 16f2 04090000 		.4byte	0x904
 10062 16f6 221B0000 		.4byte	.LLST119
 10063 16fa 1F       		.uleb128 0x1f
 10064 16fb A6050000 		.4byte	.LASF132
 10065 16ff 01       		.byte	0x1
 10066 1700 0C06     		.2byte	0x60c
 10067 1702 AD000000 		.4byte	0xad
 10068 1706 401B0000 		.4byte	.LLST120
 10069 170a 1A       		.uleb128 0x1a
 10070 170b 72657300 		.ascii	"res\000"
 10071 170f 01       		.byte	0x1
 10072 1710 0F06     		.2byte	0x60f
 10073 1712 2D040000 		.4byte	0x42d
 10074 1716 5E1B0000 		.4byte	.LLST121
 10075 171a 1A       		.uleb128 0x1a
 10076 171b 6E00     		.ascii	"n\000"
 10077 171d 01       		.byte	0x1
 10078 171e 1006     		.2byte	0x610
 10079 1720 AD000000 		.4byte	0xad
 10080 1724 921B0000 		.4byte	.LLST122
 10081 1728 1E       		.uleb128 0x1e
 10082 1729 667300   		.ascii	"fs\000"
 10083 172c 01       		.byte	0x1
 10084 172d 1106     		.2byte	0x611
 10085 172f 49020000 		.4byte	0x249
 10086 1733 01       		.uleb128 0x1
 10087 1734 56       		.byte	0x56
 10088 1735 20       		.uleb128 0x20
 10089 1736 0E000000 		.4byte	.LVL497
 10090 173a A8110000 		.4byte	0x11a8
 10091 173e 4E170000 		.4byte	0x174e
 10092 1742 21       		.uleb128 0x21
 10093 1743 01       		.uleb128 0x1
 10094 1744 51       		.byte	0x51
 10095 1745 01       		.uleb128 0x1
 10096 1746 30       		.byte	0x30
 10097 1747 21       		.uleb128 0x21
 10098 1748 01       		.uleb128 0x1
 10099 1749 50       		.byte	0x50
 10100 174a 02       		.uleb128 0x2
 10101 174b 74       		.byte	0x74
 10102 174c 00       		.sleb128 0
 10103 174d 00       		.byte	0
 10104 174e 20       		.uleb128 0x20
 10105 174f 1C000000 		.4byte	.LVL500
 10106 1753 890B0000 		.4byte	0xb89
 10107 1757 62170000 		.4byte	0x1762
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 303


 10108 175b 21       		.uleb128 0x21
 10109 175c 01       		.uleb128 0x1
 10110 175d 50       		.byte	0x50
 10111 175e 02       		.uleb128 0x2
 10112 175f 76       		.byte	0x76
 10113 1760 00       		.sleb128 0
 10114 1761 00       		.byte	0
 10115 1762 22       		.uleb128 0x22
 10116 1763 3C000000 		.4byte	.LVL504
 10117 1767 4A140000 		.4byte	0x144a
 10118 176b 21       		.uleb128 0x21
 10119 176c 01       		.uleb128 0x1
 10120 176d 51       		.byte	0x51
 10121 176e 01       		.uleb128 0x1
 10122 176f 31       		.byte	0x31
 10123 1770 21       		.uleb128 0x21
 10124 1771 01       		.uleb128 0x1
 10125 1772 50       		.byte	0x50
 10126 1773 02       		.uleb128 0x2
 10127 1774 74       		.byte	0x74
 10128 1775 00       		.sleb128 0
 10129 1776 00       		.byte	0
 10130 1777 00       		.byte	0
 10131 1778 18       		.uleb128 0x18
 10132 1779 71000000 		.4byte	.LASF133
 10133 177d 01       		.byte	0x1
 10134 177e C508     		.2byte	0x8c5
 10135 1780 2D040000 		.4byte	0x42d
 10136 1784 00000000 		.4byte	.LFB23
 10137 1788 3A000000 		.4byte	.LFE23-.LFB23
 10138 178c 01       		.uleb128 0x1
 10139 178d 9C       		.byte	0x9c
 10140 178e 1A180000 		.4byte	0x181a
 10141 1792 19       		.uleb128 0x19
 10142 1793 647000   		.ascii	"dp\000"
 10143 1796 01       		.byte	0x1
 10144 1797 C608     		.2byte	0x8c6
 10145 1799 04090000 		.4byte	0x904
 10146 179d A51B0000 		.4byte	.LLST123
 10147 17a1 1A       		.uleb128 0x1a
 10148 17a2 72657300 		.ascii	"res\000"
 10149 17a6 01       		.byte	0x1
 10150 17a7 C908     		.2byte	0x8c9
 10151 17a9 2D040000 		.4byte	0x42d
 10152 17ad C31B0000 		.4byte	.LLST124
 10153 17b1 1E       		.uleb128 0x1e
 10154 17b2 667300   		.ascii	"fs\000"
 10155 17b5 01       		.byte	0x1
 10156 17b6 CA08     		.2byte	0x8ca
 10157 17b8 49020000 		.4byte	0x249
 10158 17bc 01       		.uleb128 0x1
 10159 17bd 56       		.byte	0x56
 10160 17be 20       		.uleb128 0x20
 10161 17bf 0C000000 		.4byte	.LVL509
 10162 17c3 D1160000 		.4byte	0x16d1
 10163 17c7 D7170000 		.4byte	0x17d7
 10164 17cb 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 304


 10165 17cc 01       		.uleb128 0x1
 10166 17cd 51       		.byte	0x51
 10167 17ce 01       		.uleb128 0x1
 10168 17cf 31       		.byte	0x31
 10169 17d0 21       		.uleb128 0x21
 10170 17d1 01       		.uleb128 0x1
 10171 17d2 50       		.byte	0x50
 10172 17d3 02       		.uleb128 0x2
 10173 17d4 74       		.byte	0x74
 10174 17d5 00       		.sleb128 0
 10175 17d6 00       		.byte	0
 10176 17d7 20       		.uleb128 0x20
 10177 17d8 18000000 		.4byte	.LVL511
 10178 17dc 890B0000 		.4byte	0xb89
 10179 17e0 EB170000 		.4byte	0x17eb
 10180 17e4 21       		.uleb128 0x21
 10181 17e5 01       		.uleb128 0x1
 10182 17e6 50       		.byte	0x50
 10183 17e7 02       		.uleb128 0x2
 10184 17e8 76       		.byte	0x76
 10185 17e9 00       		.sleb128 0
 10186 17ea 00       		.byte	0
 10187 17eb 20       		.uleb128 0x20
 10188 17ec 26000000 		.4byte	.LVL513
 10189 17f0 5A060000 		.4byte	0x65a
 10190 17f4 04180000 		.4byte	0x1804
 10191 17f8 21       		.uleb128 0x21
 10192 17f9 01       		.uleb128 0x1
 10193 17fa 52       		.byte	0x52
 10194 17fb 02       		.uleb128 0x2
 10195 17fc 08       		.byte	0x8
 10196 17fd 20       		.byte	0x20
 10197 17fe 21       		.uleb128 0x21
 10198 17ff 01       		.uleb128 0x1
 10199 1800 51       		.byte	0x51
 10200 1801 01       		.uleb128 0x1
 10201 1802 30       		.byte	0x30
 10202 1803 00       		.byte	0
 10203 1804 22       		.uleb128 0x22
 10204 1805 32000000 		.4byte	.LVL514
 10205 1809 F0050000 		.4byte	0x5f0
 10206 180d 21       		.uleb128 0x21
 10207 180e 01       		.uleb128 0x1
 10208 180f 52       		.byte	0x52
 10209 1810 01       		.uleb128 0x1
 10210 1811 3B       		.byte	0x3b
 10211 1812 21       		.uleb128 0x21
 10212 1813 01       		.uleb128 0x1
 10213 1814 51       		.byte	0x51
 10214 1815 02       		.uleb128 0x2
 10215 1816 74       		.byte	0x74
 10216 1817 20       		.sleb128 32
 10217 1818 00       		.byte	0
 10218 1819 00       		.byte	0
 10219 181a 18       		.uleb128 0x18
 10220 181b 10020000 		.4byte	.LASF134
 10221 181f 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 305


 10222 1820 2908     		.2byte	0x829
 10223 1822 2D040000 		.4byte	0x42d
 10224 1826 00000000 		.4byte	.LFB21
 10225 182a 60000000 		.4byte	.LFE21-.LFB21
 10226 182e 01       		.uleb128 0x1
 10227 182f 9C       		.byte	0x9c
 10228 1830 B6180000 		.4byte	0x18b6
 10229 1834 19       		.uleb128 0x19
 10230 1835 647000   		.ascii	"dp\000"
 10231 1838 01       		.byte	0x1
 10232 1839 2A08     		.2byte	0x82a
 10233 183b 04090000 		.4byte	0x904
 10234 183f EC1B0000 		.4byte	.LLST125
 10235 1843 19       		.uleb128 0x19
 10236 1844 766F6C00 		.ascii	"vol\000"
 10237 1848 01       		.byte	0x1
 10238 1849 2B08     		.2byte	0x82b
 10239 184b 7E000000 		.4byte	0x7e
 10240 184f 0A1C0000 		.4byte	.LLST126
 10241 1853 1A       		.uleb128 0x1a
 10242 1854 72657300 		.ascii	"res\000"
 10243 1858 01       		.byte	0x1
 10244 1859 2E08     		.2byte	0x82e
 10245 185b 2D040000 		.4byte	0x42d
 10246 185f 281C0000 		.4byte	.LLST127
 10247 1863 1E       		.uleb128 0x1e
 10248 1864 667300   		.ascii	"fs\000"
 10249 1867 01       		.byte	0x1
 10250 1868 2F08     		.2byte	0x82f
 10251 186a 49020000 		.4byte	0x249
 10252 186e 01       		.uleb128 0x1
 10253 186f 55       		.byte	0x55
 10254 1870 1A       		.uleb128 0x1a
 10255 1871 6100     		.ascii	"a\000"
 10256 1873 01       		.byte	0x1
 10257 1874 3008     		.2byte	0x830
 10258 1876 B8000000 		.4byte	0xb8
 10259 187a 7E1C0000 		.4byte	.LLST128
 10260 187e 1A       		.uleb128 0x1a
 10261 187f 6300     		.ascii	"c\000"
 10262 1881 01       		.byte	0x1
 10263 1882 3008     		.2byte	0x830
 10264 1884 B8000000 		.4byte	0xb8
 10265 1888 9D1C0000 		.4byte	.LLST129
 10266 188c 20       		.uleb128 0x20
 10267 188d 12000000 		.4byte	.LVL520
 10268 1891 890B0000 		.4byte	0xb89
 10269 1895 A0180000 		.4byte	0x18a0
 10270 1899 21       		.uleb128 0x21
 10271 189a 01       		.uleb128 0x1
 10272 189b 50       		.byte	0x50
 10273 189c 02       		.uleb128 0x2
 10274 189d 75       		.byte	0x75
 10275 189e 00       		.sleb128 0
 10276 189f 00       		.byte	0
 10277 18a0 22       		.uleb128 0x22
 10278 18a1 48000000 		.4byte	.LVL525
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 306


 10279 18a5 4A140000 		.4byte	0x144a
 10280 18a9 21       		.uleb128 0x21
 10281 18aa 01       		.uleb128 0x1
 10282 18ab 51       		.byte	0x51
 10283 18ac 01       		.uleb128 0x1
 10284 18ad 30       		.byte	0x30
 10285 18ae 21       		.uleb128 0x21
 10286 18af 01       		.uleb128 0x1
 10287 18b0 50       		.byte	0x50
 10288 18b1 02       		.uleb128 0x2
 10289 18b2 74       		.byte	0x74
 10290 18b3 00       		.sleb128 0
 10291 18b4 00       		.byte	0
 10292 18b5 00       		.byte	0
 10293 18b6 18       		.uleb128 0x18
 10294 18b7 3B020000 		.4byte	.LASF135
 10295 18bb 01       		.byte	0x1
 10296 18bc A103     		.2byte	0x3a1
 10297 18be 2D040000 		.4byte	0x42d
 10298 18c2 00000000 		.4byte	.LFB10
 10299 18c6 8C000000 		.4byte	.LFE10-.LFB10
 10300 18ca 01       		.uleb128 0x1
 10301 18cb 9C       		.byte	0x9c
 10302 18cc D2190000 		.4byte	0x19d2
 10303 18d0 19       		.uleb128 0x19
 10304 18d1 667300   		.ascii	"fs\000"
 10305 18d4 01       		.byte	0x1
 10306 18d5 A203     		.2byte	0x3a2
 10307 18d7 49020000 		.4byte	0x249
 10308 18db BB1C0000 		.4byte	.LLST130
 10309 18df 1A       		.uleb128 0x1a
 10310 18e0 72657300 		.ascii	"res\000"
 10311 18e4 01       		.byte	0x1
 10312 18e5 A503     		.2byte	0x3a5
 10313 18e7 2D040000 		.4byte	0x42d
 10314 18eb E71C0000 		.4byte	.LLST131
 10315 18ef 20       		.uleb128 0x20
 10316 18f0 08000000 		.4byte	.LVL530
 10317 18f4 F60A0000 		.4byte	0xaf6
 10318 18f8 03190000 		.4byte	0x1903
 10319 18fc 21       		.uleb128 0x21
 10320 18fd 01       		.uleb128 0x1
 10321 18fe 50       		.byte	0x50
 10322 18ff 02       		.uleb128 0x2
 10323 1900 74       		.byte	0x74
 10324 1901 00       		.sleb128 0
 10325 1902 00       		.byte	0
 10326 1903 20       		.uleb128 0x20
 10327 1904 2A000000 		.4byte	.LVL532
 10328 1908 5A060000 		.4byte	0x65a
 10329 190c 23190000 		.4byte	0x1923
 10330 1910 21       		.uleb128 0x21
 10331 1911 01       		.uleb128 0x1
 10332 1912 52       		.byte	0x52
 10333 1913 03       		.uleb128 0x3
 10334 1914 0A       		.byte	0xa
 10335 1915 0002     		.2byte	0x200
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 307


 10336 1917 21       		.uleb128 0x21
 10337 1918 01       		.uleb128 0x1
 10338 1919 51       		.byte	0x51
 10339 191a 01       		.uleb128 0x1
 10340 191b 30       		.byte	0x30
 10341 191c 21       		.uleb128 0x21
 10342 191d 01       		.uleb128 0x1
 10343 191e 50       		.byte	0x50
 10344 191f 02       		.uleb128 0x2
 10345 1920 76       		.byte	0x76
 10346 1921 00       		.sleb128 0
 10347 1922 00       		.byte	0
 10348 1923 20       		.uleb128 0x20
 10349 1924 36000000 		.4byte	.LVL533
 10350 1928 82050000 		.4byte	0x582
 10351 192c 3F190000 		.4byte	0x193f
 10352 1930 21       		.uleb128 0x21
 10353 1931 01       		.uleb128 0x1
 10354 1932 51       		.byte	0x51
 10355 1933 03       		.uleb128 0x3
 10356 1934 0B       		.byte	0xb
 10357 1935 55AA     		.2byte	0xaa55
 10358 1937 21       		.uleb128 0x21
 10359 1938 01       		.uleb128 0x1
 10360 1939 50       		.byte	0x50
 10361 193a 03       		.uleb128 0x3
 10362 193b 74       		.byte	0x74
 10363 193c AE04     		.sleb128 558
 10364 193e 00       		.byte	0
 10365 193f 20       		.uleb128 0x20
 10366 1940 3E000000 		.4byte	.LVL534
 10367 1944 B9050000 		.4byte	0x5b9
 10368 1948 5C190000 		.4byte	0x195c
 10369 194c 21       		.uleb128 0x21
 10370 194d 01       		.uleb128 0x1
 10371 194e 51       		.byte	0x51
 10372 194f 05       		.uleb128 0x5
 10373 1950 0C       		.byte	0xc
 10374 1951 52526141 		.4byte	0x41615252
 10375 1955 21       		.uleb128 0x21
 10376 1956 01       		.uleb128 0x1
 10377 1957 50       		.byte	0x50
 10378 1958 02       		.uleb128 0x2
 10379 1959 76       		.byte	0x76
 10380 195a 00       		.sleb128 0
 10381 195b 00       		.byte	0
 10382 195c 20       		.uleb128 0x20
 10383 195d 48000000 		.4byte	.LVL535
 10384 1961 B9050000 		.4byte	0x5b9
 10385 1965 7A190000 		.4byte	0x197a
 10386 1969 21       		.uleb128 0x21
 10387 196a 01       		.uleb128 0x1
 10388 196b 51       		.byte	0x51
 10389 196c 05       		.uleb128 0x5
 10390 196d 0C       		.byte	0xc
 10391 196e 72724161 		.4byte	0x61417272
 10392 1972 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 308


 10393 1973 01       		.uleb128 0x1
 10394 1974 50       		.byte	0x50
 10395 1975 03       		.uleb128 0x3
 10396 1976 74       		.byte	0x74
 10397 1977 9404     		.sleb128 532
 10398 1979 00       		.byte	0
 10399 197a 20       		.uleb128 0x20
 10400 197b 52000000 		.4byte	.LVL536
 10401 197f B9050000 		.4byte	0x5b9
 10402 1983 8F190000 		.4byte	0x198f
 10403 1987 21       		.uleb128 0x21
 10404 1988 01       		.uleb128 0x1
 10405 1989 50       		.byte	0x50
 10406 198a 03       		.uleb128 0x3
 10407 198b 74       		.byte	0x74
 10408 198c 9804     		.sleb128 536
 10409 198e 00       		.byte	0
 10410 198f 20       		.uleb128 0x20
 10411 1990 5C000000 		.4byte	.LVL537
 10412 1994 B9050000 		.4byte	0x5b9
 10413 1998 A4190000 		.4byte	0x19a4
 10414 199c 21       		.uleb128 0x21
 10415 199d 01       		.uleb128 0x1
 10416 199e 50       		.byte	0x50
 10417 199f 03       		.uleb128 0x3
 10418 19a0 74       		.byte	0x74
 10419 19a1 9C04     		.sleb128 540
 10420 19a3 00       		.byte	0
 10421 19a4 20       		.uleb128 0x20
 10422 19a5 6C000000 		.4byte	.LVL538
 10423 19a9 29320000 		.4byte	0x3229
 10424 19ad BD190000 		.4byte	0x19bd
 10425 19b1 21       		.uleb128 0x21
 10426 19b2 01       		.uleb128 0x1
 10427 19b3 53       		.byte	0x53
 10428 19b4 01       		.uleb128 0x1
 10429 19b5 31       		.byte	0x31
 10430 19b6 21       		.uleb128 0x21
 10431 19b7 01       		.uleb128 0x1
 10432 19b8 51       		.byte	0x51
 10433 19b9 02       		.uleb128 0x2
 10434 19ba 76       		.byte	0x76
 10435 19bb 00       		.sleb128 0
 10436 19bc 00       		.byte	0
 10437 19bd 22       		.uleb128 0x22
 10438 19be 7A000000 		.4byte	.LVL539
 10439 19c2 86320000 		.4byte	0x3286
 10440 19c6 21       		.uleb128 0x21
 10441 19c7 01       		.uleb128 0x1
 10442 19c8 52       		.byte	0x52
 10443 19c9 01       		.uleb128 0x1
 10444 19ca 30       		.byte	0x30
 10445 19cb 21       		.uleb128 0x21
 10446 19cc 01       		.uleb128 0x1
 10447 19cd 51       		.byte	0x51
 10448 19ce 01       		.uleb128 0x1
 10449 19cf 30       		.byte	0x30
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 309


 10450 19d0 00       		.byte	0
 10451 19d1 00       		.byte	0
 10452 19d2 25       		.uleb128 0x25
 10453 19d3 5F040000 		.4byte	.LASF136
 10454 19d7 01       		.byte	0x1
 10455 19d8 7D0C     		.2byte	0xc7d
 10456 19da 2D040000 		.4byte	0x42d
 10457 19de 00000000 		.4byte	.LFB32
 10458 19e2 58000000 		.4byte	.LFE32-.LFB32
 10459 19e6 01       		.uleb128 0x1
 10460 19e7 9C       		.byte	0x9c
 10461 19e8 891A0000 		.4byte	0x1a89
 10462 19ec 19       		.uleb128 0x19
 10463 19ed 667300   		.ascii	"fs\000"
 10464 19f0 01       		.byte	0x1
 10465 19f1 7E0C     		.2byte	0xc7e
 10466 19f3 49020000 		.4byte	0x249
 10467 19f7 051D0000 		.4byte	.LLST132
 10468 19fb 1F       		.uleb128 0x1f
 10469 19fc 6C000000 		.4byte	.LASF102
 10470 1a00 01       		.byte	0x1
 10471 1a01 7F0C     		.2byte	0xc7f
 10472 1a03 EE090000 		.4byte	0x9ee
 10473 1a07 481D0000 		.4byte	.LLST133
 10474 1a0b 19       		.uleb128 0x19
 10475 1a0c 6F707400 		.ascii	"opt\000"
 10476 1a10 01       		.byte	0x1
 10477 1a11 800C     		.2byte	0xc80
 10478 1a13 B8000000 		.4byte	0xb8
 10479 1a17 7F1D0000 		.4byte	.LLST134
 10480 1a1b 1A       		.uleb128 0x1a
 10481 1a1c 63667300 		.ascii	"cfs\000"
 10482 1a20 01       		.byte	0x1
 10483 1a21 830C     		.2byte	0xc83
 10484 1a23 49020000 		.4byte	0x249
 10485 1a27 A01D0000 		.4byte	.LLST135
 10486 1a2b 1A       		.uleb128 0x1a
 10487 1a2c 766F6C00 		.ascii	"vol\000"
 10488 1a30 01       		.byte	0x1
 10489 1a31 840C     		.2byte	0xc84
 10490 1a33 7E000000 		.4byte	0x7e
 10491 1a37 B31D0000 		.4byte	.LLST136
 10492 1a3b 1A       		.uleb128 0x1a
 10493 1a3c 72657300 		.ascii	"res\000"
 10494 1a40 01       		.byte	0x1
 10495 1a41 850C     		.2byte	0xc85
 10496 1a43 2D040000 		.4byte	0x42d
 10497 1a47 E71D0000 		.4byte	.LLST137
 10498 1a4b 1E       		.uleb128 0x1e
 10499 1a4c 727000   		.ascii	"rp\000"
 10500 1a4f 01       		.byte	0x1
 10501 1a50 860C     		.2byte	0xc86
 10502 1a52 EE090000 		.4byte	0x9ee
 10503 1a56 02       		.uleb128 0x2
 10504 1a57 91       		.byte	0x91
 10505 1a58 74       		.sleb128 -12
 10506 1a59 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 310


 10507 1a5a 14000000 		.4byte	.LVL544
 10508 1a5e F9090000 		.4byte	0x9f9
 10509 1a62 6D1A0000 		.4byte	0x1a6d
 10510 1a66 21       		.uleb128 0x21
 10511 1a67 01       		.uleb128 0x1
 10512 1a68 50       		.byte	0x50
 10513 1a69 02       		.uleb128 0x2
 10514 1a6a 91       		.byte	0x91
 10515 1a6b 74       		.sleb128 -12
 10516 1a6c 00       		.byte	0
 10517 1a6d 22       		.uleb128 0x22
 10518 1a6e 44000000 		.4byte	.LVL549
 10519 1a72 920C0000 		.4byte	0xc92
 10520 1a76 21       		.uleb128 0x21
 10521 1a77 01       		.uleb128 0x1
 10522 1a78 52       		.byte	0x52
 10523 1a79 01       		.uleb128 0x1
 10524 1a7a 30       		.byte	0x30
 10525 1a7b 21       		.uleb128 0x21
 10526 1a7c 01       		.uleb128 0x1
 10527 1a7d 51       		.byte	0x51
 10528 1a7e 02       		.uleb128 0x2
 10529 1a7f 91       		.byte	0x91
 10530 1a80 6C       		.sleb128 -20
 10531 1a81 21       		.uleb128 0x21
 10532 1a82 01       		.uleb128 0x1
 10533 1a83 50       		.byte	0x50
 10534 1a84 02       		.uleb128 0x2
 10535 1a85 7D       		.byte	0x7d
 10536 1a86 00       		.sleb128 0
 10537 1a87 00       		.byte	0
 10538 1a88 00       		.byte	0
 10539 1a89 25       		.uleb128 0x25
 10540 1a8a 07070000 		.4byte	.LASF137
 10541 1a8e 01       		.byte	0x1
 10542 1a8f AD0C     		.2byte	0xcad
 10543 1a91 2D040000 		.4byte	0x42d
 10544 1a95 00000000 		.4byte	.LFB33
 10545 1a99 DC010000 		.4byte	.LFE33-.LFB33
 10546 1a9d 01       		.uleb128 0x1
 10547 1a9e 9C       		.byte	0x9c
 10548 1a9f DD1C0000 		.4byte	0x1cdd
 10549 1aa3 19       		.uleb128 0x19
 10550 1aa4 667000   		.ascii	"fp\000"
 10551 1aa7 01       		.byte	0x1
 10552 1aa8 AE0C     		.2byte	0xcae
 10553 1aaa EC040000 		.4byte	0x4ec
 10554 1aae FA1D0000 		.4byte	.LLST138
 10555 1ab2 1F       		.uleb128 0x1f
 10556 1ab3 6C000000 		.4byte	.LASF102
 10557 1ab7 01       		.byte	0x1
 10558 1ab8 AF0C     		.2byte	0xcaf
 10559 1aba EE090000 		.4byte	0x9ee
 10560 1abe 311E0000 		.4byte	.LLST139
 10561 1ac2 1F       		.uleb128 0x1f
 10562 1ac3 36020000 		.4byte	.LASF112
 10563 1ac7 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 311


 10564 1ac8 B00C     		.2byte	0xcb0
 10565 1aca B8000000 		.4byte	0xb8
 10566 1ace 821E0000 		.4byte	.LLST140
 10567 1ad2 1A       		.uleb128 0x1a
 10568 1ad3 72657300 		.ascii	"res\000"
 10569 1ad7 01       		.byte	0x1
 10570 1ad8 B30C     		.2byte	0xcb3
 10571 1ada 2D040000 		.4byte	0x42d
 10572 1ade AB1E0000 		.4byte	.LLST141
 10573 1ae2 1E       		.uleb128 0x1e
 10574 1ae3 646A00   		.ascii	"dj\000"
 10575 1ae6 01       		.byte	0x1
 10576 1ae7 B40C     		.2byte	0xcb4
 10577 1ae9 41030000 		.4byte	0x341
 10578 1aed 03       		.uleb128 0x3
 10579 1aee 91       		.byte	0x91
 10580 1aef B47F     		.sleb128 -76
 10581 1af1 1E       		.uleb128 0x1e
 10582 1af2 667300   		.ascii	"fs\000"
 10583 1af5 01       		.byte	0x1
 10584 1af6 B50C     		.2byte	0xcb5
 10585 1af8 49020000 		.4byte	0x249
 10586 1afc 03       		.uleb128 0x3
 10587 1afd 91       		.byte	0x91
 10588 1afe B07F     		.sleb128 -80
 10589 1b00 1A       		.uleb128 0x1a
 10590 1b01 647700   		.ascii	"dw\000"
 10591 1b04 01       		.byte	0x1
 10592 1b05 B70C     		.2byte	0xcb7
 10593 1b07 CE000000 		.4byte	0xce
 10594 1b0b 0B1F0000 		.4byte	.LLST142
 10595 1b0f 1A       		.uleb128 0x1a
 10596 1b10 636C00   		.ascii	"cl\000"
 10597 1b13 01       		.byte	0x1
 10598 1b14 B70C     		.2byte	0xcb7
 10599 1b16 CE000000 		.4byte	0xce
 10600 1b1a 2E1F0000 		.4byte	.LLST143
 10601 1b1e 1A       		.uleb128 0x1a
 10602 1b1f 62637300 		.ascii	"bcs\000"
 10603 1b23 01       		.byte	0x1
 10604 1b24 B70C     		.2byte	0xcb7
 10605 1b26 CE000000 		.4byte	0xce
 10606 1b2a 4C1F0000 		.4byte	.LLST144
 10607 1b2e 24       		.uleb128 0x24
 10608 1b2f 16030000 		.4byte	.LASF97
 10609 1b33 01       		.byte	0x1
 10610 1b34 B70C     		.2byte	0xcb7
 10611 1b36 CE000000 		.4byte	0xce
 10612 1b3a 5F1F0000 		.4byte	.LLST145
 10613 1b3e 1A       		.uleb128 0x1a
 10614 1b3f 736300   		.ascii	"sc\000"
 10615 1b42 01       		.byte	0x1
 10616 1b43 B70C     		.2byte	0xcb7
 10617 1b45 CE000000 		.4byte	0xce
 10618 1b49 881F0000 		.4byte	.LLST146
 10619 1b4d 1A       		.uleb128 0x1a
 10620 1b4e 6F667300 		.ascii	"ofs\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 312


 10621 1b52 01       		.byte	0x1
 10622 1b53 B80C     		.2byte	0xcb8
 10623 1b55 EB000000 		.4byte	0xeb
 10624 1b59 A61F0000 		.4byte	.LLST147
 10625 1b5d 20       		.uleb128 0x20
 10626 1b5e 20000000 		.4byte	.LVL562
 10627 1b62 920C0000 		.4byte	0xc92
 10628 1b66 7F1B0000 		.4byte	0x1b7f
 10629 1b6a 21       		.uleb128 0x21
 10630 1b6b 01       		.uleb128 0x1
 10631 1b6c 52       		.byte	0x52
 10632 1b6d 02       		.uleb128 0x2
 10633 1b6e 77       		.byte	0x77
 10634 1b6f 00       		.sleb128 0
 10635 1b70 21       		.uleb128 0x21
 10636 1b71 01       		.uleb128 0x1
 10637 1b72 51       		.byte	0x51
 10638 1b73 03       		.uleb128 0x3
 10639 1b74 91       		.byte	0x91
 10640 1b75 B07F     		.sleb128 -80
 10641 1b77 21       		.uleb128 0x21
 10642 1b78 01       		.uleb128 0x1
 10643 1b79 50       		.byte	0x50
 10644 1b7a 03       		.uleb128 0x3
 10645 1b7b 91       		.byte	0x91
 10646 1b7c AC7F     		.sleb128 -84
 10647 1b7e 00       		.byte	0
 10648 1b7f 20       		.uleb128 0x20
 10649 1b80 34000000 		.4byte	.LVL564
 10650 1b84 04160000 		.4byte	0x1604
 10651 1b88 941B0000 		.4byte	0x1b94
 10652 1b8c 21       		.uleb128 0x21
 10653 1b8d 01       		.uleb128 0x1
 10654 1b8e 50       		.byte	0x50
 10655 1b8f 03       		.uleb128 0x3
 10656 1b90 91       		.byte	0x91
 10657 1b91 B47F     		.sleb128 -76
 10658 1b93 00       		.byte	0
 10659 1b94 20       		.uleb128 0x20
 10660 1b95 54000000 		.4byte	.LVL566
 10661 1b99 78170000 		.4byte	0x1778
 10662 1b9d A91B0000 		.4byte	0x1ba9
 10663 1ba1 21       		.uleb128 0x21
 10664 1ba2 01       		.uleb128 0x1
 10665 1ba3 50       		.byte	0x50
 10666 1ba4 03       		.uleb128 0x3
 10667 1ba5 91       		.byte	0x91
 10668 1ba6 B47F     		.sleb128 -76
 10669 1ba8 00       		.byte	0
 10670 1ba9 20       		.uleb128 0x20
 10671 1baa 8A000000 		.4byte	.LVL573
 10672 1bae B9050000 		.4byte	0x5b9
 10673 1bb2 BD1B0000 		.4byte	0x1bbd
 10674 1bb6 21       		.uleb128 0x21
 10675 1bb7 01       		.uleb128 0x1
 10676 1bb8 51       		.byte	0x51
 10677 1bb9 02       		.uleb128 0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 313


 10678 1bba 75       		.byte	0x75
 10679 1bbb 00       		.sleb128 0
 10680 1bbc 00       		.byte	0
 10681 1bbd 20       		.uleb128 0x20
 10682 1bbe 94000000 		.4byte	.LVL574
 10683 1bc2 B9050000 		.4byte	0x5b9
 10684 1bc6 D11B0000 		.4byte	0x1bd1
 10685 1bca 21       		.uleb128 0x21
 10686 1bcb 01       		.uleb128 0x1
 10687 1bcc 51       		.byte	0x51
 10688 1bcd 02       		.uleb128 0x2
 10689 1bce 75       		.byte	0x75
 10690 1bcf 00       		.sleb128 0
 10691 1bd0 00       		.byte	0
 10692 1bd1 20       		.uleb128 0x20
 10693 1bd2 A8000000 		.4byte	.LVL575
 10694 1bd6 9F070000 		.4byte	0x79f
 10695 1bda EB1B0000 		.4byte	0x1beb
 10696 1bde 21       		.uleb128 0x21
 10697 1bdf 01       		.uleb128 0x1
 10698 1be0 51       		.byte	0x51
 10699 1be1 02       		.uleb128 0x2
 10700 1be2 75       		.byte	0x75
 10701 1be3 00       		.sleb128 0
 10702 1be4 21       		.uleb128 0x21
 10703 1be5 01       		.uleb128 0x1
 10704 1be6 50       		.byte	0x50
 10705 1be7 02       		.uleb128 0x2
 10706 1be8 78       		.byte	0x78
 10707 1be9 00       		.sleb128 0
 10708 1bea 00       		.byte	0
 10709 1beb 20       		.uleb128 0x20
 10710 1bec B4000000 		.4byte	.LVL578
 10711 1bf0 0C080000 		.4byte	0x80c
 10712 1bf4 0A1C0000 		.4byte	0x1c0a
 10713 1bf8 21       		.uleb128 0x21
 10714 1bf9 01       		.uleb128 0x1
 10715 1bfa 52       		.byte	0x52
 10716 1bfb 01       		.uleb128 0x1
 10717 1bfc 30       		.byte	0x30
 10718 1bfd 21       		.uleb128 0x21
 10719 1bfe 01       		.uleb128 0x1
 10720 1bff 51       		.byte	0x51
 10721 1c00 02       		.uleb128 0x2
 10722 1c01 75       		.byte	0x75
 10723 1c02 00       		.sleb128 0
 10724 1c03 21       		.uleb128 0x21
 10725 1c04 01       		.uleb128 0x1
 10726 1c05 50       		.byte	0x50
 10727 1c06 02       		.uleb128 0x2
 10728 1c07 78       		.byte	0x78
 10729 1c08 00       		.sleb128 0
 10730 1c09 00       		.byte	0
 10731 1c0a 20       		.uleb128 0x20
 10732 1c0b BE000000 		.4byte	.LVL579
 10733 1c0f B9050000 		.4byte	0x5b9
 10734 1c13 1D1C0000 		.4byte	0x1c1d
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 314


 10735 1c17 21       		.uleb128 0x21
 10736 1c18 01       		.uleb128 0x1
 10737 1c19 51       		.byte	0x51
 10738 1c1a 01       		.uleb128 0x1
 10739 1c1b 30       		.byte	0x30
 10740 1c1c 00       		.byte	0
 10741 1c1d 20       		.uleb128 0x20
 10742 1c1e D8000000 		.4byte	.LVL581
 10743 1c22 25130000 		.4byte	0x1325
 10744 1c26 3D1C0000 		.4byte	0x1c3d
 10745 1c2a 21       		.uleb128 0x21
 10746 1c2b 01       		.uleb128 0x1
 10747 1c2c 52       		.byte	0x52
 10748 1c2d 01       		.uleb128 0x1
 10749 1c2e 30       		.byte	0x30
 10750 1c2f 21       		.uleb128 0x21
 10751 1c30 01       		.uleb128 0x1
 10752 1c31 51       		.byte	0x51
 10753 1c32 02       		.uleb128 0x2
 10754 1c33 79       		.byte	0x79
 10755 1c34 00       		.sleb128 0
 10756 1c35 21       		.uleb128 0x21
 10757 1c36 01       		.uleb128 0x1
 10758 1c37 50       		.byte	0x50
 10759 1c38 03       		.uleb128 0x3
 10760 1c39 91       		.byte	0x91
 10761 1c3a B47F     		.sleb128 -76
 10762 1c3c 00       		.byte	0
 10763 1c3d 20       		.uleb128 0x20
 10764 1c3e E4000000 		.4byte	.LVL583
 10765 1c42 890B0000 		.4byte	0xb89
 10766 1c46 511C0000 		.4byte	0x1c51
 10767 1c4a 21       		.uleb128 0x21
 10768 1c4b 01       		.uleb128 0x1
 10769 1c4c 51       		.byte	0x51
 10770 1c4d 02       		.uleb128 0x2
 10771 1c4e 75       		.byte	0x75
 10772 1c4f 00       		.sleb128 0
 10773 1c50 00       		.byte	0
 10774 1c51 20       		.uleb128 0x20
 10775 1c52 38010000 		.4byte	.LVL590
 10776 1c56 9F070000 		.4byte	0x79f
 10777 1c5a 6B1C0000 		.4byte	0x1c6b
 10778 1c5e 21       		.uleb128 0x21
 10779 1c5f 01       		.uleb128 0x1
 10780 1c60 51       		.byte	0x51
 10781 1c61 02       		.uleb128 0x2
 10782 1c62 78       		.byte	0x78
 10783 1c63 00       		.sleb128 0
 10784 1c64 21       		.uleb128 0x21
 10785 1c65 01       		.uleb128 0x1
 10786 1c66 50       		.byte	0x50
 10787 1c67 02       		.uleb128 0x2
 10788 1c68 75       		.byte	0x75
 10789 1c69 00       		.sleb128 0
 10790 1c6a 00       		.byte	0
 10791 1c6b 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 315


 10792 1c6c 42010000 		.4byte	.LVL591
 10793 1c70 48050000 		.4byte	0x548
 10794 1c74 7F1C0000 		.4byte	0x1c7f
 10795 1c78 21       		.uleb128 0x21
 10796 1c79 01       		.uleb128 0x1
 10797 1c7a 50       		.byte	0x50
 10798 1c7b 02       		.uleb128 0x2
 10799 1c7c 78       		.byte	0x78
 10800 1c7d 1C       		.sleb128 28
 10801 1c7e 00       		.byte	0
 10802 1c7f 20       		.uleb128 0x20
 10803 1c80 62010000 		.4byte	.LVL592
 10804 1c84 5A060000 		.4byte	0x65a
 10805 1c88 9F1C0000 		.4byte	0x1c9f
 10806 1c8c 21       		.uleb128 0x21
 10807 1c8d 01       		.uleb128 0x1
 10808 1c8e 52       		.byte	0x52
 10809 1c8f 03       		.uleb128 0x3
 10810 1c90 0A       		.byte	0xa
 10811 1c91 0002     		.2byte	0x200
 10812 1c93 21       		.uleb128 0x21
 10813 1c94 01       		.uleb128 0x1
 10814 1c95 51       		.byte	0x51
 10815 1c96 01       		.uleb128 0x1
 10816 1c97 30       		.byte	0x30
 10817 1c98 21       		.uleb128 0x21
 10818 1c99 01       		.uleb128 0x1
 10819 1c9a 50       		.byte	0x50
 10820 1c9b 02       		.uleb128 0x2
 10821 1c9c 78       		.byte	0x78
 10822 1c9d 00       		.sleb128 0
 10823 1c9e 00       		.byte	0
 10824 1c9f 20       		.uleb128 0x20
 10825 1ca0 7E010000 		.4byte	.LVL596
 10826 1ca4 A6100000 		.4byte	0x10a6
 10827 1ca8 B31C0000 		.4byte	0x1cb3
 10828 1cac 21       		.uleb128 0x21
 10829 1cad 01       		.uleb128 0x1
 10830 1cae 50       		.byte	0x50
 10831 1caf 02       		.uleb128 0x2
 10832 1cb0 76       		.byte	0x76
 10833 1cb1 00       		.sleb128 0
 10834 1cb2 00       		.byte	0
 10835 1cb3 20       		.uleb128 0x20
 10836 1cb4 A8010000 		.4byte	.LVL602
 10837 1cb8 65070000 		.4byte	0x765
 10838 1cbc C71C0000 		.4byte	0x1cc7
 10839 1cc0 21       		.uleb128 0x21
 10840 1cc1 01       		.uleb128 0x1
 10841 1cc2 50       		.byte	0x50
 10842 1cc3 02       		.uleb128 0x2
 10843 1cc4 77       		.byte	0x77
 10844 1cc5 00       		.sleb128 0
 10845 1cc6 00       		.byte	0
 10846 1cc7 22       		.uleb128 0x22
 10847 1cc8 BA010000 		.4byte	.LVL604
 10848 1ccc 4D320000 		.4byte	0x324d
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 316


 10849 1cd0 21       		.uleb128 0x21
 10850 1cd1 01       		.uleb128 0x1
 10851 1cd2 53       		.byte	0x53
 10852 1cd3 01       		.uleb128 0x1
 10853 1cd4 31       		.byte	0x31
 10854 1cd5 21       		.uleb128 0x21
 10855 1cd6 01       		.uleb128 0x1
 10856 1cd7 51       		.byte	0x51
 10857 1cd8 02       		.uleb128 0x2
 10858 1cd9 78       		.byte	0x78
 10859 1cda 00       		.sleb128 0
 10860 1cdb 00       		.byte	0
 10861 1cdc 00       		.byte	0
 10862 1cdd 25       		.uleb128 0x25
 10863 1cde 98040000 		.4byte	.LASF138
 10864 1ce2 01       		.byte	0x1
 10865 1ce3 760D     		.2byte	0xd76
 10866 1ce5 2D040000 		.4byte	0x42d
 10867 1ce9 00000000 		.4byte	.LFB34
 10868 1ced 76010000 		.4byte	.LFE34-.LFB34
 10869 1cf1 01       		.uleb128 0x1
 10870 1cf2 9C       		.byte	0x9c
 10871 1cf3 8F1E0000 		.4byte	0x1e8f
 10872 1cf7 19       		.uleb128 0x19
 10873 1cf8 667000   		.ascii	"fp\000"
 10874 1cfb 01       		.byte	0x1
 10875 1cfc 770D     		.2byte	0xd77
 10876 1cfe EC040000 		.4byte	0x4ec
 10877 1d02 B91F0000 		.4byte	.LLST148
 10878 1d06 1F       		.uleb128 0x1f
 10879 1d07 FB000000 		.4byte	.LASF139
 10880 1d0b 01       		.byte	0x1
 10881 1d0c 780D     		.2byte	0xd78
 10882 1d0e A2040000 		.4byte	0x4a2
 10883 1d12 D71F0000 		.4byte	.LLST149
 10884 1d16 19       		.uleb128 0x19
 10885 1d17 62747200 		.ascii	"btr\000"
 10886 1d1b 01       		.byte	0x1
 10887 1d1c 790D     		.2byte	0xd79
 10888 1d1e AD000000 		.4byte	0xad
 10889 1d22 1C200000 		.4byte	.LLST150
 10890 1d26 19       		.uleb128 0x19
 10891 1d27 627200   		.ascii	"br\000"
 10892 1d2a 01       		.byte	0x1
 10893 1d2b 7A0D     		.2byte	0xd7a
 10894 1d2d 8F1E0000 		.4byte	0x1e8f
 10895 1d31 50200000 		.4byte	.LLST151
 10896 1d35 1A       		.uleb128 0x1a
 10897 1d36 72657300 		.ascii	"res\000"
 10898 1d3a 01       		.byte	0x1
 10899 1d3b 7D0D     		.2byte	0xd7d
 10900 1d3d 2D040000 		.4byte	0x42d
 10901 1d41 6E200000 		.4byte	.LLST152
 10902 1d45 1E       		.uleb128 0x1e
 10903 1d46 667300   		.ascii	"fs\000"
 10904 1d49 01       		.byte	0x1
 10905 1d4a 7E0D     		.2byte	0xd7e
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 317


 10906 1d4c 49020000 		.4byte	0x249
 10907 1d50 02       		.uleb128 0x2
 10908 1d51 91       		.byte	0x91
 10909 1d52 54       		.sleb128 -44
 10910 1d53 24       		.uleb128 0x24
 10911 1d54 16030000 		.4byte	.LASF97
 10912 1d58 01       		.byte	0x1
 10913 1d59 7F0D     		.2byte	0xd7f
 10914 1d5b CE000000 		.4byte	0xce
 10915 1d5f A4200000 		.4byte	.LLST153
 10916 1d63 24       		.uleb128 0x24
 10917 1d64 A4000000 		.4byte	.LASF47
 10918 1d68 01       		.byte	0x1
 10919 1d69 7F0D     		.2byte	0xd7f
 10920 1d6b CE000000 		.4byte	0xce
 10921 1d6f D8200000 		.4byte	.LLST154
 10922 1d73 24       		.uleb128 0x24
 10923 1d74 0B060000 		.4byte	.LASF140
 10924 1d78 01       		.byte	0x1
 10925 1d79 800D     		.2byte	0xd80
 10926 1d7b EB000000 		.4byte	0xeb
 10927 1d7f 0C210000 		.4byte	.LLST155
 10928 1d83 24       		.uleb128 0x24
 10929 1d84 CF060000 		.4byte	.LASF141
 10930 1d88 01       		.byte	0x1
 10931 1d89 810D     		.2byte	0xd81
 10932 1d8b AD000000 		.4byte	0xad
 10933 1d8f 30210000 		.4byte	.LLST156
 10934 1d93 1A       		.uleb128 0x1a
 10935 1d94 636300   		.ascii	"cc\000"
 10936 1d97 01       		.byte	0x1
 10937 1d98 810D     		.2byte	0xd81
 10938 1d9a AD000000 		.4byte	0xad
 10939 1d9e 4E210000 		.4byte	.LLST157
 10940 1da2 24       		.uleb128 0x24
 10941 1da3 31000000 		.4byte	.LASF142
 10942 1da7 01       		.byte	0x1
 10943 1da8 810D     		.2byte	0xd81
 10944 1daa AD000000 		.4byte	0xad
 10945 1dae 7B210000 		.4byte	.LLST158
 10946 1db2 24       		.uleb128 0x24
 10947 1db3 7E000000 		.4byte	.LASF143
 10948 1db7 01       		.byte	0x1
 10949 1db8 820D     		.2byte	0xd82
 10950 1dba D0020000 		.4byte	0x2d0
 10951 1dbe A0210000 		.4byte	.LLST159
 10952 1dc2 20       		.uleb128 0x20
 10953 1dc3 1A000000 		.4byte	.LVL616
 10954 1dc7 970A0000 		.4byte	0xa97
 10955 1dcb DC1D0000 		.4byte	0x1ddc
 10956 1dcf 21       		.uleb128 0x21
 10957 1dd0 01       		.uleb128 0x1
 10958 1dd1 51       		.byte	0x51
 10959 1dd2 02       		.uleb128 0x2
 10960 1dd3 91       		.byte	0x91
 10961 1dd4 54       		.sleb128 -44
 10962 1dd5 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 318


 10963 1dd6 01       		.uleb128 0x1
 10964 1dd7 50       		.byte	0x50
 10965 1dd8 02       		.uleb128 0x2
 10966 1dd9 74       		.byte	0x74
 10967 1dda 00       		.sleb128 0
 10968 1ddb 00       		.byte	0
 10969 1ddc 20       		.uleb128 0x20
 10970 1ddd 68000000 		.4byte	.LVL627
 10971 1de1 A6100000 		.4byte	0x10a6
 10972 1de5 F11D0000 		.4byte	0x1df1
 10973 1de9 21       		.uleb128 0x21
 10974 1dea 01       		.uleb128 0x1
 10975 1deb 50       		.byte	0x50
 10976 1dec 03       		.uleb128 0x3
 10977 1ded 91       		.byte	0x91
 10978 1dee 4C       		.sleb128 -52
 10979 1def 06       		.byte	0x6
 10980 1df0 00       		.byte	0
 10981 1df1 20       		.uleb128 0x20
 10982 1df2 90000000 		.4byte	.LVL633
 10983 1df6 65070000 		.4byte	0x765
 10984 1dfa 051E0000 		.4byte	0x1e05
 10985 1dfe 21       		.uleb128 0x21
 10986 1dff 01       		.uleb128 0x1
 10987 1e00 50       		.byte	0x50
 10988 1e01 02       		.uleb128 0x2
 10989 1e02 7B       		.byte	0x7b
 10990 1e03 00       		.sleb128 0
 10991 1e04 00       		.byte	0
 10992 1e05 20       		.uleb128 0x20
 10993 1e06 BE000000 		.4byte	.LVL639
 10994 1e0a 4D320000 		.4byte	0x324d
 10995 1e0e 251E0000 		.4byte	0x1e25
 10996 1e12 21       		.uleb128 0x21
 10997 1e13 01       		.uleb128 0x1
 10998 1e14 53       		.byte	0x53
 10999 1e15 02       		.uleb128 0x2
 11000 1e16 75       		.byte	0x75
 11001 1e17 00       		.sleb128 0
 11002 1e18 21       		.uleb128 0x21
 11003 1e19 01       		.uleb128 0x1
 11004 1e1a 52       		.byte	0x52
 11005 1e1b 02       		.uleb128 0x2
 11006 1e1c 7A       		.byte	0x7a
 11007 1e1d 00       		.sleb128 0
 11008 1e1e 21       		.uleb128 0x21
 11009 1e1f 01       		.uleb128 0x1
 11010 1e20 51       		.byte	0x51
 11011 1e21 02       		.uleb128 0x2
 11012 1e22 78       		.byte	0x78
 11013 1e23 00       		.sleb128 0
 11014 1e24 00       		.byte	0
 11015 1e25 20       		.uleb128 0x20
 11016 1e26 E8000000 		.4byte	.LVL640
 11017 1e2a F0050000 		.4byte	0x5f0
 11018 1e2e 401E0000 		.4byte	0x1e40
 11019 1e32 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 319


 11020 1e33 01       		.uleb128 0x1
 11021 1e34 52       		.byte	0x52
 11022 1e35 03       		.uleb128 0x3
 11023 1e36 0A       		.byte	0xa
 11024 1e37 0002     		.2byte	0x200
 11025 1e39 21       		.uleb128 0x21
 11026 1e3a 01       		.uleb128 0x1
 11027 1e3b 51       		.byte	0x51
 11028 1e3c 02       		.uleb128 0x2
 11029 1e3d 74       		.byte	0x74
 11030 1e3e 28       		.sleb128 40
 11031 1e3f 00       		.byte	0
 11032 1e40 20       		.uleb128 0x20
 11033 1e41 08010000 		.4byte	.LVL643
 11034 1e45 29320000 		.4byte	0x3229
 11035 1e49 591E0000 		.4byte	0x1e59
 11036 1e4d 21       		.uleb128 0x21
 11037 1e4e 01       		.uleb128 0x1
 11038 1e4f 53       		.byte	0x53
 11039 1e50 01       		.uleb128 0x1
 11040 1e51 31       		.byte	0x31
 11041 1e52 21       		.uleb128 0x21
 11042 1e53 01       		.uleb128 0x1
 11043 1e54 51       		.byte	0x51
 11044 1e55 02       		.uleb128 0x2
 11045 1e56 74       		.byte	0x74
 11046 1e57 28       		.sleb128 40
 11047 1e58 00       		.byte	0
 11048 1e59 20       		.uleb128 0x20
 11049 1e5a 2A010000 		.4byte	.LVL644
 11050 1e5e 4D320000 		.4byte	0x324d
 11051 1e62 781E0000 		.4byte	0x1e78
 11052 1e66 21       		.uleb128 0x21
 11053 1e67 01       		.uleb128 0x1
 11054 1e68 53       		.byte	0x53
 11055 1e69 01       		.uleb128 0x1
 11056 1e6a 31       		.byte	0x31
 11057 1e6b 21       		.uleb128 0x21
 11058 1e6c 01       		.uleb128 0x1
 11059 1e6d 52       		.byte	0x52
 11060 1e6e 02       		.uleb128 0x2
 11061 1e6f 7A       		.byte	0x7a
 11062 1e70 00       		.sleb128 0
 11063 1e71 21       		.uleb128 0x21
 11064 1e72 01       		.uleb128 0x1
 11065 1e73 51       		.byte	0x51
 11066 1e74 02       		.uleb128 0x2
 11067 1e75 74       		.byte	0x74
 11068 1e76 28       		.sleb128 40
 11069 1e77 00       		.byte	0
 11070 1e78 22       		.uleb128 0x22
 11071 1e79 54010000 		.4byte	.LVL648
 11072 1e7d F0050000 		.4byte	0x5f0
 11073 1e81 21       		.uleb128 0x21
 11074 1e82 01       		.uleb128 0x1
 11075 1e83 52       		.byte	0x52
 11076 1e84 02       		.uleb128 0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 320


 11077 1e85 75       		.byte	0x75
 11078 1e86 00       		.sleb128 0
 11079 1e87 21       		.uleb128 0x21
 11080 1e88 01       		.uleb128 0x1
 11081 1e89 50       		.byte	0x50
 11082 1e8a 02       		.uleb128 0x2
 11083 1e8b 78       		.byte	0x78
 11084 1e8c 00       		.sleb128 0
 11085 1e8d 00       		.byte	0
 11086 1e8e 00       		.byte	0
 11087 1e8f 0B       		.uleb128 0xb
 11088 1e90 04       		.byte	0x4
 11089 1e91 AD000000 		.4byte	0xad
 11090 1e95 25       		.uleb128 0x25
 11091 1e96 A2010000 		.4byte	.LASF144
 11092 1e9a 01       		.byte	0x1
 11093 1e9b DA0D     		.2byte	0xdda
 11094 1e9d 2D040000 		.4byte	0x42d
 11095 1ea1 00000000 		.4byte	.LFB35
 11096 1ea5 AE010000 		.4byte	.LFE35-.LFB35
 11097 1ea9 01       		.uleb128 0x1
 11098 1eaa 9C       		.byte	0x9c
 11099 1eab 51200000 		.4byte	0x2051
 11100 1eaf 19       		.uleb128 0x19
 11101 1eb0 667000   		.ascii	"fp\000"
 11102 1eb3 01       		.byte	0x1
 11103 1eb4 DB0D     		.2byte	0xddb
 11104 1eb6 EC040000 		.4byte	0x4ec
 11105 1eba BE210000 		.4byte	.LLST160
 11106 1ebe 1F       		.uleb128 0x1f
 11107 1ebf FB000000 		.4byte	.LASF139
 11108 1ec3 01       		.byte	0x1
 11109 1ec4 DC0D     		.2byte	0xddc
 11110 1ec6 53060000 		.4byte	0x653
 11111 1eca DC210000 		.4byte	.LLST161
 11112 1ece 19       		.uleb128 0x19
 11113 1ecf 62747700 		.ascii	"btw\000"
 11114 1ed3 01       		.byte	0x1
 11115 1ed4 DD0D     		.2byte	0xddd
 11116 1ed6 AD000000 		.4byte	0xad
 11117 1eda 21220000 		.4byte	.LLST162
 11118 1ede 19       		.uleb128 0x19
 11119 1edf 627700   		.ascii	"bw\000"
 11120 1ee2 01       		.byte	0x1
 11121 1ee3 DE0D     		.2byte	0xdde
 11122 1ee5 8F1E0000 		.4byte	0x1e8f
 11123 1ee9 3F220000 		.4byte	.LLST163
 11124 1eed 1A       		.uleb128 0x1a
 11125 1eee 72657300 		.ascii	"res\000"
 11126 1ef2 01       		.byte	0x1
 11127 1ef3 E10D     		.2byte	0xde1
 11128 1ef5 2D040000 		.4byte	0x42d
 11129 1ef9 5D220000 		.4byte	.LLST164
 11130 1efd 1E       		.uleb128 0x1e
 11131 1efe 667300   		.ascii	"fs\000"
 11132 1f01 01       		.byte	0x1
 11133 1f02 E20D     		.2byte	0xde2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 321


 11134 1f04 49020000 		.4byte	0x249
 11135 1f08 02       		.uleb128 0x2
 11136 1f09 91       		.byte	0x91
 11137 1f0a 54       		.sleb128 -44
 11138 1f0b 24       		.uleb128 0x24
 11139 1f0c 16030000 		.4byte	.LASF97
 11140 1f10 01       		.byte	0x1
 11141 1f11 E30D     		.2byte	0xde3
 11142 1f13 CE000000 		.4byte	0xce
 11143 1f17 93220000 		.4byte	.LLST165
 11144 1f1b 24       		.uleb128 0x24
 11145 1f1c A4000000 		.4byte	.LASF47
 11146 1f20 01       		.byte	0x1
 11147 1f21 E30D     		.2byte	0xde3
 11148 1f23 CE000000 		.4byte	0xce
 11149 1f27 DE220000 		.4byte	.LLST166
 11150 1f2b 24       		.uleb128 0x24
 11151 1f2c B0030000 		.4byte	.LASF145
 11152 1f30 01       		.byte	0x1
 11153 1f31 E40D     		.2byte	0xde4
 11154 1f33 AD000000 		.4byte	0xad
 11155 1f37 12230000 		.4byte	.LLST167
 11156 1f3b 1A       		.uleb128 0x1a
 11157 1f3c 636300   		.ascii	"cc\000"
 11158 1f3f 01       		.byte	0x1
 11159 1f40 E40D     		.2byte	0xde4
 11160 1f42 AD000000 		.4byte	0xad
 11161 1f46 30230000 		.4byte	.LLST168
 11162 1f4a 24       		.uleb128 0x24
 11163 1f4b 31000000 		.4byte	.LASF142
 11164 1f4f 01       		.byte	0x1
 11165 1f50 E40D     		.2byte	0xde4
 11166 1f52 AD000000 		.4byte	0xad
 11167 1f56 5D230000 		.4byte	.LLST169
 11168 1f5a 24       		.uleb128 0x24
 11169 1f5b A5040000 		.4byte	.LASF146
 11170 1f5f 01       		.byte	0x1
 11171 1f60 E50D     		.2byte	0xde5
 11172 1f62 75040000 		.4byte	0x475
 11173 1f66 82230000 		.4byte	.LLST170
 11174 1f6a 20       		.uleb128 0x20
 11175 1f6b 1A000000 		.4byte	.LVL657
 11176 1f6f 970A0000 		.4byte	0xa97
 11177 1f73 841F0000 		.4byte	0x1f84
 11178 1f77 21       		.uleb128 0x21
 11179 1f78 01       		.uleb128 0x1
 11180 1f79 51       		.byte	0x51
 11181 1f7a 02       		.uleb128 0x2
 11182 1f7b 91       		.byte	0x91
 11183 1f7c 54       		.sleb128 -44
 11184 1f7d 21       		.uleb128 0x21
 11185 1f7e 01       		.uleb128 0x1
 11186 1f7f 50       		.byte	0x50
 11187 1f80 02       		.uleb128 0x2
 11188 1f81 74       		.byte	0x74
 11189 1f82 00       		.sleb128 0
 11190 1f83 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 322


 11191 1f84 20       		.uleb128 0x20
 11192 1f85 66000000 		.4byte	.LVL667
 11193 1f89 3F120000 		.4byte	0x123f
 11194 1f8d 9E1F0000 		.4byte	0x1f9e
 11195 1f91 21       		.uleb128 0x21
 11196 1f92 01       		.uleb128 0x1
 11197 1f93 51       		.byte	0x51
 11198 1f94 01       		.uleb128 0x1
 11199 1f95 30       		.byte	0x30
 11200 1f96 21       		.uleb128 0x21
 11201 1f97 01       		.uleb128 0x1
 11202 1f98 50       		.byte	0x50
 11203 1f99 03       		.uleb128 0x3
 11204 1f9a 91       		.byte	0x91
 11205 1f9b 4C       		.sleb128 -52
 11206 1f9c 06       		.byte	0x6
 11207 1f9d 00       		.byte	0
 11208 1f9e 20       		.uleb128 0x20
 11209 1f9f 70000000 		.4byte	.LVL669
 11210 1fa3 3F120000 		.4byte	0x123f
 11211 1fa7 B31F0000 		.4byte	0x1fb3
 11212 1fab 21       		.uleb128 0x21
 11213 1fac 01       		.uleb128 0x1
 11214 1fad 50       		.byte	0x50
 11215 1fae 03       		.uleb128 0x3
 11216 1faf 91       		.byte	0x91
 11217 1fb0 4C       		.sleb128 -52
 11218 1fb1 06       		.byte	0x6
 11219 1fb2 00       		.byte	0
 11220 1fb3 20       		.uleb128 0x20
 11221 1fb4 B0000000 		.4byte	.LVL675
 11222 1fb8 29320000 		.4byte	0x3229
 11223 1fbc CC1F0000 		.4byte	0x1fcc
 11224 1fc0 21       		.uleb128 0x21
 11225 1fc1 01       		.uleb128 0x1
 11226 1fc2 53       		.byte	0x53
 11227 1fc3 01       		.uleb128 0x1
 11228 1fc4 31       		.byte	0x31
 11229 1fc5 21       		.uleb128 0x21
 11230 1fc6 01       		.uleb128 0x1
 11231 1fc7 51       		.byte	0x51
 11232 1fc8 02       		.uleb128 0x2
 11233 1fc9 74       		.byte	0x74
 11234 1fca 28       		.sleb128 40
 11235 1fcb 00       		.byte	0
 11236 1fcc 20       		.uleb128 0x20
 11237 1fcd CE000000 		.4byte	.LVL676
 11238 1fd1 65070000 		.4byte	0x765
 11239 1fd5 E01F0000 		.4byte	0x1fe0
 11240 1fd9 21       		.uleb128 0x21
 11241 1fda 01       		.uleb128 0x1
 11242 1fdb 50       		.byte	0x50
 11243 1fdc 02       		.uleb128 0x2
 11244 1fdd 7B       		.byte	0x7b
 11245 1fde 00       		.sleb128 0
 11246 1fdf 00       		.byte	0
 11247 1fe0 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 323


 11248 1fe1 FC000000 		.4byte	.LVL682
 11249 1fe5 29320000 		.4byte	0x3229
 11250 1fe9 00200000 		.4byte	0x2000
 11251 1fed 21       		.uleb128 0x21
 11252 1fee 01       		.uleb128 0x1
 11253 1fef 53       		.byte	0x53
 11254 1ff0 02       		.uleb128 0x2
 11255 1ff1 75       		.byte	0x75
 11256 1ff2 00       		.sleb128 0
 11257 1ff3 21       		.uleb128 0x21
 11258 1ff4 01       		.uleb128 0x1
 11259 1ff5 52       		.byte	0x52
 11260 1ff6 02       		.uleb128 0x2
 11261 1ff7 7A       		.byte	0x7a
 11262 1ff8 00       		.sleb128 0
 11263 1ff9 21       		.uleb128 0x21
 11264 1ffa 01       		.uleb128 0x1
 11265 1ffb 51       		.byte	0x51
 11266 1ffc 02       		.uleb128 0x2
 11267 1ffd 78       		.byte	0x78
 11268 1ffe 00       		.sleb128 0
 11269 1fff 00       		.byte	0
 11270 2000 20       		.uleb128 0x20
 11271 2001 1E010000 		.4byte	.LVL683
 11272 2005 F0050000 		.4byte	0x5f0
 11273 2009 1B200000 		.4byte	0x201b
 11274 200d 21       		.uleb128 0x21
 11275 200e 01       		.uleb128 0x1
 11276 200f 52       		.byte	0x52
 11277 2010 03       		.uleb128 0x3
 11278 2011 0A       		.byte	0xa
 11279 2012 0002     		.2byte	0x200
 11280 2014 21       		.uleb128 0x21
 11281 2015 01       		.uleb128 0x1
 11282 2016 50       		.byte	0x50
 11283 2017 02       		.uleb128 0x2
 11284 2018 74       		.byte	0x74
 11285 2019 28       		.sleb128 40
 11286 201a 00       		.byte	0
 11287 201b 20       		.uleb128 0x20
 11288 201c 48010000 		.4byte	.LVL686
 11289 2020 4D320000 		.4byte	0x324d
 11290 2024 3A200000 		.4byte	0x203a
 11291 2028 21       		.uleb128 0x21
 11292 2029 01       		.uleb128 0x1
 11293 202a 53       		.byte	0x53
 11294 202b 01       		.uleb128 0x1
 11295 202c 31       		.byte	0x31
 11296 202d 21       		.uleb128 0x21
 11297 202e 01       		.uleb128 0x1
 11298 202f 52       		.byte	0x52
 11299 2030 02       		.uleb128 0x2
 11300 2031 7A       		.byte	0x7a
 11301 2032 00       		.sleb128 0
 11302 2033 21       		.uleb128 0x21
 11303 2034 01       		.uleb128 0x1
 11304 2035 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 324


 11305 2036 02       		.uleb128 0x2
 11306 2037 74       		.byte	0x74
 11307 2038 28       		.sleb128 40
 11308 2039 00       		.byte	0
 11309 203a 22       		.uleb128 0x22
 11310 203b 72010000 		.4byte	.LVL690
 11311 203f F0050000 		.4byte	0x5f0
 11312 2043 21       		.uleb128 0x21
 11313 2044 01       		.uleb128 0x1
 11314 2045 52       		.byte	0x52
 11315 2046 02       		.uleb128 0x2
 11316 2047 75       		.byte	0x75
 11317 2048 00       		.sleb128 0
 11318 2049 21       		.uleb128 0x21
 11319 204a 01       		.uleb128 0x1
 11320 204b 51       		.byte	0x51
 11321 204c 02       		.uleb128 0x2
 11322 204d 78       		.byte	0x78
 11323 204e 00       		.sleb128 0
 11324 204f 00       		.byte	0
 11325 2050 00       		.byte	0
 11326 2051 1B       		.uleb128 0x1b
 11327 2052 3E050000 		.4byte	.LASF147
 11328 2056 01       		.byte	0x1
 11329 2057 C216     		.2byte	0x16c2
 11330 2059 00000000 		.4byte	.LFB49
 11331 205d 4A000000 		.4byte	.LFE49-.LFB49
 11332 2061 01       		.uleb128 0x1
 11333 2062 9C       		.byte	0x9c
 11334 2063 D6200000 		.4byte	0x20d6
 11335 2067 19       		.uleb128 0x19
 11336 2068 706200   		.ascii	"pb\000"
 11337 206b 01       		.byte	0x1
 11338 206c C316     		.2byte	0x16c3
 11339 206e 910A0000 		.4byte	0xa91
 11340 2072 A0230000 		.4byte	.LLST171
 11341 2076 19       		.uleb128 0x19
 11342 2077 6300     		.ascii	"c\000"
 11343 2079 01       		.byte	0x1
 11344 207a C416     		.2byte	0x16c4
 11345 207c D9000000 		.4byte	0xd9
 11346 2080 BE230000 		.4byte	.LLST172
 11347 2084 1E       		.uleb128 0x1e
 11348 2085 627700   		.ascii	"bw\000"
 11349 2088 01       		.byte	0x1
 11350 2089 C716     		.2byte	0x16c7
 11351 208b AD000000 		.4byte	0xad
 11352 208f 02       		.uleb128 0x2
 11353 2090 91       		.byte	0x91
 11354 2091 6C       		.sleb128 -20
 11355 2092 1A       		.uleb128 0x1a
 11356 2093 6900     		.ascii	"i\000"
 11357 2095 01       		.byte	0x1
 11358 2096 C816     		.2byte	0x16c8
 11359 2098 7E000000 		.4byte	0x7e
 11360 209c DF230000 		.4byte	.LLST173
 11361 20a0 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 325


 11362 20a1 12000000 		.4byte	.LVL697
 11363 20a5 51200000 		.4byte	0x2051
 11364 20a9 B9200000 		.4byte	0x20b9
 11365 20ad 21       		.uleb128 0x21
 11366 20ae 01       		.uleb128 0x1
 11367 20af 51       		.byte	0x51
 11368 20b0 01       		.uleb128 0x1
 11369 20b1 3D       		.byte	0x3d
 11370 20b2 21       		.uleb128 0x21
 11371 20b3 01       		.uleb128 0x1
 11372 20b4 50       		.byte	0x50
 11373 20b5 02       		.uleb128 0x2
 11374 20b6 74       		.byte	0x74
 11375 20b7 00       		.sleb128 0
 11376 20b8 00       		.byte	0
 11377 20b9 22       		.uleb128 0x22
 11378 20ba 30000000 		.4byte	.LVL700
 11379 20be 951E0000 		.4byte	0x1e95
 11380 20c2 21       		.uleb128 0x21
 11381 20c3 01       		.uleb128 0x1
 11382 20c4 53       		.byte	0x53
 11383 20c5 02       		.uleb128 0x2
 11384 20c6 91       		.byte	0x91
 11385 20c7 6C       		.sleb128 -20
 11386 20c8 21       		.uleb128 0x21
 11387 20c9 01       		.uleb128 0x1
 11388 20ca 52       		.byte	0x52
 11389 20cb 02       		.uleb128 0x2
 11390 20cc 75       		.byte	0x75
 11391 20cd 00       		.sleb128 0
 11392 20ce 21       		.uleb128 0x21
 11393 20cf 01       		.uleb128 0x1
 11394 20d0 51       		.byte	0x51
 11395 20d1 02       		.uleb128 0x2
 11396 20d2 74       		.byte	0x74
 11397 20d3 0C       		.sleb128 12
 11398 20d4 00       		.byte	0
 11399 20d5 00       		.byte	0
 11400 20d6 18       		.uleb128 0x18
 11401 20d7 38010000 		.4byte	.LASF148
 11402 20db 01       		.byte	0x1
 11403 20dc FA16     		.2byte	0x16fa
 11404 20de 7E000000 		.4byte	0x7e
 11405 20e2 00000000 		.4byte	.LFB50
 11406 20e6 3A000000 		.4byte	.LFE50-.LFB50
 11407 20ea 01       		.uleb128 0x1
 11408 20eb 9C       		.byte	0x9c
 11409 20ec 24210000 		.4byte	0x2124
 11410 20f0 19       		.uleb128 0x19
 11411 20f1 706200   		.ascii	"pb\000"
 11412 20f4 01       		.byte	0x1
 11413 20f5 FB16     		.2byte	0x16fb
 11414 20f7 910A0000 		.4byte	0xa91
 11415 20fb 08240000 		.4byte	.LLST174
 11416 20ff 1E       		.uleb128 0x1e
 11417 2100 6E7700   		.ascii	"nw\000"
 11418 2103 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 326


 11419 2104 FE16     		.2byte	0x16fe
 11420 2106 AD000000 		.4byte	0xad
 11421 210a 02       		.uleb128 0x2
 11422 210b 91       		.byte	0x91
 11423 210c 74       		.sleb128 -12
 11424 210d 22       		.uleb128 0x22
 11425 210e 18000000 		.4byte	.LVL707
 11426 2112 951E0000 		.4byte	0x1e95
 11427 2116 21       		.uleb128 0x21
 11428 2117 01       		.uleb128 0x1
 11429 2118 53       		.byte	0x53
 11430 2119 02       		.uleb128 0x2
 11431 211a 91       		.byte	0x91
 11432 211b 74       		.sleb128 -12
 11433 211c 21       		.uleb128 0x21
 11434 211d 01       		.uleb128 0x1
 11435 211e 51       		.byte	0x51
 11436 211f 02       		.uleb128 0x2
 11437 2120 74       		.byte	0x74
 11438 2121 0C       		.sleb128 12
 11439 2122 00       		.byte	0
 11440 2123 00       		.byte	0
 11441 2124 25       		.uleb128 0x25
 11442 2125 B5040000 		.4byte	.LASF149
 11443 2129 01       		.byte	0x1
 11444 212a 530E     		.2byte	0xe53
 11445 212c 2D040000 		.4byte	0x42d
 11446 2130 00000000 		.4byte	.LFB36
 11447 2134 9C000000 		.4byte	.LFE36-.LFB36
 11448 2138 01       		.uleb128 0x1
 11449 2139 9C       		.byte	0x9c
 11450 213a 2E220000 		.4byte	0x222e
 11451 213e 19       		.uleb128 0x19
 11452 213f 667000   		.ascii	"fp\000"
 11453 2142 01       		.byte	0x1
 11454 2143 540E     		.2byte	0xe54
 11455 2145 EC040000 		.4byte	0x4ec
 11456 2149 4A240000 		.4byte	.LLST175
 11457 214d 1A       		.uleb128 0x1a
 11458 214e 72657300 		.ascii	"res\000"
 11459 2152 01       		.byte	0x1
 11460 2153 570E     		.2byte	0xe57
 11461 2155 2D040000 		.4byte	0x42d
 11462 2159 76240000 		.4byte	.LLST176
 11463 215d 1E       		.uleb128 0x1e
 11464 215e 667300   		.ascii	"fs\000"
 11465 2161 01       		.byte	0x1
 11466 2162 580E     		.2byte	0xe58
 11467 2164 49020000 		.4byte	0x249
 11468 2168 02       		.uleb128 0x2
 11469 2169 91       		.byte	0x91
 11470 216a 6C       		.sleb128 -20
 11471 216b 1A       		.uleb128 0x1a
 11472 216c 746D00   		.ascii	"tm\000"
 11473 216f 01       		.byte	0x1
 11474 2170 590E     		.2byte	0xe59
 11475 2172 CE000000 		.4byte	0xce
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 327


 11476 2176 9F240000 		.4byte	.LLST177
 11477 217a 1A       		.uleb128 0x1a
 11478 217b 64697200 		.ascii	"dir\000"
 11479 217f 01       		.byte	0x1
 11480 2180 5A0E     		.2byte	0xe5a
 11481 2182 D0020000 		.4byte	0x2d0
 11482 2186 B7240000 		.4byte	.LLST178
 11483 218a 20       		.uleb128 0x20
 11484 218b 0C000000 		.4byte	.LVL712
 11485 218f 970A0000 		.4byte	0xa97
 11486 2193 A4210000 		.4byte	0x21a4
 11487 2197 21       		.uleb128 0x21
 11488 2198 01       		.uleb128 0x1
 11489 2199 51       		.byte	0x51
 11490 219a 02       		.uleb128 0x2
 11491 219b 91       		.byte	0x91
 11492 219c 6C       		.sleb128 -20
 11493 219d 21       		.uleb128 0x21
 11494 219e 01       		.uleb128 0x1
 11495 219f 50       		.byte	0x50
 11496 21a0 02       		.uleb128 0x2
 11497 21a1 74       		.byte	0x74
 11498 21a2 00       		.sleb128 0
 11499 21a3 00       		.byte	0
 11500 21a4 20       		.uleb128 0x20
 11501 21a5 30000000 		.4byte	.LVL714
 11502 21a9 29320000 		.4byte	0x3229
 11503 21ad BD210000 		.4byte	0x21bd
 11504 21b1 21       		.uleb128 0x21
 11505 21b2 01       		.uleb128 0x1
 11506 21b3 53       		.byte	0x53
 11507 21b4 01       		.uleb128 0x1
 11508 21b5 31       		.byte	0x31
 11509 21b6 21       		.uleb128 0x21
 11510 21b7 01       		.uleb128 0x1
 11511 21b8 51       		.byte	0x51
 11512 21b9 02       		.uleb128 0x2
 11513 21ba 74       		.byte	0x74
 11514 21bb 28       		.sleb128 40
 11515 21bc 00       		.byte	0
 11516 21bd 23       		.uleb128 0x23
 11517 21be 42000000 		.4byte	.LVL716
 11518 21c2 890B0000 		.4byte	0xb89
 11519 21c6 20       		.uleb128 0x20
 11520 21c7 5A000000 		.4byte	.LVL719
 11521 21cb 0C080000 		.4byte	0x80c
 11522 21cf DA210000 		.4byte	0x21da
 11523 21d3 21       		.uleb128 0x21
 11524 21d4 01       		.uleb128 0x1
 11525 21d5 51       		.byte	0x51
 11526 21d6 02       		.uleb128 0x2
 11527 21d7 75       		.byte	0x75
 11528 21d8 00       		.sleb128 0
 11529 21d9 00       		.byte	0
 11530 21da 20       		.uleb128 0x20
 11531 21db 64000000 		.4byte	.LVL720
 11532 21df B9050000 		.4byte	0x5b9
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 328


 11533 21e3 EE210000 		.4byte	0x21ee
 11534 21e7 21       		.uleb128 0x21
 11535 21e8 01       		.uleb128 0x1
 11536 21e9 50       		.byte	0x50
 11537 21ea 02       		.uleb128 0x2
 11538 21eb 75       		.byte	0x75
 11539 21ec 1C       		.sleb128 28
 11540 21ed 00       		.byte	0
 11541 21ee 20       		.uleb128 0x20
 11542 21ef 6E000000 		.4byte	.LVL721
 11543 21f3 B9050000 		.4byte	0x5b9
 11544 21f7 0B220000 		.4byte	0x220b
 11545 21fb 21       		.uleb128 0x21
 11546 21fc 01       		.uleb128 0x1
 11547 21fd 51       		.byte	0x51
 11548 21fe 05       		.uleb128 0x5
 11549 21ff 0C       		.byte	0xc
 11550 2200 00002148 		.4byte	0x48210000
 11551 2204 21       		.uleb128 0x21
 11552 2205 01       		.uleb128 0x1
 11553 2206 50       		.byte	0x50
 11554 2207 02       		.uleb128 0x2
 11555 2208 75       		.byte	0x75
 11556 2209 16       		.sleb128 22
 11557 220a 00       		.byte	0
 11558 220b 20       		.uleb128 0x20
 11559 220c 78000000 		.4byte	.LVL722
 11560 2210 82050000 		.4byte	0x582
 11561 2214 24220000 		.4byte	0x2224
 11562 2218 21       		.uleb128 0x21
 11563 2219 01       		.uleb128 0x1
 11564 221a 51       		.byte	0x51
 11565 221b 01       		.uleb128 0x1
 11566 221c 30       		.byte	0x30
 11567 221d 21       		.uleb128 0x21
 11568 221e 01       		.uleb128 0x1
 11569 221f 50       		.byte	0x50
 11570 2220 02       		.uleb128 0x2
 11571 2221 75       		.byte	0x75
 11572 2222 12       		.sleb128 18
 11573 2223 00       		.byte	0
 11574 2224 23       		.uleb128 0x23
 11575 2225 84000000 		.4byte	.LVL723
 11576 2229 B6180000 		.4byte	0x18b6
 11577 222d 00       		.byte	0
 11578 222e 25       		.uleb128 0x25
 11579 222f 05030000 		.4byte	.LASF150
 11580 2233 01       		.byte	0x1
 11581 2234 A10E     		.2byte	0xea1
 11582 2236 2D040000 		.4byte	0x42d
 11583 223a 00000000 		.4byte	.LFB37
 11584 223e 24000000 		.4byte	.LFE37-.LFB37
 11585 2242 01       		.uleb128 0x1
 11586 2243 9C       		.byte	0x9c
 11587 2244 A0220000 		.4byte	0x22a0
 11588 2248 19       		.uleb128 0x19
 11589 2249 667000   		.ascii	"fp\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 329


 11590 224c 01       		.byte	0x1
 11591 224d A20E     		.2byte	0xea2
 11592 224f EC040000 		.4byte	0x4ec
 11593 2253 CA240000 		.4byte	.LLST179
 11594 2257 1A       		.uleb128 0x1a
 11595 2258 72657300 		.ascii	"res\000"
 11596 225c 01       		.byte	0x1
 11597 225d A50E     		.2byte	0xea5
 11598 225f 2D040000 		.4byte	0x42d
 11599 2263 E8240000 		.4byte	.LLST180
 11600 2267 1E       		.uleb128 0x1e
 11601 2268 667300   		.ascii	"fs\000"
 11602 226b 01       		.byte	0x1
 11603 226c A60E     		.2byte	0xea6
 11604 226e 49020000 		.4byte	0x249
 11605 2272 02       		.uleb128 0x2
 11606 2273 91       		.byte	0x91
 11607 2274 74       		.sleb128 -12
 11608 2275 20       		.uleb128 0x20
 11609 2276 0A000000 		.4byte	.LVL729
 11610 227a 24210000 		.4byte	0x2124
 11611 227e 89220000 		.4byte	0x2289
 11612 2282 21       		.uleb128 0x21
 11613 2283 01       		.uleb128 0x1
 11614 2284 50       		.byte	0x50
 11615 2285 02       		.uleb128 0x2
 11616 2286 74       		.byte	0x74
 11617 2287 00       		.sleb128 0
 11618 2288 00       		.byte	0
 11619 2289 22       		.uleb128 0x22
 11620 228a 16000000 		.4byte	.LVL731
 11621 228e 970A0000 		.4byte	0xa97
 11622 2292 21       		.uleb128 0x21
 11623 2293 01       		.uleb128 0x1
 11624 2294 51       		.byte	0x51
 11625 2295 02       		.uleb128 0x2
 11626 2296 91       		.byte	0x91
 11627 2297 74       		.sleb128 -12
 11628 2298 21       		.uleb128 0x21
 11629 2299 01       		.uleb128 0x1
 11630 229a 50       		.byte	0x50
 11631 229b 02       		.uleb128 0x2
 11632 229c 74       		.byte	0x74
 11633 229d 00       		.sleb128 0
 11634 229e 00       		.byte	0
 11635 229f 00       		.byte	0
 11636 22a0 25       		.uleb128 0x25
 11637 22a1 82040000 		.4byte	.LASF151
 11638 22a5 01       		.byte	0x1
 11639 22a6 5D0F     		.2byte	0xf5d
 11640 22a8 2D040000 		.4byte	0x42d
 11641 22ac 00000000 		.4byte	.LFB38
 11642 22b0 6E010000 		.4byte	.LFE38-.LFB38
 11643 22b4 01       		.uleb128 0x1
 11644 22b5 9C       		.byte	0x9c
 11645 22b6 CB230000 		.4byte	0x23cb
 11646 22ba 19       		.uleb128 0x19
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 330


 11647 22bb 667000   		.ascii	"fp\000"
 11648 22be 01       		.byte	0x1
 11649 22bf 5E0F     		.2byte	0xf5e
 11650 22c1 EC040000 		.4byte	0x4ec
 11651 22c5 11250000 		.4byte	.LLST181
 11652 22c9 19       		.uleb128 0x19
 11653 22ca 6F667300 		.ascii	"ofs\000"
 11654 22ce 01       		.byte	0x1
 11655 22cf 5F0F     		.2byte	0xf5f
 11656 22d1 EB000000 		.4byte	0xeb
 11657 22d5 2F250000 		.4byte	.LLST182
 11658 22d9 1A       		.uleb128 0x1a
 11659 22da 72657300 		.ascii	"res\000"
 11660 22de 01       		.byte	0x1
 11661 22df 620F     		.2byte	0xf62
 11662 22e1 2D040000 		.4byte	0x42d
 11663 22e5 6E250000 		.4byte	.LLST183
 11664 22e9 1E       		.uleb128 0x1e
 11665 22ea 667300   		.ascii	"fs\000"
 11666 22ed 01       		.byte	0x1
 11667 22ee 630F     		.2byte	0xf63
 11668 22f0 49020000 		.4byte	0x249
 11669 22f4 02       		.uleb128 0x2
 11670 22f5 91       		.byte	0x91
 11671 22f6 64       		.sleb128 -28
 11672 22f7 24       		.uleb128 0x24
 11673 22f8 16030000 		.4byte	.LASF97
 11674 22fc 01       		.byte	0x1
 11675 22fd 640F     		.2byte	0xf64
 11676 22ff CE000000 		.4byte	0xce
 11677 2303 D9250000 		.4byte	.LLST184
 11678 2307 1A       		.uleb128 0x1a
 11679 2308 62637300 		.ascii	"bcs\000"
 11680 230c 01       		.byte	0x1
 11681 230d 640F     		.2byte	0xf64
 11682 230f CE000000 		.4byte	0xce
 11683 2313 B2260000 		.4byte	.LLST185
 11684 2317 24       		.uleb128 0x24
 11685 2318 DB060000 		.4byte	.LASF152
 11686 231c 01       		.byte	0x1
 11687 231d 640F     		.2byte	0xf64
 11688 231f CE000000 		.4byte	0xce
 11689 2323 D0260000 		.4byte	.LLST186
 11690 2327 24       		.uleb128 0x24
 11691 2328 9F040000 		.4byte	.LASF153
 11692 232c 01       		.byte	0x1
 11693 232d 650F     		.2byte	0xf65
 11694 232f EB000000 		.4byte	0xeb
 11695 2333 1C270000 		.4byte	.LLST187
 11696 2337 20       		.uleb128 0x20
 11697 2338 10000000 		.4byte	.LVL735
 11698 233c 970A0000 		.4byte	0xa97
 11699 2340 51230000 		.4byte	0x2351
 11700 2344 21       		.uleb128 0x21
 11701 2345 01       		.uleb128 0x1
 11702 2346 51       		.byte	0x51
 11703 2347 02       		.uleb128 0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 331


 11704 2348 91       		.byte	0x91
 11705 2349 64       		.sleb128 -28
 11706 234a 21       		.uleb128 0x21
 11707 234b 01       		.uleb128 0x1
 11708 234c 50       		.byte	0x50
 11709 234d 02       		.uleb128 0x2
 11710 234e 74       		.byte	0x74
 11711 234f 00       		.sleb128 0
 11712 2350 00       		.byte	0
 11713 2351 20       		.uleb128 0x20
 11714 2352 66000000 		.4byte	.LVL747
 11715 2356 3F120000 		.4byte	0x123f
 11716 235a 65230000 		.4byte	0x2365
 11717 235e 21       		.uleb128 0x21
 11718 235f 01       		.uleb128 0x1
 11719 2360 50       		.byte	0x50
 11720 2361 02       		.uleb128 0x2
 11721 2362 74       		.byte	0x74
 11722 2363 00       		.sleb128 0
 11723 2364 00       		.byte	0
 11724 2365 20       		.uleb128 0x20
 11725 2366 A2000000 		.4byte	.LVL759
 11726 236a 3F120000 		.4byte	0x123f
 11727 236e 79230000 		.4byte	0x2379
 11728 2372 21       		.uleb128 0x21
 11729 2373 01       		.uleb128 0x1
 11730 2374 50       		.byte	0x50
 11731 2375 02       		.uleb128 0x2
 11732 2376 74       		.byte	0x74
 11733 2377 00       		.sleb128 0
 11734 2378 00       		.byte	0
 11735 2379 20       		.uleb128 0x20
 11736 237a AE000000 		.4byte	.LVL761
 11737 237e A6100000 		.4byte	0x10a6
 11738 2382 8D230000 		.4byte	0x238d
 11739 2386 21       		.uleb128 0x21
 11740 2387 01       		.uleb128 0x1
 11741 2388 50       		.byte	0x50
 11742 2389 02       		.uleb128 0x2
 11743 238a 74       		.byte	0x74
 11744 238b 00       		.sleb128 0
 11745 238c 00       		.byte	0
 11746 238d 23       		.uleb128 0x23
 11747 238e EE000000 		.4byte	.LVL772
 11748 2392 65070000 		.4byte	0x765
 11749 2396 20       		.uleb128 0x20
 11750 2397 38010000 		.4byte	.LVL781
 11751 239b 29320000 		.4byte	0x3229
 11752 239f AF230000 		.4byte	0x23af
 11753 23a3 21       		.uleb128 0x21
 11754 23a4 01       		.uleb128 0x1
 11755 23a5 53       		.byte	0x53
 11756 23a6 01       		.uleb128 0x1
 11757 23a7 31       		.byte	0x31
 11758 23a8 21       		.uleb128 0x21
 11759 23a9 01       		.uleb128 0x1
 11760 23aa 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 332


 11761 23ab 02       		.uleb128 0x2
 11762 23ac 74       		.byte	0x74
 11763 23ad 28       		.sleb128 40
 11764 23ae 00       		.byte	0
 11765 23af 22       		.uleb128 0x22
 11766 23b0 5A010000 		.4byte	.LVL784
 11767 23b4 4D320000 		.4byte	0x324d
 11768 23b8 21       		.uleb128 0x21
 11769 23b9 01       		.uleb128 0x1
 11770 23ba 53       		.byte	0x53
 11771 23bb 01       		.uleb128 0x1
 11772 23bc 31       		.byte	0x31
 11773 23bd 21       		.uleb128 0x21
 11774 23be 01       		.uleb128 0x1
 11775 23bf 52       		.byte	0x52
 11776 23c0 02       		.uleb128 0x2
 11777 23c1 76       		.byte	0x76
 11778 23c2 00       		.sleb128 0
 11779 23c3 21       		.uleb128 0x21
 11780 23c4 01       		.uleb128 0x1
 11781 23c5 51       		.byte	0x51
 11782 23c6 02       		.uleb128 0x2
 11783 23c7 74       		.byte	0x74
 11784 23c8 28       		.sleb128 40
 11785 23c9 00       		.byte	0
 11786 23ca 00       		.byte	0
 11787 23cb 25       		.uleb128 0x25
 11788 23cc C0050000 		.4byte	.LASF154
 11789 23d0 01       		.byte	0x1
 11790 23d1 F70F     		.2byte	0xff7
 11791 23d3 2D040000 		.4byte	0x42d
 11792 23d7 00000000 		.4byte	.LFB39
 11793 23db 6E000000 		.4byte	.LFE39-.LFB39
 11794 23df 01       		.uleb128 0x1
 11795 23e0 9C       		.byte	0x9c
 11796 23e1 84240000 		.4byte	0x2484
 11797 23e5 19       		.uleb128 0x19
 11798 23e6 647000   		.ascii	"dp\000"
 11799 23e9 01       		.byte	0x1
 11800 23ea F80F     		.2byte	0xff8
 11801 23ec 04090000 		.4byte	0x904
 11802 23f0 47270000 		.4byte	.LLST188
 11803 23f4 1F       		.uleb128 0x1f
 11804 23f5 6C000000 		.4byte	.LASF102
 11805 23f9 01       		.byte	0x1
 11806 23fa F90F     		.2byte	0xff9
 11807 23fc EE090000 		.4byte	0x9ee
 11808 2400 7E270000 		.4byte	.LLST189
 11809 2404 1A       		.uleb128 0x1a
 11810 2405 72657300 		.ascii	"res\000"
 11811 2409 01       		.byte	0x1
 11812 240a FC0F     		.2byte	0xffc
 11813 240c 2D040000 		.4byte	0x42d
 11814 2410 C0270000 		.4byte	.LLST190
 11815 2414 1E       		.uleb128 0x1e
 11816 2415 667300   		.ascii	"fs\000"
 11817 2418 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 333


 11818 2419 FD0F     		.2byte	0xffd
 11819 241b 49020000 		.4byte	0x249
 11820 241f 02       		.uleb128 0x2
 11821 2420 91       		.byte	0x91
 11822 2421 6C       		.sleb128 -20
 11823 2422 1A       		.uleb128 0x1a
 11824 2423 6F626A00 		.ascii	"obj\000"
 11825 2427 01       		.byte	0x1
 11826 2428 FE0F     		.2byte	0xffe
 11827 242a EA0A0000 		.4byte	0xaea
 11828 242e F4270000 		.4byte	.LLST191
 11829 2432 20       		.uleb128 0x20
 11830 2433 14000000 		.4byte	.LVL792
 11831 2437 920C0000 		.4byte	0xc92
 11832 243b 51240000 		.4byte	0x2451
 11833 243f 21       		.uleb128 0x21
 11834 2440 01       		.uleb128 0x1
 11835 2441 52       		.byte	0x52
 11836 2442 01       		.uleb128 0x1
 11837 2443 30       		.byte	0x30
 11838 2444 21       		.uleb128 0x21
 11839 2445 01       		.uleb128 0x1
 11840 2446 51       		.byte	0x51
 11841 2447 02       		.uleb128 0x2
 11842 2448 91       		.byte	0x91
 11843 2449 6C       		.sleb128 -20
 11844 244a 21       		.uleb128 0x21
 11845 244b 01       		.uleb128 0x1
 11846 244c 50       		.byte	0x50
 11847 244d 02       		.uleb128 0x2
 11848 244e 91       		.byte	0x91
 11849 244f 64       		.sleb128 -28
 11850 2450 00       		.byte	0
 11851 2451 20       		.uleb128 0x20
 11852 2452 24000000 		.4byte	.LVL794
 11853 2456 04160000 		.4byte	0x1604
 11854 245a 65240000 		.4byte	0x2465
 11855 245e 21       		.uleb128 0x21
 11856 245f 01       		.uleb128 0x1
 11857 2460 50       		.byte	0x50
 11858 2461 02       		.uleb128 0x2
 11859 2462 75       		.byte	0x75
 11860 2463 00       		.sleb128 0
 11861 2464 00       		.byte	0
 11862 2465 23       		.uleb128 0x23
 11863 2466 40000000 		.4byte	.LVL796
 11864 246a 9F070000 		.4byte	0x79f
 11865 246e 22       		.uleb128 0x22
 11866 246f 56000000 		.4byte	.LVL799
 11867 2473 A8110000 		.4byte	0x11a8
 11868 2477 21       		.uleb128 0x21
 11869 2478 01       		.uleb128 0x1
 11870 2479 51       		.byte	0x51
 11871 247a 01       		.uleb128 0x1
 11872 247b 30       		.byte	0x30
 11873 247c 21       		.uleb128 0x21
 11874 247d 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 334


 11875 247e 50       		.byte	0x50
 11876 247f 02       		.uleb128 0x2
 11877 2480 75       		.byte	0x75
 11878 2481 00       		.sleb128 0
 11879 2482 00       		.byte	0
 11880 2483 00       		.byte	0
 11881 2484 25       		.uleb128 0x25
 11882 2485 19070000 		.4byte	.LASF155
 11883 2489 01       		.byte	0x1
 11884 248a 3D10     		.2byte	0x103d
 11885 248c 2D040000 		.4byte	0x42d
 11886 2490 00000000 		.4byte	.LFB40
 11887 2494 1A000000 		.4byte	.LFE40-.LFB40
 11888 2498 01       		.uleb128 0x1
 11889 2499 9C       		.byte	0x9c
 11890 249a E2240000 		.4byte	0x24e2
 11891 249e 19       		.uleb128 0x19
 11892 249f 647000   		.ascii	"dp\000"
 11893 24a2 01       		.byte	0x1
 11894 24a3 3E10     		.2byte	0x103e
 11895 24a5 04090000 		.4byte	0x904
 11896 24a9 12280000 		.4byte	.LLST192
 11897 24ad 1A       		.uleb128 0x1a
 11898 24ae 72657300 		.ascii	"res\000"
 11899 24b2 01       		.byte	0x1
 11900 24b3 4110     		.2byte	0x1041
 11901 24b5 2D040000 		.4byte	0x42d
 11902 24b9 30280000 		.4byte	.LLST193
 11903 24bd 1E       		.uleb128 0x1e
 11904 24be 667300   		.ascii	"fs\000"
 11905 24c1 01       		.byte	0x1
 11906 24c2 4210     		.2byte	0x1042
 11907 24c4 49020000 		.4byte	0x249
 11908 24c8 02       		.uleb128 0x2
 11909 24c9 91       		.byte	0x91
 11910 24ca 74       		.sleb128 -12
 11911 24cb 22       		.uleb128 0x22
 11912 24cc 0C000000 		.4byte	.LVL805
 11913 24d0 970A0000 		.4byte	0xa97
 11914 24d4 21       		.uleb128 0x21
 11915 24d5 01       		.uleb128 0x1
 11916 24d6 51       		.byte	0x51
 11917 24d7 02       		.uleb128 0x2
 11918 24d8 91       		.byte	0x91
 11919 24d9 74       		.sleb128 -12
 11920 24da 21       		.uleb128 0x21
 11921 24db 01       		.uleb128 0x1
 11922 24dc 50       		.byte	0x50
 11923 24dd 02       		.uleb128 0x2
 11924 24de 74       		.byte	0x74
 11925 24df 00       		.sleb128 0
 11926 24e0 00       		.byte	0
 11927 24e1 00       		.byte	0
 11928 24e2 25       		.uleb128 0x25
 11929 24e3 1B050000 		.4byte	.LASF156
 11930 24e7 01       		.byte	0x1
 11931 24e8 5E10     		.2byte	0x105e
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 335


 11932 24ea 2D040000 		.4byte	0x42d
 11933 24ee 00000000 		.4byte	.LFB41
 11934 24f2 4C000000 		.4byte	.LFE41-.LFB41
 11935 24f6 01       		.uleb128 0x1
 11936 24f7 9C       		.byte	0x9c
 11937 24f8 B5250000 		.4byte	0x25b5
 11938 24fc 19       		.uleb128 0x19
 11939 24fd 647000   		.ascii	"dp\000"
 11940 2500 01       		.byte	0x1
 11941 2501 5F10     		.2byte	0x105f
 11942 2503 04090000 		.4byte	0x904
 11943 2507 43280000 		.4byte	.LLST194
 11944 250b 19       		.uleb128 0x19
 11945 250c 666E6F00 		.ascii	"fno\000"
 11946 2510 01       		.byte	0x1
 11947 2511 6010     		.2byte	0x1060
 11948 2513 0A090000 		.4byte	0x90a
 11949 2517 61280000 		.4byte	.LLST195
 11950 251b 1A       		.uleb128 0x1a
 11951 251c 72657300 		.ascii	"res\000"
 11952 2520 01       		.byte	0x1
 11953 2521 6310     		.2byte	0x1063
 11954 2523 2D040000 		.4byte	0x42d
 11955 2527 7F280000 		.4byte	.LLST196
 11956 252b 1E       		.uleb128 0x1e
 11957 252c 667300   		.ascii	"fs\000"
 11958 252f 01       		.byte	0x1
 11959 2530 6410     		.2byte	0x1064
 11960 2532 49020000 		.4byte	0x249
 11961 2536 02       		.uleb128 0x2
 11962 2537 91       		.byte	0x91
 11963 2538 6C       		.sleb128 -20
 11964 2539 20       		.uleb128 0x20
 11965 253a 0E000000 		.4byte	.LVL809
 11966 253e 970A0000 		.4byte	0xa97
 11967 2542 53250000 		.4byte	0x2553
 11968 2546 21       		.uleb128 0x21
 11969 2547 01       		.uleb128 0x1
 11970 2548 51       		.byte	0x51
 11971 2549 02       		.uleb128 0x2
 11972 254a 91       		.byte	0x91
 11973 254b 6C       		.sleb128 -20
 11974 254c 21       		.uleb128 0x21
 11975 254d 01       		.uleb128 0x1
 11976 254e 50       		.byte	0x50
 11977 254f 02       		.uleb128 0x2
 11978 2550 75       		.byte	0x75
 11979 2551 00       		.sleb128 0
 11980 2552 00       		.byte	0
 11981 2553 20       		.uleb128 0x20
 11982 2554 1C000000 		.4byte	.LVL811
 11983 2558 A8110000 		.4byte	0x11a8
 11984 255c 6C250000 		.4byte	0x256c
 11985 2560 21       		.uleb128 0x21
 11986 2561 01       		.uleb128 0x1
 11987 2562 51       		.byte	0x51
 11988 2563 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 336


 11989 2564 30       		.byte	0x30
 11990 2565 21       		.uleb128 0x21
 11991 2566 01       		.uleb128 0x1
 11992 2567 50       		.byte	0x50
 11993 2568 02       		.uleb128 0x2
 11994 2569 75       		.byte	0x75
 11995 256a 00       		.sleb128 0
 11996 256b 00       		.byte	0
 11997 256c 20       		.uleb128 0x20
 11998 256d 28000000 		.4byte	.LVL815
 11999 2571 1A180000 		.4byte	0x181a
 12000 2575 85250000 		.4byte	0x2585
 12001 2579 21       		.uleb128 0x21
 12002 257a 01       		.uleb128 0x1
 12003 257b 51       		.byte	0x51
 12004 257c 01       		.uleb128 0x1
 12005 257d 30       		.byte	0x30
 12006 257e 21       		.uleb128 0x21
 12007 257f 01       		.uleb128 0x1
 12008 2580 50       		.byte	0x50
 12009 2581 02       		.uleb128 0x2
 12010 2582 75       		.byte	0x75
 12011 2583 00       		.sleb128 0
 12012 2584 00       		.byte	0
 12013 2585 20       		.uleb128 0x20
 12014 2586 38000000 		.4byte	.LVL817
 12015 258a 83080000 		.4byte	0x883
 12016 258e 9F250000 		.4byte	0x259f
 12017 2592 21       		.uleb128 0x21
 12018 2593 01       		.uleb128 0x1
 12019 2594 51       		.byte	0x51
 12020 2595 02       		.uleb128 0x2
 12021 2596 76       		.byte	0x76
 12022 2597 00       		.sleb128 0
 12023 2598 21       		.uleb128 0x21
 12024 2599 01       		.uleb128 0x1
 12025 259a 50       		.byte	0x50
 12026 259b 02       		.uleb128 0x2
 12027 259c 75       		.byte	0x75
 12028 259d 00       		.sleb128 0
 12029 259e 00       		.byte	0
 12030 259f 22       		.uleb128 0x22
 12031 25a0 40000000 		.4byte	.LVL818
 12032 25a4 4A140000 		.4byte	0x144a
 12033 25a8 21       		.uleb128 0x21
 12034 25a9 01       		.uleb128 0x1
 12035 25aa 51       		.byte	0x51
 12036 25ab 01       		.uleb128 0x1
 12037 25ac 30       		.byte	0x30
 12038 25ad 21       		.uleb128 0x21
 12039 25ae 01       		.uleb128 0x1
 12040 25af 50       		.byte	0x50
 12041 25b0 02       		.uleb128 0x2
 12042 25b1 75       		.byte	0x75
 12043 25b2 00       		.sleb128 0
 12044 25b3 00       		.byte	0
 12045 25b4 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 337


 12046 25b5 25       		.uleb128 0x25
 12047 25b6 C5010000 		.4byte	.LASF157
 12048 25ba 01       		.byte	0x1
 12049 25bb B610     		.2byte	0x10b6
 12050 25bd 2D040000 		.4byte	0x42d
 12051 25c1 00000000 		.4byte	.LFB42
 12052 25c5 42000000 		.4byte	.LFE42-.LFB42
 12053 25c9 01       		.uleb128 0x1
 12054 25ca 9C       		.byte	0x9c
 12055 25cb 58260000 		.4byte	0x2658
 12056 25cf 1F       		.uleb128 0x1f
 12057 25d0 6C000000 		.4byte	.LASF102
 12058 25d4 01       		.byte	0x1
 12059 25d5 B710     		.2byte	0x10b7
 12060 25d7 EE090000 		.4byte	0x9ee
 12061 25db D4280000 		.4byte	.LLST197
 12062 25df 19       		.uleb128 0x19
 12063 25e0 666E6F00 		.ascii	"fno\000"
 12064 25e4 01       		.byte	0x1
 12065 25e5 B810     		.2byte	0x10b8
 12066 25e7 0A090000 		.4byte	0x90a
 12067 25eb 00290000 		.4byte	.LLST198
 12068 25ef 1A       		.uleb128 0x1a
 12069 25f0 72657300 		.ascii	"res\000"
 12070 25f4 01       		.byte	0x1
 12071 25f5 BB10     		.2byte	0x10bb
 12072 25f7 2D040000 		.4byte	0x42d
 12073 25fb 1E290000 		.4byte	.LLST199
 12074 25ff 1E       		.uleb128 0x1e
 12075 2600 646A00   		.ascii	"dj\000"
 12076 2603 01       		.byte	0x1
 12077 2604 BC10     		.2byte	0x10bc
 12078 2606 41030000 		.4byte	0x341
 12079 260a 02       		.uleb128 0x2
 12080 260b 91       		.byte	0x91
 12081 260c 44       		.sleb128 -60
 12082 260d 20       		.uleb128 0x20
 12083 260e 16000000 		.4byte	.LVL823
 12084 2612 920C0000 		.4byte	0xc92
 12085 2616 2D260000 		.4byte	0x262d
 12086 261a 21       		.uleb128 0x21
 12087 261b 01       		.uleb128 0x1
 12088 261c 52       		.byte	0x52
 12089 261d 01       		.uleb128 0x1
 12090 261e 30       		.byte	0x30
 12091 261f 21       		.uleb128 0x21
 12092 2620 01       		.uleb128 0x1
 12093 2621 51       		.byte	0x51
 12094 2622 02       		.uleb128 0x2
 12095 2623 91       		.byte	0x91
 12096 2624 44       		.sleb128 -60
 12097 2625 21       		.uleb128 0x21
 12098 2626 01       		.uleb128 0x1
 12099 2627 50       		.byte	0x50
 12100 2628 03       		.uleb128 0x3
 12101 2629 91       		.byte	0x91
 12102 262a BC7F     		.sleb128 -68
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 338


 12103 262c 00       		.byte	0
 12104 262d 20       		.uleb128 0x20
 12105 262e 22000000 		.4byte	.LVL825
 12106 2632 04160000 		.4byte	0x1604
 12107 2636 41260000 		.4byte	0x2641
 12108 263a 21       		.uleb128 0x21
 12109 263b 01       		.uleb128 0x1
 12110 263c 50       		.byte	0x50
 12111 263d 02       		.uleb128 0x2
 12112 263e 91       		.byte	0x91
 12113 263f 44       		.sleb128 -60
 12114 2640 00       		.byte	0
 12115 2641 22       		.uleb128 0x22
 12116 2642 38000000 		.4byte	.LVL827
 12117 2646 83080000 		.4byte	0x883
 12118 264a 21       		.uleb128 0x21
 12119 264b 01       		.uleb128 0x1
 12120 264c 51       		.byte	0x51
 12121 264d 02       		.uleb128 0x2
 12122 264e 75       		.byte	0x75
 12123 264f 00       		.sleb128 0
 12124 2650 21       		.uleb128 0x21
 12125 2651 01       		.uleb128 0x1
 12126 2652 50       		.byte	0x50
 12127 2653 02       		.uleb128 0x2
 12128 2654 91       		.byte	0x91
 12129 2655 44       		.sleb128 -60
 12130 2656 00       		.byte	0
 12131 2657 00       		.byte	0
 12132 2658 25       		.uleb128 0x25
 12133 2659 40040000 		.4byte	.LASF158
 12134 265d 01       		.byte	0x1
 12135 265e D910     		.2byte	0x10d9
 12136 2660 2D040000 		.4byte	0x42d
 12137 2664 00000000 		.4byte	.LFB43
 12138 2668 DA000000 		.4byte	.LFE43-.LFB43
 12139 266c 01       		.uleb128 0x1
 12140 266d 9C       		.byte	0x9c
 12141 266e 9D270000 		.4byte	0x279d
 12142 2672 1F       		.uleb128 0x1f
 12143 2673 6C000000 		.4byte	.LASF102
 12144 2677 01       		.byte	0x1
 12145 2678 DA10     		.2byte	0x10da
 12146 267a EE090000 		.4byte	0x9ee
 12147 267e 52290000 		.4byte	.LLST200
 12148 2682 1F       		.uleb128 0x1f
 12149 2683 E3030000 		.4byte	.LASF117
 12150 2687 01       		.byte	0x1
 12151 2688 DB10     		.2byte	0x10db
 12152 268a 9D270000 		.4byte	0x279d
 12153 268e 89290000 		.4byte	.LLST201
 12154 2692 1F       		.uleb128 0x1f
 12155 2693 12040000 		.4byte	.LASF159
 12156 2697 01       		.byte	0x1
 12157 2698 DC10     		.2byte	0x10dc
 12158 269a F00A0000 		.4byte	0xaf0
 12159 269e A7290000 		.4byte	.LLST202
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 339


 12160 26a2 1A       		.uleb128 0x1a
 12161 26a3 72657300 		.ascii	"res\000"
 12162 26a7 01       		.byte	0x1
 12163 26a8 DF10     		.2byte	0x10df
 12164 26aa 2D040000 		.4byte	0x42d
 12165 26ae EC290000 		.4byte	.LLST203
 12166 26b2 1E       		.uleb128 0x1e
 12167 26b3 667300   		.ascii	"fs\000"
 12168 26b6 01       		.byte	0x1
 12169 26b7 E010     		.2byte	0x10e0
 12170 26b9 49020000 		.4byte	0x249
 12171 26bd 02       		.uleb128 0x2
 12172 26be 91       		.byte	0x91
 12173 26bf 5C       		.sleb128 -36
 12174 26c0 24       		.uleb128 0x24
 12175 26c1 69030000 		.4byte	.LASF160
 12176 26c5 01       		.byte	0x1
 12177 26c6 E110     		.2byte	0x10e1
 12178 26c8 CE000000 		.4byte	0xce
 12179 26cc 362A0000 		.4byte	.LLST204
 12180 26d0 24       		.uleb128 0x24
 12181 26d1 16030000 		.4byte	.LASF97
 12182 26d5 01       		.byte	0x1
 12183 26d6 E110     		.2byte	0x10e1
 12184 26d8 CE000000 		.4byte	0xce
 12185 26dc 6C2A0000 		.4byte	.LLST205
 12186 26e0 24       		.uleb128 0x24
 12187 26e1 A4000000 		.4byte	.LASF47
 12188 26e5 01       		.byte	0x1
 12189 26e6 E110     		.2byte	0x10e1
 12190 26e8 CE000000 		.4byte	0xce
 12191 26ec B92A0000 		.4byte	.LLST206
 12192 26f0 24       		.uleb128 0x24
 12193 26f1 E1060000 		.4byte	.LASF40
 12194 26f5 01       		.byte	0x1
 12195 26f6 E110     		.2byte	0x10e1
 12196 26f8 CE000000 		.4byte	0xce
 12197 26fc E22A0000 		.4byte	.LLST207
 12198 2700 1A       		.uleb128 0x1a
 12199 2701 6900     		.ascii	"i\000"
 12200 2703 01       		.byte	0x1
 12201 2704 E210     		.2byte	0x10e2
 12202 2706 AD000000 		.4byte	0xad
 12203 270a 002B0000 		.4byte	.LLST208
 12204 270e 1A       		.uleb128 0x1a
 12205 270f 7000     		.ascii	"p\000"
 12206 2711 01       		.byte	0x1
 12207 2712 E310     		.2byte	0x10e3
 12208 2714 D0020000 		.4byte	0x2d0
 12209 2718 382B0000 		.4byte	.LLST209
 12210 271c 1E       		.uleb128 0x1e
 12211 271d 6F626A00 		.ascii	"obj\000"
 12212 2721 01       		.byte	0x1
 12213 2722 E410     		.2byte	0x10e4
 12214 2724 4F020000 		.4byte	0x24f
 12215 2728 02       		.uleb128 0x2
 12216 2729 91       		.byte	0x91
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 340


 12217 272a 4C       		.sleb128 -52
 12218 272b 20       		.uleb128 0x20
 12219 272c 1A000000 		.4byte	.LVL834
 12220 2730 920C0000 		.4byte	0xc92
 12221 2734 4A270000 		.4byte	0x274a
 12222 2738 21       		.uleb128 0x21
 12223 2739 01       		.uleb128 0x1
 12224 273a 52       		.byte	0x52
 12225 273b 01       		.uleb128 0x1
 12226 273c 30       		.byte	0x30
 12227 273d 21       		.uleb128 0x21
 12228 273e 01       		.uleb128 0x1
 12229 273f 51       		.byte	0x51
 12230 2740 02       		.uleb128 0x2
 12231 2741 91       		.byte	0x91
 12232 2742 5C       		.sleb128 -36
 12233 2743 21       		.uleb128 0x21
 12234 2744 01       		.uleb128 0x1
 12235 2745 50       		.byte	0x50
 12236 2746 02       		.uleb128 0x2
 12237 2747 91       		.byte	0x91
 12238 2748 44       		.sleb128 -60
 12239 2749 00       		.byte	0
 12240 274a 20       		.uleb128 0x20
 12241 274b 48000000 		.4byte	.LVL839
 12242 274f A6100000 		.4byte	0x10a6
 12243 2753 64270000 		.4byte	0x2764
 12244 2757 21       		.uleb128 0x21
 12245 2758 01       		.uleb128 0x1
 12246 2759 51       		.byte	0x51
 12247 275a 02       		.uleb128 0x2
 12248 275b 74       		.byte	0x74
 12249 275c 00       		.sleb128 0
 12250 275d 21       		.uleb128 0x21
 12251 275e 01       		.uleb128 0x1
 12252 275f 50       		.byte	0x50
 12253 2760 02       		.uleb128 0x2
 12254 2761 91       		.byte	0x91
 12255 2762 4C       		.sleb128 -52
 12256 2763 00       		.byte	0
 12257 2764 20       		.uleb128 0x20
 12258 2765 7A000000 		.4byte	.LVL847
 12259 2769 890B0000 		.4byte	0xb89
 12260 276d 78270000 		.4byte	0x2778
 12261 2771 21       		.uleb128 0x21
 12262 2772 01       		.uleb128 0x1
 12263 2773 51       		.byte	0x51
 12264 2774 02       		.uleb128 0x2
 12265 2775 78       		.byte	0x78
 12266 2776 00       		.sleb128 0
 12267 2777 00       		.byte	0
 12268 2778 20       		.uleb128 0x20
 12269 2779 96000000 		.4byte	.LVL851
 12270 277d 0E050000 		.4byte	0x50e
 12271 2781 8C270000 		.4byte	0x278c
 12272 2785 21       		.uleb128 0x21
 12273 2786 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 341


 12274 2787 50       		.byte	0x50
 12275 2788 02       		.uleb128 0x2
 12276 2789 74       		.byte	0x74
 12277 278a 00       		.sleb128 0
 12278 278b 00       		.byte	0
 12279 278c 22       		.uleb128 0x22
 12280 278d A6000000 		.4byte	.LVL855
 12281 2791 48050000 		.4byte	0x548
 12282 2795 21       		.uleb128 0x21
 12283 2796 01       		.uleb128 0x1
 12284 2797 50       		.byte	0x50
 12285 2798 02       		.uleb128 0x2
 12286 2799 74       		.byte	0x74
 12287 279a 00       		.sleb128 0
 12288 279b 00       		.byte	0
 12289 279c 00       		.byte	0
 12290 279d 0B       		.uleb128 0xb
 12291 279e 04       		.byte	0x4
 12292 279f CE000000 		.4byte	0xce
 12293 27a3 25       		.uleb128 0x25
 12294 27a4 BC060000 		.4byte	.LASF161
 12295 27a8 01       		.byte	0x1
 12296 27a9 3011     		.2byte	0x1130
 12297 27ab 2D040000 		.4byte	0x42d
 12298 27af 00000000 		.4byte	.LFB44
 12299 27b3 AC000000 		.4byte	.LFE44-.LFB44
 12300 27b7 01       		.uleb128 0x1
 12301 27b8 9C       		.byte	0x9c
 12302 27b9 6B280000 		.4byte	0x286b
 12303 27bd 19       		.uleb128 0x19
 12304 27be 667000   		.ascii	"fp\000"
 12305 27c1 01       		.byte	0x1
 12306 27c2 3111     		.2byte	0x1131
 12307 27c4 EC040000 		.4byte	0x4ec
 12308 27c8 622B0000 		.4byte	.LLST210
 12309 27cc 1A       		.uleb128 0x1a
 12310 27cd 72657300 		.ascii	"res\000"
 12311 27d1 01       		.byte	0x1
 12312 27d2 3411     		.2byte	0x1134
 12313 27d4 2D040000 		.4byte	0x42d
 12314 27d8 802B0000 		.4byte	.LLST211
 12315 27dc 1E       		.uleb128 0x1e
 12316 27dd 667300   		.ascii	"fs\000"
 12317 27e0 01       		.byte	0x1
 12318 27e1 3511     		.2byte	0x1135
 12319 27e3 49020000 		.4byte	0x249
 12320 27e7 02       		.uleb128 0x2
 12321 27e8 91       		.byte	0x91
 12322 27e9 6C       		.sleb128 -20
 12323 27ea 1A       		.uleb128 0x1a
 12324 27eb 6E636C00 		.ascii	"ncl\000"
 12325 27ef 01       		.byte	0x1
 12326 27f0 3611     		.2byte	0x1136
 12327 27f2 CE000000 		.4byte	0xce
 12328 27f6 B52B0000 		.4byte	.LLST212
 12329 27fa 20       		.uleb128 0x20
 12330 27fb 0C000000 		.4byte	.LVL865
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 342


 12331 27ff 970A0000 		.4byte	0xa97
 12332 2803 14280000 		.4byte	0x2814
 12333 2807 21       		.uleb128 0x21
 12334 2808 01       		.uleb128 0x1
 12335 2809 51       		.byte	0x51
 12336 280a 02       		.uleb128 0x2
 12337 280b 91       		.byte	0x91
 12338 280c 6C       		.sleb128 -20
 12339 280d 21       		.uleb128 0x21
 12340 280e 01       		.uleb128 0x1
 12341 280f 50       		.byte	0x50
 12342 2810 02       		.uleb128 0x2
 12343 2811 75       		.byte	0x75
 12344 2812 00       		.sleb128 0
 12345 2813 00       		.byte	0
 12346 2814 20       		.uleb128 0x20
 12347 2815 34000000 		.4byte	.LVL868
 12348 2819 25130000 		.4byte	0x1325
 12349 281d 2D280000 		.4byte	0x282d
 12350 2821 21       		.uleb128 0x21
 12351 2822 01       		.uleb128 0x1
 12352 2823 52       		.byte	0x52
 12353 2824 01       		.uleb128 0x1
 12354 2825 30       		.byte	0x30
 12355 2826 21       		.uleb128 0x21
 12356 2827 01       		.uleb128 0x1
 12357 2828 50       		.byte	0x50
 12358 2829 02       		.uleb128 0x2
 12359 282a 75       		.byte	0x75
 12360 282b 00       		.sleb128 0
 12361 282c 00       		.byte	0
 12362 282d 20       		.uleb128 0x20
 12363 282e 44000000 		.4byte	.LVL870
 12364 2832 A6100000 		.4byte	0x10a6
 12365 2836 41280000 		.4byte	0x2841
 12366 283a 21       		.uleb128 0x21
 12367 283b 01       		.uleb128 0x1
 12368 283c 50       		.byte	0x50
 12369 283d 02       		.uleb128 0x2
 12370 283e 75       		.byte	0x75
 12371 283f 00       		.sleb128 0
 12372 2840 00       		.byte	0
 12373 2841 20       		.uleb128 0x20
 12374 2842 66000000 		.4byte	.LVL875
 12375 2846 25130000 		.4byte	0x1325
 12376 284a 55280000 		.4byte	0x2855
 12377 284e 21       		.uleb128 0x21
 12378 284f 01       		.uleb128 0x1
 12379 2850 50       		.byte	0x50
 12380 2851 02       		.uleb128 0x2
 12381 2852 75       		.byte	0x75
 12382 2853 00       		.sleb128 0
 12383 2854 00       		.byte	0
 12384 2855 22       		.uleb128 0x22
 12385 2856 8C000000 		.4byte	.LVL877
 12386 285a 29320000 		.4byte	0x3229
 12387 285e 21       		.uleb128 0x21
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 343


 12388 285f 01       		.uleb128 0x1
 12389 2860 53       		.byte	0x53
 12390 2861 01       		.uleb128 0x1
 12391 2862 31       		.byte	0x31
 12392 2863 21       		.uleb128 0x21
 12393 2864 01       		.uleb128 0x1
 12394 2865 51       		.byte	0x51
 12395 2866 02       		.uleb128 0x2
 12396 2867 75       		.byte	0x75
 12397 2868 28       		.sleb128 40
 12398 2869 00       		.byte	0
 12399 286a 00       		.byte	0
 12400 286b 25       		.uleb128 0x25
 12401 286c BC010000 		.4byte	.LASF162
 12402 2870 01       		.byte	0x1
 12403 2871 6211     		.2byte	0x1162
 12404 2873 2D040000 		.4byte	0x42d
 12405 2877 00000000 		.4byte	.LFB45
 12406 287b B0000000 		.4byte	.LFE45-.LFB45
 12407 287f 01       		.uleb128 0x1
 12408 2880 9C       		.byte	0x9c
 12409 2881 9C290000 		.4byte	0x299c
 12410 2885 1F       		.uleb128 0x1f
 12411 2886 6C000000 		.4byte	.LASF102
 12412 288a 01       		.byte	0x1
 12413 288b 6311     		.2byte	0x1163
 12414 288d EE090000 		.4byte	0x9ee
 12415 2891 D32B0000 		.4byte	.LLST213
 12416 2895 1A       		.uleb128 0x1a
 12417 2896 72657300 		.ascii	"res\000"
 12418 289a 01       		.byte	0x1
 12419 289b 6611     		.2byte	0x1166
 12420 289d 2D040000 		.4byte	0x42d
 12421 28a1 0C2C0000 		.4byte	.LLST214
 12422 28a5 1E       		.uleb128 0x1e
 12423 28a6 646A00   		.ascii	"dj\000"
 12424 28a9 01       		.byte	0x1
 12425 28aa 6711     		.2byte	0x1167
 12426 28ac 41030000 		.4byte	0x341
 12427 28b0 02       		.uleb128 0x2
 12428 28b1 91       		.byte	0x91
 12429 28b2 44       		.sleb128 -60
 12430 28b3 1E       		.uleb128 0x1e
 12431 28b4 73646A00 		.ascii	"sdj\000"
 12432 28b8 01       		.byte	0x1
 12433 28b9 6711     		.2byte	0x1167
 12434 28bb 41030000 		.4byte	0x341
 12435 28bf 03       		.uleb128 0x3
 12436 28c0 91       		.byte	0x91
 12437 28c1 987F     		.sleb128 -104
 12438 28c3 24       		.uleb128 0x24
 12439 28c4 67040000 		.4byte	.LASF163
 12440 28c8 01       		.byte	0x1
 12441 28c9 6811     		.2byte	0x1168
 12442 28cb CE000000 		.4byte	0xce
 12443 28cf 772C0000 		.4byte	.LLST215
 12444 28d3 1E       		.uleb128 0x1e
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 344


 12445 28d4 667300   		.ascii	"fs\000"
 12446 28d7 01       		.byte	0x1
 12447 28d8 6911     		.2byte	0x1169
 12448 28da 49020000 		.4byte	0x249
 12449 28de 03       		.uleb128 0x3
 12450 28df 91       		.byte	0x91
 12451 28e0 947F     		.sleb128 -108
 12452 28e2 20       		.uleb128 0x20
 12453 28e3 14000000 		.4byte	.LVL882
 12454 28e7 920C0000 		.4byte	0xc92
 12455 28eb 03290000 		.4byte	0x2903
 12456 28ef 21       		.uleb128 0x21
 12457 28f0 01       		.uleb128 0x1
 12458 28f1 52       		.byte	0x52
 12459 28f2 01       		.uleb128 0x1
 12460 28f3 32       		.byte	0x32
 12461 28f4 21       		.uleb128 0x21
 12462 28f5 01       		.uleb128 0x1
 12463 28f6 51       		.byte	0x51
 12464 28f7 03       		.uleb128 0x3
 12465 28f8 91       		.byte	0x91
 12466 28f9 947F     		.sleb128 -108
 12467 28fb 21       		.uleb128 0x21
 12468 28fc 01       		.uleb128 0x1
 12469 28fd 50       		.byte	0x50
 12470 28fe 03       		.uleb128 0x3
 12471 28ff 91       		.byte	0x91
 12472 2900 8C7F     		.sleb128 -116
 12473 2902 00       		.byte	0
 12474 2903 20       		.uleb128 0x20
 12475 2904 26000000 		.4byte	.LVL884
 12476 2908 04160000 		.4byte	0x1604
 12477 290c 17290000 		.4byte	0x2917
 12478 2910 21       		.uleb128 0x21
 12479 2911 01       		.uleb128 0x1
 12480 2912 50       		.byte	0x50
 12481 2913 02       		.uleb128 0x2
 12482 2914 91       		.byte	0x91
 12483 2915 44       		.sleb128 -60
 12484 2916 00       		.byte	0
 12485 2917 20       		.uleb128 0x20
 12486 2918 52000000 		.4byte	.LVL886
 12487 291c 9F070000 		.4byte	0x79f
 12488 2920 2B290000 		.4byte	0x292b
 12489 2924 21       		.uleb128 0x21
 12490 2925 01       		.uleb128 0x1
 12491 2926 50       		.byte	0x50
 12492 2927 02       		.uleb128 0x2
 12493 2928 76       		.byte	0x76
 12494 2929 00       		.sleb128 0
 12495 292a 00       		.byte	0
 12496 292b 20       		.uleb128 0x20
 12497 292c 6A000000 		.4byte	.LVL889
 12498 2930 A8110000 		.4byte	0x11a8
 12499 2934 45290000 		.4byte	0x2945
 12500 2938 21       		.uleb128 0x21
 12501 2939 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 345


 12502 293a 51       		.byte	0x51
 12503 293b 01       		.uleb128 0x1
 12504 293c 30       		.byte	0x30
 12505 293d 21       		.uleb128 0x21
 12506 293e 01       		.uleb128 0x1
 12507 293f 50       		.byte	0x50
 12508 2940 03       		.uleb128 0x3
 12509 2941 91       		.byte	0x91
 12510 2942 987F     		.sleb128 -104
 12511 2944 00       		.byte	0
 12512 2945 20       		.uleb128 0x20
 12513 2946 76000000 		.4byte	.LVL891
 12514 294a 1A180000 		.4byte	0x181a
 12515 294e 5F290000 		.4byte	0x295f
 12516 2952 21       		.uleb128 0x21
 12517 2953 01       		.uleb128 0x1
 12518 2954 51       		.byte	0x51
 12519 2955 01       		.uleb128 0x1
 12520 2956 30       		.byte	0x30
 12521 2957 21       		.uleb128 0x21
 12522 2958 01       		.uleb128 0x1
 12523 2959 50       		.byte	0x50
 12524 295a 03       		.uleb128 0x3
 12525 295b 91       		.byte	0x91
 12526 295c 987F     		.sleb128 -104
 12527 295e 00       		.byte	0
 12528 295f 20       		.uleb128 0x20
 12529 2960 8E000000 		.4byte	.LVL895
 12530 2964 F3130000 		.4byte	0x13f3
 12531 2968 73290000 		.4byte	0x2973
 12532 296c 21       		.uleb128 0x21
 12533 296d 01       		.uleb128 0x1
 12534 296e 50       		.byte	0x50
 12535 296f 02       		.uleb128 0x2
 12536 2970 91       		.byte	0x91
 12537 2971 44       		.sleb128 -60
 12538 2972 00       		.byte	0
 12539 2973 20       		.uleb128 0x20
 12540 2974 9E000000 		.4byte	.LVL897
 12541 2978 25130000 		.4byte	0x1325
 12542 297c 92290000 		.4byte	0x2992
 12543 2980 21       		.uleb128 0x21
 12544 2981 01       		.uleb128 0x1
 12545 2982 52       		.byte	0x52
 12546 2983 01       		.uleb128 0x1
 12547 2984 30       		.byte	0x30
 12548 2985 21       		.uleb128 0x21
 12549 2986 01       		.uleb128 0x1
 12550 2987 51       		.byte	0x51
 12551 2988 02       		.uleb128 0x2
 12552 2989 75       		.byte	0x75
 12553 298a 00       		.sleb128 0
 12554 298b 21       		.uleb128 0x21
 12555 298c 01       		.uleb128 0x1
 12556 298d 50       		.byte	0x50
 12557 298e 02       		.uleb128 0x2
 12558 298f 91       		.byte	0x91
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 346


 12559 2990 44       		.sleb128 -60
 12560 2991 00       		.byte	0
 12561 2992 23       		.uleb128 0x23
 12562 2993 A8000000 		.4byte	.LVL899
 12563 2997 B6180000 		.4byte	0x18b6
 12564 299b 00       		.byte	0
 12565 299c 25       		.uleb128 0x25
 12566 299d A2030000 		.4byte	.LASF164
 12567 29a1 01       		.byte	0x1
 12568 29a2 C111     		.2byte	0x11c1
 12569 29a4 2D040000 		.4byte	0x42d
 12570 29a8 00000000 		.4byte	.LFB46
 12571 29ac 5C010000 		.4byte	.LFE46-.LFB46
 12572 29b0 01       		.uleb128 0x1
 12573 29b1 9C       		.byte	0x9c
 12574 29b2 0A2C0000 		.4byte	0x2c0a
 12575 29b6 1F       		.uleb128 0x1f
 12576 29b7 6C000000 		.4byte	.LASF102
 12577 29bb 01       		.byte	0x1
 12578 29bc C211     		.2byte	0x11c2
 12579 29be EE090000 		.4byte	0x9ee
 12580 29c2 B82C0000 		.4byte	.LLST216
 12581 29c6 1A       		.uleb128 0x1a
 12582 29c7 72657300 		.ascii	"res\000"
 12583 29cb 01       		.byte	0x1
 12584 29cc C511     		.2byte	0x11c5
 12585 29ce 2D040000 		.4byte	0x42d
 12586 29d2 FD2C0000 		.4byte	.LLST217
 12587 29d6 1E       		.uleb128 0x1e
 12588 29d7 646A00   		.ascii	"dj\000"
 12589 29da 01       		.byte	0x1
 12590 29db C611     		.2byte	0x11c6
 12591 29dd 41030000 		.4byte	0x341
 12592 29e1 03       		.uleb128 0x3
 12593 29e2 91       		.byte	0x91
 12594 29e3 B47F     		.sleb128 -76
 12595 29e5 1E       		.uleb128 0x1e
 12596 29e6 667300   		.ascii	"fs\000"
 12597 29e9 01       		.byte	0x1
 12598 29ea C711     		.2byte	0x11c7
 12599 29ec 49020000 		.4byte	0x249
 12600 29f0 03       		.uleb128 0x3
 12601 29f1 91       		.byte	0x91
 12602 29f2 B07F     		.sleb128 -80
 12603 29f4 1A       		.uleb128 0x1a
 12604 29f5 64697200 		.ascii	"dir\000"
 12605 29f9 01       		.byte	0x1
 12606 29fa C811     		.2byte	0x11c8
 12607 29fc D0020000 		.4byte	0x2d0
 12608 2a00 692D0000 		.4byte	.LLST218
 12609 2a04 1A       		.uleb128 0x1a
 12610 2a05 6E00     		.ascii	"n\000"
 12611 2a07 01       		.byte	0x1
 12612 2a08 C911     		.2byte	0x11c9
 12613 2a0a AD000000 		.4byte	0xad
 12614 2a0e 872D0000 		.4byte	.LLST219
 12615 2a12 1A       		.uleb128 0x1a
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 347


 12616 2a13 64736300 		.ascii	"dsc\000"
 12617 2a17 01       		.byte	0x1
 12618 2a18 CA11     		.2byte	0x11ca
 12619 2a1a CE000000 		.4byte	0xce
 12620 2a1e 9A2D0000 		.4byte	.LLST220
 12621 2a22 1A       		.uleb128 0x1a
 12622 2a23 64636C00 		.ascii	"dcl\000"
 12623 2a27 01       		.byte	0x1
 12624 2a28 CA11     		.2byte	0x11ca
 12625 2a2a CE000000 		.4byte	0xce
 12626 2a2e CE2D0000 		.4byte	.LLST221
 12627 2a32 1A       		.uleb128 0x1a
 12628 2a33 70636C00 		.ascii	"pcl\000"
 12629 2a37 01       		.byte	0x1
 12630 2a38 CA11     		.2byte	0x11ca
 12631 2a3a CE000000 		.4byte	0xce
 12632 2a3e EC2D0000 		.4byte	.LLST222
 12633 2a42 1A       		.uleb128 0x1a
 12634 2a43 746D00   		.ascii	"tm\000"
 12635 2a46 01       		.byte	0x1
 12636 2a47 CA11     		.2byte	0x11ca
 12637 2a49 CE000000 		.4byte	0xce
 12638 2a4d FF2D0000 		.4byte	.LLST223
 12639 2a51 20       		.uleb128 0x20
 12640 2a52 16000000 		.4byte	.LVL904
 12641 2a56 920C0000 		.4byte	0xc92
 12642 2a5a 722A0000 		.4byte	0x2a72
 12643 2a5e 21       		.uleb128 0x21
 12644 2a5f 01       		.uleb128 0x1
 12645 2a60 52       		.byte	0x52
 12646 2a61 01       		.uleb128 0x1
 12647 2a62 32       		.byte	0x32
 12648 2a63 21       		.uleb128 0x21
 12649 2a64 01       		.uleb128 0x1
 12650 2a65 51       		.byte	0x51
 12651 2a66 03       		.uleb128 0x3
 12652 2a67 91       		.byte	0x91
 12653 2a68 B07F     		.sleb128 -80
 12654 2a6a 21       		.uleb128 0x21
 12655 2a6b 01       		.uleb128 0x1
 12656 2a6c 50       		.byte	0x50
 12657 2a6d 03       		.uleb128 0x3
 12658 2a6e 91       		.byte	0x91
 12659 2a6f AC7F     		.sleb128 -84
 12660 2a71 00       		.byte	0
 12661 2a72 20       		.uleb128 0x20
 12662 2a73 2A000000 		.4byte	.LVL906
 12663 2a77 04160000 		.4byte	0x1604
 12664 2a7b 872A0000 		.4byte	0x2a87
 12665 2a7f 21       		.uleb128 0x21
 12666 2a80 01       		.uleb128 0x1
 12667 2a81 50       		.byte	0x50
 12668 2a82 03       		.uleb128 0x3
 12669 2a83 91       		.byte	0x91
 12670 2a84 B47F     		.sleb128 -76
 12671 2a86 00       		.byte	0
 12672 2a87 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 348


 12673 2a88 3E000000 		.4byte	.LVL908
 12674 2a8c 3F120000 		.4byte	0x123f
 12675 2a90 A12A0000 		.4byte	0x2aa1
 12676 2a94 21       		.uleb128 0x21
 12677 2a95 01       		.uleb128 0x1
 12678 2a96 51       		.byte	0x51
 12679 2a97 01       		.uleb128 0x1
 12680 2a98 30       		.byte	0x30
 12681 2a99 21       		.uleb128 0x21
 12682 2a9a 01       		.uleb128 0x1
 12683 2a9b 50       		.byte	0x50
 12684 2a9c 03       		.uleb128 0x3
 12685 2a9d 91       		.byte	0x91
 12686 2a9e B47F     		.sleb128 -76
 12687 2aa0 00       		.byte	0
 12688 2aa1 23       		.uleb128 0x23
 12689 2aa2 64000000 		.4byte	.LVL914
 12690 2aa6 F60A0000 		.4byte	0xaf6
 12691 2aaa 20       		.uleb128 0x20
 12692 2aab 74000000 		.4byte	.LVL916
 12693 2aaf 65070000 		.4byte	0x765
 12694 2ab3 C42A0000 		.4byte	0x2ac4
 12695 2ab7 21       		.uleb128 0x21
 12696 2ab8 01       		.uleb128 0x1
 12697 2ab9 51       		.byte	0x51
 12698 2aba 02       		.uleb128 0x2
 12699 2abb 78       		.byte	0x78
 12700 2abc 00       		.sleb128 0
 12701 2abd 21       		.uleb128 0x21
 12702 2abe 01       		.uleb128 0x1
 12703 2abf 50       		.byte	0x50
 12704 2ac0 02       		.uleb128 0x2
 12705 2ac1 75       		.byte	0x75
 12706 2ac2 00       		.sleb128 0
 12707 2ac3 00       		.byte	0
 12708 2ac4 20       		.uleb128 0x20
 12709 2ac5 86000000 		.4byte	.LVL920
 12710 2ac9 5A060000 		.4byte	0x65a
 12711 2acd E42A0000 		.4byte	0x2ae4
 12712 2ad1 21       		.uleb128 0x21
 12713 2ad2 01       		.uleb128 0x1
 12714 2ad3 52       		.byte	0x52
 12715 2ad4 03       		.uleb128 0x3
 12716 2ad5 0A       		.byte	0xa
 12717 2ad6 0002     		.2byte	0x200
 12718 2ad8 21       		.uleb128 0x21
 12719 2ad9 01       		.uleb128 0x1
 12720 2ada 51       		.byte	0x51
 12721 2adb 01       		.uleb128 0x1
 12722 2adc 30       		.byte	0x30
 12723 2add 21       		.uleb128 0x21
 12724 2ade 01       		.uleb128 0x1
 12725 2adf 50       		.byte	0x50
 12726 2ae0 02       		.uleb128 0x2
 12727 2ae1 79       		.byte	0x79
 12728 2ae2 00       		.sleb128 0
 12729 2ae3 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 349


 12730 2ae4 20       		.uleb128 0x20
 12731 2ae5 90000000 		.4byte	.LVL921
 12732 2ae9 5A060000 		.4byte	0x65a
 12733 2aed 032B0000 		.4byte	0x2b03
 12734 2af1 21       		.uleb128 0x21
 12735 2af2 01       		.uleb128 0x1
 12736 2af3 52       		.byte	0x52
 12737 2af4 01       		.uleb128 0x1
 12738 2af5 3B       		.byte	0x3b
 12739 2af6 21       		.uleb128 0x21
 12740 2af7 01       		.uleb128 0x1
 12741 2af8 51       		.byte	0x51
 12742 2af9 02       		.uleb128 0x2
 12743 2afa 08       		.byte	0x8
 12744 2afb 20       		.byte	0x20
 12745 2afc 21       		.uleb128 0x21
 12746 2afd 01       		.uleb128 0x1
 12747 2afe 50       		.byte	0x50
 12748 2aff 02       		.uleb128 0x2
 12749 2b00 79       		.byte	0x79
 12750 2b01 00       		.sleb128 0
 12751 2b02 00       		.byte	0
 12752 2b03 20       		.uleb128 0x20
 12753 2b04 A8000000 		.4byte	.LVL922
 12754 2b08 B9050000 		.4byte	0x5b9
 12755 2b0c 212B0000 		.4byte	0x2b21
 12756 2b10 21       		.uleb128 0x21
 12757 2b11 01       		.uleb128 0x1
 12758 2b12 51       		.byte	0x51
 12759 2b13 05       		.uleb128 0x5
 12760 2b14 0C       		.byte	0xc
 12761 2b15 00002148 		.4byte	0x48210000
 12762 2b19 21       		.uleb128 0x21
 12763 2b1a 01       		.uleb128 0x1
 12764 2b1b 50       		.byte	0x50
 12765 2b1c 03       		.uleb128 0x3
 12766 2b1d 75       		.byte	0x75
 12767 2b1e C600     		.sleb128 70
 12768 2b20 00       		.byte	0
 12769 2b21 20       		.uleb128 0x20
 12770 2b22 B2000000 		.4byte	.LVL923
 12771 2b26 0C080000 		.4byte	0x80c
 12772 2b2a 3B2B0000 		.4byte	0x2b3b
 12773 2b2e 21       		.uleb128 0x21
 12774 2b2f 01       		.uleb128 0x1
 12775 2b30 52       		.byte	0x52
 12776 2b31 02       		.uleb128 0x2
 12777 2b32 78       		.byte	0x78
 12778 2b33 00       		.sleb128 0
 12779 2b34 21       		.uleb128 0x21
 12780 2b35 01       		.uleb128 0x1
 12781 2b36 51       		.byte	0x51
 12782 2b37 02       		.uleb128 0x2
 12783 2b38 79       		.byte	0x79
 12784 2b39 00       		.sleb128 0
 12785 2b3a 00       		.byte	0
 12786 2b3b 20       		.uleb128 0x20
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 350


 12787 2b3c C0000000 		.4byte	.LVL924
 12788 2b40 F0050000 		.4byte	0x5f0
 12789 2b44 5B2B0000 		.4byte	0x2b5b
 12790 2b48 21       		.uleb128 0x21
 12791 2b49 01       		.uleb128 0x1
 12792 2b4a 52       		.byte	0x52
 12793 2b4b 02       		.uleb128 0x2
 12794 2b4c 08       		.byte	0x8
 12795 2b4d 20       		.byte	0x20
 12796 2b4e 21       		.uleb128 0x21
 12797 2b4f 01       		.uleb128 0x1
 12798 2b50 51       		.byte	0x51
 12799 2b51 02       		.uleb128 0x2
 12800 2b52 79       		.byte	0x79
 12801 2b53 00       		.sleb128 0
 12802 2b54 21       		.uleb128 0x21
 12803 2b55 01       		.uleb128 0x1
 12804 2b56 50       		.byte	0x50
 12805 2b57 02       		.uleb128 0x2
 12806 2b58 77       		.byte	0x77
 12807 2b59 00       		.sleb128 0
 12808 2b5a 00       		.byte	0
 12809 2b5b 20       		.uleb128 0x20
 12810 2b5c DC000000 		.4byte	.LVL927
 12811 2b60 0C080000 		.4byte	0x80c
 12812 2b64 6F2B0000 		.4byte	0x2b6f
 12813 2b68 21       		.uleb128 0x21
 12814 2b69 01       		.uleb128 0x1
 12815 2b6a 51       		.byte	0x51
 12816 2b6b 02       		.uleb128 0x2
 12817 2b6c 77       		.byte	0x77
 12818 2b6d 00       		.sleb128 0
 12819 2b6e 00       		.byte	0
 12820 2b6f 23       		.uleb128 0x23
 12821 2b70 F2000000 		.4byte	.LVL930
 12822 2b74 F60A0000 		.4byte	0xaf6
 12823 2b78 20       		.uleb128 0x20
 12824 2b79 02010000 		.4byte	.LVL932
 12825 2b7d 5A060000 		.4byte	0x65a
 12826 2b81 982B0000 		.4byte	0x2b98
 12827 2b85 21       		.uleb128 0x21
 12828 2b86 01       		.uleb128 0x1
 12829 2b87 52       		.byte	0x52
 12830 2b88 03       		.uleb128 0x3
 12831 2b89 0A       		.byte	0xa
 12832 2b8a 0002     		.2byte	0x200
 12833 2b8c 21       		.uleb128 0x21
 12834 2b8d 01       		.uleb128 0x1
 12835 2b8e 51       		.byte	0x51
 12836 2b8f 01       		.uleb128 0x1
 12837 2b90 30       		.byte	0x30
 12838 2b91 21       		.uleb128 0x21
 12839 2b92 01       		.uleb128 0x1
 12840 2b93 50       		.byte	0x50
 12841 2b94 02       		.uleb128 0x2
 12842 2b95 79       		.byte	0x79
 12843 2b96 00       		.sleb128 0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 351


 12844 2b97 00       		.byte	0
 12845 2b98 20       		.uleb128 0x20
 12846 2b99 12010000 		.4byte	.LVL936
 12847 2b9d 78170000 		.4byte	0x1778
 12848 2ba1 AD2B0000 		.4byte	0x2bad
 12849 2ba5 21       		.uleb128 0x21
 12850 2ba6 01       		.uleb128 0x1
 12851 2ba7 50       		.byte	0x50
 12852 2ba8 03       		.uleb128 0x3
 12853 2ba9 91       		.byte	0x91
 12854 2baa B47F     		.sleb128 -76
 12855 2bac 00       		.byte	0
 12856 2bad 20       		.uleb128 0x20
 12857 2bae 22010000 		.4byte	.LVL939
 12858 2bb2 B9050000 		.4byte	0x5b9
 12859 2bb6 CA2B0000 		.4byte	0x2bca
 12860 2bba 21       		.uleb128 0x21
 12861 2bbb 01       		.uleb128 0x1
 12862 2bbc 51       		.byte	0x51
 12863 2bbd 05       		.uleb128 0x5
 12864 2bbe 0C       		.byte	0xc
 12865 2bbf 00002148 		.4byte	0x48210000
 12866 2bc3 21       		.uleb128 0x21
 12867 2bc4 01       		.uleb128 0x1
 12868 2bc5 50       		.byte	0x50
 12869 2bc6 02       		.uleb128 0x2
 12870 2bc7 75       		.byte	0x75
 12871 2bc8 16       		.sleb128 22
 12872 2bc9 00       		.byte	0
 12873 2bca 20       		.uleb128 0x20
 12874 2bcb 2C010000 		.4byte	.LVL940
 12875 2bcf 0C080000 		.4byte	0x80c
 12876 2bd3 E42B0000 		.4byte	0x2be4
 12877 2bd7 21       		.uleb128 0x21
 12878 2bd8 01       		.uleb128 0x1
 12879 2bd9 52       		.byte	0x52
 12880 2bda 02       		.uleb128 0x2
 12881 2bdb 78       		.byte	0x78
 12882 2bdc 00       		.sleb128 0
 12883 2bdd 21       		.uleb128 0x21
 12884 2bde 01       		.uleb128 0x1
 12885 2bdf 51       		.byte	0x51
 12886 2be0 02       		.uleb128 0x2
 12887 2be1 75       		.byte	0x75
 12888 2be2 00       		.sleb128 0
 12889 2be3 00       		.byte	0
 12890 2be4 23       		.uleb128 0x23
 12891 2be5 3E010000 		.4byte	.LVL941
 12892 2be9 B6180000 		.4byte	0x18b6
 12893 2bed 22       		.uleb128 0x22
 12894 2bee 4C010000 		.4byte	.LVL944
 12895 2bf2 25130000 		.4byte	0x1325
 12896 2bf6 21       		.uleb128 0x21
 12897 2bf7 01       		.uleb128 0x1
 12898 2bf8 52       		.byte	0x52
 12899 2bf9 01       		.uleb128 0x1
 12900 2bfa 30       		.byte	0x30
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 352


 12901 2bfb 21       		.uleb128 0x21
 12902 2bfc 01       		.uleb128 0x1
 12903 2bfd 51       		.byte	0x51
 12904 2bfe 02       		.uleb128 0x2
 12905 2bff 78       		.byte	0x78
 12906 2c00 00       		.sleb128 0
 12907 2c01 21       		.uleb128 0x21
 12908 2c02 01       		.uleb128 0x1
 12909 2c03 50       		.byte	0x50
 12910 2c04 03       		.uleb128 0x3
 12911 2c05 91       		.byte	0x91
 12912 2c06 B47F     		.sleb128 -76
 12913 2c08 00       		.byte	0
 12914 2c09 00       		.byte	0
 12915 2c0a 25       		.uleb128 0x25
 12916 2c0b 0D030000 		.4byte	.LASF165
 12917 2c0f 01       		.byte	0x1
 12918 2c10 1E12     		.2byte	0x121e
 12919 2c12 2D040000 		.4byte	0x42d
 12920 2c16 00000000 		.4byte	.LFB47
 12921 2c1a 16010000 		.4byte	.LFE47-.LFB47
 12922 2c1e 01       		.uleb128 0x1
 12923 2c1f 9C       		.byte	0x9c
 12924 2c20 E92D0000 		.4byte	0x2de9
 12925 2c24 1F       		.uleb128 0x1f
 12926 2c25 D8000000 		.4byte	.LASF166
 12927 2c29 01       		.byte	0x1
 12928 2c2a 1F12     		.2byte	0x121f
 12929 2c2c EE090000 		.4byte	0x9ee
 12930 2c30 172E0000 		.4byte	.LLST224
 12931 2c34 1F       		.uleb128 0x1f
 12932 2c35 2D030000 		.4byte	.LASF167
 12933 2c39 01       		.byte	0x1
 12934 2c3a 2012     		.2byte	0x1220
 12935 2c3c EE090000 		.4byte	0x9ee
 12936 2c40 502E0000 		.4byte	.LLST225
 12937 2c44 1A       		.uleb128 0x1a
 12938 2c45 72657300 		.ascii	"res\000"
 12939 2c49 01       		.byte	0x1
 12940 2c4a 2312     		.2byte	0x1223
 12941 2c4c 2D040000 		.4byte	0x42d
 12942 2c50 702E0000 		.4byte	.LLST226
 12943 2c54 1E       		.uleb128 0x1e
 12944 2c55 646A6F00 		.ascii	"djo\000"
 12945 2c59 01       		.byte	0x1
 12946 2c5a 2412     		.2byte	0x1224
 12947 2c5c 41030000 		.4byte	0x341
 12948 2c60 02       		.uleb128 0x2
 12949 2c61 91       		.byte	0x91
 12950 2c62 44       		.sleb128 -60
 12951 2c63 1E       		.uleb128 0x1e
 12952 2c64 646A6E00 		.ascii	"djn\000"
 12953 2c68 01       		.byte	0x1
 12954 2c69 2412     		.2byte	0x1224
 12955 2c6b 41030000 		.4byte	0x341
 12956 2c6f 03       		.uleb128 0x3
 12957 2c70 91       		.byte	0x91
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 353


 12958 2c71 987F     		.sleb128 -104
 12959 2c73 1E       		.uleb128 0x1e
 12960 2c74 667300   		.ascii	"fs\000"
 12961 2c77 01       		.byte	0x1
 12962 2c78 2512     		.2byte	0x1225
 12963 2c7a 49020000 		.4byte	0x249
 12964 2c7e 03       		.uleb128 0x3
 12965 2c7f 91       		.byte	0x91
 12966 2c80 947F     		.sleb128 -108
 12967 2c82 1E       		.uleb128 0x1e
 12968 2c83 62756600 		.ascii	"buf\000"
 12969 2c87 01       		.byte	0x1
 12970 2c88 2612     		.2byte	0x1226
 12971 2c8a E92D0000 		.4byte	0x2de9
 12972 2c8e 03       		.uleb128 0x3
 12973 2c8f 91       		.byte	0x91
 12974 2c90 FC7E     		.sleb128 -132
 12975 2c92 1A       		.uleb128 0x1a
 12976 2c93 64697200 		.ascii	"dir\000"
 12977 2c97 01       		.byte	0x1
 12978 2c98 2612     		.2byte	0x1226
 12979 2c9a D0020000 		.4byte	0x2d0
 12980 2c9e E62E0000 		.4byte	.LLST227
 12981 2ca2 1A       		.uleb128 0x1a
 12982 2ca3 647700   		.ascii	"dw\000"
 12983 2ca6 01       		.byte	0x1
 12984 2ca7 2712     		.2byte	0x1227
 12985 2ca9 CE000000 		.4byte	0xce
 12986 2cad 0F2F0000 		.4byte	.LLST228
 12987 2cb1 20       		.uleb128 0x20
 12988 2cb2 10000000 		.4byte	.LVL951
 12989 2cb6 F9090000 		.4byte	0x9f9
 12990 2cba C62C0000 		.4byte	0x2cc6
 12991 2cbe 21       		.uleb128 0x21
 12992 2cbf 01       		.uleb128 0x1
 12993 2cc0 50       		.byte	0x50
 12994 2cc1 03       		.uleb128 0x3
 12995 2cc2 91       		.byte	0x91
 12996 2cc3 F07E     		.sleb128 -144
 12997 2cc5 00       		.byte	0
 12998 2cc6 20       		.uleb128 0x20
 12999 2cc7 1A000000 		.4byte	.LVL953
 13000 2ccb 920C0000 		.4byte	0xc92
 13001 2ccf E72C0000 		.4byte	0x2ce7
 13002 2cd3 21       		.uleb128 0x21
 13003 2cd4 01       		.uleb128 0x1
 13004 2cd5 52       		.byte	0x52
 13005 2cd6 01       		.uleb128 0x1
 13006 2cd7 32       		.byte	0x32
 13007 2cd8 21       		.uleb128 0x21
 13008 2cd9 01       		.uleb128 0x1
 13009 2cda 51       		.byte	0x51
 13010 2cdb 03       		.uleb128 0x3
 13011 2cdc 91       		.byte	0x91
 13012 2cdd 947F     		.sleb128 -108
 13013 2cdf 21       		.uleb128 0x21
 13014 2ce0 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 354


 13015 2ce1 50       		.byte	0x50
 13016 2ce2 03       		.uleb128 0x3
 13017 2ce3 91       		.byte	0x91
 13018 2ce4 F47E     		.sleb128 -140
 13019 2ce6 00       		.byte	0
 13020 2ce7 20       		.uleb128 0x20
 13021 2ce8 2C000000 		.4byte	.LVL955
 13022 2cec 04160000 		.4byte	0x1604
 13023 2cf0 FB2C0000 		.4byte	0x2cfb
 13024 2cf4 21       		.uleb128 0x21
 13025 2cf5 01       		.uleb128 0x1
 13026 2cf6 50       		.byte	0x50
 13027 2cf7 02       		.uleb128 0x2
 13028 2cf8 91       		.byte	0x91
 13029 2cf9 44       		.sleb128 -60
 13030 2cfa 00       		.byte	0
 13031 2cfb 20       		.uleb128 0x20
 13032 2cfc 4C000000 		.4byte	.LVL957
 13033 2d00 F0050000 		.4byte	0x5f0
 13034 2d04 152D0000 		.4byte	0x2d15
 13035 2d08 21       		.uleb128 0x21
 13036 2d09 01       		.uleb128 0x1
 13037 2d0a 52       		.byte	0x52
 13038 2d0b 01       		.uleb128 0x1
 13039 2d0c 45       		.byte	0x45
 13040 2d0d 21       		.uleb128 0x21
 13041 2d0e 01       		.uleb128 0x1
 13042 2d0f 50       		.byte	0x50
 13043 2d10 03       		.uleb128 0x3
 13044 2d11 91       		.byte	0x91
 13045 2d12 FC7E     		.sleb128 -132
 13046 2d14 00       		.byte	0
 13047 2d15 20       		.uleb128 0x20
 13048 2d16 56000000 		.4byte	.LVL958
 13049 2d1a F0050000 		.4byte	0x5f0
 13050 2d1e 362D0000 		.4byte	0x2d36
 13051 2d22 21       		.uleb128 0x21
 13052 2d23 01       		.uleb128 0x1
 13053 2d24 52       		.byte	0x52
 13054 2d25 02       		.uleb128 0x2
 13055 2d26 08       		.byte	0x8
 13056 2d27 2C       		.byte	0x2c
 13057 2d28 21       		.uleb128 0x21
 13058 2d29 01       		.uleb128 0x1
 13059 2d2a 51       		.byte	0x51
 13060 2d2b 02       		.uleb128 0x2
 13061 2d2c 91       		.byte	0x91
 13062 2d2d 44       		.sleb128 -60
 13063 2d2e 21       		.uleb128 0x21
 13064 2d2f 01       		.uleb128 0x1
 13065 2d30 50       		.byte	0x50
 13066 2d31 03       		.uleb128 0x3
 13067 2d32 91       		.byte	0x91
 13068 2d33 987F     		.sleb128 -104
 13069 2d35 00       		.byte	0
 13070 2d36 20       		.uleb128 0x20
 13071 2d37 5E000000 		.4byte	.LVL959
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 355


 13072 2d3b 04160000 		.4byte	0x1604
 13073 2d3f 4B2D0000 		.4byte	0x2d4b
 13074 2d43 21       		.uleb128 0x21
 13075 2d44 01       		.uleb128 0x1
 13076 2d45 50       		.byte	0x50
 13077 2d46 03       		.uleb128 0x3
 13078 2d47 91       		.byte	0x91
 13079 2d48 987F     		.sleb128 -104
 13080 2d4a 00       		.byte	0
 13081 2d4b 20       		.uleb128 0x20
 13082 2d4c 86000000 		.4byte	.LVL961
 13083 2d50 78170000 		.4byte	0x1778
 13084 2d54 602D0000 		.4byte	0x2d60
 13085 2d58 21       		.uleb128 0x21
 13086 2d59 01       		.uleb128 0x1
 13087 2d5a 50       		.byte	0x50
 13088 2d5b 03       		.uleb128 0x3
 13089 2d5c 91       		.byte	0x91
 13090 2d5d 987F     		.sleb128 -104
 13091 2d5f 00       		.byte	0
 13092 2d60 20       		.uleb128 0x20
 13093 2d61 9C000000 		.4byte	.LVL964
 13094 2d65 F0050000 		.4byte	0x5f0
 13095 2d69 802D0000 		.4byte	0x2d80
 13096 2d6d 21       		.uleb128 0x21
 13097 2d6e 01       		.uleb128 0x1
 13098 2d6f 52       		.byte	0x52
 13099 2d70 01       		.uleb128 0x1
 13100 2d71 43       		.byte	0x43
 13101 2d72 21       		.uleb128 0x21
 13102 2d73 01       		.uleb128 0x1
 13103 2d74 51       		.byte	0x51
 13104 2d75 03       		.uleb128 0x3
 13105 2d76 91       		.byte	0x91
 13106 2d77 FE7E     		.sleb128 -130
 13107 2d79 21       		.uleb128 0x21
 13108 2d7a 01       		.uleb128 0x1
 13109 2d7b 50       		.byte	0x50
 13110 2d7c 02       		.uleb128 0x2
 13111 2d7d 75       		.byte	0x75
 13112 2d7e 0D       		.sleb128 13
 13113 2d7f 00       		.byte	0
 13114 2d80 20       		.uleb128 0x20
 13115 2d81 C6000000 		.4byte	.LVL965
 13116 2d85 9F070000 		.4byte	0x79f
 13117 2d89 9A2D0000 		.4byte	0x2d9a
 13118 2d8d 21       		.uleb128 0x21
 13119 2d8e 01       		.uleb128 0x1
 13120 2d8f 51       		.byte	0x51
 13121 2d90 02       		.uleb128 0x2
 13122 2d91 75       		.byte	0x75
 13123 2d92 00       		.sleb128 0
 13124 2d93 21       		.uleb128 0x21
 13125 2d94 01       		.uleb128 0x1
 13126 2d95 50       		.byte	0x50
 13127 2d96 02       		.uleb128 0x2
 13128 2d97 74       		.byte	0x74
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 356


 13129 2d98 00       		.sleb128 0
 13130 2d99 00       		.byte	0
 13131 2d9a 20       		.uleb128 0x20
 13132 2d9b CE000000 		.4byte	.LVL966
 13133 2d9f 65070000 		.4byte	0x765
 13134 2da3 AE2D0000 		.4byte	0x2dae
 13135 2da7 21       		.uleb128 0x21
 13136 2da8 01       		.uleb128 0x1
 13137 2da9 50       		.byte	0x50
 13138 2daa 02       		.uleb128 0x2
 13139 2dab 74       		.byte	0x74
 13140 2dac 00       		.sleb128 0
 13141 2dad 00       		.byte	0
 13142 2dae 20       		.uleb128 0x20
 13143 2daf D8000000 		.4byte	.LVL968
 13144 2db3 890B0000 		.4byte	0xb89
 13145 2db7 C22D0000 		.4byte	0x2dc2
 13146 2dbb 21       		.uleb128 0x21
 13147 2dbc 01       		.uleb128 0x1
 13148 2dbd 50       		.byte	0x50
 13149 2dbe 02       		.uleb128 0x2
 13150 2dbf 74       		.byte	0x74
 13151 2dc0 00       		.sleb128 0
 13152 2dc1 00       		.byte	0
 13153 2dc2 23       		.uleb128 0x23
 13154 2dc3 F2000000 		.4byte	.LVL971
 13155 2dc7 0C080000 		.4byte	0x80c
 13156 2dcb 20       		.uleb128 0x20
 13157 2dcc 04010000 		.4byte	.LVL974
 13158 2dd0 F3130000 		.4byte	0x13f3
 13159 2dd4 DF2D0000 		.4byte	0x2ddf
 13160 2dd8 21       		.uleb128 0x21
 13161 2dd9 01       		.uleb128 0x1
 13162 2dda 50       		.byte	0x50
 13163 2ddb 02       		.uleb128 0x2
 13164 2ddc 91       		.byte	0x91
 13165 2ddd 44       		.sleb128 -60
 13166 2dde 00       		.byte	0
 13167 2ddf 23       		.uleb128 0x23
 13168 2de0 0E010000 		.4byte	.LVL976
 13169 2de4 B6180000 		.4byte	0x18b6
 13170 2de8 00       		.byte	0
 13171 2de9 08       		.uleb128 0x8
 13172 2dea B8000000 		.4byte	0xb8
 13173 2dee F92D0000 		.4byte	0x2df9
 13174 2df2 0D       		.uleb128 0xd
 13175 2df3 E8010000 		.4byte	0x1e8
 13176 2df7 17       		.byte	0x17
 13177 2df8 00       		.byte	0
 13178 2df9 25       		.uleb128 0x25
 13179 2dfa 9F050000 		.4byte	.LASF168
 13180 2dfe 01       		.byte	0x1
 13181 2dff 6B16     		.2byte	0x166b
 13182 2e01 A92E0000 		.4byte	0x2ea9
 13183 2e05 00000000 		.4byte	.LFB48
 13184 2e09 54000000 		.4byte	.LFE48-.LFB48
 13185 2e0d 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 357


 13186 2e0e 9C       		.byte	0x9c
 13187 2e0f A92E0000 		.4byte	0x2ea9
 13188 2e13 1F       		.uleb128 0x1f
 13189 2e14 FB000000 		.4byte	.LASF139
 13190 2e18 01       		.byte	0x1
 13191 2e19 6C16     		.2byte	0x166c
 13192 2e1b A92E0000 		.4byte	0x2ea9
 13193 2e1f 382F0000 		.4byte	.LLST229
 13194 2e23 19       		.uleb128 0x19
 13195 2e24 6C656E00 		.ascii	"len\000"
 13196 2e28 01       		.byte	0x1
 13197 2e29 6D16     		.2byte	0x166d
 13198 2e2b 7E000000 		.4byte	0x7e
 13199 2e2f 562F0000 		.4byte	.LLST230
 13200 2e33 19       		.uleb128 0x19
 13201 2e34 667000   		.ascii	"fp\000"
 13202 2e37 01       		.byte	0x1
 13203 2e38 6E16     		.2byte	0x166e
 13204 2e3a EC040000 		.4byte	0x4ec
 13205 2e3e 742F0000 		.4byte	.LLST231
 13206 2e42 1A       		.uleb128 0x1a
 13207 2e43 6E00     		.ascii	"n\000"
 13208 2e45 01       		.byte	0x1
 13209 2e46 7116     		.2byte	0x1671
 13210 2e48 7E000000 		.4byte	0x7e
 13211 2e4c 922F0000 		.4byte	.LLST232
 13212 2e50 1A       		.uleb128 0x1a
 13213 2e51 6300     		.ascii	"c\000"
 13214 2e53 01       		.byte	0x1
 13215 2e54 7216     		.2byte	0x1672
 13216 2e56 D9000000 		.4byte	0xd9
 13217 2e5a B12F0000 		.4byte	.LLST233
 13218 2e5e 1A       		.uleb128 0x1a
 13219 2e5f 7000     		.ascii	"p\000"
 13220 2e61 01       		.byte	0x1
 13221 2e62 7216     		.2byte	0x1672
 13222 2e64 A92E0000 		.4byte	0x2ea9
 13223 2e68 CF2F0000 		.4byte	.LLST234
 13224 2e6c 1E       		.uleb128 0x1e
 13225 2e6d 7300     		.ascii	"s\000"
 13226 2e6f 01       		.byte	0x1
 13227 2e70 7316     		.2byte	0x1673
 13228 2e72 AF2E0000 		.4byte	0x2eaf
 13229 2e76 02       		.uleb128 0x2
 13230 2e77 91       		.byte	0x91
 13231 2e78 64       		.sleb128 -28
 13232 2e79 1E       		.uleb128 0x1e
 13233 2e7a 726300   		.ascii	"rc\000"
 13234 2e7d 01       		.byte	0x1
 13235 2e7e 7416     		.2byte	0x1674
 13236 2e80 AD000000 		.4byte	0xad
 13237 2e84 02       		.uleb128 0x2
 13238 2e85 91       		.byte	0x91
 13239 2e86 60       		.sleb128 -32
 13240 2e87 22       		.uleb128 0x22
 13241 2e88 1E000000 		.4byte	.LVL981
 13242 2e8c DD1C0000 		.4byte	0x1cdd
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 358


 13243 2e90 21       		.uleb128 0x21
 13244 2e91 01       		.uleb128 0x1
 13245 2e92 53       		.byte	0x53
 13246 2e93 02       		.uleb128 0x2
 13247 2e94 7D       		.byte	0x7d
 13248 2e95 00       		.sleb128 0
 13249 2e96 21       		.uleb128 0x21
 13250 2e97 01       		.uleb128 0x1
 13251 2e98 52       		.byte	0x52
 13252 2e99 01       		.uleb128 0x1
 13253 2e9a 31       		.byte	0x31
 13254 2e9b 21       		.uleb128 0x21
 13255 2e9c 01       		.uleb128 0x1
 13256 2e9d 51       		.byte	0x51
 13257 2e9e 02       		.uleb128 0x2
 13258 2e9f 91       		.byte	0x91
 13259 2ea0 64       		.sleb128 -28
 13260 2ea1 21       		.uleb128 0x21
 13261 2ea2 01       		.uleb128 0x1
 13262 2ea3 50       		.byte	0x50
 13263 2ea4 02       		.uleb128 0x2
 13264 2ea5 77       		.byte	0x77
 13265 2ea6 00       		.sleb128 0
 13266 2ea7 00       		.byte	0
 13267 2ea8 00       		.byte	0
 13268 2ea9 0B       		.uleb128 0xb
 13269 2eaa 04       		.byte	0x4
 13270 2eab D9000000 		.4byte	0xd9
 13271 2eaf 08       		.uleb128 0x8
 13272 2eb0 B8000000 		.4byte	0xb8
 13273 2eb4 BF2E0000 		.4byte	0x2ebf
 13274 2eb8 0D       		.uleb128 0xd
 13275 2eb9 E8010000 		.4byte	0x1e8
 13276 2ebd 01       		.byte	0x1
 13277 2ebe 00       		.byte	0
 13278 2ebf 25       		.uleb128 0x25
 13279 2ec0 1B030000 		.4byte	.LASF169
 13280 2ec4 01       		.byte	0x1
 13281 2ec5 1317     		.2byte	0x1713
 13282 2ec7 7E000000 		.4byte	0x7e
 13283 2ecb 00000000 		.4byte	.LFB52
 13284 2ecf 1E000000 		.4byte	.LFE52-.LFB52
 13285 2ed3 01       		.uleb128 0x1
 13286 2ed4 9C       		.byte	0x9c
 13287 2ed5 4E2F0000 		.4byte	0x2f4e
 13288 2ed9 19       		.uleb128 0x19
 13289 2eda 6300     		.ascii	"c\000"
 13290 2edc 01       		.byte	0x1
 13291 2edd 1417     		.2byte	0x1714
 13292 2edf D9000000 		.4byte	0xd9
 13293 2ee3 19300000 		.4byte	.LLST235
 13294 2ee7 19       		.uleb128 0x19
 13295 2ee8 667000   		.ascii	"fp\000"
 13296 2eeb 01       		.byte	0x1
 13297 2eec 1517     		.2byte	0x1715
 13298 2eee EC040000 		.4byte	0x4ec
 13299 2ef2 3A300000 		.4byte	.LLST236
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 359


 13300 2ef6 1E       		.uleb128 0x1e
 13301 2ef7 706200   		.ascii	"pb\000"
 13302 2efa 01       		.byte	0x1
 13303 2efb 1817     		.2byte	0x1718
 13304 2efd 02050000 		.4byte	0x502
 13305 2f01 03       		.uleb128 0x3
 13306 2f02 91       		.byte	0x91
 13307 2f03 AC7F     		.sleb128 -84
 13308 2f05 20       		.uleb128 0x20
 13309 2f06 0C000000 		.4byte	.LVL990
 13310 2f0a 600A0000 		.4byte	0xa60
 13311 2f0e 212F0000 		.4byte	0x2f21
 13312 2f12 21       		.uleb128 0x21
 13313 2f13 01       		.uleb128 0x1
 13314 2f14 51       		.byte	0x51
 13315 2f15 03       		.uleb128 0x3
 13316 2f16 F3       		.byte	0xf3
 13317 2f17 01       		.uleb128 0x1
 13318 2f18 51       		.byte	0x51
 13319 2f19 21       		.uleb128 0x21
 13320 2f1a 01       		.uleb128 0x1
 13321 2f1b 50       		.byte	0x50
 13322 2f1c 03       		.uleb128 0x3
 13323 2f1d 91       		.byte	0x91
 13324 2f1e AC7F     		.sleb128 -84
 13325 2f20 00       		.byte	0
 13326 2f21 20       		.uleb128 0x20
 13327 2f22 14000000 		.4byte	.LVL991
 13328 2f26 51200000 		.4byte	0x2051
 13329 2f2a 3C2F0000 		.4byte	0x2f3c
 13330 2f2e 21       		.uleb128 0x21
 13331 2f2f 01       		.uleb128 0x1
 13332 2f30 51       		.byte	0x51
 13333 2f31 02       		.uleb128 0x2
 13334 2f32 74       		.byte	0x74
 13335 2f33 00       		.sleb128 0
 13336 2f34 21       		.uleb128 0x21
 13337 2f35 01       		.uleb128 0x1
 13338 2f36 50       		.byte	0x50
 13339 2f37 03       		.uleb128 0x3
 13340 2f38 91       		.byte	0x91
 13341 2f39 AC7F     		.sleb128 -84
 13342 2f3b 00       		.byte	0
 13343 2f3c 22       		.uleb128 0x22
 13344 2f3d 1A000000 		.4byte	.LVL992
 13345 2f41 D6200000 		.4byte	0x20d6
 13346 2f45 21       		.uleb128 0x21
 13347 2f46 01       		.uleb128 0x1
 13348 2f47 50       		.byte	0x50
 13349 2f48 03       		.uleb128 0x3
 13350 2f49 91       		.byte	0x91
 13351 2f4a AC7F     		.sleb128 -84
 13352 2f4c 00       		.byte	0
 13353 2f4d 00       		.byte	0
 13354 2f4e 25       		.uleb128 0x25
 13355 2f4f D4060000 		.4byte	.LASF170
 13356 2f53 01       		.byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 360


 13357 2f54 2717     		.2byte	0x1727
 13358 2f56 7E000000 		.4byte	0x7e
 13359 2f5a 00000000 		.4byte	.LFB53
 13360 2f5e 26000000 		.4byte	.LFE53-.LFB53
 13361 2f62 01       		.uleb128 0x1
 13362 2f63 9C       		.byte	0x9c
 13363 2f64 D92F0000 		.4byte	0x2fd9
 13364 2f68 19       		.uleb128 0x19
 13365 2f69 73747200 		.ascii	"str\000"
 13366 2f6d 01       		.byte	0x1
 13367 2f6e 2817     		.2byte	0x1728
 13368 2f70 EE090000 		.4byte	0x9ee
 13369 2f74 5B300000 		.4byte	.LLST237
 13370 2f78 19       		.uleb128 0x19
 13371 2f79 667000   		.ascii	"fp\000"
 13372 2f7c 01       		.byte	0x1
 13373 2f7d 2917     		.2byte	0x1729
 13374 2f7f EC040000 		.4byte	0x4ec
 13375 2f83 79300000 		.4byte	.LLST238
 13376 2f87 1E       		.uleb128 0x1e
 13377 2f88 706200   		.ascii	"pb\000"
 13378 2f8b 01       		.byte	0x1
 13379 2f8c 2C17     		.2byte	0x172c
 13380 2f8e 02050000 		.4byte	0x502
 13381 2f92 03       		.uleb128 0x3
 13382 2f93 91       		.byte	0x91
 13383 2f94 AC7F     		.sleb128 -84
 13384 2f96 20       		.uleb128 0x20
 13385 2f97 0C000000 		.4byte	.LVL995
 13386 2f9b 600A0000 		.4byte	0xa60
 13387 2f9f B22F0000 		.4byte	0x2fb2
 13388 2fa3 21       		.uleb128 0x21
 13389 2fa4 01       		.uleb128 0x1
 13390 2fa5 51       		.byte	0x51
 13391 2fa6 03       		.uleb128 0x3
 13392 2fa7 F3       		.byte	0xf3
 13393 2fa8 01       		.uleb128 0x1
 13394 2fa9 51       		.byte	0x51
 13395 2faa 21       		.uleb128 0x21
 13396 2fab 01       		.uleb128 0x1
 13397 2fac 50       		.byte	0x50
 13398 2fad 03       		.uleb128 0x3
 13399 2fae 91       		.byte	0x91
 13400 2faf AC7F     		.sleb128 -84
 13401 2fb1 00       		.byte	0
 13402 2fb2 20       		.uleb128 0x20
 13403 2fb3 16000000 		.4byte	.LVL997
 13404 2fb7 51200000 		.4byte	0x2051
 13405 2fbb C72F0000 		.4byte	0x2fc7
 13406 2fbf 21       		.uleb128 0x21
 13407 2fc0 01       		.uleb128 0x1
 13408 2fc1 50       		.byte	0x50
 13409 2fc2 03       		.uleb128 0x3
 13410 2fc3 91       		.byte	0x91
 13411 2fc4 AC7F     		.sleb128 -84
 13412 2fc6 00       		.byte	0
 13413 2fc7 22       		.uleb128 0x22
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 361


 13414 2fc8 22000000 		.4byte	.LVL998
 13415 2fcc D6200000 		.4byte	0x20d6
 13416 2fd0 21       		.uleb128 0x21
 13417 2fd1 01       		.uleb128 0x1
 13418 2fd2 50       		.byte	0x50
 13419 2fd3 03       		.uleb128 0x3
 13420 2fd4 91       		.byte	0x91
 13421 2fd5 AC7F     		.sleb128 -84
 13422 2fd7 00       		.byte	0
 13423 2fd8 00       		.byte	0
 13424 2fd9 25       		.uleb128 0x25
 13425 2fda 75030000 		.4byte	.LASF171
 13426 2fde 01       		.byte	0x1
 13427 2fdf 3B17     		.2byte	0x173b
 13428 2fe1 7E000000 		.4byte	0x7e
 13429 2fe5 00000000 		.4byte	.LFB54
 13430 2fe9 36020000 		.4byte	.LFE54-.LFB54
 13431 2fed 01       		.uleb128 0x1
 13432 2fee 9C       		.byte	0x9c
 13433 2fef D0310000 		.4byte	0x31d0
 13434 2ff3 19       		.uleb128 0x19
 13435 2ff4 667000   		.ascii	"fp\000"
 13436 2ff7 01       		.byte	0x1
 13437 2ff8 3C17     		.2byte	0x173c
 13438 2ffa EC040000 		.4byte	0x4ec
 13439 2ffe 9A300000 		.4byte	.LLST239
 13440 3002 19       		.uleb128 0x19
 13441 3003 666D7400 		.ascii	"fmt\000"
 13442 3007 01       		.byte	0x1
 13443 3008 3D17     		.2byte	0x173d
 13444 300a EE090000 		.4byte	0x9ee
 13445 300e C6300000 		.4byte	.LLST240
 13446 3012 26       		.uleb128 0x26
 13447 3013 1E       		.uleb128 0x1e
 13448 3014 61727000 		.ascii	"arp\000"
 13449 3018 01       		.byte	0x1
 13450 3019 4117     		.2byte	0x1741
 13451 301b A4040000 		.4byte	0x4a4
 13452 301f 02       		.uleb128 0x2
 13453 3020 91       		.byte	0x91
 13454 3021 4C       		.sleb128 -52
 13455 3022 1E       		.uleb128 0x1e
 13456 3023 706200   		.ascii	"pb\000"
 13457 3026 01       		.byte	0x1
 13458 3027 4217     		.2byte	0x1742
 13459 3029 02050000 		.4byte	0x502
 13460 302d 03       		.uleb128 0x3
 13461 302e 91       		.byte	0x91
 13462 302f 807F     		.sleb128 -128
 13463 3031 1A       		.uleb128 0x1a
 13464 3032 6600     		.ascii	"f\000"
 13465 3034 01       		.byte	0x1
 13466 3035 4317     		.2byte	0x1743
 13467 3037 B8000000 		.4byte	0xb8
 13468 303b 36310000 		.4byte	.LLST241
 13469 303f 1A       		.uleb128 0x1a
 13470 3040 7200     		.ascii	"r\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 362


 13471 3042 01       		.byte	0x1
 13472 3043 4317     		.2byte	0x1743
 13473 3045 B8000000 		.4byte	0xb8
 13474 3049 90310000 		.4byte	.LLST242
 13475 304d 1A       		.uleb128 0x1a
 13476 304e 6900     		.ascii	"i\000"
 13477 3050 01       		.byte	0x1
 13478 3051 4417     		.2byte	0x1744
 13479 3053 AD000000 		.4byte	0xad
 13480 3057 BB310000 		.4byte	.LLST243
 13481 305b 1A       		.uleb128 0x1a
 13482 305c 6A00     		.ascii	"j\000"
 13483 305e 01       		.byte	0x1
 13484 305f 4417     		.2byte	0x1744
 13485 3061 AD000000 		.4byte	0xad
 13486 3065 1E320000 		.4byte	.LLST244
 13487 3069 1A       		.uleb128 0x1a
 13488 306a 7700     		.ascii	"w\000"
 13489 306c 01       		.byte	0x1
 13490 306d 4417     		.2byte	0x1744
 13491 306f AD000000 		.4byte	0xad
 13492 3073 CC320000 		.4byte	.LLST245
 13493 3077 1A       		.uleb128 0x1a
 13494 3078 7600     		.ascii	"v\000"
 13495 307a 01       		.byte	0x1
 13496 307b 4517     		.2byte	0x1745
 13497 307d CE000000 		.4byte	0xce
 13498 3081 F6320000 		.4byte	.LLST246
 13499 3085 1A       		.uleb128 0x1a
 13500 3086 6300     		.ascii	"c\000"
 13501 3088 01       		.byte	0x1
 13502 3089 4617     		.2byte	0x1746
 13503 308b D9000000 		.4byte	0xd9
 13504 308f 09330000 		.4byte	.LLST247
 13505 3093 1A       		.uleb128 0x1a
 13506 3094 6400     		.ascii	"d\000"
 13507 3096 01       		.byte	0x1
 13508 3097 4617     		.2byte	0x1746
 13509 3099 D9000000 		.4byte	0xd9
 13510 309d 53330000 		.4byte	.LLST248
 13511 30a1 1E       		.uleb128 0x1e
 13512 30a2 73747200 		.ascii	"str\000"
 13513 30a6 01       		.byte	0x1
 13514 30a7 4617     		.2byte	0x1746
 13515 30a9 D0310000 		.4byte	0x31d0
 13516 30ad 03       		.uleb128 0x3
 13517 30ae 91       		.byte	0x91
 13518 30af E07E     		.sleb128 -160
 13519 30b1 1A       		.uleb128 0x1a
 13520 30b2 7000     		.ascii	"p\000"
 13521 30b4 01       		.byte	0x1
 13522 30b5 4617     		.2byte	0x1746
 13523 30b7 A92E0000 		.4byte	0x2ea9
 13524 30bb BE330000 		.4byte	.LLST249
 13525 30bf 20       		.uleb128 0x20
 13526 30c0 16000000 		.4byte	.LVL1001
 13527 30c4 600A0000 		.4byte	0xa60
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 363


 13528 30c8 DB300000 		.4byte	0x30db
 13529 30cc 21       		.uleb128 0x21
 13530 30cd 01       		.uleb128 0x1
 13531 30ce 51       		.byte	0x51
 13532 30cf 03       		.uleb128 0x3
 13533 30d0 F3       		.byte	0xf3
 13534 30d1 01       		.uleb128 0x1
 13535 30d2 50       		.byte	0x50
 13536 30d3 21       		.uleb128 0x21
 13537 30d4 01       		.uleb128 0x1
 13538 30d5 50       		.byte	0x50
 13539 30d6 03       		.uleb128 0x3
 13540 30d7 91       		.byte	0x91
 13541 30d8 E87E     		.sleb128 -152
 13542 30da 00       		.byte	0
 13543 30db 20       		.uleb128 0x20
 13544 30dc 2C000000 		.4byte	.LVL1005
 13545 30e0 51200000 		.4byte	0x2051
 13546 30e4 F0300000 		.4byte	0x30f0
 13547 30e8 21       		.uleb128 0x21
 13548 30e9 01       		.uleb128 0x1
 13549 30ea 50       		.byte	0x50
 13550 30eb 03       		.uleb128 0x3
 13551 30ec 91       		.byte	0x91
 13552 30ed E87E     		.sleb128 -152
 13553 30ef 00       		.byte	0
 13554 30f0 20       		.uleb128 0x20
 13555 30f1 E4000000 		.4byte	.LVL1035
 13556 30f5 51200000 		.4byte	0x2051
 13557 30f9 0B310000 		.4byte	0x310b
 13558 30fd 21       		.uleb128 0x21
 13559 30fe 01       		.uleb128 0x1
 13560 30ff 51       		.byte	0x51
 13561 3100 02       		.uleb128 0x2
 13562 3101 08       		.byte	0x8
 13563 3102 20       		.byte	0x20
 13564 3103 21       		.uleb128 0x21
 13565 3104 01       		.uleb128 0x1
 13566 3105 50       		.byte	0x50
 13567 3106 03       		.uleb128 0x3
 13568 3107 91       		.byte	0x91
 13569 3108 E87E     		.sleb128 -152
 13570 310a 00       		.byte	0
 13571 310b 20       		.uleb128 0x20
 13572 310c F8000000 		.4byte	.LVL1039
 13573 3110 51200000 		.4byte	0x2051
 13574 3114 20310000 		.4byte	0x3120
 13575 3118 21       		.uleb128 0x21
 13576 3119 01       		.uleb128 0x1
 13577 311a 50       		.byte	0x50
 13578 311b 03       		.uleb128 0x3
 13579 311c 91       		.byte	0x91
 13580 311d E87E     		.sleb128 -152
 13581 311f 00       		.byte	0
 13582 3120 20       		.uleb128 0x20
 13583 3121 0A010000 		.4byte	.LVL1041
 13584 3125 51200000 		.4byte	0x2051
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 364


 13585 3129 3B310000 		.4byte	0x313b
 13586 312d 21       		.uleb128 0x21
 13587 312e 01       		.uleb128 0x1
 13588 312f 51       		.byte	0x51
 13589 3130 02       		.uleb128 0x2
 13590 3131 08       		.byte	0x8
 13591 3132 20       		.byte	0x20
 13592 3133 21       		.uleb128 0x21
 13593 3134 01       		.uleb128 0x1
 13594 3135 50       		.byte	0x50
 13595 3136 03       		.uleb128 0x3
 13596 3137 91       		.byte	0x91
 13597 3138 E87E     		.sleb128 -152
 13598 313a 00       		.byte	0
 13599 313b 20       		.uleb128 0x20
 13600 313c 22010000 		.4byte	.LVL1047
 13601 3140 51200000 		.4byte	0x2051
 13602 3144 50310000 		.4byte	0x3150
 13603 3148 21       		.uleb128 0x21
 13604 3149 01       		.uleb128 0x1
 13605 314a 50       		.byte	0x50
 13606 314b 03       		.uleb128 0x3
 13607 314c 91       		.byte	0x91
 13608 314d E87E     		.sleb128 -152
 13609 314f 00       		.byte	0
 13610 3150 20       		.uleb128 0x20
 13611 3151 36010000 		.4byte	.LVL1051
 13612 3155 51200000 		.4byte	0x2051
 13613 3159 65310000 		.4byte	0x3165
 13614 315d 21       		.uleb128 0x21
 13615 315e 01       		.uleb128 0x1
 13616 315f 50       		.byte	0x50
 13617 3160 03       		.uleb128 0x3
 13618 3161 91       		.byte	0x91
 13619 3162 E87E     		.sleb128 -152
 13620 3164 00       		.byte	0
 13621 3165 20       		.uleb128 0x20
 13622 3166 EA010000 		.4byte	.LVL1071
 13623 316a 51200000 		.4byte	0x2051
 13624 316e 80310000 		.4byte	0x3180
 13625 3172 21       		.uleb128 0x21
 13626 3173 01       		.uleb128 0x1
 13627 3174 51       		.byte	0x51
 13628 3175 02       		.uleb128 0x2
 13629 3176 7A       		.byte	0x7a
 13630 3177 00       		.sleb128 0
 13631 3178 21       		.uleb128 0x21
 13632 3179 01       		.uleb128 0x1
 13633 317a 50       		.byte	0x50
 13634 317b 03       		.uleb128 0x3
 13635 317c 91       		.byte	0x91
 13636 317d E87E     		.sleb128 -152
 13637 317f 00       		.byte	0
 13638 3180 20       		.uleb128 0x20
 13639 3181 0C020000 		.4byte	.LVL1076
 13640 3185 51200000 		.4byte	0x2051
 13641 3189 A3310000 		.4byte	0x31a3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 365


 13642 318d 21       		.uleb128 0x21
 13643 318e 01       		.uleb128 0x1
 13644 318f 51       		.byte	0x51
 13645 3190 0A       		.uleb128 0xa
 13646 3191 91       		.byte	0x91
 13647 3192 74       		.sleb128 -12
 13648 3193 75       		.byte	0x75
 13649 3194 00       		.sleb128 0
 13650 3195 22       		.byte	0x22
 13651 3196 08       		.byte	0x8
 13652 3197 AC       		.byte	0xac
 13653 3198 1C       		.byte	0x1c
 13654 3199 94       		.byte	0x94
 13655 319a 01       		.byte	0x1
 13656 319b 21       		.uleb128 0x21
 13657 319c 01       		.uleb128 0x1
 13658 319d 50       		.byte	0x50
 13659 319e 03       		.uleb128 0x3
 13660 319f 91       		.byte	0x91
 13661 31a0 E87E     		.sleb128 -152
 13662 31a2 00       		.byte	0
 13663 31a3 20       		.uleb128 0x20
 13664 31a4 1A020000 		.4byte	.LVL1078
 13665 31a8 51200000 		.4byte	0x2051
 13666 31ac BE310000 		.4byte	0x31be
 13667 31b0 21       		.uleb128 0x21
 13668 31b1 01       		.uleb128 0x1
 13669 31b2 51       		.byte	0x51
 13670 31b3 02       		.uleb128 0x2
 13671 31b4 7A       		.byte	0x7a
 13672 31b5 00       		.sleb128 0
 13673 31b6 21       		.uleb128 0x21
 13674 31b7 01       		.uleb128 0x1
 13675 31b8 50       		.byte	0x50
 13676 31b9 03       		.uleb128 0x3
 13677 31ba 91       		.byte	0x91
 13678 31bb E87E     		.sleb128 -152
 13679 31bd 00       		.byte	0
 13680 31be 22       		.uleb128 0x22
 13681 31bf 2C020000 		.4byte	.LVL1082
 13682 31c3 D6200000 		.4byte	0x20d6
 13683 31c7 21       		.uleb128 0x21
 13684 31c8 01       		.uleb128 0x1
 13685 31c9 50       		.byte	0x50
 13686 31ca 03       		.uleb128 0x3
 13687 31cb 91       		.byte	0x91
 13688 31cc E87E     		.sleb128 -152
 13689 31ce 00       		.byte	0
 13690 31cf 00       		.byte	0
 13691 31d0 08       		.uleb128 0x8
 13692 31d1 D9000000 		.4byte	0xd9
 13693 31d5 E0310000 		.4byte	0x31e0
 13694 31d9 0D       		.uleb128 0xd
 13695 31da E8010000 		.4byte	0x1e8
 13696 31de 1F       		.byte	0x1f
 13697 31df 00       		.byte	0
 13698 31e0 08       		.uleb128 0x8
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 366


 13699 31e1 49020000 		.4byte	0x249
 13700 31e5 F0310000 		.4byte	0x31f0
 13701 31e9 0D       		.uleb128 0xd
 13702 31ea E8010000 		.4byte	0x1e8
 13703 31ee 00       		.byte	0
 13704 31ef 00       		.byte	0
 13705 31f0 27       		.uleb128 0x27
 13706 31f1 3F000000 		.4byte	.LASF172
 13707 31f5 01       		.byte	0x1
 13708 31f6 0D02     		.2byte	0x20d
 13709 31f8 E0310000 		.4byte	0x31e0
 13710 31fc 05       		.uleb128 0x5
 13711 31fd 03       		.byte	0x3
 13712 31fe 00000000 		.4byte	FatFs
 13713 3202 27       		.uleb128 0x27
 13714 3203 3B070000 		.4byte	.LASF173
 13715 3207 01       		.byte	0x1
 13716 3208 0E02     		.2byte	0x20e
 13717 320a C3000000 		.4byte	0xc3
 13718 320e 05       		.uleb128 0x5
 13719 320f 03       		.byte	0x3
 13720 3210 04000000 		.4byte	Fsid
 13721 3214 28       		.uleb128 0x28
 13722 3215 86020000 		.4byte	.LASF174
 13723 3219 06       		.byte	0x6
 13724 321a 5C       		.byte	0x5c
 13725 321b 38040000 		.4byte	0x438
 13726 321f 29320000 		.4byte	0x3229
 13727 3223 29       		.uleb128 0x29
 13728 3224 B8000000 		.4byte	0xb8
 13729 3228 00       		.byte	0
 13730 3229 28       		.uleb128 0x28
 13731 322a DA050000 		.4byte	.LASF175
 13732 322e 06       		.byte	0x6
 13733 322f 5E       		.byte	0x5e
 13734 3230 6A040000 		.4byte	0x46a
 13735 3234 4D320000 		.4byte	0x324d
 13736 3238 29       		.uleb128 0x29
 13737 3239 B8000000 		.4byte	0xb8
 13738 323d 29       		.uleb128 0x29
 13739 323e 75040000 		.4byte	0x475
 13740 3242 29       		.uleb128 0x29
 13741 3243 CE000000 		.4byte	0xce
 13742 3247 29       		.uleb128 0x29
 13743 3248 AD000000 		.4byte	0xad
 13744 324c 00       		.byte	0
 13745 324d 28       		.uleb128 0x28
 13746 324e 31070000 		.4byte	.LASF176
 13747 3252 06       		.byte	0x6
 13748 3253 5D       		.byte	0x5d
 13749 3254 6A040000 		.4byte	0x46a
 13750 3258 71320000 		.4byte	0x3271
 13751 325c 29       		.uleb128 0x29
 13752 325d B8000000 		.4byte	0xb8
 13753 3261 29       		.uleb128 0x29
 13754 3262 D0020000 		.4byte	0x2d0
 13755 3266 29       		.uleb128 0x29
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 367


 13756 3267 CE000000 		.4byte	0xce
 13757 326b 29       		.uleb128 0x29
 13758 326c AD000000 		.4byte	0xad
 13759 3270 00       		.byte	0
 13760 3271 28       		.uleb128 0x28
 13761 3272 F1010000 		.4byte	.LASF177
 13762 3276 06       		.byte	0x6
 13763 3277 5B       		.byte	0x5b
 13764 3278 38040000 		.4byte	0x438
 13765 327c 86320000 		.4byte	0x3286
 13766 3280 29       		.uleb128 0x29
 13767 3281 B8000000 		.4byte	0xb8
 13768 3285 00       		.byte	0
 13769 3286 2A       		.uleb128 0x2a
 13770 3287 91030000 		.4byte	.LASF183
 13771 328b 06       		.byte	0x6
 13772 328c 5F       		.byte	0x5f
 13773 328d 6A040000 		.4byte	0x46a
 13774 3291 29       		.uleb128 0x29
 13775 3292 B8000000 		.4byte	0xb8
 13776 3296 29       		.uleb128 0x29
 13777 3297 B8000000 		.4byte	0xb8
 13778 329b 29       		.uleb128 0x29
 13779 329c A2040000 		.4byte	0x4a2
 13780 32a0 00       		.byte	0
 13781 32a1 00       		.byte	0
 13782              		.section	.debug_abbrev,"",%progbits
 13783              	.Ldebug_abbrev0:
 13784 0000 01       		.uleb128 0x1
 13785 0001 11       		.uleb128 0x11
 13786 0002 01       		.byte	0x1
 13787 0003 25       		.uleb128 0x25
 13788 0004 0E       		.uleb128 0xe
 13789 0005 13       		.uleb128 0x13
 13790 0006 0B       		.uleb128 0xb
 13791 0007 03       		.uleb128 0x3
 13792 0008 0E       		.uleb128 0xe
 13793 0009 1B       		.uleb128 0x1b
 13794 000a 0E       		.uleb128 0xe
 13795 000b 55       		.uleb128 0x55
 13796 000c 17       		.uleb128 0x17
 13797 000d 11       		.uleb128 0x11
 13798 000e 01       		.uleb128 0x1
 13799 000f 10       		.uleb128 0x10
 13800 0010 17       		.uleb128 0x17
 13801 0011 00       		.byte	0
 13802 0012 00       		.byte	0
 13803 0013 02       		.uleb128 0x2
 13804 0014 24       		.uleb128 0x24
 13805 0015 00       		.byte	0
 13806 0016 0B       		.uleb128 0xb
 13807 0017 0B       		.uleb128 0xb
 13808 0018 3E       		.uleb128 0x3e
 13809 0019 0B       		.uleb128 0xb
 13810 001a 03       		.uleb128 0x3
 13811 001b 0E       		.uleb128 0xe
 13812 001c 00       		.byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 368


 13813 001d 00       		.byte	0
 13814 001e 03       		.uleb128 0x3
 13815 001f 16       		.uleb128 0x16
 13816 0020 00       		.byte	0
 13817 0021 03       		.uleb128 0x3
 13818 0022 0E       		.uleb128 0xe
 13819 0023 3A       		.uleb128 0x3a
 13820 0024 0B       		.uleb128 0xb
 13821 0025 3B       		.uleb128 0x3b
 13822 0026 0B       		.uleb128 0xb
 13823 0027 49       		.uleb128 0x49
 13824 0028 13       		.uleb128 0x13
 13825 0029 00       		.byte	0
 13826 002a 00       		.byte	0
 13827 002b 04       		.uleb128 0x4
 13828 002c 24       		.uleb128 0x24
 13829 002d 00       		.byte	0
 13830 002e 0B       		.uleb128 0xb
 13831 002f 0B       		.uleb128 0xb
 13832 0030 3E       		.uleb128 0x3e
 13833 0031 0B       		.uleb128 0xb
 13834 0032 03       		.uleb128 0x3
 13835 0033 08       		.uleb128 0x8
 13836 0034 00       		.byte	0
 13837 0035 00       		.byte	0
 13838 0036 05       		.uleb128 0x5
 13839 0037 13       		.uleb128 0x13
 13840 0038 01       		.byte	0x1
 13841 0039 0B       		.uleb128 0xb
 13842 003a 05       		.uleb128 0x5
 13843 003b 3A       		.uleb128 0x3a
 13844 003c 0B       		.uleb128 0xb
 13845 003d 3B       		.uleb128 0x3b
 13846 003e 0B       		.uleb128 0xb
 13847 003f 01       		.uleb128 0x1
 13848 0040 13       		.uleb128 0x13
 13849 0041 00       		.byte	0
 13850 0042 00       		.byte	0
 13851 0043 06       		.uleb128 0x6
 13852 0044 0D       		.uleb128 0xd
 13853 0045 00       		.byte	0
 13854 0046 03       		.uleb128 0x3
 13855 0047 0E       		.uleb128 0xe
 13856 0048 3A       		.uleb128 0x3a
 13857 0049 0B       		.uleb128 0xb
 13858 004a 3B       		.uleb128 0x3b
 13859 004b 0B       		.uleb128 0xb
 13860 004c 49       		.uleb128 0x49
 13861 004d 13       		.uleb128 0x13
 13862 004e 38       		.uleb128 0x38
 13863 004f 0B       		.uleb128 0xb
 13864 0050 00       		.byte	0
 13865 0051 00       		.byte	0
 13866 0052 07       		.uleb128 0x7
 13867 0053 0D       		.uleb128 0xd
 13868 0054 00       		.byte	0
 13869 0055 03       		.uleb128 0x3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 369


 13870 0056 08       		.uleb128 0x8
 13871 0057 3A       		.uleb128 0x3a
 13872 0058 0B       		.uleb128 0xb
 13873 0059 3B       		.uleb128 0x3b
 13874 005a 0B       		.uleb128 0xb
 13875 005b 49       		.uleb128 0x49
 13876 005c 13       		.uleb128 0x13
 13877 005d 38       		.uleb128 0x38
 13878 005e 0B       		.uleb128 0xb
 13879 005f 00       		.byte	0
 13880 0060 00       		.byte	0
 13881 0061 08       		.uleb128 0x8
 13882 0062 01       		.uleb128 0x1
 13883 0063 01       		.byte	0x1
 13884 0064 49       		.uleb128 0x49
 13885 0065 13       		.uleb128 0x13
 13886 0066 01       		.uleb128 0x1
 13887 0067 13       		.uleb128 0x13
 13888 0068 00       		.byte	0
 13889 0069 00       		.byte	0
 13890 006a 09       		.uleb128 0x9
 13891 006b 21       		.uleb128 0x21
 13892 006c 00       		.byte	0
 13893 006d 49       		.uleb128 0x49
 13894 006e 13       		.uleb128 0x13
 13895 006f 2F       		.uleb128 0x2f
 13896 0070 05       		.uleb128 0x5
 13897 0071 00       		.byte	0
 13898 0072 00       		.byte	0
 13899 0073 0A       		.uleb128 0xa
 13900 0074 13       		.uleb128 0x13
 13901 0075 01       		.byte	0x1
 13902 0076 0B       		.uleb128 0xb
 13903 0077 0B       		.uleb128 0xb
 13904 0078 3A       		.uleb128 0x3a
 13905 0079 0B       		.uleb128 0xb
 13906 007a 3B       		.uleb128 0x3b
 13907 007b 0B       		.uleb128 0xb
 13908 007c 01       		.uleb128 0x1
 13909 007d 13       		.uleb128 0x13
 13910 007e 00       		.byte	0
 13911 007f 00       		.byte	0
 13912 0080 0B       		.uleb128 0xb
 13913 0081 0F       		.uleb128 0xf
 13914 0082 00       		.byte	0
 13915 0083 0B       		.uleb128 0xb
 13916 0084 0B       		.uleb128 0xb
 13917 0085 49       		.uleb128 0x49
 13918 0086 13       		.uleb128 0x13
 13919 0087 00       		.byte	0
 13920 0088 00       		.byte	0
 13921 0089 0C       		.uleb128 0xc
 13922 008a 16       		.uleb128 0x16
 13923 008b 00       		.byte	0
 13924 008c 03       		.uleb128 0x3
 13925 008d 08       		.uleb128 0x8
 13926 008e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 370


 13927 008f 0B       		.uleb128 0xb
 13928 0090 3B       		.uleb128 0x3b
 13929 0091 0B       		.uleb128 0xb
 13930 0092 49       		.uleb128 0x49
 13931 0093 13       		.uleb128 0x13
 13932 0094 00       		.byte	0
 13933 0095 00       		.byte	0
 13934 0096 0D       		.uleb128 0xd
 13935 0097 21       		.uleb128 0x21
 13936 0098 00       		.byte	0
 13937 0099 49       		.uleb128 0x49
 13938 009a 13       		.uleb128 0x13
 13939 009b 2F       		.uleb128 0x2f
 13940 009c 0B       		.uleb128 0xb
 13941 009d 00       		.byte	0
 13942 009e 00       		.byte	0
 13943 009f 0E       		.uleb128 0xe
 13944 00a0 04       		.uleb128 0x4
 13945 00a1 01       		.byte	0x1
 13946 00a2 0B       		.uleb128 0xb
 13947 00a3 0B       		.uleb128 0xb
 13948 00a4 3A       		.uleb128 0x3a
 13949 00a5 0B       		.uleb128 0xb
 13950 00a6 3B       		.uleb128 0x3b
 13951 00a7 0B       		.uleb128 0xb
 13952 00a8 01       		.uleb128 0x1
 13953 00a9 13       		.uleb128 0x13
 13954 00aa 00       		.byte	0
 13955 00ab 00       		.byte	0
 13956 00ac 0F       		.uleb128 0xf
 13957 00ad 28       		.uleb128 0x28
 13958 00ae 00       		.byte	0
 13959 00af 03       		.uleb128 0x3
 13960 00b0 0E       		.uleb128 0xe
 13961 00b1 1C       		.uleb128 0x1c
 13962 00b2 0D       		.uleb128 0xd
 13963 00b3 00       		.byte	0
 13964 00b4 00       		.byte	0
 13965 00b5 10       		.uleb128 0x10
 13966 00b6 26       		.uleb128 0x26
 13967 00b7 00       		.byte	0
 13968 00b8 49       		.uleb128 0x49
 13969 00b9 13       		.uleb128 0x13
 13970 00ba 00       		.byte	0
 13971 00bb 00       		.byte	0
 13972 00bc 11       		.uleb128 0x11
 13973 00bd 13       		.uleb128 0x13
 13974 00be 01       		.byte	0x1
 13975 00bf 03       		.uleb128 0x3
 13976 00c0 0E       		.uleb128 0xe
 13977 00c1 0B       		.uleb128 0xb
 13978 00c2 0B       		.uleb128 0xb
 13979 00c3 3A       		.uleb128 0x3a
 13980 00c4 0B       		.uleb128 0xb
 13981 00c5 3B       		.uleb128 0x3b
 13982 00c6 0B       		.uleb128 0xb
 13983 00c7 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 371


 13984 00c8 13       		.uleb128 0x13
 13985 00c9 00       		.byte	0
 13986 00ca 00       		.byte	0
 13987 00cb 12       		.uleb128 0x12
 13988 00cc 0D       		.uleb128 0xd
 13989 00cd 00       		.byte	0
 13990 00ce 03       		.uleb128 0x3
 13991 00cf 0E       		.uleb128 0xe
 13992 00d0 49       		.uleb128 0x49
 13993 00d1 13       		.uleb128 0x13
 13994 00d2 38       		.uleb128 0x38
 13995 00d3 0B       		.uleb128 0xb
 13996 00d4 34       		.uleb128 0x34
 13997 00d5 19       		.uleb128 0x19
 13998 00d6 00       		.byte	0
 13999 00d7 00       		.byte	0
 14000 00d8 13       		.uleb128 0x13
 14001 00d9 0F       		.uleb128 0xf
 14002 00da 00       		.byte	0
 14003 00db 0B       		.uleb128 0xb
 14004 00dc 0B       		.uleb128 0xb
 14005 00dd 00       		.byte	0
 14006 00de 00       		.byte	0
 14007 00df 14       		.uleb128 0x14
 14008 00e0 13       		.uleb128 0x13
 14009 00e1 01       		.byte	0x1
 14010 00e2 0B       		.uleb128 0xb
 14011 00e3 0B       		.uleb128 0xb
 14012 00e4 3A       		.uleb128 0x3a
 14013 00e5 0B       		.uleb128 0xb
 14014 00e6 3B       		.uleb128 0x3b
 14015 00e7 05       		.uleb128 0x5
 14016 00e8 01       		.uleb128 0x1
 14017 00e9 13       		.uleb128 0x13
 14018 00ea 00       		.byte	0
 14019 00eb 00       		.byte	0
 14020 00ec 15       		.uleb128 0x15
 14021 00ed 0D       		.uleb128 0xd
 14022 00ee 00       		.byte	0
 14023 00ef 03       		.uleb128 0x3
 14024 00f0 08       		.uleb128 0x8
 14025 00f1 3A       		.uleb128 0x3a
 14026 00f2 0B       		.uleb128 0xb
 14027 00f3 3B       		.uleb128 0x3b
 14028 00f4 05       		.uleb128 0x5
 14029 00f5 49       		.uleb128 0x49
 14030 00f6 13       		.uleb128 0x13
 14031 00f7 38       		.uleb128 0x38
 14032 00f8 0B       		.uleb128 0xb
 14033 00f9 00       		.byte	0
 14034 00fa 00       		.byte	0
 14035 00fb 16       		.uleb128 0x16
 14036 00fc 0D       		.uleb128 0xd
 14037 00fd 00       		.byte	0
 14038 00fe 03       		.uleb128 0x3
 14039 00ff 0E       		.uleb128 0xe
 14040 0100 3A       		.uleb128 0x3a
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 372


 14041 0101 0B       		.uleb128 0xb
 14042 0102 3B       		.uleb128 0x3b
 14043 0103 05       		.uleb128 0x5
 14044 0104 49       		.uleb128 0x49
 14045 0105 13       		.uleb128 0x13
 14046 0106 38       		.uleb128 0x38
 14047 0107 0B       		.uleb128 0xb
 14048 0108 00       		.byte	0
 14049 0109 00       		.byte	0
 14050 010a 17       		.uleb128 0x17
 14051 010b 16       		.uleb128 0x16
 14052 010c 00       		.byte	0
 14053 010d 03       		.uleb128 0x3
 14054 010e 0E       		.uleb128 0xe
 14055 010f 3A       		.uleb128 0x3a
 14056 0110 0B       		.uleb128 0xb
 14057 0111 3B       		.uleb128 0x3b
 14058 0112 05       		.uleb128 0x5
 14059 0113 49       		.uleb128 0x49
 14060 0114 13       		.uleb128 0x13
 14061 0115 00       		.byte	0
 14062 0116 00       		.byte	0
 14063 0117 18       		.uleb128 0x18
 14064 0118 2E       		.uleb128 0x2e
 14065 0119 01       		.byte	0x1
 14066 011a 03       		.uleb128 0x3
 14067 011b 0E       		.uleb128 0xe
 14068 011c 3A       		.uleb128 0x3a
 14069 011d 0B       		.uleb128 0xb
 14070 011e 3B       		.uleb128 0x3b
 14071 011f 05       		.uleb128 0x5
 14072 0120 27       		.uleb128 0x27
 14073 0121 19       		.uleb128 0x19
 14074 0122 49       		.uleb128 0x49
 14075 0123 13       		.uleb128 0x13
 14076 0124 11       		.uleb128 0x11
 14077 0125 01       		.uleb128 0x1
 14078 0126 12       		.uleb128 0x12
 14079 0127 06       		.uleb128 0x6
 14080 0128 40       		.uleb128 0x40
 14081 0129 18       		.uleb128 0x18
 14082 012a 9742     		.uleb128 0x2117
 14083 012c 19       		.uleb128 0x19
 14084 012d 01       		.uleb128 0x1
 14085 012e 13       		.uleb128 0x13
 14086 012f 00       		.byte	0
 14087 0130 00       		.byte	0
 14088 0131 19       		.uleb128 0x19
 14089 0132 05       		.uleb128 0x5
 14090 0133 00       		.byte	0
 14091 0134 03       		.uleb128 0x3
 14092 0135 08       		.uleb128 0x8
 14093 0136 3A       		.uleb128 0x3a
 14094 0137 0B       		.uleb128 0xb
 14095 0138 3B       		.uleb128 0x3b
 14096 0139 05       		.uleb128 0x5
 14097 013a 49       		.uleb128 0x49
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 373


 14098 013b 13       		.uleb128 0x13
 14099 013c 02       		.uleb128 0x2
 14100 013d 17       		.uleb128 0x17
 14101 013e 00       		.byte	0
 14102 013f 00       		.byte	0
 14103 0140 1A       		.uleb128 0x1a
 14104 0141 34       		.uleb128 0x34
 14105 0142 00       		.byte	0
 14106 0143 03       		.uleb128 0x3
 14107 0144 08       		.uleb128 0x8
 14108 0145 3A       		.uleb128 0x3a
 14109 0146 0B       		.uleb128 0xb
 14110 0147 3B       		.uleb128 0x3b
 14111 0148 05       		.uleb128 0x5
 14112 0149 49       		.uleb128 0x49
 14113 014a 13       		.uleb128 0x13
 14114 014b 02       		.uleb128 0x2
 14115 014c 17       		.uleb128 0x17
 14116 014d 00       		.byte	0
 14117 014e 00       		.byte	0
 14118 014f 1B       		.uleb128 0x1b
 14119 0150 2E       		.uleb128 0x2e
 14120 0151 01       		.byte	0x1
 14121 0152 03       		.uleb128 0x3
 14122 0153 0E       		.uleb128 0xe
 14123 0154 3A       		.uleb128 0x3a
 14124 0155 0B       		.uleb128 0xb
 14125 0156 3B       		.uleb128 0x3b
 14126 0157 05       		.uleb128 0x5
 14127 0158 27       		.uleb128 0x27
 14128 0159 19       		.uleb128 0x19
 14129 015a 11       		.uleb128 0x11
 14130 015b 01       		.uleb128 0x1
 14131 015c 12       		.uleb128 0x12
 14132 015d 06       		.uleb128 0x6
 14133 015e 40       		.uleb128 0x40
 14134 015f 18       		.uleb128 0x18
 14135 0160 9742     		.uleb128 0x2117
 14136 0162 19       		.uleb128 0x19
 14137 0163 01       		.uleb128 0x1
 14138 0164 13       		.uleb128 0x13
 14139 0165 00       		.byte	0
 14140 0166 00       		.byte	0
 14141 0167 1C       		.uleb128 0x1c
 14142 0168 26       		.uleb128 0x26
 14143 0169 00       		.byte	0
 14144 016a 00       		.byte	0
 14145 016b 00       		.byte	0
 14146 016c 1D       		.uleb128 0x1d
 14147 016d 05       		.uleb128 0x5
 14148 016e 00       		.byte	0
 14149 016f 03       		.uleb128 0x3
 14150 0170 08       		.uleb128 0x8
 14151 0171 3A       		.uleb128 0x3a
 14152 0172 0B       		.uleb128 0xb
 14153 0173 3B       		.uleb128 0x3b
 14154 0174 05       		.uleb128 0x5
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 374


 14155 0175 49       		.uleb128 0x49
 14156 0176 13       		.uleb128 0x13
 14157 0177 02       		.uleb128 0x2
 14158 0178 18       		.uleb128 0x18
 14159 0179 00       		.byte	0
 14160 017a 00       		.byte	0
 14161 017b 1E       		.uleb128 0x1e
 14162 017c 34       		.uleb128 0x34
 14163 017d 00       		.byte	0
 14164 017e 03       		.uleb128 0x3
 14165 017f 08       		.uleb128 0x8
 14166 0180 3A       		.uleb128 0x3a
 14167 0181 0B       		.uleb128 0xb
 14168 0182 3B       		.uleb128 0x3b
 14169 0183 05       		.uleb128 0x5
 14170 0184 49       		.uleb128 0x49
 14171 0185 13       		.uleb128 0x13
 14172 0186 02       		.uleb128 0x2
 14173 0187 18       		.uleb128 0x18
 14174 0188 00       		.byte	0
 14175 0189 00       		.byte	0
 14176 018a 1F       		.uleb128 0x1f
 14177 018b 05       		.uleb128 0x5
 14178 018c 00       		.byte	0
 14179 018d 03       		.uleb128 0x3
 14180 018e 0E       		.uleb128 0xe
 14181 018f 3A       		.uleb128 0x3a
 14182 0190 0B       		.uleb128 0xb
 14183 0191 3B       		.uleb128 0x3b
 14184 0192 05       		.uleb128 0x5
 14185 0193 49       		.uleb128 0x49
 14186 0194 13       		.uleb128 0x13
 14187 0195 02       		.uleb128 0x2
 14188 0196 17       		.uleb128 0x17
 14189 0197 00       		.byte	0
 14190 0198 00       		.byte	0
 14191 0199 20       		.uleb128 0x20
 14192 019a 898201   		.uleb128 0x4109
 14193 019d 01       		.byte	0x1
 14194 019e 11       		.uleb128 0x11
 14195 019f 01       		.uleb128 0x1
 14196 01a0 31       		.uleb128 0x31
 14197 01a1 13       		.uleb128 0x13
 14198 01a2 01       		.uleb128 0x1
 14199 01a3 13       		.uleb128 0x13
 14200 01a4 00       		.byte	0
 14201 01a5 00       		.byte	0
 14202 01a6 21       		.uleb128 0x21
 14203 01a7 8A8201   		.uleb128 0x410a
 14204 01aa 00       		.byte	0
 14205 01ab 02       		.uleb128 0x2
 14206 01ac 18       		.uleb128 0x18
 14207 01ad 9142     		.uleb128 0x2111
 14208 01af 18       		.uleb128 0x18
 14209 01b0 00       		.byte	0
 14210 01b1 00       		.byte	0
 14211 01b2 22       		.uleb128 0x22
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 375


 14212 01b3 898201   		.uleb128 0x4109
 14213 01b6 01       		.byte	0x1
 14214 01b7 11       		.uleb128 0x11
 14215 01b8 01       		.uleb128 0x1
 14216 01b9 31       		.uleb128 0x31
 14217 01ba 13       		.uleb128 0x13
 14218 01bb 00       		.byte	0
 14219 01bc 00       		.byte	0
 14220 01bd 23       		.uleb128 0x23
 14221 01be 898201   		.uleb128 0x4109
 14222 01c1 00       		.byte	0
 14223 01c2 11       		.uleb128 0x11
 14224 01c3 01       		.uleb128 0x1
 14225 01c4 31       		.uleb128 0x31
 14226 01c5 13       		.uleb128 0x13
 14227 01c6 00       		.byte	0
 14228 01c7 00       		.byte	0
 14229 01c8 24       		.uleb128 0x24
 14230 01c9 34       		.uleb128 0x34
 14231 01ca 00       		.byte	0
 14232 01cb 03       		.uleb128 0x3
 14233 01cc 0E       		.uleb128 0xe
 14234 01cd 3A       		.uleb128 0x3a
 14235 01ce 0B       		.uleb128 0xb
 14236 01cf 3B       		.uleb128 0x3b
 14237 01d0 05       		.uleb128 0x5
 14238 01d1 49       		.uleb128 0x49
 14239 01d2 13       		.uleb128 0x13
 14240 01d3 02       		.uleb128 0x2
 14241 01d4 17       		.uleb128 0x17
 14242 01d5 00       		.byte	0
 14243 01d6 00       		.byte	0
 14244 01d7 25       		.uleb128 0x25
 14245 01d8 2E       		.uleb128 0x2e
 14246 01d9 01       		.byte	0x1
 14247 01da 3F       		.uleb128 0x3f
 14248 01db 19       		.uleb128 0x19
 14249 01dc 03       		.uleb128 0x3
 14250 01dd 0E       		.uleb128 0xe
 14251 01de 3A       		.uleb128 0x3a
 14252 01df 0B       		.uleb128 0xb
 14253 01e0 3B       		.uleb128 0x3b
 14254 01e1 05       		.uleb128 0x5
 14255 01e2 27       		.uleb128 0x27
 14256 01e3 19       		.uleb128 0x19
 14257 01e4 49       		.uleb128 0x49
 14258 01e5 13       		.uleb128 0x13
 14259 01e6 11       		.uleb128 0x11
 14260 01e7 01       		.uleb128 0x1
 14261 01e8 12       		.uleb128 0x12
 14262 01e9 06       		.uleb128 0x6
 14263 01ea 40       		.uleb128 0x40
 14264 01eb 18       		.uleb128 0x18
 14265 01ec 9742     		.uleb128 0x2117
 14266 01ee 19       		.uleb128 0x19
 14267 01ef 01       		.uleb128 0x1
 14268 01f0 13       		.uleb128 0x13
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 376


 14269 01f1 00       		.byte	0
 14270 01f2 00       		.byte	0
 14271 01f3 26       		.uleb128 0x26
 14272 01f4 18       		.uleb128 0x18
 14273 01f5 00       		.byte	0
 14274 01f6 00       		.byte	0
 14275 01f7 00       		.byte	0
 14276 01f8 27       		.uleb128 0x27
 14277 01f9 34       		.uleb128 0x34
 14278 01fa 00       		.byte	0
 14279 01fb 03       		.uleb128 0x3
 14280 01fc 0E       		.uleb128 0xe
 14281 01fd 3A       		.uleb128 0x3a
 14282 01fe 0B       		.uleb128 0xb
 14283 01ff 3B       		.uleb128 0x3b
 14284 0200 05       		.uleb128 0x5
 14285 0201 49       		.uleb128 0x49
 14286 0202 13       		.uleb128 0x13
 14287 0203 02       		.uleb128 0x2
 14288 0204 18       		.uleb128 0x18
 14289 0205 00       		.byte	0
 14290 0206 00       		.byte	0
 14291 0207 28       		.uleb128 0x28
 14292 0208 2E       		.uleb128 0x2e
 14293 0209 01       		.byte	0x1
 14294 020a 3F       		.uleb128 0x3f
 14295 020b 19       		.uleb128 0x19
 14296 020c 03       		.uleb128 0x3
 14297 020d 0E       		.uleb128 0xe
 14298 020e 3A       		.uleb128 0x3a
 14299 020f 0B       		.uleb128 0xb
 14300 0210 3B       		.uleb128 0x3b
 14301 0211 0B       		.uleb128 0xb
 14302 0212 27       		.uleb128 0x27
 14303 0213 19       		.uleb128 0x19
 14304 0214 49       		.uleb128 0x49
 14305 0215 13       		.uleb128 0x13
 14306 0216 3C       		.uleb128 0x3c
 14307 0217 19       		.uleb128 0x19
 14308 0218 01       		.uleb128 0x1
 14309 0219 13       		.uleb128 0x13
 14310 021a 00       		.byte	0
 14311 021b 00       		.byte	0
 14312 021c 29       		.uleb128 0x29
 14313 021d 05       		.uleb128 0x5
 14314 021e 00       		.byte	0
 14315 021f 49       		.uleb128 0x49
 14316 0220 13       		.uleb128 0x13
 14317 0221 00       		.byte	0
 14318 0222 00       		.byte	0
 14319 0223 2A       		.uleb128 0x2a
 14320 0224 2E       		.uleb128 0x2e
 14321 0225 01       		.byte	0x1
 14322 0226 3F       		.uleb128 0x3f
 14323 0227 19       		.uleb128 0x19
 14324 0228 03       		.uleb128 0x3
 14325 0229 0E       		.uleb128 0xe
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 377


 14326 022a 3A       		.uleb128 0x3a
 14327 022b 0B       		.uleb128 0xb
 14328 022c 3B       		.uleb128 0x3b
 14329 022d 0B       		.uleb128 0xb
 14330 022e 27       		.uleb128 0x27
 14331 022f 19       		.uleb128 0x19
 14332 0230 49       		.uleb128 0x49
 14333 0231 13       		.uleb128 0x13
 14334 0232 3C       		.uleb128 0x3c
 14335 0233 19       		.uleb128 0x19
 14336 0234 00       		.byte	0
 14337 0235 00       		.byte	0
 14338 0236 00       		.byte	0
 14339              		.section	.debug_loc,"",%progbits
 14340              	.Ldebug_loc0:
 14341              	.LLST0:
 14342 0000 00000000 		.4byte	.LVL0
 14343 0004 04000000 		.4byte	.LVL2
 14344 0008 0100     		.2byte	0x1
 14345 000a 50       		.byte	0x50
 14346 000b 04000000 		.4byte	.LVL2
 14347 000f 0A000000 		.4byte	.LFE0
 14348 0013 0400     		.2byte	0x4
 14349 0015 F3       		.byte	0xf3
 14350 0016 01       		.uleb128 0x1
 14351 0017 50       		.byte	0x50
 14352 0018 9F       		.byte	0x9f
 14353 0019 00000000 		.4byte	0
 14354 001d 00000000 		.4byte	0
 14355              	.LLST1:
 14356 0021 02000000 		.4byte	.LVL1
 14357 0025 04000000 		.4byte	.LVL2
 14358 0029 0600     		.2byte	0x6
 14359 002b 72       		.byte	0x72
 14360 002c 00       		.sleb128 0
 14361 002d 08       		.byte	0x8
 14362 002e FF       		.byte	0xff
 14363 002f 1A       		.byte	0x1a
 14364 0030 9F       		.byte	0x9f
 14365 0031 04000000 		.4byte	.LVL2
 14366 0035 08000000 		.4byte	.LVL3
 14367 0039 0800     		.2byte	0x8
 14368 003b 72       		.byte	0x72
 14369 003c 00       		.sleb128 0
 14370 003d 38       		.byte	0x38
 14371 003e 24       		.byte	0x24
 14372 003f 70       		.byte	0x70
 14373 0040 00       		.sleb128 0
 14374 0041 21       		.byte	0x21
 14375 0042 9F       		.byte	0x9f
 14376 0043 08000000 		.4byte	.LVL3
 14377 0047 0A000000 		.4byte	.LFE0
 14378 004b 0E00     		.2byte	0xe
 14379 004d 72       		.byte	0x72
 14380 004e 00       		.sleb128 0
 14381 004f 38       		.byte	0x38
 14382 0050 24       		.byte	0x24
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 378


 14383 0051 F3       		.byte	0xf3
 14384 0052 01       		.uleb128 0x1
 14385 0053 50       		.byte	0x50
 14386 0054 94       		.byte	0x94
 14387 0055 01       		.byte	0x1
 14388 0056 08       		.byte	0x8
 14389 0057 FF       		.byte	0xff
 14390 0058 1A       		.byte	0x1a
 14391 0059 21       		.byte	0x21
 14392 005a 9F       		.byte	0x9f
 14393 005b 00000000 		.4byte	0
 14394 005f 00000000 		.4byte	0
 14395              	.LLST2:
 14396 0063 00000000 		.4byte	.LVL4
 14397 0067 10000000 		.4byte	.LVL8
 14398 006b 0100     		.2byte	0x1
 14399 006d 50       		.byte	0x50
 14400 006e 10000000 		.4byte	.LVL8
 14401 0072 16000000 		.4byte	.LFE1
 14402 0076 0400     		.2byte	0x4
 14403 0078 F3       		.byte	0xf3
 14404 0079 01       		.uleb128 0x1
 14405 007a 50       		.byte	0x50
 14406 007b 9F       		.byte	0x9f
 14407 007c 00000000 		.4byte	0
 14408 0080 00000000 		.4byte	0
 14409              	.LLST3:
 14410 0084 02000000 		.4byte	.LVL5
 14411 0088 0E000000 		.4byte	.LVL7
 14412 008c 0100     		.2byte	0x1
 14413 008e 52       		.byte	0x52
 14414 008f 0E000000 		.4byte	.LVL7
 14415 0093 10000000 		.4byte	.LVL8
 14416 0097 0100     		.2byte	0x1
 14417 0099 53       		.byte	0x53
 14418 009a 10000000 		.4byte	.LVL8
 14419 009e 14000000 		.4byte	.LVL9
 14420 00a2 0800     		.2byte	0x8
 14421 00a4 73       		.byte	0x73
 14422 00a5 00       		.sleb128 0
 14423 00a6 38       		.byte	0x38
 14424 00a7 24       		.byte	0x24
 14425 00a8 70       		.byte	0x70
 14426 00a9 00       		.sleb128 0
 14427 00aa 21       		.byte	0x21
 14428 00ab 9F       		.byte	0x9f
 14429 00ac 14000000 		.4byte	.LVL9
 14430 00b0 16000000 		.4byte	.LFE1
 14431 00b4 0100     		.2byte	0x1
 14432 00b6 50       		.byte	0x50
 14433 00b7 00000000 		.4byte	0
 14434 00bb 00000000 		.4byte	0
 14435              	.LLST4:
 14436 00bf 00000000 		.4byte	.LVL10
 14437 00c3 00000000 		.4byte	.LVL10
 14438 00c7 0100     		.2byte	0x1
 14439 00c9 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 379


 14440 00ca 00000000 		.4byte	.LVL10
 14441 00ce 02000000 		.4byte	.LVL11
 14442 00d2 0300     		.2byte	0x3
 14443 00d4 70       		.byte	0x70
 14444 00d5 01       		.sleb128 1
 14445 00d6 9F       		.byte	0x9f
 14446 00d7 02000000 		.4byte	.LVL11
 14447 00db 08000000 		.4byte	.LFE2
 14448 00df 0300     		.2byte	0x3
 14449 00e1 70       		.byte	0x70
 14450 00e2 02       		.sleb128 2
 14451 00e3 9F       		.byte	0x9f
 14452 00e4 00000000 		.4byte	0
 14453 00e8 00000000 		.4byte	0
 14454              	.LLST5:
 14455 00ec 00000000 		.4byte	.LVL10
 14456 00f0 02000000 		.4byte	.LVL11
 14457 00f4 0100     		.2byte	0x1
 14458 00f6 51       		.byte	0x51
 14459 00f7 02000000 		.4byte	.LVL11
 14460 00fb 04000000 		.4byte	.LVL12
 14461 00ff 0500     		.2byte	0x5
 14462 0101 71       		.byte	0x71
 14463 0102 00       		.sleb128 0
 14464 0103 38       		.byte	0x38
 14465 0104 25       		.byte	0x25
 14466 0105 9F       		.byte	0x9f
 14467 0106 00000000 		.4byte	0
 14468 010a 00000000 		.4byte	0
 14469              	.LLST6:
 14470 010e 00000000 		.4byte	.LVL13
 14471 0112 00000000 		.4byte	.LVL13
 14472 0116 0100     		.2byte	0x1
 14473 0118 50       		.byte	0x50
 14474 0119 00000000 		.4byte	.LVL13
 14475 011d 02000000 		.4byte	.LVL14
 14476 0121 0300     		.2byte	0x3
 14477 0123 70       		.byte	0x70
 14478 0124 01       		.sleb128 1
 14479 0125 9F       		.byte	0x9f
 14480 0126 02000000 		.4byte	.LVL14
 14481 012a 08000000 		.4byte	.LVL15
 14482 012e 0300     		.2byte	0x3
 14483 0130 70       		.byte	0x70
 14484 0131 02       		.sleb128 2
 14485 0132 9F       		.byte	0x9f
 14486 0133 08000000 		.4byte	.LVL15
 14487 0137 0E000000 		.4byte	.LVL16
 14488 013b 0300     		.2byte	0x3
 14489 013d 70       		.byte	0x70
 14490 013e 03       		.sleb128 3
 14491 013f 9F       		.byte	0x9f
 14492 0140 0E000000 		.4byte	.LVL16
 14493 0144 14000000 		.4byte	.LFE3
 14494 0148 0300     		.2byte	0x3
 14495 014a 70       		.byte	0x70
 14496 014b 04       		.sleb128 4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 380


 14497 014c 9F       		.byte	0x9f
 14498 014d 00000000 		.4byte	0
 14499 0151 00000000 		.4byte	0
 14500              	.LLST7:
 14501 0155 00000000 		.4byte	.LVL13
 14502 0159 02000000 		.4byte	.LVL14
 14503 015d 0100     		.2byte	0x1
 14504 015f 51       		.byte	0x51
 14505 0160 02000000 		.4byte	.LVL14
 14506 0164 08000000 		.4byte	.LVL15
 14507 0168 0500     		.2byte	0x5
 14508 016a 71       		.byte	0x71
 14509 016b 00       		.sleb128 0
 14510 016c 38       		.byte	0x38
 14511 016d 25       		.byte	0x25
 14512 016e 9F       		.byte	0x9f
 14513 016f 08000000 		.4byte	.LVL15
 14514 0173 0E000000 		.4byte	.LVL16
 14515 0177 0500     		.2byte	0x5
 14516 0179 71       		.byte	0x71
 14517 017a 00       		.sleb128 0
 14518 017b 40       		.byte	0x40
 14519 017c 25       		.byte	0x25
 14520 017d 9F       		.byte	0x9f
 14521 017e 0E000000 		.4byte	.LVL16
 14522 0182 10000000 		.4byte	.LVL17
 14523 0186 0500     		.2byte	0x5
 14524 0188 71       		.byte	0x71
 14525 0189 00       		.sleb128 0
 14526 018a 48       		.byte	0x48
 14527 018b 25       		.byte	0x25
 14528 018c 9F       		.byte	0x9f
 14529 018d 10000000 		.4byte	.LVL17
 14530 0191 14000000 		.4byte	.LFE3
 14531 0195 0100     		.2byte	0x1
 14532 0197 51       		.byte	0x51
 14533 0198 00000000 		.4byte	0
 14534 019c 00000000 		.4byte	0
 14535              	.LLST8:
 14536 01a0 00000000 		.4byte	.LVL18
 14537 01a4 04000000 		.4byte	.LVL19
 14538 01a8 0100     		.2byte	0x1
 14539 01aa 50       		.byte	0x50
 14540 01ab 04000000 		.4byte	.LVL19
 14541 01af 12000000 		.4byte	.LFE4
 14542 01b3 0400     		.2byte	0x4
 14543 01b5 F3       		.byte	0xf3
 14544 01b6 01       		.uleb128 0x1
 14545 01b7 50       		.byte	0x50
 14546 01b8 9F       		.byte	0x9f
 14547 01b9 00000000 		.4byte	0
 14548 01bd 00000000 		.4byte	0
 14549              	.LLST9:
 14550 01c1 00000000 		.4byte	.LVL18
 14551 01c5 04000000 		.4byte	.LVL19
 14552 01c9 0100     		.2byte	0x1
 14553 01cb 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 381


 14554 01cc 04000000 		.4byte	.LVL19
 14555 01d0 12000000 		.4byte	.LFE4
 14556 01d4 0400     		.2byte	0x4
 14557 01d6 F3       		.byte	0xf3
 14558 01d7 01       		.uleb128 0x1
 14559 01d8 51       		.byte	0x51
 14560 01d9 9F       		.byte	0x9f
 14561 01da 00000000 		.4byte	0
 14562 01de 00000000 		.4byte	0
 14563              	.LLST10:
 14564 01e2 00000000 		.4byte	.LVL18
 14565 01e6 04000000 		.4byte	.LVL19
 14566 01ea 0100     		.2byte	0x1
 14567 01ec 52       		.byte	0x52
 14568 01ed 04000000 		.4byte	.LVL19
 14569 01f1 08000000 		.4byte	.LVL20
 14570 01f5 0100     		.2byte	0x1
 14571 01f7 53       		.byte	0x53
 14572 01f8 08000000 		.4byte	.LVL20
 14573 01fc 0E000000 		.4byte	.LVL23
 14574 0200 0300     		.2byte	0x3
 14575 0202 73       		.byte	0x73
 14576 0203 7F       		.sleb128 -1
 14577 0204 9F       		.byte	0x9f
 14578 0205 0E000000 		.4byte	.LVL23
 14579 0209 12000000 		.4byte	.LFE4
 14580 020d 0100     		.2byte	0x1
 14581 020f 53       		.byte	0x53
 14582 0210 00000000 		.4byte	0
 14583 0214 00000000 		.4byte	0
 14584              	.LLST11:
 14585 0218 00000000 		.4byte	.LVL18
 14586 021c 04000000 		.4byte	.LVL19
 14587 0220 0100     		.2byte	0x1
 14588 0222 50       		.byte	0x50
 14589 0223 04000000 		.4byte	.LVL19
 14590 0227 0A000000 		.4byte	.LVL21
 14591 022b 0300     		.2byte	0x3
 14592 022d 70       		.byte	0x70
 14593 022e 01       		.sleb128 1
 14594 022f 9F       		.byte	0x9f
 14595 0230 0A000000 		.4byte	.LVL21
 14596 0234 12000000 		.4byte	.LFE4
 14597 0238 0100     		.2byte	0x1
 14598 023a 50       		.byte	0x50
 14599 023b 00000000 		.4byte	0
 14600 023f 00000000 		.4byte	0
 14601              	.LLST12:
 14602 0243 00000000 		.4byte	.LVL18
 14603 0247 04000000 		.4byte	.LVL19
 14604 024b 0100     		.2byte	0x1
 14605 024d 51       		.byte	0x51
 14606 024e 04000000 		.4byte	.LVL19
 14607 0252 0C000000 		.4byte	.LVL22
 14608 0256 0300     		.2byte	0x3
 14609 0258 71       		.byte	0x71
 14610 0259 01       		.sleb128 1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 382


 14611 025a 9F       		.byte	0x9f
 14612 025b 0C000000 		.4byte	.LVL22
 14613 025f 12000000 		.4byte	.LFE4
 14614 0263 0100     		.2byte	0x1
 14615 0265 51       		.byte	0x51
 14616 0266 00000000 		.4byte	0
 14617 026a 00000000 		.4byte	0
 14618              	.LLST13:
 14619 026e 00000000 		.4byte	.LVL24
 14620 0272 00000000 		.4byte	.LVL24
 14621 0276 0100     		.2byte	0x1
 14622 0278 52       		.byte	0x52
 14623 0279 00000000 		.4byte	.LVL24
 14624 027d 02000000 		.4byte	.LVL25
 14625 0281 0400     		.2byte	0x4
 14626 0283 F3       		.byte	0xf3
 14627 0284 01       		.uleb128 0x1
 14628 0285 52       		.byte	0x52
 14629 0286 9F       		.byte	0x9f
 14630 0287 02000000 		.4byte	.LVL25
 14631 028b 06000000 		.4byte	.LVL27
 14632 028f 0600     		.2byte	0x6
 14633 0291 F3       		.byte	0xf3
 14634 0292 01       		.uleb128 0x1
 14635 0293 52       		.byte	0x52
 14636 0294 31       		.byte	0x31
 14637 0295 1C       		.byte	0x1c
 14638 0296 9F       		.byte	0x9f
 14639 0297 06000000 		.4byte	.LVL27
 14640 029b 0A000000 		.4byte	.LFE5
 14641 029f 0100     		.2byte	0x1
 14642 02a1 52       		.byte	0x52
 14643 02a2 00000000 		.4byte	0
 14644 02a6 00000000 		.4byte	0
 14645              	.LLST14:
 14646 02aa 00000000 		.4byte	.LVL24
 14647 02ae 04000000 		.4byte	.LVL26
 14648 02b2 0600     		.2byte	0x6
 14649 02b4 F3       		.byte	0xf3
 14650 02b5 01       		.uleb128 0x1
 14651 02b6 50       		.byte	0x50
 14652 02b7 23       		.byte	0x23
 14653 02b8 01       		.uleb128 0x1
 14654 02b9 9F       		.byte	0x9f
 14655 02ba 04000000 		.4byte	.LVL26
 14656 02be 0A000000 		.4byte	.LFE5
 14657 02c2 0100     		.2byte	0x1
 14658 02c4 50       		.byte	0x50
 14659 02c5 00000000 		.4byte	0
 14660 02c9 00000000 		.4byte	0
 14661              	.LLST15:
 14662 02cd 00000000 		.4byte	.LVL28
 14663 02d1 02000000 		.4byte	.LVL29
 14664 02d5 0100     		.2byte	0x1
 14665 02d7 50       		.byte	0x50
 14666 02d8 02000000 		.4byte	.LVL29
 14667 02dc 1E000000 		.4byte	.LFE6
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 383


 14668 02e0 0400     		.2byte	0x4
 14669 02e2 F3       		.byte	0xf3
 14670 02e3 01       		.uleb128 0x1
 14671 02e4 50       		.byte	0x50
 14672 02e5 9F       		.byte	0x9f
 14673 02e6 00000000 		.4byte	0
 14674 02ea 00000000 		.4byte	0
 14675              	.LLST16:
 14676 02ee 00000000 		.4byte	.LVL28
 14677 02f2 02000000 		.4byte	.LVL29
 14678 02f6 0100     		.2byte	0x1
 14679 02f8 51       		.byte	0x51
 14680 02f9 02000000 		.4byte	.LVL29
 14681 02fd 1E000000 		.4byte	.LFE6
 14682 0301 0400     		.2byte	0x4
 14683 0303 F3       		.byte	0xf3
 14684 0304 01       		.uleb128 0x1
 14685 0305 51       		.byte	0x51
 14686 0306 9F       		.byte	0x9f
 14687 0307 00000000 		.4byte	0
 14688 030b 00000000 		.4byte	0
 14689              	.LLST17:
 14690 030f 00000000 		.4byte	.LVL28
 14691 0313 0C000000 		.4byte	.LVL32
 14692 0317 0100     		.2byte	0x1
 14693 0319 52       		.byte	0x52
 14694 031a 0C000000 		.4byte	.LVL32
 14695 031e 0E000000 		.4byte	.LVL33
 14696 0322 0300     		.2byte	0x3
 14697 0324 72       		.byte	0x72
 14698 0325 7F       		.sleb128 -1
 14699 0326 9F       		.byte	0x9f
 14700 0327 0E000000 		.4byte	.LVL33
 14701 032b 1E000000 		.4byte	.LFE6
 14702 032f 0100     		.2byte	0x1
 14703 0331 52       		.byte	0x52
 14704 0332 00000000 		.4byte	0
 14705 0336 00000000 		.4byte	0
 14706              	.LLST18:
 14707 033a 02000000 		.4byte	.LVL29
 14708 033e 04000000 		.4byte	.LVL30
 14709 0342 0100     		.2byte	0x1
 14710 0344 50       		.byte	0x50
 14711 0345 04000000 		.4byte	.LVL30
 14712 0349 1C000000 		.4byte	.LVL34
 14713 034d 0100     		.2byte	0x1
 14714 034f 55       		.byte	0x55
 14715 0350 00000000 		.4byte	0
 14716 0354 00000000 		.4byte	0
 14717              	.LLST19:
 14718 0358 02000000 		.4byte	.LVL29
 14719 035c 08000000 		.4byte	.LVL31
 14720 0360 0100     		.2byte	0x1
 14721 0362 51       		.byte	0x51
 14722 0363 08000000 		.4byte	.LVL31
 14723 0367 1C000000 		.4byte	.LVL34
 14724 036b 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 384


 14725 036d 54       		.byte	0x54
 14726 036e 00000000 		.4byte	0
 14727 0372 00000000 		.4byte	0
 14728              	.LLST20:
 14729 0376 00000000 		.4byte	.LVL35
 14730 037a 04000000 		.4byte	.LVL36
 14731 037e 0100     		.2byte	0x1
 14732 0380 50       		.byte	0x50
 14733 0381 04000000 		.4byte	.LVL36
 14734 0385 0E000000 		.4byte	.LVL37
 14735 0389 0100     		.2byte	0x1
 14736 038b 50       		.byte	0x50
 14737 038c 00000000 		.4byte	0
 14738 0390 00000000 		.4byte	0
 14739              	.LLST21:
 14740 0394 00000000 		.4byte	.LVL38
 14741 0398 0E000000 		.4byte	.LVL40
 14742 039c 0100     		.2byte	0x1
 14743 039e 50       		.byte	0x50
 14744 039f 0E000000 		.4byte	.LVL40
 14745 03a3 14000000 		.4byte	.LVL41
 14746 03a7 0400     		.2byte	0x4
 14747 03a9 F3       		.byte	0xf3
 14748 03aa 01       		.uleb128 0x1
 14749 03ab 50       		.byte	0x50
 14750 03ac 9F       		.byte	0x9f
 14751 03ad 14000000 		.4byte	.LVL41
 14752 03b1 16000000 		.4byte	.LVL42
 14753 03b5 0100     		.2byte	0x1
 14754 03b7 50       		.byte	0x50
 14755 03b8 16000000 		.4byte	.LVL42
 14756 03bc 18000000 		.4byte	.LFE11
 14757 03c0 0400     		.2byte	0x4
 14758 03c2 F3       		.byte	0xf3
 14759 03c3 01       		.uleb128 0x1
 14760 03c4 50       		.byte	0x50
 14761 03c5 9F       		.byte	0x9f
 14762 03c6 00000000 		.4byte	0
 14763 03ca 00000000 		.4byte	0
 14764              	.LLST22:
 14765 03ce 00000000 		.4byte	.LVL38
 14766 03d2 02000000 		.4byte	.LVL39
 14767 03d6 0100     		.2byte	0x1
 14768 03d8 51       		.byte	0x51
 14769 03d9 02000000 		.4byte	.LVL39
 14770 03dd 18000000 		.4byte	.LFE11
 14771 03e1 0100     		.2byte	0x1
 14772 03e3 51       		.byte	0x51
 14773 03e4 00000000 		.4byte	0
 14774 03e8 00000000 		.4byte	0
 14775              	.LLST23:
 14776 03ec 00000000 		.4byte	.LVL43
 14777 03f0 0A000000 		.4byte	.LVL44
 14778 03f4 0100     		.2byte	0x1
 14779 03f6 50       		.byte	0x50
 14780 03f7 0A000000 		.4byte	.LVL44
 14781 03fb 24000000 		.4byte	.LFE19
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 385


 14782 03ff 0100     		.2byte	0x1
 14783 0401 56       		.byte	0x56
 14784 0402 00000000 		.4byte	0
 14785 0406 00000000 		.4byte	0
 14786              	.LLST24:
 14787 040a 00000000 		.4byte	.LVL43
 14788 040e 0D000000 		.4byte	.LVL45-1
 14789 0412 0100     		.2byte	0x1
 14790 0414 51       		.byte	0x51
 14791 0415 0D000000 		.4byte	.LVL45-1
 14792 0419 24000000 		.4byte	.LFE19
 14793 041d 0100     		.2byte	0x1
 14794 041f 55       		.byte	0x55
 14795 0420 00000000 		.4byte	0
 14796 0424 00000000 		.4byte	0
 14797              	.LLST25:
 14798 0428 10000000 		.4byte	.LVL46
 14799 042c 1A000000 		.4byte	.LVL47
 14800 0430 0100     		.2byte	0x1
 14801 0432 50       		.byte	0x50
 14802 0433 1A000000 		.4byte	.LVL47
 14803 0437 22000000 		.4byte	.LVL49
 14804 043b 0100     		.2byte	0x1
 14805 043d 54       		.byte	0x54
 14806 043e 22000000 		.4byte	.LVL49
 14807 0442 24000000 		.4byte	.LFE19
 14808 0446 0100     		.2byte	0x1
 14809 0448 50       		.byte	0x50
 14810 0449 00000000 		.4byte	0
 14811 044d 00000000 		.4byte	0
 14812              	.LLST26:
 14813 0451 00000000 		.4byte	.LVL50
 14814 0455 0C000000 		.4byte	.LVL51
 14815 0459 0100     		.2byte	0x1
 14816 045b 50       		.byte	0x50
 14817 045c 0C000000 		.4byte	.LVL51
 14818 0460 24000000 		.4byte	.LFE20
 14819 0464 0100     		.2byte	0x1
 14820 0466 56       		.byte	0x56
 14821 0467 00000000 		.4byte	0
 14822 046b 00000000 		.4byte	0
 14823              	.LLST27:
 14824 046f 00000000 		.4byte	.LVL50
 14825 0473 0E000000 		.4byte	.LVL52
 14826 0477 0100     		.2byte	0x1
 14827 0479 51       		.byte	0x51
 14828 047a 0E000000 		.4byte	.LVL52
 14829 047e 24000000 		.4byte	.LFE20
 14830 0482 0100     		.2byte	0x1
 14831 0484 55       		.byte	0x55
 14832 0485 00000000 		.4byte	0
 14833 0489 00000000 		.4byte	0
 14834              	.LLST28:
 14835 048d 00000000 		.4byte	.LVL50
 14836 0491 11000000 		.4byte	.LVL53-1
 14837 0495 0100     		.2byte	0x1
 14838 0497 52       		.byte	0x52
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 386


 14839 0498 11000000 		.4byte	.LVL53-1
 14840 049c 24000000 		.4byte	.LFE20
 14841 04a0 0100     		.2byte	0x1
 14842 04a2 54       		.byte	0x54
 14843 04a3 00000000 		.4byte	0
 14844 04a7 00000000 		.4byte	0
 14845              	.LLST29:
 14846 04ab 00000000 		.4byte	.LVL55
 14847 04af 4A000000 		.4byte	.LVL66
 14848 04b3 0100     		.2byte	0x1
 14849 04b5 50       		.byte	0x50
 14850 04b6 4A000000 		.4byte	.LVL66
 14851 04ba 62000000 		.4byte	.LVL70
 14852 04be 0100     		.2byte	0x1
 14853 04c0 55       		.byte	0x55
 14854 04c1 62000000 		.4byte	.LVL70
 14855 04c5 64000000 		.4byte	.LFE25
 14856 04c9 0100     		.2byte	0x1
 14857 04cb 50       		.byte	0x50
 14858 04cc 00000000 		.4byte	0
 14859 04d0 00000000 		.4byte	0
 14860              	.LLST30:
 14861 04d4 00000000 		.4byte	.LVL55
 14862 04d8 4F000000 		.4byte	.LVL67-1
 14863 04dc 0100     		.2byte	0x1
 14864 04de 51       		.byte	0x51
 14865 04df 4F000000 		.4byte	.LVL67-1
 14866 04e3 62000000 		.4byte	.LVL70
 14867 04e7 0100     		.2byte	0x1
 14868 04e9 56       		.byte	0x56
 14869 04ea 62000000 		.4byte	.LVL70
 14870 04ee 64000000 		.4byte	.LFE25
 14871 04f2 0100     		.2byte	0x1
 14872 04f4 51       		.byte	0x51
 14873 04f5 00000000 		.4byte	0
 14874 04f9 00000000 		.4byte	0
 14875              	.LLST31:
 14876 04fd 10000000 		.4byte	.LVL56
 14877 0501 14000000 		.4byte	.LVL57
 14878 0505 0100     		.2byte	0x1
 14879 0507 53       		.byte	0x53
 14880 0508 14000000 		.4byte	.LVL57
 14881 050c 34000000 		.4byte	.LVL63
 14882 0510 0100     		.2byte	0x1
 14883 0512 52       		.byte	0x52
 14884 0513 34000000 		.4byte	.LVL63
 14885 0517 40000000 		.4byte	.LVL65
 14886 051b 0100     		.2byte	0x1
 14887 051d 53       		.byte	0x53
 14888 051e 00000000 		.4byte	0
 14889 0522 00000000 		.4byte	0
 14890              	.LLST32:
 14891 0526 10000000 		.4byte	.LVL56
 14892 052a 24000000 		.4byte	.LVL60
 14893 052e 0100     		.2byte	0x1
 14894 0530 54       		.byte	0x54
 14895 0531 24000000 		.4byte	.LVL60
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 387


 14896 0535 32000000 		.4byte	.LVL62
 14897 0539 0300     		.2byte	0x3
 14898 053b 74       		.byte	0x74
 14899 053c 01       		.sleb128 1
 14900 053d 9F       		.byte	0x9f
 14901 053e 32000000 		.4byte	.LVL62
 14902 0542 3E000000 		.4byte	.LVL64
 14903 0546 0100     		.2byte	0x1
 14904 0548 54       		.byte	0x54
 14905 0549 00000000 		.4byte	0
 14906 054d 00000000 		.4byte	0
 14907              	.LLST33:
 14908 0551 16000000 		.4byte	.LVL58
 14909 0555 34000000 		.4byte	.LVL63
 14910 0559 0100     		.2byte	0x1
 14911 055b 53       		.byte	0x53
 14912 055c 00000000 		.4byte	0
 14913 0560 00000000 		.4byte	0
 14914              	.LLST34:
 14915 0564 5A000000 		.4byte	.LVL68
 14916 0568 5E000000 		.4byte	.LVL69
 14917 056c 0100     		.2byte	0x1
 14918 056e 50       		.byte	0x50
 14919 056f 00000000 		.4byte	0
 14920 0573 00000000 		.4byte	0
 14921              	.LLST35:
 14922 0577 00000000 		.4byte	.LVL71
 14923 057b 10000000 		.4byte	.LVL74
 14924 057f 0100     		.2byte	0x1
 14925 0581 50       		.byte	0x50
 14926 0582 10000000 		.4byte	.LVL74
 14927 0586 0C010000 		.4byte	.LVL100
 14928 058a 0100     		.2byte	0x1
 14929 058c 5A       		.byte	0x5a
 14930 058d 0C010000 		.4byte	.LVL100
 14931 0591 10010000 		.4byte	.LFE26
 14932 0595 0400     		.2byte	0x4
 14933 0597 F3       		.byte	0xf3
 14934 0598 01       		.uleb128 0x1
 14935 0599 50       		.byte	0x50
 14936 059a 9F       		.byte	0x9f
 14937 059b 00000000 		.4byte	0
 14938 059f 00000000 		.4byte	0
 14939              	.LLST36:
 14940 05a3 00000000 		.4byte	.LVL71
 14941 05a7 12000000 		.4byte	.LVL75
 14942 05ab 0100     		.2byte	0x1
 14943 05ad 51       		.byte	0x51
 14944 05ae 12000000 		.4byte	.LVL75
 14945 05b2 0C010000 		.4byte	.LVL100
 14946 05b6 0100     		.2byte	0x1
 14947 05b8 59       		.byte	0x59
 14948 05b9 0C010000 		.4byte	.LVL100
 14949 05bd 10010000 		.4byte	.LFE26
 14950 05c1 0400     		.2byte	0x4
 14951 05c3 F3       		.byte	0xf3
 14952 05c4 01       		.uleb128 0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 388


 14953 05c5 51       		.byte	0x51
 14954 05c6 9F       		.byte	0x9f
 14955 05c7 00000000 		.4byte	0
 14956 05cb 00000000 		.4byte	0
 14957              	.LLST37:
 14958 05cf 24000000 		.4byte	.LVL79
 14959 05d3 B2000000 		.4byte	.LVL90
 14960 05d7 0100     		.2byte	0x1
 14961 05d9 54       		.byte	0x54
 14962 05da B2000000 		.4byte	.LVL90
 14963 05de B4000000 		.4byte	.LVL91
 14964 05e2 0300     		.2byte	0x3
 14965 05e4 74       		.byte	0x74
 14966 05e5 20       		.sleb128 32
 14967 05e6 9F       		.byte	0x9f
 14968 05e7 B4000000 		.4byte	.LVL91
 14969 05eb 0C010000 		.4byte	.LVL100
 14970 05ef 0100     		.2byte	0x1
 14971 05f1 54       		.byte	0x54
 14972 05f2 00000000 		.4byte	0
 14973 05f6 00000000 		.4byte	0
 14974              	.LLST38:
 14975 05fa 74000000 		.4byte	.LVL85
 14976 05fe 9C000000 		.4byte	.LVL88
 14977 0602 0100     		.2byte	0x1
 14978 0604 51       		.byte	0x51
 14979 0605 F4000000 		.4byte	.LVL96
 14980 0609 00010000 		.4byte	.LVL98
 14981 060d 0100     		.2byte	0x1
 14982 060f 51       		.byte	0x51
 14983 0610 00000000 		.4byte	0
 14984 0614 00000000 		.4byte	0
 14985              	.LLST39:
 14986 0618 0E000000 		.4byte	.LVL73
 14987 061c 0C010000 		.4byte	.LVL100
 14988 0620 0100     		.2byte	0x1
 14989 0622 5B       		.byte	0x5b
 14990 0623 0C010000 		.4byte	.LVL100
 14991 0627 10010000 		.4byte	.LFE26
 14992 062b 0600     		.2byte	0x6
 14993 062d F3       		.byte	0xf3
 14994 062e 01       		.uleb128 0x1
 14995 062f 50       		.byte	0x50
 14996 0630 23       		.byte	0x23
 14997 0631 20       		.uleb128 0x20
 14998 0632 9F       		.byte	0x9f
 14999 0633 00000000 		.4byte	0
 15000 0637 00000000 		.4byte	0
 15001              	.LLST40:
 15002 063b 18000000 		.4byte	.LVL76
 15003 063f 20000000 		.4byte	.LVL77
 15004 0643 0200     		.2byte	0x2
 15005 0645 38       		.byte	0x38
 15006 0646 9F       		.byte	0x9f
 15007 0647 20000000 		.4byte	.LVL77
 15008 064b 5A000000 		.4byte	.LVL82
 15009 064f 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 389


 15010 0651 58       		.byte	0x58
 15011 0652 5C000000 		.4byte	.LVL83
 15012 0656 0C010000 		.4byte	.LVL100
 15013 065a 0100     		.2byte	0x1
 15014 065c 58       		.byte	0x58
 15015 065d 00000000 		.4byte	0
 15016 0661 00000000 		.4byte	0
 15017              	.LLST41:
 15018 0665 18000000 		.4byte	.LVL76
 15019 0669 20000000 		.4byte	.LVL77
 15020 066d 0200     		.2byte	0x2
 15021 066f 30       		.byte	0x30
 15022 0670 9F       		.byte	0x9f
 15023 0671 20000000 		.4byte	.LVL77
 15024 0675 22000000 		.4byte	.LVL78
 15025 0679 0100     		.2byte	0x1
 15026 067b 53       		.byte	0x53
 15027 067c 22000000 		.4byte	.LVL78
 15028 0680 72000000 		.4byte	.LVL84
 15029 0684 0100     		.2byte	0x1
 15030 0686 55       		.byte	0x55
 15031 0687 72000000 		.4byte	.LVL84
 15032 068b 9C000000 		.4byte	.LVL88
 15033 068f 0100     		.2byte	0x1
 15034 0691 53       		.byte	0x53
 15035 0692 9C000000 		.4byte	.LVL88
 15036 0696 C0000000 		.4byte	.LVL93
 15037 069a 0100     		.2byte	0x1
 15038 069c 55       		.byte	0x55
 15039 069d E8000000 		.4byte	.LVL94
 15040 06a1 F4000000 		.4byte	.LVL96
 15041 06a5 0100     		.2byte	0x1
 15042 06a7 55       		.byte	0x55
 15043 06a8 F4000000 		.4byte	.LVL96
 15044 06ac 00010000 		.4byte	.LVL98
 15045 06b0 0100     		.2byte	0x1
 15046 06b2 53       		.byte	0x53
 15047 06b3 00010000 		.4byte	.LVL98
 15048 06b7 06010000 		.4byte	.LVL99
 15049 06bb 0100     		.2byte	0x1
 15050 06bd 55       		.byte	0x55
 15051 06be 00000000 		.4byte	0
 15052 06c2 00000000 		.4byte	0
 15053              	.LLST42:
 15054 06c6 18000000 		.4byte	.LVL76
 15055 06ca 20000000 		.4byte	.LVL77
 15056 06ce 0200     		.2byte	0x2
 15057 06d0 30       		.byte	0x30
 15058 06d1 9F       		.byte	0x9f
 15059 06d2 20000000 		.4byte	.LVL77
 15060 06d6 56000000 		.4byte	.LVL81
 15061 06da 0100     		.2byte	0x1
 15062 06dc 56       		.byte	0x56
 15063 06dd 5C000000 		.4byte	.LVL83
 15064 06e1 90000000 		.4byte	.LVL86
 15065 06e5 0100     		.2byte	0x1
 15066 06e7 56       		.byte	0x56
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 390


 15067 06e8 90000000 		.4byte	.LVL86
 15068 06ec 96000000 		.4byte	.LVL87
 15069 06f0 0100     		.2byte	0x1
 15070 06f2 52       		.byte	0x52
 15071 06f3 96000000 		.4byte	.LVL87
 15072 06f7 B4000000 		.4byte	.LVL91
 15073 06fb 0100     		.2byte	0x1
 15074 06fd 56       		.byte	0x56
 15075 06fe B4000000 		.4byte	.LVL91
 15076 0702 BA000000 		.4byte	.LVL92
 15077 0706 0300     		.2byte	0x3
 15078 0708 76       		.byte	0x76
 15079 0709 01       		.sleb128 1
 15080 070a 9F       		.byte	0x9f
 15081 070b BA000000 		.4byte	.LVL92
 15082 070f 0C010000 		.4byte	.LVL100
 15083 0713 0100     		.2byte	0x1
 15084 0715 56       		.byte	0x56
 15085 0716 00000000 		.4byte	0
 15086 071a 00000000 		.4byte	0
 15087              	.LLST43:
 15088 071e 0A000000 		.4byte	.LVL72
 15089 0722 0C010000 		.4byte	.LVL100
 15090 0726 0100     		.2byte	0x1
 15091 0728 57       		.byte	0x57
 15092 0729 00000000 		.4byte	0
 15093 072d 00000000 		.4byte	0
 15094              	.LLST44:
 15095 0731 00000000 		.4byte	.LVL101
 15096 0735 4C000000 		.4byte	.LVL119
 15097 0739 0100     		.2byte	0x1
 15098 073b 50       		.byte	0x50
 15099 073c 4C000000 		.4byte	.LVL119
 15100 0740 4E000000 		.4byte	.LVL120
 15101 0744 0400     		.2byte	0x4
 15102 0746 F3       		.byte	0xf3
 15103 0747 01       		.uleb128 0x1
 15104 0748 50       		.byte	0x50
 15105 0749 9F       		.byte	0x9f
 15106 074a 4E000000 		.4byte	.LVL120
 15107 074e 50000000 		.4byte	.LVL121
 15108 0752 0100     		.2byte	0x1
 15109 0754 50       		.byte	0x50
 15110 0755 50000000 		.4byte	.LVL121
 15111 0759 56000000 		.4byte	.LFE28
 15112 075d 0400     		.2byte	0x4
 15113 075f F3       		.byte	0xf3
 15114 0760 01       		.uleb128 0x1
 15115 0761 50       		.byte	0x50
 15116 0762 9F       		.byte	0x9f
 15117 0763 00000000 		.4byte	0
 15118 0767 00000000 		.4byte	0
 15119              	.LLST45:
 15120 076b 20000000 		.4byte	.LVL106
 15121 076f 22000000 		.4byte	.LVL107
 15122 0773 0100     		.2byte	0x1
 15123 0775 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 391


 15124 0776 22000000 		.4byte	.LVL107
 15125 077a 48000000 		.4byte	.LVL117
 15126 077e 0100     		.2byte	0x1
 15127 0780 54       		.byte	0x54
 15128 0781 4E000000 		.4byte	.LVL120
 15129 0785 54000000 		.4byte	.LVL122
 15130 0789 0100     		.2byte	0x1
 15131 078b 54       		.byte	0x54
 15132 078c 54000000 		.4byte	.LVL122
 15133 0790 56000000 		.4byte	.LFE28
 15134 0794 0300     		.2byte	0x3
 15135 0796 71       		.byte	0x71
 15136 0797 01       		.sleb128 1
 15137 0798 9F       		.byte	0x9f
 15138 0799 00000000 		.4byte	0
 15139 079d 00000000 		.4byte	0
 15140              	.LLST46:
 15141 07a1 0A000000 		.4byte	.LVL102
 15142 07a5 0E000000 		.4byte	.LVL104
 15143 07a9 0100     		.2byte	0x1
 15144 07ab 52       		.byte	0x52
 15145 07ac 10000000 		.4byte	.LVL105
 15146 07b0 30000000 		.4byte	.LVL109
 15147 07b4 0100     		.2byte	0x1
 15148 07b6 52       		.byte	0x52
 15149 07b7 30000000 		.4byte	.LVL109
 15150 07bb 32000000 		.4byte	.LVL110
 15151 07bf 0300     		.2byte	0x3
 15152 07c1 72       		.byte	0x72
 15153 07c2 01       		.sleb128 1
 15154 07c3 9F       		.byte	0x9f
 15155 07c4 32000000 		.4byte	.LVL110
 15156 07c8 4A000000 		.4byte	.LVL118
 15157 07cc 0100     		.2byte	0x1
 15158 07ce 52       		.byte	0x52
 15159 07cf 4E000000 		.4byte	.LVL120
 15160 07d3 56000000 		.4byte	.LFE28
 15161 07d7 0100     		.2byte	0x1
 15162 07d9 52       		.byte	0x52
 15163 07da 00000000 		.4byte	0
 15164 07de 00000000 		.4byte	0
 15165              	.LLST47:
 15166 07e2 26000000 		.4byte	.LVL108
 15167 07e6 3A000000 		.4byte	.LVL112
 15168 07ea 0100     		.2byte	0x1
 15169 07ec 53       		.byte	0x53
 15170 07ed 3A000000 		.4byte	.LVL112
 15171 07f1 3C000000 		.4byte	.LVL113
 15172 07f5 0B00     		.2byte	0xb
 15173 07f7 71       		.byte	0x71
 15174 07f8 00       		.sleb128 0
 15175 07f9 94       		.byte	0x94
 15176 07fa 01       		.byte	0x1
 15177 07fb 08       		.byte	0x8
 15178 07fc FF       		.byte	0xff
 15179 07fd 1A       		.byte	0x1a
 15180 07fe 08       		.byte	0x8
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 392


 15181 07ff 30       		.byte	0x30
 15182 0800 1C       		.byte	0x1c
 15183 0801 9F       		.byte	0x9f
 15184 0802 3C000000 		.4byte	.LVL113
 15185 0806 40000000 		.4byte	.LVL114
 15186 080a 0100     		.2byte	0x1
 15187 080c 53       		.byte	0x53
 15188 080d 40000000 		.4byte	.LVL114
 15189 0811 42000000 		.4byte	.LVL115
 15190 0815 0B00     		.2byte	0xb
 15191 0817 71       		.byte	0x71
 15192 0818 00       		.sleb128 0
 15193 0819 94       		.byte	0x94
 15194 081a 01       		.byte	0x1
 15195 081b 08       		.byte	0x8
 15196 081c FF       		.byte	0xff
 15197 081d 1A       		.byte	0x1a
 15198 081e 08       		.byte	0x8
 15199 081f 30       		.byte	0x30
 15200 0820 1C       		.byte	0x1c
 15201 0821 9F       		.byte	0x9f
 15202 0822 42000000 		.4byte	.LVL115
 15203 0826 46000000 		.4byte	.LVL116
 15204 082a 0100     		.2byte	0x1
 15205 082c 53       		.byte	0x53
 15206 082d 46000000 		.4byte	.LVL116
 15207 0831 48000000 		.4byte	.LVL117
 15208 0835 0B00     		.2byte	0xb
 15209 0837 71       		.byte	0x71
 15210 0838 00       		.sleb128 0
 15211 0839 94       		.byte	0x94
 15212 083a 01       		.byte	0x1
 15213 083b 08       		.byte	0x8
 15214 083c FF       		.byte	0xff
 15215 083d 1A       		.byte	0x1a
 15216 083e 08       		.byte	0x8
 15217 083f 30       		.byte	0x30
 15218 0840 1C       		.byte	0x1c
 15219 0841 9F       		.byte	0x9f
 15220 0842 00000000 		.4byte	0
 15221 0846 00000000 		.4byte	0
 15222              	.LLST48:
 15223 084a 00000000 		.4byte	.LVL101
 15224 084e 30000000 		.4byte	.LVL109
 15225 0852 0300     		.2byte	0x3
 15226 0854 09       		.byte	0x9
 15227 0855 FF       		.byte	0xff
 15228 0856 9F       		.byte	0x9f
 15229 0857 30000000 		.4byte	.LVL109
 15230 085b 36000000 		.4byte	.LVL111
 15231 085f 0100     		.2byte	0x1
 15232 0861 53       		.byte	0x53
 15233 0862 36000000 		.4byte	.LVL111
 15234 0866 4A000000 		.4byte	.LVL118
 15235 086a 0300     		.2byte	0x3
 15236 086c 09       		.byte	0x9
 15237 086d FF       		.byte	0xff
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 393


 15238 086e 9F       		.byte	0x9f
 15239 086f 00000000 		.4byte	0
 15240 0873 00000000 		.4byte	0
 15241              	.LLST49:
 15242 0877 00000000 		.4byte	.LVL124
 15243 087b 1A000000 		.4byte	.LVL126
 15244 087f 0100     		.2byte	0x1
 15245 0881 50       		.byte	0x50
 15246 0882 1A000000 		.4byte	.LVL126
 15247 0886 24000000 		.4byte	.LVL128
 15248 088a 0100     		.2byte	0x1
 15249 088c 55       		.byte	0x55
 15250 088d 24000000 		.4byte	.LVL128
 15251 0891 2C000000 		.4byte	.LVL130
 15252 0895 0400     		.2byte	0x4
 15253 0897 F3       		.byte	0xf3
 15254 0898 01       		.uleb128 0x1
 15255 0899 50       		.byte	0x50
 15256 089a 9F       		.byte	0x9f
 15257 089b 2C000000 		.4byte	.LVL130
 15258 089f 34000000 		.4byte	.LFE31
 15259 08a3 0100     		.2byte	0x1
 15260 08a5 55       		.byte	0x55
 15261 08a6 00000000 		.4byte	0
 15262 08aa 00000000 		.4byte	0
 15263              	.LLST50:
 15264 08ae 00000000 		.4byte	.LVL124
 15265 08b2 12000000 		.4byte	.LVL125
 15266 08b6 0100     		.2byte	0x1
 15267 08b8 51       		.byte	0x51
 15268 08b9 12000000 		.4byte	.LVL125
 15269 08bd 34000000 		.4byte	.LFE31
 15270 08c1 0100     		.2byte	0x1
 15271 08c3 54       		.byte	0x54
 15272 08c4 00000000 		.4byte	0
 15273 08c8 00000000 		.4byte	0
 15274              	.LLST51:
 15275 08cc 28000000 		.4byte	.LVL129
 15276 08d0 2C000000 		.4byte	.LVL130
 15277 08d4 0200     		.2byte	0x2
 15278 08d6 39       		.byte	0x39
 15279 08d7 9F       		.byte	0x9f
 15280 08d8 30000000 		.4byte	.LVL131
 15281 08dc 32000000 		.4byte	.LVL132
 15282 08e0 0200     		.2byte	0x2
 15283 08e2 30       		.byte	0x30
 15284 08e3 9F       		.byte	0x9f
 15285 08e4 32000000 		.4byte	.LVL132
 15286 08e8 34000000 		.4byte	.LFE31
 15287 08ec 0100     		.2byte	0x1
 15288 08ee 50       		.byte	0x50
 15289 08ef 00000000 		.4byte	0
 15290 08f3 00000000 		.4byte	0
 15291              	.LLST52:
 15292 08f7 00000000 		.4byte	.LVL133
 15293 08fb 10000000 		.4byte	.LVL136
 15294 08ff 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 394


 15295 0901 50       		.byte	0x50
 15296 0902 10000000 		.4byte	.LVL136
 15297 0906 48000000 		.4byte	.LVL142
 15298 090a 0100     		.2byte	0x1
 15299 090c 54       		.byte	0x54
 15300 090d 48000000 		.4byte	.LVL142
 15301 0911 4A000000 		.4byte	.LVL143
 15302 0915 0100     		.2byte	0x1
 15303 0917 50       		.byte	0x50
 15304 0918 4A000000 		.4byte	.LVL143
 15305 091c 4C000000 		.4byte	.LVL144
 15306 0920 0400     		.2byte	0x4
 15307 0922 F3       		.byte	0xf3
 15308 0923 01       		.uleb128 0x1
 15309 0924 50       		.byte	0x50
 15310 0925 9F       		.byte	0x9f
 15311 0926 4C000000 		.4byte	.LVL144
 15312 092a 54000000 		.4byte	.LFE8
 15313 092e 0100     		.2byte	0x1
 15314 0930 54       		.byte	0x54
 15315 0931 00000000 		.4byte	0
 15316 0935 00000000 		.4byte	0
 15317              	.LLST53:
 15318 0939 0A000000 		.4byte	.LVL135
 15319 093d 48000000 		.4byte	.LVL142
 15320 0941 0100     		.2byte	0x1
 15321 0943 56       		.byte	0x56
 15322 0944 4C000000 		.4byte	.LVL144
 15323 0948 54000000 		.4byte	.LFE8
 15324 094c 0100     		.2byte	0x1
 15325 094e 56       		.byte	0x56
 15326 094f 00000000 		.4byte	0
 15327 0953 00000000 		.4byte	0
 15328              	.LLST54:
 15329 0957 2C000000 		.4byte	.LVL138
 15330 095b 48000000 		.4byte	.LVL142
 15331 095f 0100     		.2byte	0x1
 15332 0961 55       		.byte	0x55
 15333 0962 00000000 		.4byte	0
 15334 0966 00000000 		.4byte	0
 15335              	.LLST55:
 15336 096a 02000000 		.4byte	.LVL134
 15337 096e 52000000 		.4byte	.LVL146
 15338 0972 0200     		.2byte	0x2
 15339 0974 30       		.byte	0x30
 15340 0975 9F       		.byte	0x9f
 15341 0976 52000000 		.4byte	.LVL146
 15342 097a 54000000 		.4byte	.LFE8
 15343 097e 0100     		.2byte	0x1
 15344 0980 50       		.byte	0x50
 15345 0981 00000000 		.4byte	0
 15346 0985 00000000 		.4byte	0
 15347              	.LLST56:
 15348 0989 00000000 		.4byte	.LVL147
 15349 098d 0F000000 		.4byte	.LVL149-1
 15350 0991 0100     		.2byte	0x1
 15351 0993 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 395


 15352 0994 0F000000 		.4byte	.LVL149-1
 15353 0998 2E000000 		.4byte	.LVL153
 15354 099c 0100     		.2byte	0x1
 15355 099e 54       		.byte	0x54
 15356 099f 2E000000 		.4byte	.LVL153
 15357 09a3 30000000 		.4byte	.LVL154
 15358 09a7 0100     		.2byte	0x1
 15359 09a9 50       		.byte	0x50
 15360 09aa 30000000 		.4byte	.LVL154
 15361 09ae 34000000 		.4byte	.LFE9
 15362 09b2 0100     		.2byte	0x1
 15363 09b4 54       		.byte	0x54
 15364 09b5 00000000 		.4byte	0
 15365 09b9 00000000 		.4byte	0
 15366              	.LLST57:
 15367 09bd 00000000 		.4byte	.LVL147
 15368 09c1 0F000000 		.4byte	.LVL149-1
 15369 09c5 0100     		.2byte	0x1
 15370 09c7 51       		.byte	0x51
 15371 09c8 0F000000 		.4byte	.LVL149-1
 15372 09cc 2E000000 		.4byte	.LVL153
 15373 09d0 0100     		.2byte	0x1
 15374 09d2 55       		.byte	0x55
 15375 09d3 2E000000 		.4byte	.LVL153
 15376 09d7 30000000 		.4byte	.LVL154
 15377 09db 0100     		.2byte	0x1
 15378 09dd 51       		.byte	0x51
 15379 09de 30000000 		.4byte	.LVL154
 15380 09e2 34000000 		.4byte	.LFE9
 15381 09e6 0100     		.2byte	0x1
 15382 09e8 55       		.byte	0x55
 15383 09e9 00000000 		.4byte	0
 15384 09ed 00000000 		.4byte	0
 15385              	.LLST58:
 15386 09f1 06000000 		.4byte	.LVL148
 15387 09f5 10000000 		.4byte	.LVL149
 15388 09f9 0200     		.2byte	0x2
 15389 09fb 30       		.byte	0x30
 15390 09fc 9F       		.byte	0x9f
 15391 09fd 10000000 		.4byte	.LVL149
 15392 0a01 16000000 		.4byte	.LVL150
 15393 0a05 0100     		.2byte	0x1
 15394 0a07 50       		.byte	0x50
 15395 0a08 2A000000 		.4byte	.LVL152
 15396 0a0c 2E000000 		.4byte	.LVL153
 15397 0a10 0100     		.2byte	0x1
 15398 0a12 56       		.byte	0x56
 15399 0a13 2E000000 		.4byte	.LVL153
 15400 0a17 30000000 		.4byte	.LVL154
 15401 0a1b 0200     		.2byte	0x2
 15402 0a1d 30       		.byte	0x30
 15403 0a1e 9F       		.byte	0x9f
 15404 0a1f 30000000 		.4byte	.LVL154
 15405 0a23 34000000 		.4byte	.LFE9
 15406 0a27 0100     		.2byte	0x1
 15407 0a29 56       		.byte	0x56
 15408 0a2a 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 396


 15409 0a2e 00000000 		.4byte	0
 15410              	.LLST59:
 15411 0a32 00000000 		.4byte	.LVL155
 15412 0a36 11000000 		.4byte	.LVL156-1
 15413 0a3a 0100     		.2byte	0x1
 15414 0a3c 50       		.byte	0x50
 15415 0a3d 11000000 		.4byte	.LVL156-1
 15416 0a41 70000000 		.4byte	.LVL165
 15417 0a45 0100     		.2byte	0x1
 15418 0a47 54       		.byte	0x54
 15419 0a48 70000000 		.4byte	.LVL165
 15420 0a4c 7C000000 		.4byte	.LFE29
 15421 0a50 0400     		.2byte	0x4
 15422 0a52 F3       		.byte	0xf3
 15423 0a53 01       		.uleb128 0x1
 15424 0a54 50       		.byte	0x50
 15425 0a55 9F       		.byte	0x9f
 15426 0a56 00000000 		.4byte	0
 15427 0a5a 00000000 		.4byte	0
 15428              	.LLST60:
 15429 0a5e 00000000 		.4byte	.LVL155
 15430 0a62 11000000 		.4byte	.LVL156-1
 15431 0a66 0100     		.2byte	0x1
 15432 0a68 51       		.byte	0x51
 15433 0a69 11000000 		.4byte	.LVL156-1
 15434 0a6d 7C000000 		.4byte	.LFE29
 15435 0a71 0400     		.2byte	0x4
 15436 0a73 F3       		.byte	0xf3
 15437 0a74 01       		.uleb128 0x1
 15438 0a75 51       		.byte	0x51
 15439 0a76 9F       		.byte	0x9f
 15440 0a77 00000000 		.4byte	0
 15441 0a7b 00000000 		.4byte	0
 15442              	.LLST61:
 15443 0a7f 00000000 		.4byte	.LVL166
 15444 0a83 11000000 		.4byte	.LVL167-1
 15445 0a87 0100     		.2byte	0x1
 15446 0a89 50       		.byte	0x50
 15447 0a8a 11000000 		.4byte	.LVL167-1
 15448 0a8e D0020000 		.4byte	.LFE30
 15449 0a92 0400     		.2byte	0x4
 15450 0a94 F3       		.byte	0xf3
 15451 0a95 01       		.uleb128 0x1
 15452 0a96 50       		.byte	0x50
 15453 0a97 9F       		.byte	0x9f
 15454 0a98 00000000 		.4byte	0
 15455 0a9c 00000000 		.4byte	0
 15456              	.LLST62:
 15457 0aa0 00000000 		.4byte	.LVL166
 15458 0aa4 11000000 		.4byte	.LVL167-1
 15459 0aa8 0100     		.2byte	0x1
 15460 0aaa 51       		.byte	0x51
 15461 0aab 11000000 		.4byte	.LVL167-1
 15462 0aaf 78000000 		.4byte	.LVL177
 15463 0ab3 0100     		.2byte	0x1
 15464 0ab5 56       		.byte	0x56
 15465 0ab6 78000000 		.4byte	.LVL177
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 397


 15466 0aba 7A000000 		.4byte	.LVL178
 15467 0abe 0400     		.2byte	0x4
 15468 0ac0 F3       		.byte	0xf3
 15469 0ac1 01       		.uleb128 0x1
 15470 0ac2 51       		.byte	0x51
 15471 0ac3 9F       		.byte	0x9f
 15472 0ac4 7A000000 		.4byte	.LVL178
 15473 0ac8 A8000000 		.4byte	.LVL188
 15474 0acc 0100     		.2byte	0x1
 15475 0ace 56       		.byte	0x56
 15476 0acf A8000000 		.4byte	.LVL188
 15477 0ad3 6E020000 		.4byte	.LVL235
 15478 0ad7 0400     		.2byte	0x4
 15479 0ad9 F3       		.byte	0xf3
 15480 0ada 01       		.uleb128 0x1
 15481 0adb 51       		.byte	0x51
 15482 0adc 9F       		.byte	0x9f
 15483 0add 6E020000 		.4byte	.LVL235
 15484 0ae1 86020000 		.4byte	.LVL247
 15485 0ae5 0100     		.2byte	0x1
 15486 0ae7 56       		.byte	0x56
 15487 0ae8 86020000 		.4byte	.LVL247
 15488 0aec D0020000 		.4byte	.LFE30
 15489 0af0 0400     		.2byte	0x4
 15490 0af2 F3       		.byte	0xf3
 15491 0af3 01       		.uleb128 0x1
 15492 0af4 51       		.byte	0x51
 15493 0af5 9F       		.byte	0x9f
 15494 0af6 00000000 		.4byte	0
 15495 0afa 00000000 		.4byte	0
 15496              	.LLST63:
 15497 0afe 00000000 		.4byte	.LVL166
 15498 0b02 11000000 		.4byte	.LVL167-1
 15499 0b06 0100     		.2byte	0x1
 15500 0b08 52       		.byte	0x52
 15501 0b09 11000000 		.4byte	.LVL167-1
 15502 0b0d 2A000000 		.4byte	.LVL169
 15503 0b11 0400     		.2byte	0x4
 15504 0b13 F3       		.byte	0xf3
 15505 0b14 01       		.uleb128 0x1
 15506 0b15 52       		.byte	0x52
 15507 0b16 9F       		.byte	0x9f
 15508 0b17 2A000000 		.4byte	.LVL169
 15509 0b1b 4A010000 		.4byte	.LVL204
 15510 0b1f 0100     		.2byte	0x1
 15511 0b21 57       		.byte	0x57
 15512 0b22 6E020000 		.4byte	.LVL235
 15513 0b26 76020000 		.4byte	.LVL239
 15514 0b2a 0400     		.2byte	0x4
 15515 0b2c F3       		.byte	0xf3
 15516 0b2d 01       		.uleb128 0x1
 15517 0b2e 52       		.byte	0x52
 15518 0b2f 9F       		.byte	0x9f
 15519 0b30 76020000 		.4byte	.LVL239
 15520 0b34 A2020000 		.4byte	.LVL254
 15521 0b38 0100     		.2byte	0x1
 15522 0b3a 57       		.byte	0x57
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 398


 15523 0b3b 00000000 		.4byte	0
 15524 0b3f 00000000 		.4byte	0
 15525              	.LLST64:
 15526 0b43 72000000 		.4byte	.LVL176
 15527 0b47 7A000000 		.4byte	.LVL178
 15528 0b4b 0100     		.2byte	0x1
 15529 0b4d 50       		.byte	0x50
 15530 0b4e A0000000 		.4byte	.LVL186
 15531 0b52 A2000000 		.4byte	.LVL187
 15532 0b56 0100     		.2byte	0x1
 15533 0b58 50       		.byte	0x50
 15534 0b59 C0000000 		.4byte	.LVL191
 15535 0b5d DA000000 		.4byte	.LVL194
 15536 0b61 0100     		.2byte	0x1
 15537 0b63 50       		.byte	0x50
 15538 0b64 80010000 		.4byte	.LVL213
 15539 0b68 8E010000 		.4byte	.LVL214
 15540 0b6c 0200     		.2byte	0x2
 15541 0b6e 33       		.byte	0x33
 15542 0b6f 9F       		.byte	0x9f
 15543 0b70 8E010000 		.4byte	.LVL214
 15544 0b74 6E020000 		.4byte	.LVL235
 15545 0b78 0100     		.2byte	0x1
 15546 0b7a 57       		.byte	0x57
 15547 0b7b 86020000 		.4byte	.LVL247
 15548 0b7f 88020000 		.4byte	.LVL248
 15549 0b83 0100     		.2byte	0x1
 15550 0b85 50       		.byte	0x50
 15551 0b86 8A020000 		.4byte	.LVL249
 15552 0b8a 8C020000 		.4byte	.LVL250
 15553 0b8e 0100     		.2byte	0x1
 15554 0b90 50       		.byte	0x50
 15555 0b91 AE020000 		.4byte	.LVL260
 15556 0b95 BC020000 		.4byte	.LVL264
 15557 0b99 0100     		.2byte	0x1
 15558 0b9b 57       		.byte	0x57
 15559 0b9c 00000000 		.4byte	0
 15560 0ba0 00000000 		.4byte	0
 15561              	.LLST65:
 15562 0ba4 7E000000 		.4byte	.LVL179
 15563 0ba8 86000000 		.4byte	.LVL180
 15564 0bac 0400     		.2byte	0x4
 15565 0bae 70       		.byte	0x70
 15566 0baf EE03     		.sleb128 494
 15567 0bb1 9F       		.byte	0x9f
 15568 0bb2 86000000 		.4byte	.LVL180
 15569 0bb6 8A000000 		.4byte	.LVL181
 15570 0bba 0100     		.2byte	0x1
 15571 0bbc 50       		.byte	0x50
 15572 0bbd 8A000000 		.4byte	.LVL181
 15573 0bc1 8D000000 		.4byte	.LVL182-1
 15574 0bc5 0300     		.2byte	0x3
 15575 0bc7 70       		.byte	0x70
 15576 0bc8 78       		.sleb128 -8
 15577 0bc9 9F       		.byte	0x9f
 15578 0bca 8D000000 		.4byte	.LVL182-1
 15579 0bce 90000000 		.4byte	.LVL183
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 399


 15580 0bd2 0B00     		.2byte	0xb
 15581 0bd4 75       		.byte	0x75
 15582 0bd5 00       		.sleb128 0
 15583 0bd6 34       		.byte	0x34
 15584 0bd7 24       		.byte	0x24
 15585 0bd8 74       		.byte	0x74
 15586 0bd9 00       		.sleb128 0
 15587 0bda 22       		.byte	0x22
 15588 0bdb 23       		.byte	0x23
 15589 0bdc EE03     		.uleb128 0x1ee
 15590 0bde 9F       		.byte	0x9f
 15591 0bdf 90000000 		.4byte	.LVL183
 15592 0be3 92000000 		.4byte	.LVL184
 15593 0be7 0100     		.2byte	0x1
 15594 0be9 50       		.byte	0x50
 15595 0bea 92000000 		.4byte	.LVL184
 15596 0bee 9E000000 		.4byte	.LVL185
 15597 0bf2 0B00     		.2byte	0xb
 15598 0bf4 75       		.byte	0x75
 15599 0bf5 00       		.sleb128 0
 15600 0bf6 34       		.byte	0x34
 15601 0bf7 24       		.byte	0x24
 15602 0bf8 74       		.byte	0x74
 15603 0bf9 00       		.sleb128 0
 15604 0bfa 22       		.byte	0x22
 15605 0bfb 23       		.byte	0x23
 15606 0bfc EE03     		.uleb128 0x1ee
 15607 0bfe 9F       		.byte	0x9f
 15608 0bff 9E000000 		.4byte	.LVL185
 15609 0c03 A0000000 		.4byte	.LVL186
 15610 0c07 0B00     		.2byte	0xb
 15611 0c09 75       		.byte	0x75
 15612 0c0a 7F       		.sleb128 -1
 15613 0c0b 34       		.byte	0x34
 15614 0c0c 24       		.byte	0x24
 15615 0c0d 74       		.byte	0x74
 15616 0c0e 00       		.sleb128 0
 15617 0c0f 22       		.byte	0x22
 15618 0c10 23       		.byte	0x23
 15619 0c11 EE03     		.uleb128 0x1ee
 15620 0c13 9F       		.byte	0x9f
 15621 0c14 00000000 		.4byte	0
 15622 0c18 00000000 		.4byte	0
 15623              	.LLST66:
 15624 0c1c 12000000 		.4byte	.LVL167
 15625 0c20 30000000 		.4byte	.LVL170
 15626 0c24 0100     		.2byte	0x1
 15627 0c26 50       		.byte	0x50
 15628 0c27 30000000 		.4byte	.LVL170
 15629 0c2b 7A000000 		.4byte	.LVL178
 15630 0c2f 0100     		.2byte	0x1
 15631 0c31 55       		.byte	0x55
 15632 0c32 A0000000 		.4byte	.LVL186
 15633 0c36 A2000000 		.4byte	.LVL187
 15634 0c3a 0100     		.2byte	0x1
 15635 0c3c 55       		.byte	0x55
 15636 0c3d 6E020000 		.4byte	.LVL235
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 400


 15637 0c41 70020000 		.4byte	.LVL236
 15638 0c45 0100     		.2byte	0x1
 15639 0c47 50       		.byte	0x50
 15640 0c48 70020000 		.4byte	.LVL236
 15641 0c4c 72020000 		.4byte	.LVL237
 15642 0c50 0100     		.2byte	0x1
 15643 0c52 55       		.byte	0x55
 15644 0c53 72020000 		.4byte	.LVL237
 15645 0c57 74020000 		.4byte	.LVL238
 15646 0c5b 0100     		.2byte	0x1
 15647 0c5d 50       		.byte	0x50
 15648 0c5e 74020000 		.4byte	.LVL238
 15649 0c62 86020000 		.4byte	.LVL247
 15650 0c66 0100     		.2byte	0x1
 15651 0c68 55       		.byte	0x55
 15652 0c69 00000000 		.4byte	0
 15653 0c6d 00000000 		.4byte	0
 15654              	.LLST67:
 15655 0c71 34000000 		.4byte	.LVL171
 15656 0c75 4A000000 		.4byte	.LVL172
 15657 0c79 0100     		.2byte	0x1
 15658 0c7b 50       		.byte	0x50
 15659 0c7c 58000000 		.4byte	.LVL173
 15660 0c80 6C000000 		.4byte	.LVL175
 15661 0c84 0100     		.2byte	0x1
 15662 0c86 50       		.byte	0x50
 15663 0c87 76020000 		.4byte	.LVL239
 15664 0c8b 78020000 		.4byte	.LVL240
 15665 0c8f 0100     		.2byte	0x1
 15666 0c91 50       		.byte	0x50
 15667 0c92 7A020000 		.4byte	.LVL241
 15668 0c96 7C020000 		.4byte	.LVL242
 15669 0c9a 0100     		.2byte	0x1
 15670 0c9c 50       		.byte	0x50
 15671 0c9d 7E020000 		.4byte	.LVL243
 15672 0ca1 80020000 		.4byte	.LVL244
 15673 0ca5 0100     		.2byte	0x1
 15674 0ca7 50       		.byte	0x50
 15675 0ca8 82020000 		.4byte	.LVL245
 15676 0cac 84020000 		.4byte	.LVL246
 15677 0cb0 0100     		.2byte	0x1
 15678 0cb2 50       		.byte	0x50
 15679 0cb3 00000000 		.4byte	0
 15680 0cb7 00000000 		.4byte	0
 15681              	.LLST68:
 15682 0cbb 6A000000 		.4byte	.LVL174
 15683 0cbf A8000000 		.4byte	.LVL188
 15684 0cc3 0200     		.2byte	0x2
 15685 0cc5 30       		.byte	0x30
 15686 0cc6 9F       		.byte	0x9f
 15687 0cc7 B2000000 		.4byte	.LVL189
 15688 0ccb 6E020000 		.4byte	.LVL235
 15689 0ccf 0100     		.2byte	0x1
 15690 0cd1 56       		.byte	0x56
 15691 0cd2 86020000 		.4byte	.LVL247
 15692 0cd6 BC020000 		.4byte	.LVL264
 15693 0cda 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 401


 15694 0cdc 56       		.byte	0x56
 15695 0cdd 00000000 		.4byte	0
 15696 0ce1 00000000 		.4byte	0
 15697              	.LLST69:
 15698 0ce5 F0000000 		.4byte	.LVL197
 15699 0ce9 F6000000 		.4byte	.LVL198
 15700 0ced 0100     		.2byte	0x1
 15701 0cef 50       		.byte	0x50
 15702 0cf0 F6000000 		.4byte	.LVL198
 15703 0cf4 FC000000 		.4byte	.LVL200
 15704 0cf8 0100     		.2byte	0x1
 15705 0cfa 58       		.byte	0x58
 15706 0cfb FC000000 		.4byte	.LVL200
 15707 0cff 18010000 		.4byte	.LVL201
 15708 0d03 0100     		.2byte	0x1
 15709 0d05 50       		.byte	0x50
 15710 0d06 18010000 		.4byte	.LVL201
 15711 0d0a 6E020000 		.4byte	.LVL235
 15712 0d0e 0100     		.2byte	0x1
 15713 0d10 59       		.byte	0x59
 15714 0d11 92020000 		.4byte	.LVL251
 15715 0d15 94020000 		.4byte	.LVL252
 15716 0d19 0100     		.2byte	0x1
 15717 0d1b 50       		.byte	0x50
 15718 0d1c 94020000 		.4byte	.LVL252
 15719 0d20 96020000 		.4byte	.LVL253
 15720 0d24 0100     		.2byte	0x1
 15721 0d26 58       		.byte	0x58
 15722 0d27 96020000 		.4byte	.LVL253
 15723 0d2b BC020000 		.4byte	.LVL264
 15724 0d2f 0100     		.2byte	0x1
 15725 0d31 59       		.byte	0x59
 15726 0d32 00000000 		.4byte	0
 15727 0d36 00000000 		.4byte	0
 15728              	.LLST70:
 15729 0d3a 4A010000 		.4byte	.LVL204
 15730 0d3e 50010000 		.4byte	.LVL205
 15731 0d42 0100     		.2byte	0x1
 15732 0d44 50       		.byte	0x50
 15733 0d45 50010000 		.4byte	.LVL205
 15734 0d49 56010000 		.4byte	.LVL207
 15735 0d4d 0100     		.2byte	0x1
 15736 0d4f 57       		.byte	0x57
 15737 0d50 56010000 		.4byte	.LVL207
 15738 0d54 5A010000 		.4byte	.LVL208
 15739 0d58 0100     		.2byte	0x1
 15740 0d5a 50       		.byte	0x50
 15741 0d5b 5A010000 		.4byte	.LVL208
 15742 0d5f 76010000 		.4byte	.LVL211
 15743 0d63 0100     		.2byte	0x1
 15744 0d65 57       		.byte	0x57
 15745 0d66 A2020000 		.4byte	.LVL254
 15746 0d6a AA020000 		.4byte	.LVL258
 15747 0d6e 0100     		.2byte	0x1
 15748 0d70 57       		.byte	0x57
 15749 0d71 00000000 		.4byte	0
 15750 0d75 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 402


 15751              	.LLST71:
 15752 0d79 6E010000 		.4byte	.LVL210
 15753 0d7d A4010000 		.4byte	.LVL217
 15754 0d81 0100     		.2byte	0x1
 15755 0d83 52       		.byte	0x52
 15756 0d84 A4010000 		.4byte	.LVL217
 15757 0d88 AE010000 		.4byte	.LVL218
 15758 0d8c 0B00     		.2byte	0xb
 15759 0d8e 7A       		.byte	0x7a
 15760 0d8f 00       		.sleb128 0
 15761 0d90 34       		.byte	0x34
 15762 0d91 25       		.byte	0x25
 15763 0d92 70       		.byte	0x70
 15764 0d93 00       		.sleb128 0
 15765 0d94 22       		.byte	0x22
 15766 0d95 79       		.byte	0x79
 15767 0d96 00       		.sleb128 0
 15768 0d97 22       		.byte	0x22
 15769 0d98 9F       		.byte	0x9f
 15770 0d99 CA010000 		.4byte	.LVL222
 15771 0d9d E8010000 		.4byte	.LVL226
 15772 0da1 0B00     		.2byte	0xb
 15773 0da3 7A       		.byte	0x7a
 15774 0da4 00       		.sleb128 0
 15775 0da5 34       		.byte	0x34
 15776 0da6 25       		.byte	0x25
 15777 0da7 70       		.byte	0x70
 15778 0da8 00       		.sleb128 0
 15779 0da9 22       		.byte	0x22
 15780 0daa 79       		.byte	0x79
 15781 0dab 00       		.sleb128 0
 15782 0dac 22       		.byte	0x22
 15783 0dad 9F       		.byte	0x9f
 15784 0dae A6020000 		.4byte	.LVL256
 15785 0db2 AE020000 		.4byte	.LVL260
 15786 0db6 0100     		.2byte	0x1
 15787 0db8 52       		.byte	0x52
 15788 0db9 B6020000 		.4byte	.LVL261
 15789 0dbd B8020000 		.4byte	.LVL262
 15790 0dc1 0B00     		.2byte	0xb
 15791 0dc3 7A       		.byte	0x7a
 15792 0dc4 00       		.sleb128 0
 15793 0dc5 34       		.byte	0x34
 15794 0dc6 25       		.byte	0x25
 15795 0dc7 70       		.byte	0x70
 15796 0dc8 00       		.sleb128 0
 15797 0dc9 22       		.byte	0x22
 15798 0dca 79       		.byte	0x79
 15799 0dcb 00       		.sleb128 0
 15800 0dcc 22       		.byte	0x22
 15801 0dcd 9F       		.byte	0x9f
 15802 0dce 00000000 		.4byte	0
 15803 0dd2 00000000 		.4byte	0
 15804              	.LLST72:
 15805 0dd6 7A010000 		.4byte	.LVL212
 15806 0dda 9A010000 		.4byte	.LVL216
 15807 0dde 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 403


 15808 0de0 55       		.byte	0x55
 15809 0de1 9A010000 		.4byte	.LVL216
 15810 0de5 C8010000 		.4byte	.LVL221
 15811 0de9 0300     		.2byte	0x3
 15812 0deb 75       		.byte	0x75
 15813 0dec 7E       		.sleb128 -2
 15814 0ded 9F       		.byte	0x9f
 15815 0dee CA010000 		.4byte	.LVL222
 15816 0df2 DA010000 		.4byte	.LVL223
 15817 0df6 0300     		.2byte	0x3
 15818 0df8 75       		.byte	0x75
 15819 0df9 7E       		.sleb128 -2
 15820 0dfa 9F       		.byte	0x9f
 15821 0dfb DA010000 		.4byte	.LVL223
 15822 0dff DC010000 		.4byte	.LVL224
 15823 0e03 0600     		.2byte	0x6
 15824 0e05 74       		.byte	0x74
 15825 0e06 14       		.sleb128 20
 15826 0e07 06       		.byte	0x6
 15827 0e08 32       		.byte	0x32
 15828 0e09 1C       		.byte	0x1c
 15829 0e0a 9F       		.byte	0x9f
 15830 0e0b DC010000 		.4byte	.LVL224
 15831 0e0f E4010000 		.4byte	.LVL225
 15832 0e13 0300     		.2byte	0x3
 15833 0e15 75       		.byte	0x75
 15834 0e16 7E       		.sleb128 -2
 15835 0e17 9F       		.byte	0x9f
 15836 0e18 E4010000 		.4byte	.LVL225
 15837 0e1c E8010000 		.4byte	.LVL226
 15838 0e20 0600     		.2byte	0x6
 15839 0e22 74       		.byte	0x74
 15840 0e23 14       		.sleb128 20
 15841 0e24 06       		.byte	0x6
 15842 0e25 32       		.byte	0x32
 15843 0e26 1C       		.byte	0x1c
 15844 0e27 9F       		.byte	0x9f
 15845 0e28 AA020000 		.4byte	.LVL258
 15846 0e2c AE020000 		.4byte	.LVL260
 15847 0e30 0100     		.2byte	0x1
 15848 0e32 55       		.byte	0x55
 15849 0e33 AE020000 		.4byte	.LVL260
 15850 0e37 BA020000 		.4byte	.LVL263
 15851 0e3b 0300     		.2byte	0x3
 15852 0e3d 75       		.byte	0x75
 15853 0e3e 7E       		.sleb128 -2
 15854 0e3f 9F       		.byte	0x9f
 15855 0e40 00000000 		.4byte	0
 15856 0e44 00000000 		.4byte	0
 15857              	.LLST73:
 15858 0e48 C8010000 		.4byte	.LVL221
 15859 0e4c CA010000 		.4byte	.LVL222
 15860 0e50 0100     		.2byte	0x1
 15861 0e52 55       		.byte	0x55
 15862 0e53 E8010000 		.4byte	.LVL226
 15863 0e57 EC010000 		.4byte	.LVL227
 15864 0e5b 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 404


 15865 0e5d 55       		.byte	0x55
 15866 0e5e EC010000 		.4byte	.LVL227
 15867 0e62 6E020000 		.4byte	.LVL235
 15868 0e66 0400     		.2byte	0x4
 15869 0e68 75       		.byte	0x75
 15870 0e69 817C     		.sleb128 -511
 15871 0e6b 9F       		.byte	0x9f
 15872 0e6c BA020000 		.4byte	.LVL263
 15873 0e70 BC020000 		.4byte	.LVL264
 15874 0e74 0400     		.2byte	0x4
 15875 0e76 75       		.byte	0x75
 15876 0e77 817C     		.sleb128 -511
 15877 0e79 9F       		.byte	0x9f
 15878 0e7a 00000000 		.4byte	0
 15879 0e7e 00000000 		.4byte	0
 15880              	.LLST74:
 15881 0e82 5E010000 		.4byte	.LVL209
 15882 0e86 AE010000 		.4byte	.LVL218
 15883 0e8a 0100     		.2byte	0x1
 15884 0e8c 50       		.byte	0x50
 15885 0e8d CA010000 		.4byte	.LVL222
 15886 0e91 E8010000 		.4byte	.LVL226
 15887 0e95 0100     		.2byte	0x1
 15888 0e97 50       		.byte	0x50
 15889 0e98 A2020000 		.4byte	.LVL254
 15890 0e9c A4020000 		.4byte	.LVL255
 15891 0ea0 0100     		.2byte	0x1
 15892 0ea2 50       		.byte	0x50
 15893 0ea3 A6020000 		.4byte	.LVL256
 15894 0ea7 A8020000 		.4byte	.LVL257
 15895 0eab 0100     		.2byte	0x1
 15896 0ead 50       		.byte	0x50
 15897 0eae AA020000 		.4byte	.LVL258
 15898 0eb2 AC020000 		.4byte	.LVL259
 15899 0eb6 0100     		.2byte	0x1
 15900 0eb8 50       		.byte	0x50
 15901 0eb9 B6020000 		.4byte	.LVL261
 15902 0ebd B8020000 		.4byte	.LVL262
 15903 0ec1 0100     		.2byte	0x1
 15904 0ec3 50       		.byte	0x50
 15905 0ec4 00000000 		.4byte	0
 15906 0ec8 00000000 		.4byte	0
 15907              	.LLST75:
 15908 0ecc 1E000000 		.4byte	.LVL168
 15909 0ed0 6E020000 		.4byte	.LVL235
 15910 0ed4 0100     		.2byte	0x1
 15911 0ed6 54       		.byte	0x54
 15912 0ed7 72020000 		.4byte	.LVL237
 15913 0edb BC020000 		.4byte	.LVL264
 15914 0edf 0100     		.2byte	0x1
 15915 0ee1 54       		.byte	0x54
 15916 0ee2 00000000 		.4byte	0
 15917 0ee6 00000000 		.4byte	0
 15918              	.LLST76:
 15919 0eea 7A000000 		.4byte	.LVL178
 15920 0eee A0000000 		.4byte	.LVL186
 15921 0ef2 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 405


 15922 0ef4 55       		.byte	0x55
 15923 0ef5 A2000000 		.4byte	.LVL187
 15924 0ef9 CA000000 		.4byte	.LVL193
 15925 0efd 0100     		.2byte	0x1
 15926 0eff 55       		.byte	0x55
 15927 0f00 00000000 		.4byte	0
 15928 0f04 00000000 		.4byte	0
 15929              	.LLST77:
 15930 0f08 00000000 		.4byte	.LVL265
 15931 0f0c 2F000000 		.4byte	.LVL270-1
 15932 0f10 0100     		.2byte	0x1
 15933 0f12 50       		.byte	0x50
 15934 0f13 2F000000 		.4byte	.LVL270-1
 15935 0f17 A2000000 		.4byte	.LVL282
 15936 0f1b 0100     		.2byte	0x1
 15937 0f1d 55       		.byte	0x55
 15938 0f1e A2000000 		.4byte	.LVL282
 15939 0f22 AB000000 		.4byte	.LVL284-1
 15940 0f26 0100     		.2byte	0x1
 15941 0f28 50       		.byte	0x50
 15942 0f29 AB000000 		.4byte	.LVL284-1
 15943 0f2d C6000000 		.4byte	.LVL287
 15944 0f31 0100     		.2byte	0x1
 15945 0f33 55       		.byte	0x55
 15946 0f34 C6000000 		.4byte	.LVL287
 15947 0f38 CF000000 		.4byte	.LVL289-1
 15948 0f3c 0100     		.2byte	0x1
 15949 0f3e 50       		.byte	0x50
 15950 0f3f CF000000 		.4byte	.LVL289-1
 15951 0f43 FA000000 		.4byte	.LVL297
 15952 0f47 0100     		.2byte	0x1
 15953 0f49 55       		.byte	0x55
 15954 0f4a FA000000 		.4byte	.LVL297
 15955 0f4e 04010000 		.4byte	.LVL298
 15956 0f52 0100     		.2byte	0x1
 15957 0f54 50       		.byte	0x50
 15958 0f55 04010000 		.4byte	.LVL298
 15959 0f59 0A010000 		.4byte	.LFE13
 15960 0f5d 0400     		.2byte	0x4
 15961 0f5f F3       		.byte	0xf3
 15962 0f60 01       		.uleb128 0x1
 15963 0f61 50       		.byte	0x50
 15964 0f62 9F       		.byte	0x9f
 15965 0f63 00000000 		.4byte	0
 15966 0f67 00000000 		.4byte	0
 15967              	.LLST78:
 15968 0f6b 00000000 		.4byte	.LVL265
 15969 0f6f 28000000 		.4byte	.LVL269
 15970 0f73 0100     		.2byte	0x1
 15971 0f75 51       		.byte	0x51
 15972 0f76 28000000 		.4byte	.LVL269
 15973 0f7a 42000000 		.4byte	.LVL273
 15974 0f7e 0100     		.2byte	0x1
 15975 0f80 54       		.byte	0x54
 15976 0f81 42000000 		.4byte	.LVL273
 15977 0f85 A2000000 		.4byte	.LVL282
 15978 0f89 0400     		.2byte	0x4
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 406


 15979 0f8b F3       		.byte	0xf3
 15980 0f8c 01       		.uleb128 0x1
 15981 0f8d 51       		.byte	0x51
 15982 0f8e 9F       		.byte	0x9f
 15983 0f8f A2000000 		.4byte	.LVL282
 15984 0f93 A4000000 		.4byte	.LVL283
 15985 0f97 0100     		.2byte	0x1
 15986 0f99 51       		.byte	0x51
 15987 0f9a A4000000 		.4byte	.LVL283
 15988 0f9e C6000000 		.4byte	.LVL287
 15989 0fa2 0100     		.2byte	0x1
 15990 0fa4 54       		.byte	0x54
 15991 0fa5 C6000000 		.4byte	.LVL287
 15992 0fa9 C8000000 		.4byte	.LVL288
 15993 0fad 0100     		.2byte	0x1
 15994 0faf 51       		.byte	0x51
 15995 0fb0 C8000000 		.4byte	.LVL288
 15996 0fb4 DA000000 		.4byte	.LVL291
 15997 0fb8 0100     		.2byte	0x1
 15998 0fba 54       		.byte	0x54
 15999 0fbb DA000000 		.4byte	.LVL291
 16000 0fbf FA000000 		.4byte	.LVL297
 16001 0fc3 0400     		.2byte	0x4
 16002 0fc5 F3       		.byte	0xf3
 16003 0fc6 01       		.uleb128 0x1
 16004 0fc7 51       		.byte	0x51
 16005 0fc8 9F       		.byte	0x9f
 16006 0fc9 FA000000 		.4byte	.LVL297
 16007 0fcd 04010000 		.4byte	.LVL298
 16008 0fd1 0100     		.2byte	0x1
 16009 0fd3 51       		.byte	0x51
 16010 0fd4 04010000 		.4byte	.LVL298
 16011 0fd8 0A010000 		.4byte	.LFE13
 16012 0fdc 0400     		.2byte	0x4
 16013 0fde F3       		.byte	0xf3
 16014 0fdf 01       		.uleb128 0x1
 16015 0fe0 51       		.byte	0x51
 16016 0fe1 9F       		.byte	0x9f
 16017 0fe2 00000000 		.4byte	0
 16018 0fe6 00000000 		.4byte	0
 16019              	.LLST79:
 16020 0fea 00000000 		.4byte	.LVL265
 16021 0fee 2F000000 		.4byte	.LVL270-1
 16022 0ff2 0100     		.2byte	0x1
 16023 0ff4 52       		.byte	0x52
 16024 0ff5 2F000000 		.4byte	.LVL270-1
 16025 0ff9 82000000 		.4byte	.LVL278
 16026 0ffd 0100     		.2byte	0x1
 16027 0fff 57       		.byte	0x57
 16028 1000 82000000 		.4byte	.LVL278
 16029 1004 84000000 		.4byte	.LVL279
 16030 1008 0400     		.2byte	0x4
 16031 100a F3       		.byte	0xf3
 16032 100b 01       		.uleb128 0x1
 16033 100c 52       		.byte	0x52
 16034 100d 9F       		.byte	0x9f
 16035 100e 84000000 		.4byte	.LVL279
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 407


 16036 1012 94000000 		.4byte	.LVL280
 16037 1016 0100     		.2byte	0x1
 16038 1018 57       		.byte	0x57
 16039 1019 94000000 		.4byte	.LVL280
 16040 101d A2000000 		.4byte	.LVL282
 16041 1021 0400     		.2byte	0x4
 16042 1023 F3       		.byte	0xf3
 16043 1024 01       		.uleb128 0x1
 16044 1025 52       		.byte	0x52
 16045 1026 9F       		.byte	0x9f
 16046 1027 A2000000 		.4byte	.LVL282
 16047 102b AB000000 		.4byte	.LVL284-1
 16048 102f 0100     		.2byte	0x1
 16049 1031 52       		.byte	0x52
 16050 1032 AB000000 		.4byte	.LVL284-1
 16051 1036 C6000000 		.4byte	.LVL287
 16052 103a 0100     		.2byte	0x1
 16053 103c 57       		.byte	0x57
 16054 103d C6000000 		.4byte	.LVL287
 16055 1041 CF000000 		.4byte	.LVL289-1
 16056 1045 0100     		.2byte	0x1
 16057 1047 52       		.byte	0x52
 16058 1048 CF000000 		.4byte	.LVL289-1
 16059 104c D8000000 		.4byte	.LVL290
 16060 1050 0100     		.2byte	0x1
 16061 1052 57       		.byte	0x57
 16062 1053 D8000000 		.4byte	.LVL290
 16063 1057 EC000000 		.4byte	.LVL294
 16064 105b 0400     		.2byte	0x4
 16065 105d F3       		.byte	0xf3
 16066 105e 01       		.uleb128 0x1
 16067 105f 52       		.byte	0x52
 16068 1060 9F       		.byte	0x9f
 16069 1061 EC000000 		.4byte	.LVL294
 16070 1065 F0000000 		.4byte	.LVL295
 16071 1069 0600     		.2byte	0x6
 16072 106b 77       		.byte	0x77
 16073 106c 00       		.sleb128 0
 16074 106d 71       		.byte	0x71
 16075 106e 00       		.sleb128 0
 16076 106f 21       		.byte	0x21
 16077 1070 9F       		.byte	0x9f
 16078 1071 F0000000 		.4byte	.LVL295
 16079 1075 F3000000 		.4byte	.LVL296-1
 16080 1079 0100     		.2byte	0x1
 16081 107b 51       		.byte	0x51
 16082 107c FA000000 		.4byte	.LVL297
 16083 1080 04010000 		.4byte	.LVL298
 16084 1084 0100     		.2byte	0x1
 16085 1086 52       		.byte	0x52
 16086 1087 00000000 		.4byte	0
 16087 108b 00000000 		.4byte	0
 16088              	.LLST80:
 16089 108f 22000000 		.4byte	.LVL267
 16090 1093 26000000 		.4byte	.LVL268
 16091 1097 0100     		.2byte	0x1
 16092 1099 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 408


 16093 109a 26000000 		.4byte	.LVL268
 16094 109e 3A000000 		.4byte	.LVL271
 16095 10a2 0100     		.2byte	0x1
 16096 10a4 58       		.byte	0x58
 16097 10a5 3A000000 		.4byte	.LVL271
 16098 10a9 7C000000 		.4byte	.LVL277
 16099 10ad 0100     		.2byte	0x1
 16100 10af 59       		.byte	0x59
 16101 10b0 7C000000 		.4byte	.LVL277
 16102 10b4 A2000000 		.4byte	.LVL282
 16103 10b8 0C00     		.2byte	0xc
 16104 10ba F3       		.byte	0xf3
 16105 10bb 01       		.uleb128 0x1
 16106 10bc 51       		.byte	0x51
 16107 10bd 31       		.byte	0x31
 16108 10be 25       		.byte	0x25
 16109 10bf F3       		.byte	0xf3
 16110 10c0 01       		.uleb128 0x1
 16111 10c1 51       		.byte	0x51
 16112 10c2 22       		.byte	0x22
 16113 10c3 23       		.byte	0x23
 16114 10c4 01       		.uleb128 0x1
 16115 10c5 9F       		.byte	0x9f
 16116 10c6 00000000 		.4byte	0
 16117 10ca 00000000 		.4byte	0
 16118              	.LLST81:
 16119 10ce 3E000000 		.4byte	.LVL272
 16120 10d2 5E000000 		.4byte	.LVL274
 16121 10d6 0800     		.2byte	0x8
 16122 10d8 75       		.byte	0x75
 16123 10d9 00       		.sleb128 0
 16124 10da 78       		.byte	0x78
 16125 10db 00       		.sleb128 0
 16126 10dc 22       		.byte	0x22
 16127 10dd 23       		.byte	0x23
 16128 10de 30       		.uleb128 0x30
 16129 10df 9F       		.byte	0x9f
 16130 10e0 5E000000 		.4byte	.LVL274
 16131 10e4 7C000000 		.4byte	.LVL277
 16132 10e8 0E00     		.2byte	0xe
 16133 10ea 79       		.byte	0x79
 16134 10eb 7F       		.sleb128 -1
 16135 10ec 09       		.byte	0x9
 16136 10ed FB       		.byte	0xfb
 16137 10ee 24       		.byte	0x24
 16138 10ef 09       		.byte	0x9
 16139 10f0 FB       		.byte	0xfb
 16140 10f1 25       		.byte	0x25
 16141 10f2 75       		.byte	0x75
 16142 10f3 00       		.sleb128 0
 16143 10f4 22       		.byte	0x22
 16144 10f5 23       		.byte	0x23
 16145 10f6 30       		.uleb128 0x30
 16146 10f7 9F       		.byte	0x9f
 16147 10f8 7C000000 		.4byte	.LVL277
 16148 10fc 98000000 		.4byte	.LVL281
 16149 1100 0800     		.2byte	0x8
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 409


 16150 1102 75       		.byte	0x75
 16151 1103 00       		.sleb128 0
 16152 1104 79       		.byte	0x79
 16153 1105 00       		.sleb128 0
 16154 1106 22       		.byte	0x22
 16155 1107 23       		.byte	0x23
 16156 1108 30       		.uleb128 0x30
 16157 1109 9F       		.byte	0x9f
 16158 110a 98000000 		.4byte	.LVL281
 16159 110e A2000000 		.4byte	.LVL282
 16160 1112 1700     		.2byte	0x17
 16161 1114 F3       		.byte	0xf3
 16162 1115 01       		.uleb128 0x1
 16163 1116 51       		.byte	0x51
 16164 1117 31       		.byte	0x31
 16165 1118 25       		.byte	0x25
 16166 1119 F3       		.byte	0xf3
 16167 111a 01       		.uleb128 0x1
 16168 111b 51       		.byte	0x51
 16169 111c 22       		.byte	0x22
 16170 111d 23       		.byte	0x23
 16171 111e 01       		.uleb128 0x1
 16172 111f 09       		.byte	0x9
 16173 1120 FB       		.byte	0xfb
 16174 1121 24       		.byte	0x24
 16175 1122 09       		.byte	0x9
 16176 1123 FB       		.byte	0xfb
 16177 1124 25       		.byte	0x25
 16178 1125 75       		.byte	0x75
 16179 1126 00       		.sleb128 0
 16180 1127 22       		.byte	0x22
 16181 1128 23       		.byte	0x23
 16182 1129 30       		.uleb128 0x30
 16183 112a 9F       		.byte	0x9f
 16184 112b 00000000 		.4byte	0
 16185 112f 00000000 		.4byte	0
 16186              	.LLST82:
 16187 1133 06000000 		.4byte	.LVL266
 16188 1137 30000000 		.4byte	.LVL270
 16189 113b 0200     		.2byte	0x2
 16190 113d 32       		.byte	0x32
 16191 113e 9F       		.byte	0x9f
 16192 113f 30000000 		.4byte	.LVL270
 16193 1143 6A000000 		.4byte	.LVL275
 16194 1147 0100     		.2byte	0x1
 16195 1149 50       		.byte	0x50
 16196 114a 72000000 		.4byte	.LVL276
 16197 114e A2000000 		.4byte	.LVL282
 16198 1152 0100     		.2byte	0x1
 16199 1154 50       		.byte	0x50
 16200 1155 A2000000 		.4byte	.LVL282
 16201 1159 AC000000 		.4byte	.LVL284
 16202 115d 0200     		.2byte	0x2
 16203 115f 32       		.byte	0x32
 16204 1160 9F       		.byte	0x9f
 16205 1161 AC000000 		.4byte	.LVL284
 16206 1165 B2000000 		.4byte	.LVL285
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 410


 16207 1169 0100     		.2byte	0x1
 16208 116b 50       		.byte	0x50
 16209 116c C6000000 		.4byte	.LVL287
 16210 1170 D0000000 		.4byte	.LVL289
 16211 1174 0200     		.2byte	0x2
 16212 1176 32       		.byte	0x32
 16213 1177 9F       		.byte	0x9f
 16214 1178 D0000000 		.4byte	.LVL289
 16215 117c E4000000 		.4byte	.LVL292
 16216 1180 0100     		.2byte	0x1
 16217 1182 50       		.byte	0x50
 16218 1183 FA000000 		.4byte	.LVL297
 16219 1187 04010000 		.4byte	.LVL298
 16220 118b 0200     		.2byte	0x2
 16221 118d 32       		.byte	0x32
 16222 118e 9F       		.byte	0x9f
 16223 118f 04010000 		.4byte	.LVL298
 16224 1193 0A010000 		.4byte	.LFE13
 16225 1197 0100     		.2byte	0x1
 16226 1199 56       		.byte	0x56
 16227 119a 00000000 		.4byte	0
 16228 119e 00000000 		.4byte	0
 16229              	.LLST83:
 16230 11a2 00000000 		.4byte	.LVL299
 16231 11a6 26000000 		.4byte	.LVL305
 16232 11aa 0100     		.2byte	0x1
 16233 11ac 50       		.byte	0x50
 16234 11ad 26000000 		.4byte	.LVL305
 16235 11b1 6C000000 		.4byte	.LVL316
 16236 11b5 0400     		.2byte	0x4
 16237 11b7 F3       		.byte	0xf3
 16238 11b8 01       		.uleb128 0x1
 16239 11b9 50       		.byte	0x50
 16240 11ba 9F       		.byte	0x9f
 16241 11bb 6C000000 		.4byte	.LVL316
 16242 11bf 70000000 		.4byte	.LVL318
 16243 11c3 0100     		.2byte	0x1
 16244 11c5 50       		.byte	0x50
 16245 11c6 70000000 		.4byte	.LVL318
 16246 11ca 8A000000 		.4byte	.LVL321
 16247 11ce 0400     		.2byte	0x4
 16248 11d0 F3       		.byte	0xf3
 16249 11d1 01       		.uleb128 0x1
 16250 11d2 50       		.byte	0x50
 16251 11d3 9F       		.byte	0x9f
 16252 11d4 8A000000 		.4byte	.LVL321
 16253 11d8 8E000000 		.4byte	.LVL323
 16254 11dc 0100     		.2byte	0x1
 16255 11de 50       		.byte	0x50
 16256 11df 8E000000 		.4byte	.LVL323
 16257 11e3 AC000000 		.4byte	.LVL327
 16258 11e7 0400     		.2byte	0x4
 16259 11e9 F3       		.byte	0xf3
 16260 11ea 01       		.uleb128 0x1
 16261 11eb 50       		.byte	0x50
 16262 11ec 9F       		.byte	0x9f
 16263 11ed AC000000 		.4byte	.LVL327
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 411


 16264 11f1 AE000000 		.4byte	.LVL328
 16265 11f5 0100     		.2byte	0x1
 16266 11f7 50       		.byte	0x50
 16267 11f8 AE000000 		.4byte	.LVL328
 16268 11fc B0000000 		.4byte	.LVL329
 16269 1200 0400     		.2byte	0x4
 16270 1202 F3       		.byte	0xf3
 16271 1203 01       		.uleb128 0x1
 16272 1204 50       		.byte	0x50
 16273 1205 9F       		.byte	0x9f
 16274 1206 B0000000 		.4byte	.LVL329
 16275 120a B2000000 		.4byte	.LVL330
 16276 120e 0100     		.2byte	0x1
 16277 1210 50       		.byte	0x50
 16278 1211 B2000000 		.4byte	.LVL330
 16279 1215 B4000000 		.4byte	.LVL331
 16280 1219 0400     		.2byte	0x4
 16281 121b F3       		.byte	0xf3
 16282 121c 01       		.uleb128 0x1
 16283 121d 50       		.byte	0x50
 16284 121e 9F       		.byte	0x9f
 16285 121f B4000000 		.4byte	.LVL331
 16286 1223 B6000000 		.4byte	.LVL332
 16287 1227 0100     		.2byte	0x1
 16288 1229 50       		.byte	0x50
 16289 122a B6000000 		.4byte	.LVL332
 16290 122e D0000000 		.4byte	.LFE12
 16291 1232 0400     		.2byte	0x4
 16292 1234 F3       		.byte	0xf3
 16293 1235 01       		.uleb128 0x1
 16294 1236 50       		.byte	0x50
 16295 1237 9F       		.byte	0x9f
 16296 1238 00000000 		.4byte	0
 16297 123c 00000000 		.4byte	0
 16298              	.LLST84:
 16299 1240 00000000 		.4byte	.LVL299
 16300 1244 24000000 		.4byte	.LVL304
 16301 1248 0100     		.2byte	0x1
 16302 124a 51       		.byte	0x51
 16303 124b 24000000 		.4byte	.LVL304
 16304 124f 6C000000 		.4byte	.LVL316
 16305 1253 0100     		.2byte	0x1
 16306 1255 54       		.byte	0x54
 16307 1256 6C000000 		.4byte	.LVL316
 16308 125a 6E000000 		.4byte	.LVL317
 16309 125e 0100     		.2byte	0x1
 16310 1260 51       		.byte	0x51
 16311 1261 6E000000 		.4byte	.LVL317
 16312 1265 8A000000 		.4byte	.LVL321
 16313 1269 0100     		.2byte	0x1
 16314 126b 54       		.byte	0x54
 16315 126c 8A000000 		.4byte	.LVL321
 16316 1270 8C000000 		.4byte	.LVL322
 16317 1274 0100     		.2byte	0x1
 16318 1276 51       		.byte	0x51
 16319 1277 8C000000 		.4byte	.LVL322
 16320 127b AC000000 		.4byte	.LVL327
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 412


 16321 127f 0100     		.2byte	0x1
 16322 1281 54       		.byte	0x54
 16323 1282 AC000000 		.4byte	.LVL327
 16324 1286 B8000000 		.4byte	.LVL333
 16325 128a 0100     		.2byte	0x1
 16326 128c 51       		.byte	0x51
 16327 128d B8000000 		.4byte	.LVL333
 16328 1291 D0000000 		.4byte	.LFE12
 16329 1295 0100     		.2byte	0x1
 16330 1297 54       		.byte	0x54
 16331 1298 00000000 		.4byte	0
 16332 129c 00000000 		.4byte	0
 16333              	.LLST85:
 16334 12a0 3E000000 		.4byte	.LVL308
 16335 12a4 5C000000 		.4byte	.LVL312
 16336 12a8 0100     		.2byte	0x1
 16337 12aa 55       		.byte	0x55
 16338 12ab 5C000000 		.4byte	.LVL312
 16339 12af 64000000 		.4byte	.LVL313
 16340 12b3 0100     		.2byte	0x1
 16341 12b5 50       		.byte	0x50
 16342 12b6 64000000 		.4byte	.LVL313
 16343 12ba 66000000 		.4byte	.LVL314
 16344 12be 0D00     		.2byte	0xd
 16345 12c0 76       		.byte	0x76
 16346 12c1 30       		.sleb128 48
 16347 12c2 94       		.byte	0x94
 16348 12c3 01       		.byte	0x1
 16349 12c4 08       		.byte	0x8
 16350 12c5 FF       		.byte	0xff
 16351 12c6 1A       		.byte	0x1a
 16352 12c7 38       		.byte	0x38
 16353 12c8 24       		.byte	0x24
 16354 12c9 75       		.byte	0x75
 16355 12ca 00       		.sleb128 0
 16356 12cb 21       		.byte	0x21
 16357 12cc 9F       		.byte	0x9f
 16358 12cd 66000000 		.4byte	.LVL314
 16359 12d1 6A000000 		.4byte	.LVL315
 16360 12d5 0100     		.2byte	0x1
 16361 12d7 50       		.byte	0x50
 16362 12d8 6A000000 		.4byte	.LVL315
 16363 12dc 6C000000 		.4byte	.LVL316
 16364 12e0 0D00     		.2byte	0xd
 16365 12e2 76       		.byte	0x76
 16366 12e3 30       		.sleb128 48
 16367 12e4 94       		.byte	0x94
 16368 12e5 01       		.byte	0x1
 16369 12e6 08       		.byte	0x8
 16370 12e7 FF       		.byte	0xff
 16371 12e8 1A       		.byte	0x1a
 16372 12e9 38       		.byte	0x38
 16373 12ea 24       		.byte	0x24
 16374 12eb 75       		.byte	0x75
 16375 12ec 00       		.sleb128 0
 16376 12ed 21       		.byte	0x21
 16377 12ee 9F       		.byte	0x9f
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 413


 16378 12ef BE000000 		.4byte	.LVL334
 16379 12f3 C4000000 		.4byte	.LVL335
 16380 12f7 0100     		.2byte	0x1
 16381 12f9 55       		.byte	0x55
 16382 12fa 00000000 		.4byte	0
 16383 12fe 00000000 		.4byte	0
 16384              	.LLST86:
 16385 1302 1E000000 		.4byte	.LVL302
 16386 1306 22000000 		.4byte	.LVL303
 16387 130a 0100     		.2byte	0x1
 16388 130c 51       		.byte	0x51
 16389 130d 22000000 		.4byte	.LVL303
 16390 1311 34000000 		.4byte	.LVL307
 16391 1315 0100     		.2byte	0x1
 16392 1317 55       		.byte	0x55
 16393 1318 34000000 		.4byte	.LVL307
 16394 131c 52000000 		.4byte	.LVL310
 16395 1320 0100     		.2byte	0x1
 16396 1322 57       		.byte	0x57
 16397 1323 52000000 		.4byte	.LVL310
 16398 1327 6C000000 		.4byte	.LVL316
 16399 132b 0A00     		.2byte	0xa
 16400 132d 74       		.byte	0x74
 16401 132e 00       		.sleb128 0
 16402 132f 31       		.byte	0x31
 16403 1330 25       		.byte	0x25
 16404 1331 74       		.byte	0x74
 16405 1332 00       		.sleb128 0
 16406 1333 22       		.byte	0x22
 16407 1334 23       		.byte	0x23
 16408 1335 01       		.uleb128 0x1
 16409 1336 9F       		.byte	0x9f
 16410 1337 B8000000 		.4byte	.LVL333
 16411 133b BE000000 		.4byte	.LVL334
 16412 133f 0100     		.2byte	0x1
 16413 1341 55       		.byte	0x55
 16414 1342 BE000000 		.4byte	.LVL334
 16415 1346 C4000000 		.4byte	.LVL335
 16416 134a 0100     		.2byte	0x1
 16417 134c 57       		.byte	0x57
 16418 134d 00000000 		.4byte	0
 16419 1351 00000000 		.4byte	0
 16420              	.LLST87:
 16421 1355 10000000 		.4byte	.LVL301
 16422 1359 6A000000 		.4byte	.LVL315
 16423 135d 0300     		.2byte	0x3
 16424 135f 09       		.byte	0x9
 16425 1360 FF       		.byte	0xff
 16426 1361 9F       		.byte	0x9f
 16427 1362 6A000000 		.4byte	.LVL315
 16428 1366 6C000000 		.4byte	.LVL316
 16429 136a 0100     		.2byte	0x1
 16430 136c 50       		.byte	0x50
 16431 136d 6C000000 		.4byte	.LVL316
 16432 1371 88000000 		.4byte	.LVL320
 16433 1375 0300     		.2byte	0x3
 16434 1377 09       		.byte	0x9
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 414


 16435 1378 FF       		.byte	0xff
 16436 1379 9F       		.byte	0x9f
 16437 137a 88000000 		.4byte	.LVL320
 16438 137e 8A000000 		.4byte	.LVL321
 16439 1382 0100     		.2byte	0x1
 16440 1384 50       		.byte	0x50
 16441 1385 8A000000 		.4byte	.LVL321
 16442 1389 AA000000 		.4byte	.LVL326
 16443 138d 0300     		.2byte	0x3
 16444 138f 09       		.byte	0x9
 16445 1390 FF       		.byte	0xff
 16446 1391 9F       		.byte	0x9f
 16447 1392 AA000000 		.4byte	.LVL326
 16448 1396 AC000000 		.4byte	.LVL327
 16449 139a 0100     		.2byte	0x1
 16450 139c 50       		.byte	0x50
 16451 139d B4000000 		.4byte	.LVL331
 16452 13a1 CE000000 		.4byte	.LVL337
 16453 13a5 0300     		.2byte	0x3
 16454 13a7 09       		.byte	0x9
 16455 13a8 FF       		.byte	0xff
 16456 13a9 9F       		.byte	0x9f
 16457 13aa CE000000 		.4byte	.LVL337
 16458 13ae D0000000 		.4byte	.LFE12
 16459 13b2 0100     		.2byte	0x1
 16460 13b4 50       		.byte	0x50
 16461 13b5 00000000 		.4byte	0
 16462 13b9 00000000 		.4byte	0
 16463              	.LLST88:
 16464 13bd 04000000 		.4byte	.LVL300
 16465 13c1 54000000 		.4byte	.LVL311
 16466 13c5 0100     		.2byte	0x1
 16467 13c7 56       		.byte	0x56
 16468 13c8 6C000000 		.4byte	.LVL316
 16469 13cc D0000000 		.4byte	.LFE12
 16470 13d0 0100     		.2byte	0x1
 16471 13d2 56       		.byte	0x56
 16472 13d3 00000000 		.4byte	0
 16473 13d7 00000000 		.4byte	0
 16474              	.LLST89:
 16475 13db 00000000 		.4byte	.LVL338
 16476 13df 3E000000 		.4byte	.LVL343
 16477 13e3 0100     		.2byte	0x1
 16478 13e5 50       		.byte	0x50
 16479 13e6 3E000000 		.4byte	.LVL343
 16480 13ea 86000000 		.4byte	.LVL349
 16481 13ee 0100     		.2byte	0x1
 16482 13f0 56       		.byte	0x56
 16483 13f1 86000000 		.4byte	.LVL349
 16484 13f5 88000000 		.4byte	.LVL350
 16485 13f9 0100     		.2byte	0x1
 16486 13fb 50       		.byte	0x50
 16487 13fc 88000000 		.4byte	.LVL350
 16488 1400 8C000000 		.4byte	.LVL351
 16489 1404 0100     		.2byte	0x1
 16490 1406 56       		.byte	0x56
 16491 1407 8C000000 		.4byte	.LVL351
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 415


 16492 140b 8E000000 		.4byte	.LVL352
 16493 140f 0100     		.2byte	0x1
 16494 1411 50       		.byte	0x50
 16495 1412 8E000000 		.4byte	.LVL352
 16496 1416 92000000 		.4byte	.LVL353
 16497 141a 0100     		.2byte	0x1
 16498 141c 56       		.byte	0x56
 16499 141d 92000000 		.4byte	.LVL353
 16500 1421 94000000 		.4byte	.LVL354
 16501 1425 0100     		.2byte	0x1
 16502 1427 50       		.byte	0x50
 16503 1428 94000000 		.4byte	.LVL354
 16504 142c B0000000 		.4byte	.LFE16
 16505 1430 0100     		.2byte	0x1
 16506 1432 56       		.byte	0x56
 16507 1433 00000000 		.4byte	0
 16508 1437 00000000 		.4byte	0
 16509              	.LLST90:
 16510 143b 00000000 		.4byte	.LVL338
 16511 143f 3E000000 		.4byte	.LVL343
 16512 1443 0100     		.2byte	0x1
 16513 1445 51       		.byte	0x51
 16514 1446 3E000000 		.4byte	.LVL343
 16515 144a 86000000 		.4byte	.LVL349
 16516 144e 0100     		.2byte	0x1
 16517 1450 54       		.byte	0x54
 16518 1451 86000000 		.4byte	.LVL349
 16519 1455 98000000 		.4byte	.LVL355
 16520 1459 0100     		.2byte	0x1
 16521 145b 51       		.byte	0x51
 16522 145c 98000000 		.4byte	.LVL355
 16523 1460 B0000000 		.4byte	.LFE16
 16524 1464 0100     		.2byte	0x1
 16525 1466 54       		.byte	0x54
 16526 1467 00000000 		.4byte	0
 16527 146b 00000000 		.4byte	0
 16528              	.LLST91:
 16529 146f 3C000000 		.4byte	.LVL342
 16530 1473 6A000000 		.4byte	.LVL348
 16531 1477 0100     		.2byte	0x1
 16532 1479 58       		.byte	0x58
 16533 147a 98000000 		.4byte	.LVL355
 16534 147e AA000000 		.4byte	.LVL361
 16535 1482 0100     		.2byte	0x1
 16536 1484 58       		.byte	0x58
 16537 1485 00000000 		.4byte	0
 16538 1489 00000000 		.4byte	0
 16539              	.LLST92:
 16540 148d 1A000000 		.4byte	.LVL340
 16541 1491 48000000 		.4byte	.LVL345
 16542 1495 0100     		.2byte	0x1
 16543 1497 55       		.byte	0x55
 16544 1498 48000000 		.4byte	.LVL345
 16545 149c 5C000000 		.4byte	.LVL346
 16546 14a0 0100     		.2byte	0x1
 16547 14a2 50       		.byte	0x50
 16548 14a3 5C000000 		.4byte	.LVL346
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 416


 16549 14a7 86000000 		.4byte	.LVL349
 16550 14ab 0100     		.2byte	0x1
 16551 14ad 55       		.byte	0x55
 16552 14ae 92000000 		.4byte	.LVL353
 16553 14b2 98000000 		.4byte	.LVL355
 16554 14b6 0100     		.2byte	0x1
 16555 14b8 55       		.byte	0x55
 16556 14b9 98000000 		.4byte	.LVL355
 16557 14bd 9A000000 		.4byte	.LVL356
 16558 14c1 0100     		.2byte	0x1
 16559 14c3 50       		.byte	0x50
 16560 14c4 9A000000 		.4byte	.LVL356
 16561 14c8 9E000000 		.4byte	.LVL357
 16562 14cc 0100     		.2byte	0x1
 16563 14ce 55       		.byte	0x55
 16564 14cf 9E000000 		.4byte	.LVL357
 16565 14d3 A0000000 		.4byte	.LVL358
 16566 14d7 0100     		.2byte	0x1
 16567 14d9 50       		.byte	0x50
 16568 14da A0000000 		.4byte	.LVL358
 16569 14de A4000000 		.4byte	.LVL359
 16570 14e2 0100     		.2byte	0x1
 16571 14e4 55       		.byte	0x55
 16572 14e5 A4000000 		.4byte	.LVL359
 16573 14e9 A6000000 		.4byte	.LVL360
 16574 14ed 0100     		.2byte	0x1
 16575 14ef 50       		.byte	0x50
 16576 14f0 A6000000 		.4byte	.LVL360
 16577 14f4 B0000000 		.4byte	.LFE16
 16578 14f8 0100     		.2byte	0x1
 16579 14fa 55       		.byte	0x55
 16580 14fb 00000000 		.4byte	0
 16581 14ff 00000000 		.4byte	0
 16582              	.LLST93:
 16583 1503 00000000 		.4byte	.LVL362
 16584 1507 1B000000 		.4byte	.LVL366-1
 16585 150b 0100     		.2byte	0x1
 16586 150d 50       		.byte	0x50
 16587 150e 1B000000 		.4byte	.LVL366-1
 16588 1512 30000000 		.4byte	.LVL367
 16589 1516 0100     		.2byte	0x1
 16590 1518 57       		.byte	0x57
 16591 1519 30000000 		.4byte	.LVL367
 16592 151d 36000000 		.4byte	.LVL370
 16593 1521 0100     		.2byte	0x1
 16594 1523 50       		.byte	0x50
 16595 1524 36000000 		.4byte	.LVL370
 16596 1528 CA000000 		.4byte	.LFE15
 16597 152c 0100     		.2byte	0x1
 16598 152e 57       		.byte	0x57
 16599 152f 00000000 		.4byte	0
 16600 1533 00000000 		.4byte	0
 16601              	.LLST94:
 16602 1537 00000000 		.4byte	.LVL362
 16603 153b 1B000000 		.4byte	.LVL366-1
 16604 153f 0100     		.2byte	0x1
 16605 1541 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 417


 16606 1542 1B000000 		.4byte	.LVL366-1
 16607 1546 30000000 		.4byte	.LVL367
 16608 154a 0100     		.2byte	0x1
 16609 154c 58       		.byte	0x58
 16610 154d 30000000 		.4byte	.LVL367
 16611 1551 36000000 		.4byte	.LVL370
 16612 1555 0100     		.2byte	0x1
 16613 1557 51       		.byte	0x51
 16614 1558 36000000 		.4byte	.LVL370
 16615 155c CA000000 		.4byte	.LFE15
 16616 1560 0100     		.2byte	0x1
 16617 1562 58       		.byte	0x58
 16618 1563 00000000 		.4byte	0
 16619 1567 00000000 		.4byte	0
 16620              	.LLST95:
 16621 156b 1C000000 		.4byte	.LVL366
 16622 156f 30000000 		.4byte	.LVL367
 16623 1573 0100     		.2byte	0x1
 16624 1575 50       		.byte	0x50
 16625 1576 4E000000 		.4byte	.LVL375
 16626 157a 5E000000 		.4byte	.LVL376
 16627 157e 0100     		.2byte	0x1
 16628 1580 50       		.byte	0x50
 16629 1581 5E000000 		.4byte	.LVL376
 16630 1585 62000000 		.4byte	.LVL377
 16631 1589 0100     		.2byte	0x1
 16632 158b 53       		.byte	0x53
 16633 158c 62000000 		.4byte	.LVL377
 16634 1590 6A000000 		.4byte	.LVL378
 16635 1594 0100     		.2byte	0x1
 16636 1596 50       		.byte	0x50
 16637 1597 6A000000 		.4byte	.LVL378
 16638 159b 73000000 		.4byte	.LVL379-1
 16639 159f 0100     		.2byte	0x1
 16640 15a1 53       		.byte	0x53
 16641 15a2 B8000000 		.4byte	.LVL388
 16642 15a6 BA000000 		.4byte	.LVL389
 16643 15aa 0100     		.2byte	0x1
 16644 15ac 50       		.byte	0x50
 16645 15ad C4000000 		.4byte	.LVL391
 16646 15b1 C6000000 		.4byte	.LVL392
 16647 15b5 0100     		.2byte	0x1
 16648 15b7 50       		.byte	0x50
 16649 15b8 00000000 		.4byte	0
 16650 15bc 00000000 		.4byte	0
 16651              	.LLST96:
 16652 15c0 36000000 		.4byte	.LVL370
 16653 15c4 38000000 		.4byte	.LVL371
 16654 15c8 0100     		.2byte	0x1
 16655 15ca 55       		.byte	0x55
 16656 15cb 38000000 		.4byte	.LVL371
 16657 15cf 40000000 		.4byte	.LVL373
 16658 15d3 0100     		.2byte	0x1
 16659 15d5 54       		.byte	0x54
 16660 15d6 40000000 		.4byte	.LVL373
 16661 15da 46000000 		.4byte	.LVL374
 16662 15de 0200     		.2byte	0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 418


 16663 15e0 32       		.byte	0x32
 16664 15e1 9F       		.byte	0x9f
 16665 15e2 46000000 		.4byte	.LVL374
 16666 15e6 AE000000 		.4byte	.LVL385
 16667 15ea 0100     		.2byte	0x1
 16668 15ec 54       		.byte	0x54
 16669 15ed B0000000 		.4byte	.LVL386
 16670 15f1 B8000000 		.4byte	.LVL388
 16671 15f5 0100     		.2byte	0x1
 16672 15f7 54       		.byte	0x54
 16673 15f8 BE000000 		.4byte	.LVL390
 16674 15fc C4000000 		.4byte	.LVL391
 16675 1600 0200     		.2byte	0x2
 16676 1602 32       		.byte	0x32
 16677 1603 9F       		.byte	0x9f
 16678 1604 C4000000 		.4byte	.LVL391
 16679 1608 C6000000 		.4byte	.LVL392
 16680 160c 0100     		.2byte	0x1
 16681 160e 54       		.byte	0x54
 16682 160f 00000000 		.4byte	0
 16683 1613 00000000 		.4byte	0
 16684              	.LLST97:
 16685 1617 0E000000 		.4byte	.LVL364
 16686 161b 18000000 		.4byte	.LVL365
 16687 161f 0100     		.2byte	0x1
 16688 1621 55       		.byte	0x55
 16689 1622 30000000 		.4byte	.LVL367
 16690 1626 32000000 		.4byte	.LVL368
 16691 162a 0100     		.2byte	0x1
 16692 162c 55       		.byte	0x55
 16693 162d 32000000 		.4byte	.LVL368
 16694 1631 34000000 		.4byte	.LVL369
 16695 1635 0200     		.2byte	0x2
 16696 1637 76       		.byte	0x76
 16697 1638 0C       		.sleb128 12
 16698 1639 34000000 		.4byte	.LVL369
 16699 163d B8000000 		.4byte	.LVL388
 16700 1641 0100     		.2byte	0x1
 16701 1643 55       		.byte	0x55
 16702 1644 BE000000 		.4byte	.LVL390
 16703 1648 C6000000 		.4byte	.LVL392
 16704 164c 0100     		.2byte	0x1
 16705 164e 55       		.byte	0x55
 16706 164f 00000000 		.4byte	0
 16707 1653 00000000 		.4byte	0
 16708              	.LLST98:
 16709 1657 74000000 		.4byte	.LVL379
 16710 165b 80000000 		.4byte	.LVL380
 16711 165f 0100     		.2byte	0x1
 16712 1661 50       		.byte	0x50
 16713 1662 8A000000 		.4byte	.LVL382
 16714 1666 92000000 		.4byte	.LVL383
 16715 166a 0100     		.2byte	0x1
 16716 166c 53       		.byte	0x53
 16717 166d A6000000 		.4byte	.LVL384
 16718 1671 B2000000 		.4byte	.LVL387
 16719 1675 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 419


 16720 1677 53       		.byte	0x53
 16721 1678 00000000 		.4byte	0
 16722 167c 00000000 		.4byte	0
 16723              	.LLST99:
 16724 1680 00000000 		.4byte	.LVL393
 16725 1684 16000000 		.4byte	.LVL396
 16726 1688 0100     		.2byte	0x1
 16727 168a 50       		.byte	0x50
 16728 168b 16000000 		.4byte	.LVL396
 16729 168f 66000000 		.4byte	.LVL407
 16730 1693 0100     		.2byte	0x1
 16731 1695 57       		.byte	0x57
 16732 1696 66000000 		.4byte	.LVL407
 16733 169a 68000000 		.4byte	.LVL408
 16734 169e 0100     		.2byte	0x1
 16735 16a0 50       		.byte	0x50
 16736 16a1 68000000 		.4byte	.LVL408
 16737 16a5 6A000000 		.4byte	.LVL409
 16738 16a9 0100     		.2byte	0x1
 16739 16ab 57       		.byte	0x57
 16740 16ac 6A000000 		.4byte	.LVL409
 16741 16b0 6C000000 		.4byte	.LVL410
 16742 16b4 0100     		.2byte	0x1
 16743 16b6 50       		.byte	0x50
 16744 16b7 6C000000 		.4byte	.LVL410
 16745 16bb 7C000000 		.4byte	.LFE14
 16746 16bf 0100     		.2byte	0x1
 16747 16c1 57       		.byte	0x57
 16748 16c2 00000000 		.4byte	0
 16749 16c6 00000000 		.4byte	0
 16750              	.LLST100:
 16751 16ca 00000000 		.4byte	.LVL393
 16752 16ce 18000000 		.4byte	.LVL397
 16753 16d2 0100     		.2byte	0x1
 16754 16d4 51       		.byte	0x51
 16755 16d5 18000000 		.4byte	.LVL397
 16756 16d9 5C000000 		.4byte	.LVL405
 16757 16dd 0100     		.2byte	0x1
 16758 16df 56       		.byte	0x56
 16759 16e0 5C000000 		.4byte	.LVL405
 16760 16e4 66000000 		.4byte	.LVL407
 16761 16e8 0100     		.2byte	0x1
 16762 16ea 55       		.byte	0x55
 16763 16eb 66000000 		.4byte	.LVL407
 16764 16ef 6E000000 		.4byte	.LVL411
 16765 16f3 0100     		.2byte	0x1
 16766 16f5 51       		.byte	0x51
 16767 16f6 6E000000 		.4byte	.LVL411
 16768 16fa 7C000000 		.4byte	.LFE14
 16769 16fe 0100     		.2byte	0x1
 16770 1700 56       		.byte	0x56
 16771 1701 00000000 		.4byte	0
 16772 1705 00000000 		.4byte	0
 16773              	.LLST101:
 16774 1709 00000000 		.4byte	.LVL393
 16775 170d 1C000000 		.4byte	.LVL398
 16776 1711 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 420


 16777 1713 52       		.byte	0x52
 16778 1714 1C000000 		.4byte	.LVL398
 16779 1718 1F000000 		.4byte	.LVL399-1
 16780 171c 0100     		.2byte	0x1
 16781 171e 51       		.byte	0x51
 16782 171f 1F000000 		.4byte	.LVL399-1
 16783 1723 66000000 		.4byte	.LVL407
 16784 1727 0400     		.2byte	0x4
 16785 1729 F3       		.byte	0xf3
 16786 172a 01       		.uleb128 0x1
 16787 172b 52       		.byte	0x52
 16788 172c 9F       		.byte	0x9f
 16789 172d 66000000 		.4byte	.LVL407
 16790 1731 6E000000 		.4byte	.LVL411
 16791 1735 0100     		.2byte	0x1
 16792 1737 52       		.byte	0x52
 16793 1738 6E000000 		.4byte	.LVL411
 16794 173c 7C000000 		.4byte	.LFE14
 16795 1740 0400     		.2byte	0x4
 16796 1742 F3       		.byte	0xf3
 16797 1743 01       		.uleb128 0x1
 16798 1744 52       		.byte	0x52
 16799 1745 9F       		.byte	0x9f
 16800 1746 00000000 		.4byte	0
 16801 174a 00000000 		.4byte	0
 16802              	.LLST102:
 16803 174e 06000000 		.4byte	.LVL394
 16804 1752 20000000 		.4byte	.LVL399
 16805 1756 0200     		.2byte	0x2
 16806 1758 30       		.byte	0x30
 16807 1759 9F       		.byte	0x9f
 16808 175a 20000000 		.4byte	.LVL399
 16809 175e 22000000 		.4byte	.LVL400
 16810 1762 0100     		.2byte	0x1
 16811 1764 50       		.byte	0x50
 16812 1765 42000000 		.4byte	.LVL403
 16813 1769 64000000 		.4byte	.LVL406
 16814 176d 0100     		.2byte	0x1
 16815 176f 50       		.byte	0x50
 16816 1770 66000000 		.4byte	.LVL407
 16817 1774 6E000000 		.4byte	.LVL411
 16818 1778 0200     		.2byte	0x2
 16819 177a 30       		.byte	0x30
 16820 177b 9F       		.byte	0x9f
 16821 177c 6E000000 		.4byte	.LVL411
 16822 1780 70000000 		.4byte	.LVL412
 16823 1784 0100     		.2byte	0x1
 16824 1786 50       		.byte	0x50
 16825 1787 00000000 		.4byte	0
 16826 178b 00000000 		.4byte	0
 16827              	.LLST103:
 16828 178f 2A000000 		.4byte	.LVL401
 16829 1793 3A000000 		.4byte	.LVL402
 16830 1797 0100     		.2byte	0x1
 16831 1799 50       		.byte	0x50
 16832 179a 3A000000 		.4byte	.LVL402
 16833 179e 66000000 		.4byte	.LVL407
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 421


 16834 17a2 0100     		.2byte	0x1
 16835 17a4 55       		.byte	0x55
 16836 17a5 70000000 		.4byte	.LVL412
 16837 17a9 72000000 		.4byte	.LVL413
 16838 17ad 0100     		.2byte	0x1
 16839 17af 50       		.byte	0x50
 16840 17b0 72000000 		.4byte	.LVL413
 16841 17b4 74000000 		.4byte	.LVL414
 16842 17b8 0100     		.2byte	0x1
 16843 17ba 55       		.byte	0x55
 16844 17bb 74000000 		.4byte	.LVL414
 16845 17bf 76000000 		.4byte	.LVL415
 16846 17c3 0100     		.2byte	0x1
 16847 17c5 50       		.byte	0x50
 16848 17c6 76000000 		.4byte	.LVL415
 16849 17ca 78000000 		.4byte	.LVL416
 16850 17ce 0100     		.2byte	0x1
 16851 17d0 55       		.byte	0x55
 16852 17d1 78000000 		.4byte	.LVL416
 16853 17d5 7A000000 		.4byte	.LVL417
 16854 17d9 0100     		.2byte	0x1
 16855 17db 50       		.byte	0x50
 16856 17dc 7A000000 		.4byte	.LVL417
 16857 17e0 7C000000 		.4byte	.LFE14
 16858 17e4 0100     		.2byte	0x1
 16859 17e6 55       		.byte	0x55
 16860 17e7 00000000 		.4byte	0
 16861 17eb 00000000 		.4byte	0
 16862              	.LLST104:
 16863 17ef 00000000 		.4byte	.LVL418
 16864 17f3 08000000 		.4byte	.LVL420
 16865 17f7 0100     		.2byte	0x1
 16866 17f9 50       		.byte	0x50
 16867 17fa 08000000 		.4byte	.LVL420
 16868 17fe 20000000 		.4byte	.LFE24
 16869 1802 0100     		.2byte	0x1
 16870 1804 54       		.byte	0x54
 16871 1805 00000000 		.4byte	0
 16872 1809 00000000 		.4byte	0
 16873              	.LLST105:
 16874 180d 0E000000 		.4byte	.LVL421
 16875 1811 1E000000 		.4byte	.LVL422
 16876 1815 0100     		.2byte	0x1
 16877 1817 50       		.byte	0x50
 16878 1818 00000000 		.4byte	0
 16879 181c 00000000 		.4byte	0
 16880              	.LLST106:
 16881 1820 00000000 		.4byte	.LVL423
 16882 1824 3A000000 		.4byte	.LVL427
 16883 1828 0100     		.2byte	0x1
 16884 182a 50       		.byte	0x50
 16885 182b 3A000000 		.4byte	.LVL427
 16886 182f 3E000000 		.4byte	.LVL428
 16887 1833 0100     		.2byte	0x1
 16888 1835 54       		.byte	0x54
 16889 1836 3E000000 		.4byte	.LVL428
 16890 183a 4B000000 		.4byte	.LVL429-1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 422


 16891 183e 0100     		.2byte	0x1
 16892 1840 50       		.byte	0x50
 16893 1841 4B000000 		.4byte	.LVL429-1
 16894 1845 F0000000 		.4byte	.LVL448
 16895 1849 0100     		.2byte	0x1
 16896 184b 54       		.byte	0x54
 16897 184c F0000000 		.4byte	.LVL448
 16898 1850 F2000000 		.4byte	.LVL449
 16899 1854 0100     		.2byte	0x1
 16900 1856 50       		.byte	0x50
 16901 1857 F2000000 		.4byte	.LVL449
 16902 185b F6000000 		.4byte	.LVL450
 16903 185f 0400     		.2byte	0x4
 16904 1861 F3       		.byte	0xf3
 16905 1862 01       		.uleb128 0x1
 16906 1863 50       		.byte	0x50
 16907 1864 9F       		.byte	0x9f
 16908 1865 F6000000 		.4byte	.LVL450
 16909 1869 F8000000 		.4byte	.LVL451
 16910 186d 0100     		.2byte	0x1
 16911 186f 50       		.byte	0x50
 16912 1870 F8000000 		.4byte	.LVL451
 16913 1874 FC000000 		.4byte	.LVL452
 16914 1878 0400     		.2byte	0x4
 16915 187a F3       		.byte	0xf3
 16916 187b 01       		.uleb128 0x1
 16917 187c 50       		.byte	0x50
 16918 187d 9F       		.byte	0x9f
 16919 187e FC000000 		.4byte	.LVL452
 16920 1882 26010000 		.4byte	.LFE17
 16921 1886 0100     		.2byte	0x1
 16922 1888 54       		.byte	0x54
 16923 1889 00000000 		.4byte	0
 16924 188d 00000000 		.4byte	0
 16925              	.LLST107:
 16926 1891 00000000 		.4byte	.LVL423
 16927 1895 2A000000 		.4byte	.LVL426
 16928 1899 0100     		.2byte	0x1
 16929 189b 51       		.byte	0x51
 16930 189c 2A000000 		.4byte	.LVL426
 16931 18a0 AC000000 		.4byte	.LVL439
 16932 18a4 0100     		.2byte	0x1
 16933 18a6 58       		.byte	0x58
 16934 18a7 AC000000 		.4byte	.LVL439
 16935 18ab F0000000 		.4byte	.LVL448
 16936 18af 0400     		.2byte	0x4
 16937 18b1 F3       		.byte	0xf3
 16938 18b2 01       		.uleb128 0x1
 16939 18b3 51       		.byte	0x51
 16940 18b4 9F       		.byte	0x9f
 16941 18b5 F0000000 		.4byte	.LVL448
 16942 18b9 FC000000 		.4byte	.LVL452
 16943 18bd 0100     		.2byte	0x1
 16944 18bf 51       		.byte	0x51
 16945 18c0 FC000000 		.4byte	.LVL452
 16946 18c4 20010000 		.4byte	.LVL463
 16947 18c8 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 423


 16948 18ca 58       		.byte	0x58
 16949 18cb 20010000 		.4byte	.LVL463
 16950 18cf 26010000 		.4byte	.LFE17
 16951 18d3 0400     		.2byte	0x4
 16952 18d5 F3       		.byte	0xf3
 16953 18d6 01       		.uleb128 0x1
 16954 18d7 51       		.byte	0x51
 16955 18d8 9F       		.byte	0x9f
 16956 18d9 00000000 		.4byte	0
 16957 18dd 00000000 		.4byte	0
 16958              	.LLST108:
 16959 18e1 4E000000 		.4byte	.LVL430
 16960 18e5 6A000000 		.4byte	.LVL431
 16961 18e9 0100     		.2byte	0x1
 16962 18eb 50       		.byte	0x50
 16963 18ec 6A000000 		.4byte	.LVL431
 16964 18f0 6E000000 		.4byte	.LVL432
 16965 18f4 0100     		.2byte	0x1
 16966 18f6 59       		.byte	0x59
 16967 18f7 6E000000 		.4byte	.LVL432
 16968 18fb 70000000 		.4byte	.LVL433
 16969 18ff 0100     		.2byte	0x1
 16970 1901 50       		.byte	0x50
 16971 1902 70000000 		.4byte	.LVL433
 16972 1906 76000000 		.4byte	.LVL434
 16973 190a 0100     		.2byte	0x1
 16974 190c 59       		.byte	0x59
 16975 190d 76000000 		.4byte	.LVL434
 16976 1911 88000000 		.4byte	.LVL435
 16977 1915 0100     		.2byte	0x1
 16978 1917 50       		.byte	0x50
 16979 1918 88000000 		.4byte	.LVL435
 16980 191c E0000000 		.4byte	.LVL446
 16981 1920 0100     		.2byte	0x1
 16982 1922 59       		.byte	0x59
 16983 1923 FC000000 		.4byte	.LVL452
 16984 1927 FE000000 		.4byte	.LVL453
 16985 192b 0100     		.2byte	0x1
 16986 192d 50       		.byte	0x50
 16987 192e FE000000 		.4byte	.LVL453
 16988 1932 02010000 		.4byte	.LVL454
 16989 1936 0100     		.2byte	0x1
 16990 1938 59       		.byte	0x59
 16991 1939 02010000 		.4byte	.LVL454
 16992 193d 04010000 		.4byte	.LVL455
 16993 1941 0100     		.2byte	0x1
 16994 1943 50       		.byte	0x50
 16995 1944 04010000 		.4byte	.LVL455
 16996 1948 08010000 		.4byte	.LVL456
 16997 194c 0100     		.2byte	0x1
 16998 194e 59       		.byte	0x59
 16999 194f 08010000 		.4byte	.LVL456
 17000 1953 0A010000 		.4byte	.LVL457
 17001 1957 0100     		.2byte	0x1
 17002 1959 50       		.byte	0x50
 17003 195a 0A010000 		.4byte	.LVL457
 17004 195e 0E010000 		.4byte	.LVL458
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 424


 17005 1962 0100     		.2byte	0x1
 17006 1964 59       		.byte	0x59
 17007 1965 0E010000 		.4byte	.LVL458
 17008 1969 10010000 		.4byte	.LVL459
 17009 196d 0100     		.2byte	0x1
 17010 196f 50       		.byte	0x50
 17011 1970 10010000 		.4byte	.LVL459
 17012 1974 14010000 		.4byte	.LVL460
 17013 1978 0100     		.2byte	0x1
 17014 197a 59       		.byte	0x59
 17015 197b 14010000 		.4byte	.LVL460
 17016 197f 16010000 		.4byte	.LVL461
 17017 1983 0100     		.2byte	0x1
 17018 1985 50       		.byte	0x50
 17019 1986 16010000 		.4byte	.LVL461
 17020 198a 26010000 		.4byte	.LFE17
 17021 198e 0100     		.2byte	0x1
 17022 1990 59       		.byte	0x59
 17023 1991 00000000 		.4byte	0
 17024 1995 00000000 		.4byte	0
 17025              	.LLST109:
 17026 1999 06000000 		.4byte	.LVL424
 17027 199d E8000000 		.4byte	.LVL447
 17028 19a1 0100     		.2byte	0x1
 17029 19a3 56       		.byte	0x56
 17030 19a4 F0000000 		.4byte	.LVL448
 17031 19a8 26010000 		.4byte	.LFE17
 17032 19ac 0100     		.2byte	0x1
 17033 19ae 56       		.byte	0x56
 17034 19af 00000000 		.4byte	0
 17035 19b3 00000000 		.4byte	0
 17036              	.LLST110:
 17037 19b7 9E000000 		.4byte	.LVL437
 17038 19bb AE000000 		.4byte	.LVL440
 17039 19bf 0200     		.2byte	0x2
 17040 19c1 30       		.byte	0x30
 17041 19c2 9F       		.byte	0x9f
 17042 19c3 AE000000 		.4byte	.LVL440
 17043 19c7 D2000000 		.4byte	.LVL444
 17044 19cb 0100     		.2byte	0x1
 17045 19cd 58       		.byte	0x58
 17046 19ce 20010000 		.4byte	.LVL463
 17047 19d2 26010000 		.4byte	.LFE17
 17048 19d6 0100     		.2byte	0x1
 17049 19d8 58       		.byte	0x58
 17050 19d9 00000000 		.4byte	0
 17051 19dd 00000000 		.4byte	0
 17052              	.LLST111:
 17053 19e1 00000000 		.4byte	.LVL464
 17054 19e5 0B000000 		.4byte	.LVL466-1
 17055 19e9 0100     		.2byte	0x1
 17056 19eb 50       		.byte	0x50
 17057 19ec 0B000000 		.4byte	.LVL466-1
 17058 19f0 54000000 		.4byte	.LFE22
 17059 19f4 0100     		.2byte	0x1
 17060 19f6 54       		.byte	0x54
 17061 19f7 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 425


 17062 19fb 00000000 		.4byte	0
 17063              	.LLST112:
 17064 19ff 0C000000 		.4byte	.LVL466
 17065 1a03 10000000 		.4byte	.LVL467
 17066 1a07 0100     		.2byte	0x1
 17067 1a09 50       		.byte	0x50
 17068 1a0a 16000000 		.4byte	.LVL468
 17069 1a0e 1C000000 		.4byte	.LVL469
 17070 1a12 0100     		.2byte	0x1
 17071 1a14 50       		.byte	0x50
 17072 1a15 44000000 		.4byte	.LVL474
 17073 1a19 4C000000 		.4byte	.LVL475
 17074 1a1d 0100     		.2byte	0x1
 17075 1a1f 50       		.byte	0x50
 17076 1a20 4E000000 		.4byte	.LVL476
 17077 1a24 52000000 		.4byte	.LVL477
 17078 1a28 0100     		.2byte	0x1
 17079 1a2a 55       		.byte	0x55
 17080 1a2b 52000000 		.4byte	.LVL477
 17081 1a2f 54000000 		.4byte	.LFE22
 17082 1a33 0100     		.2byte	0x1
 17083 1a35 50       		.byte	0x50
 17084 1a36 00000000 		.4byte	0
 17085 1a3a 00000000 		.4byte	0
 17086              	.LLST113:
 17087 1a3e 1E000000 		.4byte	.LVL470
 17088 1a42 22000000 		.4byte	.LVL471
 17089 1a46 0100     		.2byte	0x1
 17090 1a48 53       		.byte	0x53
 17091 1a49 22000000 		.4byte	.LVL471
 17092 1a4d 28000000 		.4byte	.LVL472
 17093 1a51 0200     		.2byte	0x2
 17094 1a53 70       		.byte	0x70
 17095 1a54 00       		.sleb128 0
 17096 1a55 4C000000 		.4byte	.LVL475
 17097 1a59 4E000000 		.4byte	.LVL476
 17098 1a5d 0100     		.2byte	0x1
 17099 1a5f 53       		.byte	0x53
 17100 1a60 00000000 		.4byte	0
 17101 1a64 00000000 		.4byte	0
 17102              	.LLST114:
 17103 1a68 00000000 		.4byte	.LVL478
 17104 1a6c 2E000000 		.4byte	.LVL481
 17105 1a70 0100     		.2byte	0x1
 17106 1a72 50       		.byte	0x50
 17107 1a73 2E000000 		.4byte	.LVL481
 17108 1a77 8C000000 		.4byte	.LFE27
 17109 1a7b 0100     		.2byte	0x1
 17110 1a7d 54       		.byte	0x54
 17111 1a7e 00000000 		.4byte	0
 17112 1a82 00000000 		.4byte	0
 17113              	.LLST115:
 17114 1a86 00000000 		.4byte	.LVL478
 17115 1a8a 30000000 		.4byte	.LVL482
 17116 1a8e 0100     		.2byte	0x1
 17117 1a90 51       		.byte	0x51
 17118 1a91 30000000 		.4byte	.LVL482
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 426


 17119 1a95 38000000 		.4byte	.LVL485
 17120 1a99 0400     		.2byte	0x4
 17121 1a9b F3       		.byte	0xf3
 17122 1a9c 01       		.uleb128 0x1
 17123 1a9d 51       		.byte	0x51
 17124 1a9e 9F       		.byte	0x9f
 17125 1a9f 00000000 		.4byte	0
 17126 1aa3 00000000 		.4byte	0
 17127              	.LLST116:
 17128 1aa7 36000000 		.4byte	.LVL484
 17129 1aab 38000000 		.4byte	.LVL485
 17130 1aaf 0100     		.2byte	0x1
 17131 1ab1 53       		.byte	0x53
 17132 1ab2 40000000 		.4byte	.LVL486
 17133 1ab6 46000000 		.4byte	.LVL487
 17134 1aba 0100     		.2byte	0x1
 17135 1abc 50       		.byte	0x50
 17136 1abd 4A000000 		.4byte	.LVL488
 17137 1ac1 76000000 		.4byte	.LVL490
 17138 1ac5 0100     		.2byte	0x1
 17139 1ac7 50       		.byte	0x50
 17140 1ac8 80000000 		.4byte	.LVL492
 17141 1acc 86000000 		.4byte	.LVL493
 17142 1ad0 0100     		.2byte	0x1
 17143 1ad2 50       		.byte	0x50
 17144 1ad3 86000000 		.4byte	.LVL493
 17145 1ad7 8C000000 		.4byte	.LFE27
 17146 1adb 0100     		.2byte	0x1
 17147 1add 53       		.byte	0x53
 17148 1ade 00000000 		.4byte	0
 17149 1ae2 00000000 		.4byte	0
 17150              	.LLST117:
 17151 1ae6 4E000000 		.4byte	.LVL489
 17152 1aea 7B000000 		.4byte	.LVL491-1
 17153 1aee 0100     		.2byte	0x1
 17154 1af0 52       		.byte	0x52
 17155 1af1 80000000 		.4byte	.LVL492
 17156 1af5 86000000 		.4byte	.LVL493
 17157 1af9 0100     		.2byte	0x1
 17158 1afb 52       		.byte	0x52
 17159 1afc 00000000 		.4byte	0
 17160 1b00 00000000 		.4byte	0
 17161              	.LLST118:
 17162 1b04 08000000 		.4byte	.LVL479
 17163 1b08 2E000000 		.4byte	.LVL481
 17164 1b0c 0100     		.2byte	0x1
 17165 1b0e 50       		.byte	0x50
 17166 1b0f 2E000000 		.4byte	.LVL481
 17167 1b13 8C000000 		.4byte	.LFE27
 17168 1b17 0100     		.2byte	0x1
 17169 1b19 54       		.byte	0x54
 17170 1b1a 00000000 		.4byte	0
 17171 1b1e 00000000 		.4byte	0
 17172              	.LLST119:
 17173 1b22 00000000 		.4byte	.LVL494
 17174 1b26 0D000000 		.4byte	.LVL497-1
 17175 1b2a 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 427


 17176 1b2c 50       		.byte	0x50
 17177 1b2d 0D000000 		.4byte	.LVL497-1
 17178 1b31 4C000000 		.4byte	.LFE18
 17179 1b35 0100     		.2byte	0x1
 17180 1b37 54       		.byte	0x54
 17181 1b38 00000000 		.4byte	0
 17182 1b3c 00000000 		.4byte	0
 17183              	.LLST120:
 17184 1b40 00000000 		.4byte	.LVL494
 17185 1b44 0A000000 		.4byte	.LVL496
 17186 1b48 0100     		.2byte	0x1
 17187 1b4a 51       		.byte	0x51
 17188 1b4b 0A000000 		.4byte	.LVL496
 17189 1b4f 4C000000 		.4byte	.LFE18
 17190 1b53 0100     		.2byte	0x1
 17191 1b55 57       		.byte	0x57
 17192 1b56 00000000 		.4byte	0
 17193 1b5a 00000000 		.4byte	0
 17194              	.LLST121:
 17195 1b5e 0E000000 		.4byte	.LVL497
 17196 1b62 16000000 		.4byte	.LVL499
 17197 1b66 0100     		.2byte	0x1
 17198 1b68 50       		.byte	0x50
 17199 1b69 1C000000 		.4byte	.LVL500
 17200 1b6d 36000000 		.4byte	.LVL503
 17201 1b71 0100     		.2byte	0x1
 17202 1b73 50       		.byte	0x50
 17203 1b74 3C000000 		.4byte	.LVL504
 17204 1b78 42000000 		.4byte	.LVL505
 17205 1b7c 0100     		.2byte	0x1
 17206 1b7e 50       		.byte	0x50
 17207 1b7f 42000000 		.4byte	.LVL505
 17208 1b83 4C000000 		.4byte	.LFE18
 17209 1b87 0100     		.2byte	0x1
 17210 1b89 52       		.byte	0x52
 17211 1b8a 00000000 		.4byte	0
 17212 1b8e 00000000 		.4byte	0
 17213              	.LLST122:
 17214 1b92 14000000 		.4byte	.LVL498
 17215 1b96 42000000 		.4byte	.LVL505
 17216 1b9a 0100     		.2byte	0x1
 17217 1b9c 55       		.byte	0x55
 17218 1b9d 00000000 		.4byte	0
 17219 1ba1 00000000 		.4byte	0
 17220              	.LLST123:
 17221 1ba5 00000000 		.4byte	.LVL507
 17222 1ba9 0B000000 		.4byte	.LVL509-1
 17223 1bad 0100     		.2byte	0x1
 17224 1baf 50       		.byte	0x50
 17225 1bb0 0B000000 		.4byte	.LVL509-1
 17226 1bb4 3A000000 		.4byte	.LFE23
 17227 1bb8 0100     		.2byte	0x1
 17228 1bba 54       		.byte	0x54
 17229 1bbb 00000000 		.4byte	0
 17230 1bbf 00000000 		.4byte	0
 17231              	.LLST124:
 17232 1bc3 0C000000 		.4byte	.LVL509
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 428


 17233 1bc7 12000000 		.4byte	.LVL510
 17234 1bcb 0100     		.2byte	0x1
 17235 1bcd 50       		.byte	0x50
 17236 1bce 18000000 		.4byte	.LVL511
 17237 1bd2 1E000000 		.4byte	.LVL512
 17238 1bd6 0100     		.2byte	0x1
 17239 1bd8 50       		.byte	0x50
 17240 1bd9 36000000 		.4byte	.LVL515
 17241 1bdd 3A000000 		.4byte	.LFE23
 17242 1be1 0100     		.2byte	0x1
 17243 1be3 55       		.byte	0x55
 17244 1be4 00000000 		.4byte	0
 17245 1be8 00000000 		.4byte	0
 17246              	.LLST125:
 17247 1bec 00000000 		.4byte	.LVL516
 17248 1bf0 0C000000 		.4byte	.LVL519
 17249 1bf4 0100     		.2byte	0x1
 17250 1bf6 50       		.byte	0x50
 17251 1bf7 0C000000 		.4byte	.LVL519
 17252 1bfb 60000000 		.4byte	.LFE21
 17253 1bff 0100     		.2byte	0x1
 17254 1c01 54       		.byte	0x54
 17255 1c02 00000000 		.4byte	0
 17256 1c06 00000000 		.4byte	0
 17257              	.LLST126:
 17258 1c0a 00000000 		.4byte	.LVL516
 17259 1c0e 0C000000 		.4byte	.LVL519
 17260 1c12 0100     		.2byte	0x1
 17261 1c14 51       		.byte	0x51
 17262 1c15 0C000000 		.4byte	.LVL519
 17263 1c19 60000000 		.4byte	.LFE21
 17264 1c1d 0100     		.2byte	0x1
 17265 1c1f 56       		.byte	0x56
 17266 1c20 00000000 		.4byte	0
 17267 1c24 00000000 		.4byte	0
 17268              	.LLST127:
 17269 1c28 06000000 		.4byte	.LVL517
 17270 1c2c 0C000000 		.4byte	.LVL519
 17271 1c30 0200     		.2byte	0x2
 17272 1c32 34       		.byte	0x34
 17273 1c33 9F       		.byte	0x9f
 17274 1c34 0C000000 		.4byte	.LVL519
 17275 1c38 12000000 		.4byte	.LVL520
 17276 1c3c 0100     		.2byte	0x1
 17277 1c3e 57       		.byte	0x57
 17278 1c3f 12000000 		.4byte	.LVL520
 17279 1c43 42000000 		.4byte	.LVL524
 17280 1c47 0100     		.2byte	0x1
 17281 1c49 50       		.byte	0x50
 17282 1c4a 48000000 		.4byte	.LVL525
 17283 1c4e 4C000000 		.4byte	.LVL526
 17284 1c52 0100     		.2byte	0x1
 17285 1c54 50       		.byte	0x50
 17286 1c55 4C000000 		.4byte	.LVL526
 17287 1c59 54000000 		.4byte	.LVL527
 17288 1c5d 0100     		.2byte	0x1
 17289 1c5f 57       		.byte	0x57
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 429


 17290 1c60 54000000 		.4byte	.LVL527
 17291 1c64 56000000 		.4byte	.LVL528
 17292 1c68 0100     		.2byte	0x1
 17293 1c6a 50       		.byte	0x50
 17294 1c6b 56000000 		.4byte	.LVL528
 17295 1c6f 60000000 		.4byte	.LFE21
 17296 1c73 0100     		.2byte	0x1
 17297 1c75 57       		.byte	0x57
 17298 1c76 00000000 		.4byte	0
 17299 1c7a 00000000 		.4byte	0
 17300              	.LLST128:
 17301 1c7e 22000000 		.4byte	.LVL522
 17302 1c82 34000000 		.4byte	.LVL523
 17303 1c86 0100     		.2byte	0x1
 17304 1c88 53       		.byte	0x53
 17305 1c89 34000000 		.4byte	.LVL523
 17306 1c8d 47000000 		.4byte	.LVL525-1
 17307 1c91 0200     		.2byte	0x2
 17308 1c93 74       		.byte	0x74
 17309 1c94 06       		.sleb128 6
 17310 1c95 00000000 		.4byte	0
 17311 1c99 00000000 		.4byte	0
 17312              	.LLST129:
 17313 1c9d 1A000000 		.4byte	.LVL521
 17314 1ca1 47000000 		.4byte	.LVL525-1
 17315 1ca5 0100     		.2byte	0x1
 17316 1ca7 52       		.byte	0x52
 17317 1ca8 54000000 		.4byte	.LVL527
 17318 1cac 56000000 		.4byte	.LVL528
 17319 1cb0 0100     		.2byte	0x1
 17320 1cb2 52       		.byte	0x52
 17321 1cb3 00000000 		.4byte	0
 17322 1cb7 00000000 		.4byte	0
 17323              	.LLST130:
 17324 1cbb 00000000 		.4byte	.LVL529
 17325 1cbf 07000000 		.4byte	.LVL530-1
 17326 1cc3 0100     		.2byte	0x1
 17327 1cc5 50       		.byte	0x50
 17328 1cc6 07000000 		.4byte	.LVL530-1
 17329 1cca 82000000 		.4byte	.LVL541
 17330 1cce 0100     		.2byte	0x1
 17331 1cd0 54       		.byte	0x54
 17332 1cd1 82000000 		.4byte	.LVL541
 17333 1cd5 8C000000 		.4byte	.LFE10
 17334 1cd9 0400     		.2byte	0x4
 17335 1cdb F3       		.byte	0xf3
 17336 1cdc 01       		.uleb128 0x1
 17337 1cdd 50       		.byte	0x50
 17338 1cde 9F       		.byte	0x9f
 17339 1cdf 00000000 		.4byte	0
 17340 1ce3 00000000 		.4byte	0
 17341              	.LLST131:
 17342 1ce7 08000000 		.4byte	.LVL530
 17343 1ceb 20000000 		.4byte	.LVL531
 17344 1cef 0100     		.2byte	0x1
 17345 1cf1 50       		.byte	0x50
 17346 1cf2 7E000000 		.4byte	.LVL540
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 430


 17347 1cf6 82000000 		.4byte	.LVL541
 17348 1cfa 0100     		.2byte	0x1
 17349 1cfc 55       		.byte	0x55
 17350 1cfd 00000000 		.4byte	0
 17351 1d01 00000000 		.4byte	0
 17352              	.LLST132:
 17353 1d05 00000000 		.4byte	.LVL542
 17354 1d09 0C000000 		.4byte	.LVL543
 17355 1d0d 0100     		.2byte	0x1
 17356 1d0f 50       		.byte	0x50
 17357 1d10 0C000000 		.4byte	.LVL543
 17358 1d14 3E000000 		.4byte	.LVL548
 17359 1d18 0200     		.2byte	0x2
 17360 1d1a 91       		.byte	0x91
 17361 1d1b 6C       		.sleb128 -20
 17362 1d1c 3E000000 		.4byte	.LVL548
 17363 1d20 43000000 		.4byte	.LVL549-1
 17364 1d24 0200     		.2byte	0x2
 17365 1d26 71       		.byte	0x71
 17366 1d27 00       		.sleb128 0
 17367 1d28 43000000 		.4byte	.LVL549-1
 17368 1d2c 54000000 		.4byte	.LVL557
 17369 1d30 0200     		.2byte	0x2
 17370 1d32 91       		.byte	0x91
 17371 1d33 6C       		.sleb128 -20
 17372 1d34 54000000 		.4byte	.LVL557
 17373 1d38 58000000 		.4byte	.LFE32
 17374 1d3c 0200     		.2byte	0x2
 17375 1d3e 7D       		.byte	0x7d
 17376 1d3f 6C       		.sleb128 -20
 17377 1d40 00000000 		.4byte	0
 17378 1d44 00000000 		.4byte	0
 17379              	.LLST133:
 17380 1d48 00000000 		.4byte	.LVL542
 17381 1d4c 13000000 		.4byte	.LVL544-1
 17382 1d50 0100     		.2byte	0x1
 17383 1d52 51       		.byte	0x51
 17384 1d53 13000000 		.4byte	.LVL544-1
 17385 1d57 52000000 		.4byte	.LVL556
 17386 1d5b 0200     		.2byte	0x2
 17387 1d5d 7D       		.byte	0x7d
 17388 1d5e 00       		.sleb128 0
 17389 1d5f 52000000 		.4byte	.LVL556
 17390 1d63 54000000 		.4byte	.LVL557
 17391 1d67 0200     		.2byte	0x2
 17392 1d69 91       		.byte	0x91
 17393 1d6a 68       		.sleb128 -24
 17394 1d6b 54000000 		.4byte	.LVL557
 17395 1d6f 58000000 		.4byte	.LFE32
 17396 1d73 0200     		.2byte	0x2
 17397 1d75 7D       		.byte	0x7d
 17398 1d76 68       		.sleb128 -24
 17399 1d77 00000000 		.4byte	0
 17400 1d7b 00000000 		.4byte	0
 17401              	.LLST134:
 17402 1d7f 00000000 		.4byte	.LVL542
 17403 1d83 13000000 		.4byte	.LVL544-1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 431


 17404 1d87 0100     		.2byte	0x1
 17405 1d89 52       		.byte	0x52
 17406 1d8a 13000000 		.4byte	.LVL544-1
 17407 1d8e 58000000 		.4byte	.LFE32
 17408 1d92 0400     		.2byte	0x4
 17409 1d94 F3       		.byte	0xf3
 17410 1d95 01       		.uleb128 0x1
 17411 1d96 52       		.byte	0x52
 17412 1d97 9F       		.byte	0x9f
 17413 1d98 00000000 		.4byte	0
 17414 1d9c 00000000 		.4byte	0
 17415              	.LLST135:
 17416 1da0 1E000000 		.4byte	.LVL545
 17417 1da4 26000000 		.4byte	.LVL546
 17418 1da8 0100     		.2byte	0x1
 17419 1daa 53       		.byte	0x53
 17420 1dab 00000000 		.4byte	0
 17421 1daf 00000000 		.4byte	0
 17422              	.LLST136:
 17423 1db3 14000000 		.4byte	.LVL544
 17424 1db7 3C000000 		.4byte	.LVL547
 17425 1dbb 0100     		.2byte	0x1
 17426 1dbd 50       		.byte	0x50
 17427 1dbe 46000000 		.4byte	.LVL550
 17428 1dc2 48000000 		.4byte	.LVL551
 17429 1dc6 0100     		.2byte	0x1
 17430 1dc8 50       		.byte	0x50
 17431 1dc9 4A000000 		.4byte	.LVL552
 17432 1dcd 4C000000 		.4byte	.LVL553
 17433 1dd1 0100     		.2byte	0x1
 17434 1dd3 50       		.byte	0x50
 17435 1dd4 4E000000 		.4byte	.LVL554
 17436 1dd8 50000000 		.4byte	.LVL555
 17437 1ddc 0100     		.2byte	0x1
 17438 1dde 50       		.byte	0x50
 17439 1ddf 00000000 		.4byte	0
 17440 1de3 00000000 		.4byte	0
 17441              	.LLST137:
 17442 1de7 44000000 		.4byte	.LVL549
 17443 1deb 46000000 		.4byte	.LVL550
 17444 1def 0100     		.2byte	0x1
 17445 1df1 50       		.byte	0x50
 17446 1df2 00000000 		.4byte	0
 17447 1df6 00000000 		.4byte	0
 17448              	.LLST138:
 17449 1dfa 00000000 		.4byte	.LVL558
 17450 1dfe 18000000 		.4byte	.LVL560
 17451 1e02 0100     		.2byte	0x1
 17452 1e04 50       		.byte	0x50
 17453 1e05 18000000 		.4byte	.LVL560
 17454 1e09 CE010000 		.4byte	.LVL609
 17455 1e0d 0100     		.2byte	0x1
 17456 1e0f 56       		.byte	0x56
 17457 1e10 CE010000 		.4byte	.LVL609
 17458 1e14 D0010000 		.4byte	.LVL610
 17459 1e18 0100     		.2byte	0x1
 17460 1e1a 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 432


 17461 1e1b D0010000 		.4byte	.LVL610
 17462 1e1f DC010000 		.4byte	.LFE33
 17463 1e23 0400     		.2byte	0x4
 17464 1e25 F3       		.byte	0xf3
 17465 1e26 01       		.uleb128 0x1
 17466 1e27 50       		.byte	0x50
 17467 1e28 9F       		.byte	0x9f
 17468 1e29 00000000 		.4byte	0
 17469 1e2d 00000000 		.4byte	0
 17470              	.LLST139:
 17471 1e31 00000000 		.4byte	.LVL558
 17472 1e35 1A000000 		.4byte	.LVL561
 17473 1e39 0100     		.2byte	0x1
 17474 1e3b 51       		.byte	0x51
 17475 1e3c 1A000000 		.4byte	.LVL561
 17476 1e40 1F000000 		.4byte	.LVL562-1
 17477 1e44 0200     		.2byte	0x2
 17478 1e46 70       		.byte	0x70
 17479 1e47 00       		.sleb128 0
 17480 1e48 1F000000 		.4byte	.LVL562-1
 17481 1e4c CE010000 		.4byte	.LVL609
 17482 1e50 0300     		.2byte	0x3
 17483 1e52 91       		.byte	0x91
 17484 1e53 AC7F     		.sleb128 -84
 17485 1e55 CE010000 		.4byte	.LVL609
 17486 1e59 D0010000 		.4byte	.LVL610
 17487 1e5d 0100     		.2byte	0x1
 17488 1e5f 51       		.byte	0x51
 17489 1e60 D0010000 		.4byte	.LVL610
 17490 1e64 D6010000 		.4byte	.LVL611
 17491 1e68 0300     		.2byte	0x3
 17492 1e6a 91       		.byte	0x91
 17493 1e6b AC7F     		.sleb128 -84
 17494 1e6d D6010000 		.4byte	.LVL611
 17495 1e71 DC010000 		.4byte	.LFE33
 17496 1e75 0300     		.2byte	0x3
 17497 1e77 7D       		.byte	0x7d
 17498 1e78 AC7F     		.sleb128 -84
 17499 1e7a 00000000 		.4byte	0
 17500 1e7e 00000000 		.4byte	0
 17501              	.LLST140:
 17502 1e82 00000000 		.4byte	.LVL558
 17503 1e86 16000000 		.4byte	.LVL559
 17504 1e8a 0100     		.2byte	0x1
 17505 1e8c 52       		.byte	0x52
 17506 1e8d 16000000 		.4byte	.LVL559
 17507 1e91 72010000 		.4byte	.LVL593
 17508 1e95 0100     		.2byte	0x1
 17509 1e97 57       		.byte	0x57
 17510 1e98 CE010000 		.4byte	.LVL609
 17511 1e9c D0010000 		.4byte	.LVL610
 17512 1ea0 0100     		.2byte	0x1
 17513 1ea2 52       		.byte	0x52
 17514 1ea3 00000000 		.4byte	0
 17515 1ea7 00000000 		.4byte	0
 17516              	.LLST141:
 17517 1eab 20000000 		.4byte	.LVL562
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 433


 17518 1eaf 2E000000 		.4byte	.LVL563
 17519 1eb3 0100     		.2byte	0x1
 17520 1eb5 50       		.byte	0x50
 17521 1eb6 34000000 		.4byte	.LVL564
 17522 1eba 42000000 		.4byte	.LVL565
 17523 1ebe 0100     		.2byte	0x1
 17524 1ec0 50       		.byte	0x50
 17525 1ec1 42000000 		.4byte	.LVL565
 17526 1ec5 70000000 		.4byte	.LVL569
 17527 1ec9 0100     		.2byte	0x1
 17528 1ecb 54       		.byte	0x54
 17529 1ecc 72000000 		.4byte	.LVL570
 17530 1ed0 D8000000 		.4byte	.LVL581
 17531 1ed4 0100     		.2byte	0x1
 17532 1ed6 54       		.byte	0x54
 17533 1ed7 D8000000 		.4byte	.LVL581
 17534 1edb DE000000 		.4byte	.LVL582
 17535 1edf 0100     		.2byte	0x1
 17536 1ee1 50       		.byte	0x50
 17537 1ee2 E6000000 		.4byte	.LVL584
 17538 1ee6 0C010000 		.4byte	.LVL586
 17539 1eea 0100     		.2byte	0x1
 17540 1eec 54       		.byte	0x54
 17541 1eed 0E010000 		.4byte	.LVL587
 17542 1ef1 C0010000 		.4byte	.LVL606
 17543 1ef5 0100     		.2byte	0x1
 17544 1ef7 54       		.byte	0x54
 17545 1ef8 C2010000 		.4byte	.LVL607
 17546 1efc CE010000 		.4byte	.LVL609
 17547 1f00 0100     		.2byte	0x1
 17548 1f02 54       		.byte	0x54
 17549 1f03 00000000 		.4byte	0
 17550 1f07 00000000 		.4byte	0
 17551              	.LLST142:
 17552 1f0b 7E000000 		.4byte	.LVL572
 17553 1f0f CE000000 		.4byte	.LVL580
 17554 1f13 0600     		.2byte	0x6
 17555 1f15 0C       		.byte	0xc
 17556 1f16 00002148 		.4byte	0x48210000
 17557 1f1a 9F       		.byte	0x9f
 17558 1f1b CE000000 		.4byte	.LVL580
 17559 1f1f F0000000 		.4byte	.LVL585
 17560 1f23 0100     		.2byte	0x1
 17561 1f25 55       		.byte	0x55
 17562 1f26 00000000 		.4byte	0
 17563 1f2a 00000000 		.4byte	0
 17564              	.LLST143:
 17565 1f2e AA000000 		.4byte	.LVL576
 17566 1f32 AC000000 		.4byte	.LVL577
 17567 1f36 0100     		.2byte	0x1
 17568 1f38 50       		.byte	0x50
 17569 1f39 AC000000 		.4byte	.LVL577
 17570 1f3d F0000000 		.4byte	.LVL585
 17571 1f41 0100     		.2byte	0x1
 17572 1f43 59       		.byte	0x59
 17573 1f44 00000000 		.4byte	0
 17574 1f48 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 434


 17575              	.LLST144:
 17576 1f4c 74010000 		.4byte	.LVL594
 17577 1f50 A2010000 		.4byte	.LVL601
 17578 1f54 0100     		.2byte	0x1
 17579 1f56 57       		.byte	0x57
 17580 1f57 00000000 		.4byte	0
 17581 1f5b 00000000 		.4byte	0
 17582              	.LLST145:
 17583 1f5f 76010000 		.4byte	.LVL595
 17584 1f63 7D010000 		.4byte	.LVL596-1
 17585 1f67 0100     		.2byte	0x1
 17586 1f69 51       		.byte	0x51
 17587 1f6a 80010000 		.4byte	.LVL597
 17588 1f6e 90010000 		.4byte	.LVL600
 17589 1f72 0100     		.2byte	0x1
 17590 1f74 50       		.byte	0x50
 17591 1f75 90010000 		.4byte	.LVL600
 17592 1f79 A7010000 		.4byte	.LVL602-1
 17593 1f7d 0100     		.2byte	0x1
 17594 1f7f 51       		.byte	0x51
 17595 1f80 00000000 		.4byte	0
 17596 1f84 00000000 		.4byte	0
 17597              	.LLST146:
 17598 1f88 A8010000 		.4byte	.LVL602
 17599 1f8c B2010000 		.4byte	.LVL603
 17600 1f90 0100     		.2byte	0x1
 17601 1f92 50       		.byte	0x50
 17602 1f93 BE010000 		.4byte	.LVL605
 17603 1f97 C2010000 		.4byte	.LVL607
 17604 1f9b 0100     		.2byte	0x1
 17605 1f9d 50       		.byte	0x50
 17606 1f9e 00000000 		.4byte	0
 17607 1fa2 00000000 		.4byte	0
 17608              	.LLST147:
 17609 1fa6 76010000 		.4byte	.LVL595
 17610 1faa C4010000 		.4byte	.LVL608
 17611 1fae 0100     		.2byte	0x1
 17612 1fb0 55       		.byte	0x55
 17613 1fb1 00000000 		.4byte	0
 17614 1fb5 00000000 		.4byte	0
 17615              	.LLST148:
 17616 1fb9 00000000 		.4byte	.LVL612
 17617 1fbd 19000000 		.4byte	.LVL616-1
 17618 1fc1 0100     		.2byte	0x1
 17619 1fc3 50       		.byte	0x50
 17620 1fc4 19000000 		.4byte	.LVL616-1
 17621 1fc8 76010000 		.4byte	.LFE34
 17622 1fcc 0100     		.2byte	0x1
 17623 1fce 54       		.byte	0x54
 17624 1fcf 00000000 		.4byte	0
 17625 1fd3 00000000 		.4byte	0
 17626              	.LLST149:
 17627 1fd7 00000000 		.4byte	.LVL612
 17628 1fdb 16000000 		.4byte	.LVL615
 17629 1fdf 0100     		.2byte	0x1
 17630 1fe1 51       		.byte	0x51
 17631 1fe2 16000000 		.4byte	.LVL615
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 435


 17632 1fe6 40000000 		.4byte	.LVL622
 17633 1fea 0100     		.2byte	0x1
 17634 1fec 58       		.byte	0x58
 17635 1fed 40000000 		.4byte	.LVL622
 17636 1ff1 6E010000 		.4byte	.LVL651
 17637 1ff5 0400     		.2byte	0x4
 17638 1ff7 F3       		.byte	0xf3
 17639 1ff8 01       		.uleb128 0x1
 17640 1ff9 51       		.byte	0x51
 17641 1ffa 9F       		.byte	0x9f
 17642 1ffb 6E010000 		.4byte	.LVL651
 17643 1fff 70010000 		.4byte	.LVL652
 17644 2003 0100     		.2byte	0x1
 17645 2005 58       		.byte	0x58
 17646 2006 70010000 		.4byte	.LVL652
 17647 200a 76010000 		.4byte	.LFE34
 17648 200e 0400     		.2byte	0x4
 17649 2010 F3       		.byte	0xf3
 17650 2011 01       		.uleb128 0x1
 17651 2012 51       		.byte	0x51
 17652 2013 9F       		.byte	0x9f
 17653 2014 00000000 		.4byte	0
 17654 2018 00000000 		.4byte	0
 17655              	.LLST150:
 17656 201c 00000000 		.4byte	.LVL612
 17657 2020 19000000 		.4byte	.LVL616-1
 17658 2024 0100     		.2byte	0x1
 17659 2026 52       		.byte	0x52
 17660 2027 19000000 		.4byte	.LVL616-1
 17661 202b 40000000 		.4byte	.LVL622
 17662 202f 0100     		.2byte	0x1
 17663 2031 55       		.byte	0x55
 17664 2032 40000000 		.4byte	.LVL622
 17665 2036 6E010000 		.4byte	.LVL651
 17666 203a 0100     		.2byte	0x1
 17667 203c 56       		.byte	0x56
 17668 203d 6E010000 		.4byte	.LVL651
 17669 2041 70010000 		.4byte	.LVL652
 17670 2045 0100     		.2byte	0x1
 17671 2047 55       		.byte	0x55
 17672 2048 00000000 		.4byte	0
 17673 204c 00000000 		.4byte	0
 17674              	.LLST151:
 17675 2050 00000000 		.4byte	.LVL612
 17676 2054 10000000 		.4byte	.LVL614
 17677 2058 0100     		.2byte	0x1
 17678 205a 53       		.byte	0x53
 17679 205b 10000000 		.4byte	.LVL614
 17680 205f 76010000 		.4byte	.LFE34
 17681 2063 0100     		.2byte	0x1
 17682 2065 57       		.byte	0x57
 17683 2066 00000000 		.4byte	0
 17684 206a 00000000 		.4byte	0
 17685              	.LLST152:
 17686 206e 1A000000 		.4byte	.LVL616
 17687 2072 20000000 		.4byte	.LVL617
 17688 2076 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 436


 17689 2078 50       		.byte	0x50
 17690 2079 20000000 		.4byte	.LVL617
 17691 207d 28000000 		.4byte	.LVL619
 17692 2081 0100     		.2byte	0x1
 17693 2083 53       		.byte	0x53
 17694 2084 28000000 		.4byte	.LVL619
 17695 2088 40000000 		.4byte	.LVL622
 17696 208c 0200     		.2byte	0x2
 17697 208e 74       		.byte	0x74
 17698 208f 11       		.sleb128 17
 17699 2090 6E010000 		.4byte	.LVL651
 17700 2094 70010000 		.4byte	.LVL652
 17701 2098 0200     		.2byte	0x2
 17702 209a 74       		.byte	0x74
 17703 209b 11       		.sleb128 17
 17704 209c 00000000 		.4byte	0
 17705 20a0 00000000 		.4byte	0
 17706              	.LLST153:
 17707 20a4 5E000000 		.4byte	.LVL625
 17708 20a8 60000000 		.4byte	.LVL626
 17709 20ac 0100     		.2byte	0x1
 17710 20ae 50       		.byte	0x50
 17711 20af 68000000 		.4byte	.LVL627
 17712 20b3 72000000 		.4byte	.LVL628
 17713 20b7 0100     		.2byte	0x1
 17714 20b9 50       		.byte	0x50
 17715 20ba 74000000 		.4byte	.LVL629
 17716 20be 80000000 		.4byte	.LVL630
 17717 20c2 0100     		.2byte	0x1
 17718 20c4 50       		.byte	0x50
 17719 20c5 82000000 		.4byte	.LVL631
 17720 20c9 84000000 		.4byte	.LVL632
 17721 20cd 0100     		.2byte	0x1
 17722 20cf 50       		.byte	0x50
 17723 20d0 00000000 		.4byte	0
 17724 20d4 00000000 		.4byte	0
 17725              	.LLST154:
 17726 20d8 90000000 		.4byte	.LVL633
 17727 20dc 96000000 		.4byte	.LVL634
 17728 20e0 0100     		.2byte	0x1
 17729 20e2 50       		.byte	0x50
 17730 20e3 96000000 		.4byte	.LVL634
 17731 20e7 9A000000 		.4byte	.LVL635
 17732 20eb 0100     		.2byte	0x1
 17733 20ed 5A       		.byte	0x5a
 17734 20ee 9A000000 		.4byte	.LVL635
 17735 20f2 9C000000 		.4byte	.LVL636
 17736 20f6 0100     		.2byte	0x1
 17737 20f8 50       		.byte	0x50
 17738 20f9 9C000000 		.4byte	.LVL636
 17739 20fd 38010000 		.4byte	.LVL645
 17740 2101 0100     		.2byte	0x1
 17741 2103 5A       		.byte	0x5a
 17742 2104 00000000 		.4byte	0
 17743 2108 00000000 		.4byte	0
 17744              	.LLST155:
 17745 210c 36000000 		.4byte	.LVL620
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 437


 17746 2110 3E000000 		.4byte	.LVL621
 17747 2114 0100     		.2byte	0x1
 17748 2116 56       		.byte	0x56
 17749 2117 3E000000 		.4byte	.LVL621
 17750 211b 40000000 		.4byte	.LVL622
 17751 211f 0700     		.2byte	0x7
 17752 2121 74       		.byte	0x74
 17753 2122 0C       		.sleb128 12
 17754 2123 06       		.byte	0x6
 17755 2124 73       		.byte	0x73
 17756 2125 00       		.sleb128 0
 17757 2126 1C       		.byte	0x1c
 17758 2127 9F       		.byte	0x9f
 17759 2128 00000000 		.4byte	0
 17760 212c 00000000 		.4byte	0
 17761              	.LLST156:
 17762 2130 EA000000 		.4byte	.LVL641
 17763 2134 EC000000 		.4byte	.LVL642
 17764 2138 0100     		.2byte	0x1
 17765 213a 55       		.byte	0x55
 17766 213b 42010000 		.4byte	.LVL646
 17767 213f 64010000 		.4byte	.LVL650
 17768 2143 0100     		.2byte	0x1
 17769 2145 55       		.byte	0x55
 17770 2146 00000000 		.4byte	0
 17771 214a 00000000 		.4byte	0
 17772              	.LLST157:
 17773 214e 9C000000 		.4byte	.LVL636
 17774 2152 9E000000 		.4byte	.LVL637
 17775 2156 0500     		.2byte	0x5
 17776 2158 76       		.byte	0x76
 17777 2159 00       		.sleb128 0
 17778 215a 39       		.byte	0x39
 17779 215b 25       		.byte	0x25
 17780 215c 9F       		.byte	0x9f
 17781 215d 9E000000 		.4byte	.LVL637
 17782 2161 EA000000 		.4byte	.LVL641
 17783 2165 0100     		.2byte	0x1
 17784 2167 55       		.byte	0x55
 17785 2168 EC000000 		.4byte	.LVL642
 17786 216c 38010000 		.4byte	.LVL645
 17787 2170 0100     		.2byte	0x1
 17788 2172 55       		.byte	0x55
 17789 2173 00000000 		.4byte	0
 17790 2177 00000000 		.4byte	0
 17791              	.LLST158:
 17792 217b 54000000 		.4byte	.LVL623
 17793 217f 58000000 		.4byte	.LVL624
 17794 2183 0800     		.2byte	0x8
 17795 2185 73       		.byte	0x73
 17796 2186 00       		.sleb128 0
 17797 2187 39       		.byte	0x39
 17798 2188 25       		.byte	0x25
 17799 2189 79       		.byte	0x79
 17800 218a 00       		.sleb128 0
 17801 218b 1A       		.byte	0x1a
 17802 218c 9F       		.byte	0x9f
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 438


 17803 218d 58000000 		.4byte	.LVL624
 17804 2191 38010000 		.4byte	.LVL645
 17805 2195 0100     		.2byte	0x1
 17806 2197 59       		.byte	0x59
 17807 2198 00000000 		.4byte	0
 17808 219c 00000000 		.4byte	0
 17809              	.LLST159:
 17810 21a0 0E000000 		.4byte	.LVL613
 17811 21a4 16000000 		.4byte	.LVL615
 17812 21a8 0100     		.2byte	0x1
 17813 21aa 51       		.byte	0x51
 17814 21ab 16000000 		.4byte	.LVL615
 17815 21af 76010000 		.4byte	.LFE34
 17816 21b3 0100     		.2byte	0x1
 17817 21b5 58       		.byte	0x58
 17818 21b6 00000000 		.4byte	0
 17819 21ba 00000000 		.4byte	0
 17820              	.LLST160:
 17821 21be 00000000 		.4byte	.LVL653
 17822 21c2 19000000 		.4byte	.LVL657-1
 17823 21c6 0100     		.2byte	0x1
 17824 21c8 50       		.byte	0x50
 17825 21c9 19000000 		.4byte	.LVL657-1
 17826 21cd AE010000 		.4byte	.LFE35
 17827 21d1 0100     		.2byte	0x1
 17828 21d3 54       		.byte	0x54
 17829 21d4 00000000 		.4byte	0
 17830 21d8 00000000 		.4byte	0
 17831              	.LLST161:
 17832 21dc 00000000 		.4byte	.LVL653
 17833 21e0 16000000 		.4byte	.LVL656
 17834 21e4 0100     		.2byte	0x1
 17835 21e6 51       		.byte	0x51
 17836 21e7 16000000 		.4byte	.LVL656
 17837 21eb 3C000000 		.4byte	.LVL662
 17838 21ef 0100     		.2byte	0x1
 17839 21f1 58       		.byte	0x58
 17840 21f2 3C000000 		.4byte	.LVL662
 17841 21f6 A6010000 		.4byte	.LVL693
 17842 21fa 0400     		.2byte	0x4
 17843 21fc F3       		.byte	0xf3
 17844 21fd 01       		.uleb128 0x1
 17845 21fe 51       		.byte	0x51
 17846 21ff 9F       		.byte	0x9f
 17847 2200 A6010000 		.4byte	.LVL693
 17848 2204 A8010000 		.4byte	.LVL694
 17849 2208 0100     		.2byte	0x1
 17850 220a 58       		.byte	0x58
 17851 220b A8010000 		.4byte	.LVL694
 17852 220f AE010000 		.4byte	.LFE35
 17853 2213 0400     		.2byte	0x4
 17854 2215 F3       		.byte	0xf3
 17855 2216 01       		.uleb128 0x1
 17856 2217 51       		.byte	0x51
 17857 2218 9F       		.byte	0x9f
 17858 2219 00000000 		.4byte	0
 17859 221d 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 439


 17860              	.LLST162:
 17861 2221 00000000 		.4byte	.LVL653
 17862 2225 19000000 		.4byte	.LVL657-1
 17863 2229 0100     		.2byte	0x1
 17864 222b 52       		.byte	0x52
 17865 222c 19000000 		.4byte	.LVL657-1
 17866 2230 AE010000 		.4byte	.LFE35
 17867 2234 0100     		.2byte	0x1
 17868 2236 56       		.byte	0x56
 17869 2237 00000000 		.4byte	0
 17870 223b 00000000 		.4byte	0
 17871              	.LLST163:
 17872 223f 00000000 		.4byte	.LVL653
 17873 2243 10000000 		.4byte	.LVL655
 17874 2247 0100     		.2byte	0x1
 17875 2249 53       		.byte	0x53
 17876 224a 10000000 		.4byte	.LVL655
 17877 224e AE010000 		.4byte	.LFE35
 17878 2252 0100     		.2byte	0x1
 17879 2254 57       		.byte	0x57
 17880 2255 00000000 		.4byte	0
 17881 2259 00000000 		.4byte	0
 17882              	.LLST164:
 17883 225d 1A000000 		.4byte	.LVL657
 17884 2261 20000000 		.4byte	.LVL658
 17885 2265 0100     		.2byte	0x1
 17886 2267 50       		.byte	0x50
 17887 2268 20000000 		.4byte	.LVL658
 17888 226c 28000000 		.4byte	.LVL660
 17889 2270 0100     		.2byte	0x1
 17890 2272 53       		.byte	0x53
 17891 2273 28000000 		.4byte	.LVL660
 17892 2277 3C000000 		.4byte	.LVL662
 17893 227b 0200     		.2byte	0x2
 17894 227d 74       		.byte	0x74
 17895 227e 11       		.sleb128 17
 17896 227f A6010000 		.4byte	.LVL693
 17897 2283 A8010000 		.4byte	.LVL694
 17898 2287 0200     		.2byte	0x2
 17899 2289 74       		.byte	0x74
 17900 228a 11       		.sleb128 17
 17901 228b 00000000 		.4byte	0
 17902 228f 00000000 		.4byte	0
 17903              	.LLST165:
 17904 2293 5C000000 		.4byte	.LVL665
 17905 2297 60000000 		.4byte	.LVL666
 17906 229b 0100     		.2byte	0x1
 17907 229d 50       		.byte	0x50
 17908 229e 60000000 		.4byte	.LVL666
 17909 22a2 65000000 		.4byte	.LVL667-1
 17910 22a6 0200     		.2byte	0x2
 17911 22a8 74       		.byte	0x74
 17912 22a9 08       		.sleb128 8
 17913 22aa 66000000 		.4byte	.LVL667
 17914 22ae 68000000 		.4byte	.LVL668
 17915 22b2 0100     		.2byte	0x1
 17916 22b4 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 440


 17917 22b5 70000000 		.4byte	.LVL669
 17918 22b9 80000000 		.4byte	.LVL670
 17919 22bd 0100     		.2byte	0x1
 17920 22bf 50       		.byte	0x50
 17921 22c0 82000000 		.4byte	.LVL671
 17922 22c4 8E000000 		.4byte	.LVL672
 17923 22c8 0100     		.2byte	0x1
 17924 22ca 50       		.byte	0x50
 17925 22cb 90000000 		.4byte	.LVL673
 17926 22cf 98000000 		.4byte	.LVL674
 17927 22d3 0100     		.2byte	0x1
 17928 22d5 50       		.byte	0x50
 17929 22d6 00000000 		.4byte	0
 17930 22da 00000000 		.4byte	0
 17931              	.LLST166:
 17932 22de CE000000 		.4byte	.LVL676
 17933 22e2 D4000000 		.4byte	.LVL677
 17934 22e6 0100     		.2byte	0x1
 17935 22e8 50       		.byte	0x50
 17936 22e9 D4000000 		.4byte	.LVL677
 17937 22ed D8000000 		.4byte	.LVL678
 17938 22f1 0100     		.2byte	0x1
 17939 22f3 5A       		.byte	0x5a
 17940 22f4 D8000000 		.4byte	.LVL678
 17941 22f8 DA000000 		.4byte	.LVL679
 17942 22fc 0100     		.2byte	0x1
 17943 22fe 50       		.byte	0x50
 17944 22ff DA000000 		.4byte	.LVL679
 17945 2303 56010000 		.4byte	.LVL687
 17946 2307 0100     		.2byte	0x1
 17947 2309 5A       		.byte	0x5a
 17948 230a 00000000 		.4byte	0
 17949 230e 00000000 		.4byte	0
 17950              	.LLST167:
 17951 2312 28010000 		.4byte	.LVL684
 17952 2316 2A010000 		.4byte	.LVL685
 17953 231a 0100     		.2byte	0x1
 17954 231c 55       		.byte	0x55
 17955 231d 60010000 		.4byte	.LVL688
 17956 2321 94010000 		.4byte	.LVL692
 17957 2325 0100     		.2byte	0x1
 17958 2327 55       		.byte	0x55
 17959 2328 00000000 		.4byte	0
 17960 232c 00000000 		.4byte	0
 17961              	.LLST168:
 17962 2330 DA000000 		.4byte	.LVL679
 17963 2334 DC000000 		.4byte	.LVL680
 17964 2338 0500     		.2byte	0x5
 17965 233a 76       		.byte	0x76
 17966 233b 00       		.sleb128 0
 17967 233c 39       		.byte	0x39
 17968 233d 25       		.byte	0x25
 17969 233e 9F       		.byte	0x9f
 17970 233f DC000000 		.4byte	.LVL680
 17971 2343 28010000 		.4byte	.LVL684
 17972 2347 0100     		.2byte	0x1
 17973 2349 55       		.byte	0x55
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 441


 17974 234a 2A010000 		.4byte	.LVL685
 17975 234e 56010000 		.4byte	.LVL687
 17976 2352 0100     		.2byte	0x1
 17977 2354 55       		.byte	0x55
 17978 2355 00000000 		.4byte	0
 17979 2359 00000000 		.4byte	0
 17980              	.LLST169:
 17981 235d 52000000 		.4byte	.LVL663
 17982 2361 56000000 		.4byte	.LVL664
 17983 2365 0800     		.2byte	0x8
 17984 2367 73       		.byte	0x73
 17985 2368 00       		.sleb128 0
 17986 2369 39       		.byte	0x39
 17987 236a 25       		.byte	0x25
 17988 236b 79       		.byte	0x79
 17989 236c 00       		.sleb128 0
 17990 236d 1A       		.byte	0x1a
 17991 236e 9F       		.byte	0x9f
 17992 236f 56000000 		.4byte	.LVL664
 17993 2373 56010000 		.4byte	.LVL687
 17994 2377 0100     		.2byte	0x1
 17995 2379 59       		.byte	0x59
 17996 237a 00000000 		.4byte	0
 17997 237e 00000000 		.4byte	0
 17998              	.LLST170:
 17999 2382 0E000000 		.4byte	.LVL654
 18000 2386 16000000 		.4byte	.LVL656
 18001 238a 0100     		.2byte	0x1
 18002 238c 51       		.byte	0x51
 18003 238d 16000000 		.4byte	.LVL656
 18004 2391 AE010000 		.4byte	.LFE35
 18005 2395 0100     		.2byte	0x1
 18006 2397 58       		.byte	0x58
 18007 2398 00000000 		.4byte	0
 18008 239c 00000000 		.4byte	0
 18009              	.LLST171:
 18010 23a0 00000000 		.4byte	.LVL695
 18011 23a4 11000000 		.4byte	.LVL697-1
 18012 23a8 0100     		.2byte	0x1
 18013 23aa 50       		.byte	0x50
 18014 23ab 11000000 		.4byte	.LVL697-1
 18015 23af 4A000000 		.4byte	.LFE49
 18016 23b3 0100     		.2byte	0x1
 18017 23b5 54       		.byte	0x54
 18018 23b6 00000000 		.4byte	0
 18019 23ba 00000000 		.4byte	0
 18020              	.LLST172:
 18021 23be 00000000 		.4byte	.LVL695
 18022 23c2 0E000000 		.4byte	.LVL696
 18023 23c6 0100     		.2byte	0x1
 18024 23c8 51       		.byte	0x51
 18025 23c9 0E000000 		.4byte	.LVL696
 18026 23cd 4A000000 		.4byte	.LFE49
 18027 23d1 0400     		.2byte	0x4
 18028 23d3 F3       		.byte	0xf3
 18029 23d4 01       		.uleb128 0x1
 18030 23d5 51       		.byte	0x51
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 442


 18031 23d6 9F       		.byte	0x9f
 18032 23d7 00000000 		.4byte	0
 18033 23db 00000000 		.4byte	0
 18034              	.LLST173:
 18035 23df 14000000 		.4byte	.LVL698
 18036 23e3 1A000000 		.4byte	.LVL699
 18037 23e7 0100     		.2byte	0x1
 18038 23e9 53       		.byte	0x53
 18039 23ea 1A000000 		.4byte	.LVL699
 18040 23ee 38000000 		.4byte	.LVL701
 18041 23f2 0100     		.2byte	0x1
 18042 23f4 55       		.byte	0x55
 18043 23f5 3A000000 		.4byte	.LVL702
 18044 23f9 46000000 		.4byte	.LVL704
 18045 23fd 0100     		.2byte	0x1
 18046 23ff 55       		.byte	0x55
 18047 2400 00000000 		.4byte	0
 18048 2404 00000000 		.4byte	0
 18049              	.LLST174:
 18050 2408 00000000 		.4byte	.LVL705
 18051 240c 0E000000 		.4byte	.LVL706
 18052 2410 0100     		.2byte	0x1
 18053 2412 50       		.byte	0x50
 18054 2413 0E000000 		.4byte	.LVL706
 18055 2417 26000000 		.4byte	.LVL708
 18056 241b 0100     		.2byte	0x1
 18057 241d 54       		.byte	0x54
 18058 241e 26000000 		.4byte	.LVL708
 18059 2422 2A000000 		.4byte	.LVL709
 18060 2426 0100     		.2byte	0x1
 18061 2428 50       		.byte	0x50
 18062 2429 2A000000 		.4byte	.LVL709
 18063 242d 2C000000 		.4byte	.LVL710
 18064 2431 0400     		.2byte	0x4
 18065 2433 F3       		.byte	0xf3
 18066 2434 01       		.uleb128 0x1
 18067 2435 50       		.byte	0x50
 18068 2436 9F       		.byte	0x9f
 18069 2437 2C000000 		.4byte	.LVL710
 18070 243b 3A000000 		.4byte	.LFE50
 18071 243f 0100     		.2byte	0x1
 18072 2441 54       		.byte	0x54
 18073 2442 00000000 		.4byte	0
 18074 2446 00000000 		.4byte	0
 18075              	.LLST175:
 18076 244a 00000000 		.4byte	.LVL711
 18077 244e 0B000000 		.4byte	.LVL712-1
 18078 2452 0100     		.2byte	0x1
 18079 2454 50       		.byte	0x50
 18080 2455 0B000000 		.4byte	.LVL712-1
 18081 2459 98000000 		.4byte	.LVL727
 18082 245d 0100     		.2byte	0x1
 18083 245f 54       		.byte	0x54
 18084 2460 98000000 		.4byte	.LVL727
 18085 2464 9C000000 		.4byte	.LFE36
 18086 2468 0400     		.2byte	0x4
 18087 246a F3       		.byte	0xf3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 443


 18088 246b 01       		.uleb128 0x1
 18089 246c 50       		.byte	0x50
 18090 246d 9F       		.byte	0x9f
 18091 246e 00000000 		.4byte	0
 18092 2472 00000000 		.4byte	0
 18093              	.LLST176:
 18094 2476 0C000000 		.4byte	.LVL712
 18095 247a 24000000 		.4byte	.LVL713
 18096 247e 0100     		.2byte	0x1
 18097 2480 50       		.byte	0x50
 18098 2481 42000000 		.4byte	.LVL716
 18099 2485 52000000 		.4byte	.LVL718
 18100 2489 0100     		.2byte	0x1
 18101 248b 50       		.byte	0x50
 18102 248c 86000000 		.4byte	.LVL724
 18103 2490 92000000 		.4byte	.LVL726
 18104 2494 0100     		.2byte	0x1
 18105 2496 53       		.byte	0x53
 18106 2497 00000000 		.4byte	0
 18107 249b 00000000 		.4byte	0
 18108              	.LLST177:
 18109 249f 3A000000 		.4byte	.LVL715
 18110 24a3 8E000000 		.4byte	.LVL725
 18111 24a7 0600     		.2byte	0x6
 18112 24a9 0C       		.byte	0xc
 18113 24aa 00002148 		.4byte	0x48210000
 18114 24ae 9F       		.byte	0x9f
 18115 24af 00000000 		.4byte	0
 18116 24b3 00000000 		.4byte	0
 18117              	.LLST178:
 18118 24b7 48000000 		.4byte	.LVL717
 18119 24bb 8E000000 		.4byte	.LVL725
 18120 24bf 0100     		.2byte	0x1
 18121 24c1 55       		.byte	0x55
 18122 24c2 00000000 		.4byte	0
 18123 24c6 00000000 		.4byte	0
 18124              	.LLST179:
 18125 24ca 00000000 		.4byte	.LVL728
 18126 24ce 09000000 		.4byte	.LVL729-1
 18127 24d2 0100     		.2byte	0x1
 18128 24d4 50       		.byte	0x50
 18129 24d5 09000000 		.4byte	.LVL729-1
 18130 24d9 24000000 		.4byte	.LFE37
 18131 24dd 0100     		.2byte	0x1
 18132 24df 54       		.byte	0x54
 18133 24e0 00000000 		.4byte	0
 18134 24e4 00000000 		.4byte	0
 18135              	.LLST180:
 18136 24e8 0A000000 		.4byte	.LVL729
 18137 24ec 10000000 		.4byte	.LVL730
 18138 24f0 0100     		.2byte	0x1
 18139 24f2 50       		.byte	0x50
 18140 24f3 16000000 		.4byte	.LVL731
 18141 24f7 1E000000 		.4byte	.LVL732
 18142 24fb 0100     		.2byte	0x1
 18143 24fd 50       		.byte	0x50
 18144 24fe 1E000000 		.4byte	.LVL732
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 444


 18145 2502 24000000 		.4byte	.LFE37
 18146 2506 0100     		.2byte	0x1
 18147 2508 53       		.byte	0x53
 18148 2509 00000000 		.4byte	0
 18149 250d 00000000 		.4byte	0
 18150              	.LLST181:
 18151 2511 00000000 		.4byte	.LVL733
 18152 2515 0F000000 		.4byte	.LVL735-1
 18153 2519 0100     		.2byte	0x1
 18154 251b 50       		.byte	0x50
 18155 251c 0F000000 		.4byte	.LVL735-1
 18156 2520 6E010000 		.4byte	.LFE38
 18157 2524 0100     		.2byte	0x1
 18158 2526 54       		.byte	0x54
 18159 2527 00000000 		.4byte	0
 18160 252b 00000000 		.4byte	0
 18161              	.LLST182:
 18162 252f 00000000 		.4byte	.LVL733
 18163 2533 0C000000 		.4byte	.LVL734
 18164 2537 0100     		.2byte	0x1
 18165 2539 51       		.byte	0x51
 18166 253a 0C000000 		.4byte	.LVL734
 18167 253e 8A000000 		.4byte	.LVL756
 18168 2542 0100     		.2byte	0x1
 18169 2544 56       		.byte	0x56
 18170 2545 8C000000 		.4byte	.LVL757
 18171 2549 FC000000 		.4byte	.LVL776
 18172 254d 0100     		.2byte	0x1
 18173 254f 56       		.byte	0x56
 18174 2550 FE000000 		.4byte	.LVL777
 18175 2554 00010000 		.4byte	.LVL778
 18176 2558 0100     		.2byte	0x1
 18177 255a 56       		.byte	0x56
 18178 255b 02010000 		.4byte	.LVL779
 18179 255f 04010000 		.4byte	.LVL780
 18180 2563 0100     		.2byte	0x1
 18181 2565 56       		.byte	0x56
 18182 2566 00000000 		.4byte	0
 18183 256a 00000000 		.4byte	0
 18184              	.LLST183:
 18185 256e 10000000 		.4byte	.LVL735
 18186 2572 18000000 		.4byte	.LVL736
 18187 2576 0100     		.2byte	0x1
 18188 2578 50       		.byte	0x50
 18189 2579 18000000 		.4byte	.LVL736
 18190 257d 6E000000 		.4byte	.LVL749
 18191 2581 0100     		.2byte	0x1
 18192 2583 55       		.byte	0x55
 18193 2584 74000000 		.4byte	.LVL751
 18194 2588 7C000000 		.4byte	.LVL752
 18195 258c 0100     		.2byte	0x1
 18196 258e 55       		.byte	0x55
 18197 258f 82000000 		.4byte	.LVL754
 18198 2593 B8000000 		.4byte	.LVL763
 18199 2597 0100     		.2byte	0x1
 18200 2599 55       		.byte	0x55
 18201 259a BE000000 		.4byte	.LVL765
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 445


 18202 259e CC000000 		.4byte	.LVL766
 18203 25a2 0100     		.2byte	0x1
 18204 25a4 55       		.byte	0x55
 18205 25a5 D2000000 		.4byte	.LVL768
 18206 25a9 F2000000 		.4byte	.LVL773
 18207 25ad 0100     		.2byte	0x1
 18208 25af 55       		.byte	0x55
 18209 25b0 F8000000 		.4byte	.LVL775
 18210 25b4 3C010000 		.4byte	.LVL782
 18211 25b8 0100     		.2byte	0x1
 18212 25ba 55       		.byte	0x55
 18213 25bb 42010000 		.4byte	.LVL783
 18214 25bf 5E010000 		.4byte	.LVL785
 18215 25c3 0100     		.2byte	0x1
 18216 25c5 55       		.byte	0x55
 18217 25c6 64010000 		.4byte	.LVL786
 18218 25ca 68010000 		.4byte	.LVL787
 18219 25ce 0100     		.2byte	0x1
 18220 25d0 55       		.byte	0x55
 18221 25d1 00000000 		.4byte	0
 18222 25d5 00000000 		.4byte	0
 18223              	.LLST184:
 18224 25d9 5A000000 		.4byte	.LVL744
 18225 25dd 5C000000 		.4byte	.LVL745
 18226 25e1 0100     		.2byte	0x1
 18227 25e3 51       		.byte	0x51
 18228 25e4 5E000000 		.4byte	.LVL746
 18229 25e8 65000000 		.4byte	.LVL747-1
 18230 25ec 0100     		.2byte	0x1
 18231 25ee 51       		.byte	0x51
 18232 25ef 68000000 		.4byte	.LVL748
 18233 25f3 72000000 		.4byte	.LVL750
 18234 25f7 0100     		.2byte	0x1
 18235 25f9 50       		.byte	0x50
 18236 25fa 72000000 		.4byte	.LVL750
 18237 25fe 74000000 		.4byte	.LVL751
 18238 2602 0100     		.2byte	0x1
 18239 2604 51       		.byte	0x51
 18240 2605 74000000 		.4byte	.LVL751
 18241 2609 80000000 		.4byte	.LVL753
 18242 260d 0100     		.2byte	0x1
 18243 260f 50       		.byte	0x50
 18244 2610 80000000 		.4byte	.LVL753
 18245 2614 82000000 		.4byte	.LVL754
 18246 2618 0100     		.2byte	0x1
 18247 261a 51       		.byte	0x51
 18248 261b 82000000 		.4byte	.LVL754
 18249 261f 84000000 		.4byte	.LVL755
 18250 2623 0100     		.2byte	0x1
 18251 2625 50       		.byte	0x50
 18252 2626 84000000 		.4byte	.LVL755
 18253 262a A1000000 		.4byte	.LVL759-1
 18254 262e 0100     		.2byte	0x1
 18255 2630 51       		.byte	0x51
 18256 2631 A2000000 		.4byte	.LVL759
 18257 2635 A8000000 		.4byte	.LVL760
 18258 2639 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 446


 18259 263b 50       		.byte	0x50
 18260 263c A8000000 		.4byte	.LVL760
 18261 2640 AD000000 		.4byte	.LVL761-1
 18262 2644 0100     		.2byte	0x1
 18263 2646 51       		.byte	0x51
 18264 2647 B0000000 		.4byte	.LVL762
 18265 264b BC000000 		.4byte	.LVL764
 18266 264f 0100     		.2byte	0x1
 18267 2651 50       		.byte	0x50
 18268 2652 BC000000 		.4byte	.LVL764
 18269 2656 BE000000 		.4byte	.LVL765
 18270 265a 0100     		.2byte	0x1
 18271 265c 51       		.byte	0x51
 18272 265d BE000000 		.4byte	.LVL765
 18273 2661 D0000000 		.4byte	.LVL767
 18274 2665 0100     		.2byte	0x1
 18275 2667 50       		.byte	0x50
 18276 2668 D0000000 		.4byte	.LVL767
 18277 266c D2000000 		.4byte	.LVL768
 18278 2670 0100     		.2byte	0x1
 18279 2672 51       		.byte	0x51
 18280 2673 D2000000 		.4byte	.LVL768
 18281 2677 D4000000 		.4byte	.LVL769
 18282 267b 0100     		.2byte	0x1
 18283 267d 50       		.byte	0x50
 18284 267e D4000000 		.4byte	.LVL769
 18285 2682 DA000000 		.4byte	.LVL770
 18286 2686 0100     		.2byte	0x1
 18287 2688 51       		.byte	0x51
 18288 2689 DA000000 		.4byte	.LVL770
 18289 268d DC000000 		.4byte	.LVL771
 18290 2691 0100     		.2byte	0x1
 18291 2693 50       		.byte	0x50
 18292 2694 DC000000 		.4byte	.LVL771
 18293 2698 ED000000 		.4byte	.LVL772-1
 18294 269c 0100     		.2byte	0x1
 18295 269e 51       		.byte	0x51
 18296 269f 02010000 		.4byte	.LVL779
 18297 26a3 04010000 		.4byte	.LVL780
 18298 26a7 0100     		.2byte	0x1
 18299 26a9 51       		.byte	0x51
 18300 26aa 00000000 		.4byte	0
 18301 26ae 00000000 		.4byte	0
 18302              	.LLST185:
 18303 26b2 3E000000 		.4byte	.LVL740
 18304 26b6 FE000000 		.4byte	.LVL777
 18305 26ba 0100     		.2byte	0x1
 18306 26bc 57       		.byte	0x57
 18307 26bd 02010000 		.4byte	.LVL779
 18308 26c1 04010000 		.4byte	.LVL780
 18309 26c5 0100     		.2byte	0x1
 18310 26c7 57       		.byte	0x57
 18311 26c8 00000000 		.4byte	0
 18312 26cc 00000000 		.4byte	0
 18313              	.LLST186:
 18314 26d0 30000000 		.4byte	.LVL739
 18315 26d4 EE000000 		.4byte	.LVL772
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 447


 18316 26d8 0200     		.2byte	0x2
 18317 26da 30       		.byte	0x30
 18318 26db 9F       		.byte	0x9f
 18319 26dc EE000000 		.4byte	.LVL772
 18320 26e0 F6000000 		.4byte	.LVL774
 18321 26e4 0100     		.2byte	0x1
 18322 26e6 50       		.byte	0x50
 18323 26e7 F8000000 		.4byte	.LVL775
 18324 26eb FC000000 		.4byte	.LVL776
 18325 26ef 0100     		.2byte	0x1
 18326 26f1 50       		.byte	0x50
 18327 26f2 FC000000 		.4byte	.LVL776
 18328 26f6 FE000000 		.4byte	.LVL777
 18329 26fa 0100     		.2byte	0x1
 18330 26fc 56       		.byte	0x56
 18331 26fd FE000000 		.4byte	.LVL777
 18332 2701 04010000 		.4byte	.LVL780
 18333 2705 0200     		.2byte	0x2
 18334 2707 30       		.byte	0x30
 18335 2708 9F       		.byte	0x9f
 18336 2709 04010000 		.4byte	.LVL780
 18337 270d 68010000 		.4byte	.LVL787
 18338 2711 0100     		.2byte	0x1
 18339 2713 56       		.byte	0x56
 18340 2714 00000000 		.4byte	0
 18341 2718 00000000 		.4byte	0
 18342              	.LLST187:
 18343 271c 30000000 		.4byte	.LVL739
 18344 2720 48000000 		.4byte	.LVL741
 18345 2724 0100     		.2byte	0x1
 18346 2726 53       		.byte	0x53
 18347 2727 48000000 		.4byte	.LVL741
 18348 272b 54000000 		.4byte	.LVL742
 18349 272f 0300     		.2byte	0x3
 18350 2731 73       		.byte	0x73
 18351 2732 01       		.sleb128 1
 18352 2733 9F       		.byte	0x9f
 18353 2734 FE000000 		.4byte	.LVL777
 18354 2738 02010000 		.4byte	.LVL779
 18355 273c 0100     		.2byte	0x1
 18356 273e 53       		.byte	0x53
 18357 273f 00000000 		.4byte	0
 18358 2743 00000000 		.4byte	0
 18359              	.LLST188:
 18360 2747 00000000 		.4byte	.LVL788
 18361 274b 0C000000 		.4byte	.LVL790
 18362 274f 0100     		.2byte	0x1
 18363 2751 50       		.byte	0x50
 18364 2752 0C000000 		.4byte	.LVL790
 18365 2756 68000000 		.4byte	.LVL802
 18366 275a 0100     		.2byte	0x1
 18367 275c 55       		.byte	0x55
 18368 275d 68000000 		.4byte	.LVL802
 18369 2761 6A000000 		.4byte	.LVL803
 18370 2765 0100     		.2byte	0x1
 18371 2767 50       		.byte	0x50
 18372 2768 6A000000 		.4byte	.LVL803
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 448


 18373 276c 6E000000 		.4byte	.LFE39
 18374 2770 0400     		.2byte	0x4
 18375 2772 F3       		.byte	0xf3
 18376 2773 01       		.uleb128 0x1
 18377 2774 50       		.byte	0x50
 18378 2775 9F       		.byte	0x9f
 18379 2776 00000000 		.4byte	0
 18380 277a 00000000 		.4byte	0
 18381              	.LLST189:
 18382 277e 00000000 		.4byte	.LVL788
 18383 2782 0E000000 		.4byte	.LVL791
 18384 2786 0100     		.2byte	0x1
 18385 2788 51       		.byte	0x51
 18386 2789 0E000000 		.4byte	.LVL791
 18387 278d 13000000 		.4byte	.LVL792-1
 18388 2791 0200     		.2byte	0x2
 18389 2793 70       		.byte	0x70
 18390 2794 00       		.sleb128 0
 18391 2795 13000000 		.4byte	.LVL792-1
 18392 2799 68000000 		.4byte	.LVL802
 18393 279d 0200     		.2byte	0x2
 18394 279f 91       		.byte	0x91
 18395 27a0 64       		.sleb128 -28
 18396 27a1 68000000 		.4byte	.LVL802
 18397 27a5 6A000000 		.4byte	.LVL803
 18398 27a9 0100     		.2byte	0x1
 18399 27ab 51       		.byte	0x51
 18400 27ac 6A000000 		.4byte	.LVL803
 18401 27b0 6E000000 		.4byte	.LFE39
 18402 27b4 0200     		.2byte	0x2
 18403 27b6 91       		.byte	0x91
 18404 27b7 64       		.sleb128 -28
 18405 27b8 00000000 		.4byte	0
 18406 27bc 00000000 		.4byte	0
 18407              	.LLST190:
 18408 27c0 14000000 		.4byte	.LVL792
 18409 27c4 1E000000 		.4byte	.LVL793
 18410 27c8 0100     		.2byte	0x1
 18411 27ca 50       		.byte	0x50
 18412 27cb 24000000 		.4byte	.LVL794
 18413 27cf 3A000000 		.4byte	.LVL795
 18414 27d3 0100     		.2byte	0x1
 18415 27d5 50       		.byte	0x50
 18416 27d6 44000000 		.4byte	.LVL797
 18417 27da 46000000 		.4byte	.LVL798
 18418 27de 0100     		.2byte	0x1
 18419 27e0 50       		.byte	0x50
 18420 27e1 46000000 		.4byte	.LVL798
 18421 27e5 68000000 		.4byte	.LVL802
 18422 27e9 0100     		.2byte	0x1
 18423 27eb 54       		.byte	0x54
 18424 27ec 00000000 		.4byte	0
 18425 27f0 00000000 		.4byte	0
 18426              	.LLST191:
 18427 27f4 0A000000 		.4byte	.LVL789
 18428 27f8 0C000000 		.4byte	.LVL790
 18429 27fc 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 449


 18430 27fe 50       		.byte	0x50
 18431 27ff 0C000000 		.4byte	.LVL790
 18432 2803 68000000 		.4byte	.LVL802
 18433 2807 0100     		.2byte	0x1
 18434 2809 55       		.byte	0x55
 18435 280a 00000000 		.4byte	0
 18436 280e 00000000 		.4byte	0
 18437              	.LLST192:
 18438 2812 00000000 		.4byte	.LVL804
 18439 2816 0B000000 		.4byte	.LVL805-1
 18440 281a 0100     		.2byte	0x1
 18441 281c 50       		.byte	0x50
 18442 281d 0B000000 		.4byte	.LVL805-1
 18443 2821 1A000000 		.4byte	.LFE40
 18444 2825 0100     		.2byte	0x1
 18445 2827 54       		.byte	0x54
 18446 2828 00000000 		.4byte	0
 18447 282c 00000000 		.4byte	0
 18448              	.LLST193:
 18449 2830 0C000000 		.4byte	.LVL805
 18450 2834 16000000 		.4byte	.LVL806
 18451 2838 0100     		.2byte	0x1
 18452 283a 50       		.byte	0x50
 18453 283b 00000000 		.4byte	0
 18454 283f 00000000 		.4byte	0
 18455              	.LLST194:
 18456 2843 00000000 		.4byte	.LVL807
 18457 2847 0D000000 		.4byte	.LVL809-1
 18458 284b 0100     		.2byte	0x1
 18459 284d 50       		.byte	0x50
 18460 284e 0D000000 		.4byte	.LVL809-1
 18461 2852 4C000000 		.4byte	.LFE41
 18462 2856 0100     		.2byte	0x1
 18463 2858 55       		.byte	0x55
 18464 2859 00000000 		.4byte	0
 18465 285d 00000000 		.4byte	0
 18466              	.LLST195:
 18467 2861 00000000 		.4byte	.LVL807
 18468 2865 0A000000 		.4byte	.LVL808
 18469 2869 0100     		.2byte	0x1
 18470 286b 51       		.byte	0x51
 18471 286c 0A000000 		.4byte	.LVL808
 18472 2870 4C000000 		.4byte	.LFE41
 18473 2874 0100     		.2byte	0x1
 18474 2876 56       		.byte	0x56
 18475 2877 00000000 		.4byte	0
 18476 287b 00000000 		.4byte	0
 18477              	.LLST196:
 18478 287f 0E000000 		.4byte	.LVL809
 18479 2883 16000000 		.4byte	.LVL810
 18480 2887 0100     		.2byte	0x1
 18481 2889 50       		.byte	0x50
 18482 288a 1E000000 		.4byte	.LVL812
 18483 288e 20000000 		.4byte	.LVL813
 18484 2892 0100     		.2byte	0x1
 18485 2894 54       		.byte	0x54
 18486 2895 20000000 		.4byte	.LVL813
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 450


 18487 2899 22000000 		.4byte	.LVL814
 18488 289d 0100     		.2byte	0x1
 18489 289f 50       		.byte	0x50
 18490 28a0 28000000 		.4byte	.LVL815
 18491 28a4 2E000000 		.4byte	.LVL816
 18492 28a8 0100     		.2byte	0x1
 18493 28aa 50       		.byte	0x50
 18494 28ab 2E000000 		.4byte	.LVL816
 18495 28af 40000000 		.4byte	.LVL818
 18496 28b3 0100     		.2byte	0x1
 18497 28b5 54       		.byte	0x54
 18498 28b6 40000000 		.4byte	.LVL818
 18499 28ba 46000000 		.4byte	.LVL819
 18500 28be 0100     		.2byte	0x1
 18501 28c0 50       		.byte	0x50
 18502 28c1 46000000 		.4byte	.LVL819
 18503 28c5 4C000000 		.4byte	.LFE41
 18504 28c9 0100     		.2byte	0x1
 18505 28cb 54       		.byte	0x54
 18506 28cc 00000000 		.4byte	0
 18507 28d0 00000000 		.4byte	0
 18508              	.LLST197:
 18509 28d4 00000000 		.4byte	.LVL820
 18510 28d8 0E000000 		.4byte	.LVL821
 18511 28dc 0100     		.2byte	0x1
 18512 28de 50       		.byte	0x50
 18513 28df 0E000000 		.4byte	.LVL821
 18514 28e3 15000000 		.4byte	.LVL823-1
 18515 28e7 0200     		.2byte	0x2
 18516 28e9 70       		.byte	0x70
 18517 28ea 00       		.sleb128 0
 18518 28eb 15000000 		.4byte	.LVL823-1
 18519 28ef 42000000 		.4byte	.LFE42
 18520 28f3 0300     		.2byte	0x3
 18521 28f5 91       		.byte	0x91
 18522 28f6 BC7F     		.sleb128 -68
 18523 28f8 00000000 		.4byte	0
 18524 28fc 00000000 		.4byte	0
 18525              	.LLST198:
 18526 2900 00000000 		.4byte	.LVL820
 18527 2904 10000000 		.4byte	.LVL822
 18528 2908 0100     		.2byte	0x1
 18529 290a 51       		.byte	0x51
 18530 290b 10000000 		.4byte	.LVL822
 18531 290f 42000000 		.4byte	.LFE42
 18532 2913 0100     		.2byte	0x1
 18533 2915 55       		.byte	0x55
 18534 2916 00000000 		.4byte	0
 18535 291a 00000000 		.4byte	0
 18536              	.LLST199:
 18537 291e 16000000 		.4byte	.LVL823
 18538 2922 1C000000 		.4byte	.LVL824
 18539 2926 0100     		.2byte	0x1
 18540 2928 50       		.byte	0x50
 18541 2929 22000000 		.4byte	.LVL825
 18542 292d 32000000 		.4byte	.LVL826
 18543 2931 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 451


 18544 2933 50       		.byte	0x50
 18545 2934 3A000000 		.4byte	.LVL828
 18546 2938 3C000000 		.4byte	.LVL829
 18547 293c 0100     		.2byte	0x1
 18548 293e 50       		.byte	0x50
 18549 293f 3C000000 		.4byte	.LVL829
 18550 2943 42000000 		.4byte	.LFE42
 18551 2947 0100     		.2byte	0x1
 18552 2949 54       		.byte	0x54
 18553 294a 00000000 		.4byte	0
 18554 294e 00000000 		.4byte	0
 18555              	.LLST200:
 18556 2952 00000000 		.4byte	.LVL830
 18557 2956 12000000 		.4byte	.LVL831
 18558 295a 0100     		.2byte	0x1
 18559 295c 50       		.byte	0x50
 18560 295d 12000000 		.4byte	.LVL831
 18561 2961 19000000 		.4byte	.LVL834-1
 18562 2965 0200     		.2byte	0x2
 18563 2967 70       		.byte	0x70
 18564 2968 00       		.sleb128 0
 18565 2969 19000000 		.4byte	.LVL834-1
 18566 296d D6000000 		.4byte	.LVL863
 18567 2971 0200     		.2byte	0x2
 18568 2973 91       		.byte	0x91
 18569 2974 44       		.sleb128 -60
 18570 2975 D6000000 		.4byte	.LVL863
 18571 2979 DA000000 		.4byte	.LFE43
 18572 297d 0200     		.2byte	0x2
 18573 297f 7D       		.byte	0x7d
 18574 2980 64       		.sleb128 -28
 18575 2981 00000000 		.4byte	0
 18576 2985 00000000 		.4byte	0
 18577              	.LLST201:
 18578 2989 00000000 		.4byte	.LVL830
 18579 298d 14000000 		.4byte	.LVL832
 18580 2991 0100     		.2byte	0x1
 18581 2993 51       		.byte	0x51
 18582 2994 14000000 		.4byte	.LVL832
 18583 2998 DA000000 		.4byte	.LFE43
 18584 299c 0100     		.2byte	0x1
 18585 299e 5A       		.byte	0x5a
 18586 299f 00000000 		.4byte	0
 18587 29a3 00000000 		.4byte	0
 18588              	.LLST202:
 18589 29a7 00000000 		.4byte	.LVL830
 18590 29ab 16000000 		.4byte	.LVL833
 18591 29af 0100     		.2byte	0x1
 18592 29b1 52       		.byte	0x52
 18593 29b2 16000000 		.4byte	.LVL833
 18594 29b6 3E000000 		.4byte	.LVL837
 18595 29ba 0100     		.2byte	0x1
 18596 29bc 54       		.byte	0x54
 18597 29bd 3E000000 		.4byte	.LVL837
 18598 29c1 62000000 		.4byte	.LVL842
 18599 29c5 0400     		.2byte	0x4
 18600 29c7 F3       		.byte	0xf3
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 452


 18601 29c8 01       		.uleb128 0x1
 18602 29c9 52       		.byte	0x52
 18603 29ca 9F       		.byte	0x9f
 18604 29cb 62000000 		.4byte	.LVL842
 18605 29cf 68000000 		.4byte	.LVL844
 18606 29d3 0100     		.2byte	0x1
 18607 29d5 54       		.byte	0x54
 18608 29d6 68000000 		.4byte	.LVL844
 18609 29da DA000000 		.4byte	.LFE43
 18610 29de 0400     		.2byte	0x4
 18611 29e0 F3       		.byte	0xf3
 18612 29e1 01       		.uleb128 0x1
 18613 29e2 52       		.byte	0x52
 18614 29e3 9F       		.byte	0x9f
 18615 29e4 00000000 		.4byte	0
 18616 29e8 00000000 		.4byte	0
 18617              	.LLST203:
 18618 29ec 1A000000 		.4byte	.LVL834
 18619 29f0 40000000 		.4byte	.LVL838
 18620 29f4 0100     		.2byte	0x1
 18621 29f6 50       		.byte	0x50
 18622 29f7 62000000 		.4byte	.LVL842
 18623 29fb 6C000000 		.4byte	.LVL845
 18624 29ff 0100     		.2byte	0x1
 18625 2a01 50       		.byte	0x50
 18626 2a02 6C000000 		.4byte	.LVL845
 18627 2a06 7A000000 		.4byte	.LVL847
 18628 2a0a 0100     		.2byte	0x1
 18629 2a0c 59       		.byte	0x59
 18630 2a0d 7A000000 		.4byte	.LVL847
 18631 2a11 88000000 		.4byte	.LVL850
 18632 2a15 0100     		.2byte	0x1
 18633 2a17 50       		.byte	0x50
 18634 2a18 88000000 		.4byte	.LVL850
 18635 2a1c B8000000 		.4byte	.LVL860
 18636 2a20 0100     		.2byte	0x1
 18637 2a22 59       		.byte	0x59
 18638 2a23 C2000000 		.4byte	.LVL861
 18639 2a27 DA000000 		.4byte	.LFE43
 18640 2a2b 0100     		.2byte	0x1
 18641 2a2d 59       		.byte	0x59
 18642 2a2e 00000000 		.4byte	0
 18643 2a32 00000000 		.4byte	0
 18644              	.LLST204:
 18645 2a36 34000000 		.4byte	.LVL835
 18646 2a3a 40000000 		.4byte	.LVL838
 18647 2a3e 0200     		.2byte	0x2
 18648 2a40 30       		.byte	0x30
 18649 2a41 9F       		.byte	0x9f
 18650 2a42 40000000 		.4byte	.LVL838
 18651 2a46 62000000 		.4byte	.LVL842
 18652 2a4a 0100     		.2byte	0x1
 18653 2a4c 57       		.byte	0x57
 18654 2a4d 62000000 		.4byte	.LVL842
 18655 2a51 6C000000 		.4byte	.LVL845
 18656 2a55 0200     		.2byte	0x2
 18657 2a57 30       		.byte	0x30
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 453


 18658 2a58 9F       		.byte	0x9f
 18659 2a59 6C000000 		.4byte	.LVL845
 18660 2a5d D2000000 		.4byte	.LVL862
 18661 2a61 0100     		.2byte	0x1
 18662 2a63 57       		.byte	0x57
 18663 2a64 00000000 		.4byte	0
 18664 2a68 00000000 		.4byte	0
 18665              	.LLST205:
 18666 2a6c 3A000000 		.4byte	.LVL836
 18667 2a70 40000000 		.4byte	.LVL838
 18668 2a74 0200     		.2byte	0x2
 18669 2a76 32       		.byte	0x32
 18670 2a77 9F       		.byte	0x9f
 18671 2a78 40000000 		.4byte	.LVL838
 18672 2a7c 62000000 		.4byte	.LVL842
 18673 2a80 0100     		.2byte	0x1
 18674 2a82 54       		.byte	0x54
 18675 2a83 62000000 		.4byte	.LVL842
 18676 2a87 B2000000 		.4byte	.LVL858
 18677 2a8b 0100     		.2byte	0x1
 18678 2a8d 56       		.byte	0x56
 18679 2a8e B2000000 		.4byte	.LVL858
 18680 2a92 B4000000 		.4byte	.LVL859
 18681 2a96 0300     		.2byte	0x3
 18682 2a98 76       		.byte	0x76
 18683 2a99 7F       		.sleb128 -1
 18684 2a9a 9F       		.byte	0x9f
 18685 2a9b B4000000 		.4byte	.LVL859
 18686 2a9f B8000000 		.4byte	.LVL860
 18687 2aa3 0100     		.2byte	0x1
 18688 2aa5 56       		.byte	0x56
 18689 2aa6 B8000000 		.4byte	.LVL860
 18690 2aaa C2000000 		.4byte	.LVL861
 18691 2aae 0100     		.2byte	0x1
 18692 2ab0 54       		.byte	0x54
 18693 2ab1 00000000 		.4byte	0
 18694 2ab5 00000000 		.4byte	0
 18695              	.LLST206:
 18696 2ab9 66000000 		.4byte	.LVL843
 18697 2abd 72000000 		.4byte	.LVL846
 18698 2ac1 0100     		.2byte	0x1
 18699 2ac3 58       		.byte	0x58
 18700 2ac4 72000000 		.4byte	.LVL846
 18701 2ac8 88000000 		.4byte	.LVL850
 18702 2acc 0100     		.2byte	0x1
 18703 2ace 55       		.byte	0x55
 18704 2acf 88000000 		.4byte	.LVL850
 18705 2ad3 B8000000 		.4byte	.LVL860
 18706 2ad7 0100     		.2byte	0x1
 18707 2ad9 58       		.byte	0x58
 18708 2ada 00000000 		.4byte	0
 18709 2ade 00000000 		.4byte	0
 18710              	.LLST207:
 18711 2ae2 48000000 		.4byte	.LVL839
 18712 2ae6 62000000 		.4byte	.LVL842
 18713 2aea 0100     		.2byte	0x1
 18714 2aec 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 454


 18715 2aed B8000000 		.4byte	.LVL860
 18716 2af1 C2000000 		.4byte	.LVL861
 18717 2af5 0100     		.2byte	0x1
 18718 2af7 50       		.byte	0x50
 18719 2af8 00000000 		.4byte	0
 18720 2afc 00000000 		.4byte	0
 18721              	.LLST208:
 18722 2b00 66000000 		.4byte	.LVL843
 18723 2b04 6C000000 		.4byte	.LVL845
 18724 2b08 0200     		.2byte	0x2
 18725 2b0a 30       		.byte	0x30
 18726 2b0b 9F       		.byte	0x9f
 18727 2b0c 6C000000 		.4byte	.LVL845
 18728 2b10 72000000 		.4byte	.LVL846
 18729 2b14 0100     		.2byte	0x1
 18730 2b16 55       		.byte	0x55
 18731 2b17 82000000 		.4byte	.LVL849
 18732 2b1b 88000000 		.4byte	.LVL850
 18733 2b1f 0400     		.2byte	0x4
 18734 2b21 0A       		.byte	0xa
 18735 2b22 0002     		.2byte	0x200
 18736 2b24 9F       		.byte	0x9f
 18737 2b25 88000000 		.4byte	.LVL850
 18738 2b29 B8000000 		.4byte	.LVL860
 18739 2b2d 0100     		.2byte	0x1
 18740 2b2f 55       		.byte	0x55
 18741 2b30 00000000 		.4byte	0
 18742 2b34 00000000 		.4byte	0
 18743              	.LLST209:
 18744 2b38 66000000 		.4byte	.LVL843
 18745 2b3c 6C000000 		.4byte	.LVL845
 18746 2b40 0200     		.2byte	0x2
 18747 2b42 30       		.byte	0x30
 18748 2b43 9F       		.byte	0x9f
 18749 2b44 6C000000 		.4byte	.LVL845
 18750 2b48 80000000 		.4byte	.LVL848
 18751 2b4c 0100     		.2byte	0x1
 18752 2b4e 54       		.byte	0x54
 18753 2b4f 82000000 		.4byte	.LVL849
 18754 2b53 B8000000 		.4byte	.LVL860
 18755 2b57 0100     		.2byte	0x1
 18756 2b59 54       		.byte	0x54
 18757 2b5a 00000000 		.4byte	0
 18758 2b5e 00000000 		.4byte	0
 18759              	.LLST210:
 18760 2b62 00000000 		.4byte	.LVL864
 18761 2b66 0B000000 		.4byte	.LVL865-1
 18762 2b6a 0100     		.2byte	0x1
 18763 2b6c 50       		.byte	0x50
 18764 2b6d 0B000000 		.4byte	.LVL865-1
 18765 2b71 AC000000 		.4byte	.LFE44
 18766 2b75 0100     		.2byte	0x1
 18767 2b77 55       		.byte	0x55
 18768 2b78 00000000 		.4byte	0
 18769 2b7c 00000000 		.4byte	0
 18770              	.LLST211:
 18771 2b80 0C000000 		.4byte	.LVL865
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 455


 18772 2b84 12000000 		.4byte	.LVL866
 18773 2b88 0100     		.2byte	0x1
 18774 2b8a 50       		.byte	0x50
 18775 2b8b 12000000 		.4byte	.LVL866
 18776 2b8f 46000000 		.4byte	.LVL871
 18777 2b93 0100     		.2byte	0x1
 18778 2b95 54       		.byte	0x54
 18779 2b96 46000000 		.4byte	.LVL871
 18780 2b9a 4E000000 		.4byte	.LVL872
 18781 2b9e 0200     		.2byte	0x2
 18782 2ba0 30       		.byte	0x30
 18783 2ba1 9F       		.byte	0x9f
 18784 2ba2 4E000000 		.4byte	.LVL872
 18785 2ba6 AC000000 		.4byte	.LFE44
 18786 2baa 0100     		.2byte	0x1
 18787 2bac 54       		.byte	0x54
 18788 2bad 00000000 		.4byte	0
 18789 2bb1 00000000 		.4byte	0
 18790              	.LLST212:
 18791 2bb5 46000000 		.4byte	.LVL871
 18792 2bb9 60000000 		.4byte	.LVL874
 18793 2bbd 0100     		.2byte	0x1
 18794 2bbf 50       		.byte	0x50
 18795 2bc0 60000000 		.4byte	.LVL874
 18796 2bc4 65000000 		.4byte	.LVL875-1
 18797 2bc8 0100     		.2byte	0x1
 18798 2bca 51       		.byte	0x51
 18799 2bcb 00000000 		.4byte	0
 18800 2bcf 00000000 		.4byte	0
 18801              	.LLST213:
 18802 2bd3 00000000 		.4byte	.LVL879
 18803 2bd7 0C000000 		.4byte	.LVL881
 18804 2bdb 0100     		.2byte	0x1
 18805 2bdd 50       		.byte	0x50
 18806 2bde 0C000000 		.4byte	.LVL881
 18807 2be2 13000000 		.4byte	.LVL882-1
 18808 2be6 0200     		.2byte	0x2
 18809 2be8 70       		.byte	0x70
 18810 2be9 00       		.sleb128 0
 18811 2bea 13000000 		.4byte	.LVL882-1
 18812 2bee AE000000 		.4byte	.LVL901
 18813 2bf2 0300     		.2byte	0x3
 18814 2bf4 91       		.byte	0x91
 18815 2bf5 8C7F     		.sleb128 -116
 18816 2bf7 AE000000 		.4byte	.LVL901
 18817 2bfb B0000000 		.4byte	.LFE45
 18818 2bff 0300     		.2byte	0x3
 18819 2c01 7D       		.byte	0x7d
 18820 2c02 9C7F     		.sleb128 -100
 18821 2c04 00000000 		.4byte	0
 18822 2c08 00000000 		.4byte	0
 18823              	.LLST214:
 18824 2c0c 14000000 		.4byte	.LVL882
 18825 2c10 20000000 		.4byte	.LVL883
 18826 2c14 0100     		.2byte	0x1
 18827 2c16 50       		.byte	0x50
 18828 2c17 26000000 		.4byte	.LVL884
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 456


 18829 2c1b 46000000 		.4byte	.LVL885
 18830 2c1f 0100     		.2byte	0x1
 18831 2c21 50       		.byte	0x50
 18832 2c22 46000000 		.4byte	.LVL885
 18833 2c26 6A000000 		.4byte	.LVL889
 18834 2c2a 0100     		.2byte	0x1
 18835 2c2c 54       		.byte	0x54
 18836 2c2d 6A000000 		.4byte	.LVL889
 18837 2c31 70000000 		.4byte	.LVL890
 18838 2c35 0100     		.2byte	0x1
 18839 2c37 50       		.byte	0x50
 18840 2c38 76000000 		.4byte	.LVL891
 18841 2c3c 7C000000 		.4byte	.LVL892
 18842 2c40 0100     		.2byte	0x1
 18843 2c42 50       		.byte	0x50
 18844 2c43 7C000000 		.4byte	.LVL892
 18845 2c47 84000000 		.4byte	.LVL893
 18846 2c4b 0100     		.2byte	0x1
 18847 2c4d 53       		.byte	0x53
 18848 2c4e 84000000 		.4byte	.LVL893
 18849 2c52 8E000000 		.4byte	.LVL895
 18850 2c56 0100     		.2byte	0x1
 18851 2c58 54       		.byte	0x54
 18852 2c59 8E000000 		.4byte	.LVL895
 18853 2c5d 96000000 		.4byte	.LVL896
 18854 2c61 0100     		.2byte	0x1
 18855 2c63 50       		.byte	0x50
 18856 2c64 A0000000 		.4byte	.LVL898
 18857 2c68 B0000000 		.4byte	.LFE45
 18858 2c6c 0100     		.2byte	0x1
 18859 2c6e 54       		.byte	0x54
 18860 2c6f 00000000 		.4byte	0
 18861 2c73 00000000 		.4byte	0
 18862              	.LLST215:
 18863 2c77 0A000000 		.4byte	.LVL880
 18864 2c7b 54000000 		.4byte	.LVL887
 18865 2c7f 0200     		.2byte	0x2
 18866 2c81 30       		.byte	0x30
 18867 2c82 9F       		.byte	0x9f
 18868 2c83 54000000 		.4byte	.LVL887
 18869 2c87 64000000 		.4byte	.LVL888
 18870 2c8b 0100     		.2byte	0x1
 18871 2c8d 50       		.byte	0x50
 18872 2c8e 64000000 		.4byte	.LVL888
 18873 2c92 84000000 		.4byte	.LVL893
 18874 2c96 0100     		.2byte	0x1
 18875 2c98 55       		.byte	0x55
 18876 2c99 84000000 		.4byte	.LVL893
 18877 2c9d 86000000 		.4byte	.LVL894
 18878 2ca1 0200     		.2byte	0x2
 18879 2ca3 30       		.byte	0x30
 18880 2ca4 9F       		.byte	0x9f
 18881 2ca5 86000000 		.4byte	.LVL894
 18882 2ca9 AA000000 		.4byte	.LVL900
 18883 2cad 0100     		.2byte	0x1
 18884 2caf 55       		.byte	0x55
 18885 2cb0 00000000 		.4byte	0
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 457


 18886 2cb4 00000000 		.4byte	0
 18887              	.LLST216:
 18888 2cb8 00000000 		.4byte	.LVL902
 18889 2cbc 0E000000 		.4byte	.LVL903
 18890 2cc0 0100     		.2byte	0x1
 18891 2cc2 50       		.byte	0x50
 18892 2cc3 0E000000 		.4byte	.LVL903
 18893 2cc7 15000000 		.4byte	.LVL904-1
 18894 2ccb 0200     		.2byte	0x2
 18895 2ccd 70       		.byte	0x70
 18896 2cce 00       		.sleb128 0
 18897 2ccf 15000000 		.4byte	.LVL904-1
 18898 2cd3 54010000 		.4byte	.LVL947
 18899 2cd7 0300     		.2byte	0x3
 18900 2cd9 91       		.byte	0x91
 18901 2cda AC7F     		.sleb128 -84
 18902 2cdc 54010000 		.4byte	.LVL947
 18903 2ce0 58010000 		.4byte	.LVL948
 18904 2ce4 0200     		.2byte	0x2
 18905 2ce6 7D       		.byte	0x7d
 18906 2ce7 4C       		.sleb128 -52
 18907 2ce8 58010000 		.4byte	.LVL948
 18908 2cec 5C010000 		.4byte	.LFE46
 18909 2cf0 0300     		.2byte	0x3
 18910 2cf2 7D       		.byte	0x7d
 18911 2cf3 AC7F     		.sleb128 -84
 18912 2cf5 00000000 		.4byte	0
 18913 2cf9 00000000 		.4byte	0
 18914              	.LLST217:
 18915 2cfd 16000000 		.4byte	.LVL904
 18916 2d01 24000000 		.4byte	.LVL905
 18917 2d05 0100     		.2byte	0x1
 18918 2d07 50       		.byte	0x50
 18919 2d08 2A000000 		.4byte	.LVL906
 18920 2d0c 30000000 		.4byte	.LVL907
 18921 2d10 0100     		.2byte	0x1
 18922 2d12 50       		.byte	0x50
 18923 2d13 30000000 		.4byte	.LVL907
 18924 2d17 3D000000 		.4byte	.LVL908-1
 18925 2d1b 0100     		.2byte	0x1
 18926 2d1d 53       		.byte	0x53
 18927 2d1e 46000000 		.4byte	.LVL909
 18928 2d22 4C000000 		.4byte	.LVL910
 18929 2d26 0200     		.2byte	0x2
 18930 2d28 30       		.byte	0x30
 18931 2d29 9F       		.byte	0x9f
 18932 2d2a 4C000000 		.4byte	.LVL910
 18933 2d2e F2000000 		.4byte	.LVL930
 18934 2d32 0100     		.2byte	0x1
 18935 2d34 54       		.byte	0x54
 18936 2d35 F2000000 		.4byte	.LVL930
 18937 2d39 F8000000 		.4byte	.LVL931
 18938 2d3d 0100     		.2byte	0x1
 18939 2d3f 50       		.byte	0x50
 18940 2d40 06010000 		.4byte	.LVL934
 18941 2d44 4E010000 		.4byte	.LVL945
 18942 2d48 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 458


 18943 2d4a 54       		.byte	0x54
 18944 2d4b 4E010000 		.4byte	.LVL945
 18945 2d4f 50010000 		.4byte	.LVL946
 18946 2d53 0100     		.2byte	0x1
 18947 2d55 53       		.byte	0x53
 18948 2d56 50010000 		.4byte	.LVL946
 18949 2d5a 58010000 		.4byte	.LVL948
 18950 2d5e 0100     		.2byte	0x1
 18951 2d60 54       		.byte	0x54
 18952 2d61 00000000 		.4byte	0
 18953 2d65 00000000 		.4byte	0
 18954              	.LLST218:
 18955 2d69 7A000000 		.4byte	.LVL918
 18956 2d6d 0A010000 		.4byte	.LVL935
 18957 2d71 0100     		.2byte	0x1
 18958 2d73 59       		.byte	0x59
 18959 2d74 18010000 		.4byte	.LVL938
 18960 2d78 42010000 		.4byte	.LVL943
 18961 2d7c 0100     		.2byte	0x1
 18962 2d7e 55       		.byte	0x55
 18963 2d7f 00000000 		.4byte	0
 18964 2d83 00000000 		.4byte	0
 18965              	.LLST219:
 18966 2d87 E0000000 		.4byte	.LVL928
 18967 2d8b 0A010000 		.4byte	.LVL935
 18968 2d8f 0100     		.2byte	0x1
 18969 2d91 55       		.byte	0x55
 18970 2d92 00000000 		.4byte	0
 18971 2d96 00000000 		.4byte	0
 18972              	.LLST220:
 18973 2d9a 76000000 		.4byte	.LVL917
 18974 2d9e 7C000000 		.4byte	.LVL919
 18975 2da2 0100     		.2byte	0x1
 18976 2da4 50       		.byte	0x50
 18977 2da5 7C000000 		.4byte	.LVL919
 18978 2da9 E6000000 		.4byte	.LVL929
 18979 2dad 0100     		.2byte	0x1
 18980 2daf 56       		.byte	0x56
 18981 2db0 E6000000 		.4byte	.LVL929
 18982 2db4 06010000 		.4byte	.LVL934
 18983 2db8 0100     		.2byte	0x1
 18984 2dba 57       		.byte	0x57
 18985 2dbb 06010000 		.4byte	.LVL934
 18986 2dbf 0A010000 		.4byte	.LVL935
 18987 2dc3 0100     		.2byte	0x1
 18988 2dc5 56       		.byte	0x56
 18989 2dc6 00000000 		.4byte	0
 18990 2dca 00000000 		.4byte	0
 18991              	.LLST221:
 18992 2dce 3E000000 		.4byte	.LVL908
 18993 2dd2 60000000 		.4byte	.LVL913
 18994 2dd6 0100     		.2byte	0x1
 18995 2dd8 50       		.byte	0x50
 18996 2dd9 60000000 		.4byte	.LVL913
 18997 2ddd 4E010000 		.4byte	.LVL945
 18998 2de1 0100     		.2byte	0x1
 18999 2de3 58       		.byte	0x58
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 459


 19000 2de4 00000000 		.4byte	0
 19001 2de8 00000000 		.4byte	0
 19002              	.LLST222:
 19003 2dec C6000000 		.4byte	.LVL925
 19004 2df0 DB000000 		.4byte	.LVL927-1
 19005 2df4 0100     		.2byte	0x1
 19006 2df6 52       		.byte	0x52
 19007 2df7 00000000 		.4byte	0
 19008 2dfb 00000000 		.4byte	0
 19009              	.LLST223:
 19010 2dff 66000000 		.4byte	.LVL915
 19011 2e03 4E010000 		.4byte	.LVL945
 19012 2e07 0600     		.2byte	0x6
 19013 2e09 0C       		.byte	0xc
 19014 2e0a 00002148 		.4byte	0x48210000
 19015 2e0e 9F       		.byte	0x9f
 19016 2e0f 00000000 		.4byte	0
 19017 2e13 00000000 		.4byte	0
 19018              	.LLST224:
 19019 2e17 00000000 		.4byte	.LVL949
 19020 2e1b 08000000 		.4byte	.LVL950
 19021 2e1f 0100     		.2byte	0x1
 19022 2e21 50       		.byte	0x50
 19023 2e22 08000000 		.4byte	.LVL950
 19024 2e26 12000000 		.4byte	.LVL952
 19025 2e2a 0300     		.2byte	0x3
 19026 2e2c 91       		.byte	0x91
 19027 2e2d F47E     		.sleb128 -140
 19028 2e2f 12000000 		.4byte	.LVL952
 19029 2e33 19000000 		.4byte	.LVL953-1
 19030 2e37 0200     		.2byte	0x2
 19031 2e39 70       		.byte	0x70
 19032 2e3a 00       		.sleb128 0
 19033 2e3b 19000000 		.4byte	.LVL953-1
 19034 2e3f 16010000 		.4byte	.LFE47
 19035 2e43 0300     		.2byte	0x3
 19036 2e45 91       		.byte	0x91
 19037 2e46 F47E     		.sleb128 -140
 19038 2e48 00000000 		.4byte	0
 19039 2e4c 00000000 		.4byte	0
 19040              	.LLST225:
 19041 2e50 00000000 		.4byte	.LVL949
 19042 2e54 0F000000 		.4byte	.LVL951-1
 19043 2e58 0100     		.2byte	0x1
 19044 2e5a 51       		.byte	0x51
 19045 2e5b 0F000000 		.4byte	.LVL951-1
 19046 2e5f 16010000 		.4byte	.LFE47
 19047 2e63 0300     		.2byte	0x3
 19048 2e65 91       		.byte	0x91
 19049 2e66 F07E     		.sleb128 -144
 19050 2e68 00000000 		.4byte	0
 19051 2e6c 00000000 		.4byte	0
 19052              	.LLST226:
 19053 2e70 1A000000 		.4byte	.LVL953
 19054 2e74 26000000 		.4byte	.LVL954
 19055 2e78 0100     		.2byte	0x1
 19056 2e7a 50       		.byte	0x50
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 460


 19057 2e7b 2C000000 		.4byte	.LVL955
 19058 2e7f 3C000000 		.4byte	.LVL956
 19059 2e83 0100     		.2byte	0x1
 19060 2e85 50       		.byte	0x50
 19061 2e86 3C000000 		.4byte	.LVL956
 19062 2e8a 5E000000 		.4byte	.LVL959
 19063 2e8e 0100     		.2byte	0x1
 19064 2e90 54       		.byte	0x54
 19065 2e91 5E000000 		.4byte	.LVL959
 19066 2e95 7C000000 		.4byte	.LVL960
 19067 2e99 0100     		.2byte	0x1
 19068 2e9b 50       		.byte	0x50
 19069 2e9c 7C000000 		.4byte	.LVL960
 19070 2ea0 86000000 		.4byte	.LVL961
 19071 2ea4 0100     		.2byte	0x1
 19072 2ea6 54       		.byte	0x54
 19073 2ea7 86000000 		.4byte	.LVL961
 19074 2eab 92000000 		.4byte	.LVL963
 19075 2eaf 0100     		.2byte	0x1
 19076 2eb1 50       		.byte	0x50
 19077 2eb2 D8000000 		.4byte	.LVL968
 19078 2eb6 EC000000 		.4byte	.LVL970
 19079 2eba 0100     		.2byte	0x1
 19080 2ebc 50       		.byte	0x50
 19081 2ebd FC000000 		.4byte	.LVL973
 19082 2ec1 04010000 		.4byte	.LVL974
 19083 2ec5 0100     		.2byte	0x1
 19084 2ec7 54       		.byte	0x54
 19085 2ec8 04010000 		.4byte	.LVL974
 19086 2ecc 0A010000 		.4byte	.LVL975
 19087 2ed0 0100     		.2byte	0x1
 19088 2ed2 50       		.byte	0x50
 19089 2ed3 10010000 		.4byte	.LVL977
 19090 2ed7 16010000 		.4byte	.LFE47
 19091 2edb 0100     		.2byte	0x1
 19092 2edd 54       		.byte	0x54
 19093 2ede 00000000 		.4byte	0
 19094 2ee2 00000000 		.4byte	0
 19095              	.LLST227:
 19096 2ee6 8E000000 		.4byte	.LVL962
 19097 2eea DE000000 		.4byte	.LVL969
 19098 2eee 0100     		.2byte	0x1
 19099 2ef0 55       		.byte	0x55
 19100 2ef1 DE000000 		.4byte	.LVL969
 19101 2ef5 F1000000 		.4byte	.LVL971-1
 19102 2ef9 0100     		.2byte	0x1
 19103 2efb 51       		.byte	0x51
 19104 2efc FA000000 		.4byte	.LVL972
 19105 2f00 FC000000 		.4byte	.LVL973
 19106 2f04 0100     		.2byte	0x1
 19107 2f06 55       		.byte	0x55
 19108 2f07 00000000 		.4byte	0
 19109 2f0b 00000000 		.4byte	0
 19110              	.LLST228:
 19111 2f0f CE000000 		.4byte	.LVL966
 19112 2f13 D4000000 		.4byte	.LVL967
 19113 2f17 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 461


 19114 2f19 50       		.byte	0x50
 19115 2f1a D4000000 		.4byte	.LVL967
 19116 2f1e D7000000 		.4byte	.LVL968-1
 19117 2f22 0100     		.2byte	0x1
 19118 2f24 51       		.byte	0x51
 19119 2f25 FA000000 		.4byte	.LVL972
 19120 2f29 FC000000 		.4byte	.LVL973
 19121 2f2d 0100     		.2byte	0x1
 19122 2f2f 50       		.byte	0x50
 19123 2f30 00000000 		.4byte	0
 19124 2f34 00000000 		.4byte	0
 19125              	.LLST229:
 19126 2f38 00000000 		.4byte	.LVL978
 19127 2f3c 12000000 		.4byte	.LVL980
 19128 2f40 0100     		.2byte	0x1
 19129 2f42 50       		.byte	0x50
 19130 2f43 12000000 		.4byte	.LVL980
 19131 2f47 54000000 		.4byte	.LFE48
 19132 2f4b 0100     		.2byte	0x1
 19133 2f4d 58       		.byte	0x58
 19134 2f4e 00000000 		.4byte	0
 19135 2f52 00000000 		.4byte	0
 19136              	.LLST230:
 19137 2f56 00000000 		.4byte	.LVL978
 19138 2f5a 12000000 		.4byte	.LVL980
 19139 2f5e 0100     		.2byte	0x1
 19140 2f60 51       		.byte	0x51
 19141 2f61 12000000 		.4byte	.LVL980
 19142 2f65 54000000 		.4byte	.LFE48
 19143 2f69 0100     		.2byte	0x1
 19144 2f6b 56       		.byte	0x56
 19145 2f6c 00000000 		.4byte	0
 19146 2f70 00000000 		.4byte	0
 19147              	.LLST231:
 19148 2f74 00000000 		.4byte	.LVL978
 19149 2f78 12000000 		.4byte	.LVL980
 19150 2f7c 0100     		.2byte	0x1
 19151 2f7e 52       		.byte	0x52
 19152 2f7f 12000000 		.4byte	.LVL980
 19153 2f83 54000000 		.4byte	.LFE48
 19154 2f87 0100     		.2byte	0x1
 19155 2f89 57       		.byte	0x57
 19156 2f8a 00000000 		.4byte	0
 19157 2f8e 00000000 		.4byte	0
 19158              	.LLST232:
 19159 2f92 0C000000 		.4byte	.LVL979
 19160 2f96 12000000 		.4byte	.LVL980
 19161 2f9a 0200     		.2byte	0x2
 19162 2f9c 30       		.byte	0x30
 19163 2f9d 9F       		.byte	0x9f
 19164 2f9e 12000000 		.4byte	.LVL980
 19165 2fa2 54000000 		.4byte	.LFE48
 19166 2fa6 0100     		.2byte	0x1
 19167 2fa8 54       		.byte	0x54
 19168 2fa9 00000000 		.4byte	0
 19169 2fad 00000000 		.4byte	0
 19170              	.LLST233:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 462


 19171 2fb1 28000000 		.4byte	.LVL982
 19172 2fb5 38000000 		.4byte	.LVL985
 19173 2fb9 0100     		.2byte	0x1
 19174 2fbb 53       		.byte	0x53
 19175 2fbc 40000000 		.4byte	.LVL986
 19176 2fc0 42000000 		.4byte	.LVL987
 19177 2fc4 0100     		.2byte	0x1
 19178 2fc6 53       		.byte	0x53
 19179 2fc7 00000000 		.4byte	0
 19180 2fcb 00000000 		.4byte	0
 19181              	.LLST234:
 19182 2fcf 0C000000 		.4byte	.LVL979
 19183 2fd3 12000000 		.4byte	.LVL980
 19184 2fd7 0100     		.2byte	0x1
 19185 2fd9 50       		.byte	0x50
 19186 2fda 12000000 		.4byte	.LVL980
 19187 2fde 2E000000 		.4byte	.LVL983
 19188 2fe2 0100     		.2byte	0x1
 19189 2fe4 55       		.byte	0x55
 19190 2fe5 2E000000 		.4byte	.LVL983
 19191 2fe9 38000000 		.4byte	.LVL985
 19192 2fed 0100     		.2byte	0x1
 19193 2fef 52       		.byte	0x52
 19194 2ff0 38000000 		.4byte	.LVL985
 19195 2ff4 40000000 		.4byte	.LVL986
 19196 2ff8 0100     		.2byte	0x1
 19197 2ffa 55       		.byte	0x55
 19198 2ffb 40000000 		.4byte	.LVL986
 19199 2fff 42000000 		.4byte	.LVL987
 19200 3003 0100     		.2byte	0x1
 19201 3005 52       		.byte	0x52
 19202 3006 42000000 		.4byte	.LVL987
 19203 300a 54000000 		.4byte	.LFE48
 19204 300e 0100     		.2byte	0x1
 19205 3010 55       		.byte	0x55
 19206 3011 00000000 		.4byte	0
 19207 3015 00000000 		.4byte	0
 19208              	.LLST235:
 19209 3019 00000000 		.4byte	.LVL988
 19210 301d 08000000 		.4byte	.LVL989
 19211 3021 0100     		.2byte	0x1
 19212 3023 50       		.byte	0x50
 19213 3024 08000000 		.4byte	.LVL989
 19214 3028 1E000000 		.4byte	.LFE52
 19215 302c 0400     		.2byte	0x4
 19216 302e F3       		.byte	0xf3
 19217 302f 01       		.uleb128 0x1
 19218 3030 50       		.byte	0x50
 19219 3031 9F       		.byte	0x9f
 19220 3032 00000000 		.4byte	0
 19221 3036 00000000 		.4byte	0
 19222              	.LLST236:
 19223 303a 00000000 		.4byte	.LVL988
 19224 303e 0B000000 		.4byte	.LVL990-1
 19225 3042 0100     		.2byte	0x1
 19226 3044 51       		.byte	0x51
 19227 3045 0B000000 		.4byte	.LVL990-1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 463


 19228 3049 1E000000 		.4byte	.LFE52
 19229 304d 0400     		.2byte	0x4
 19230 304f F3       		.byte	0xf3
 19231 3050 01       		.uleb128 0x1
 19232 3051 51       		.byte	0x51
 19233 3052 9F       		.byte	0x9f
 19234 3053 00000000 		.4byte	0
 19235 3057 00000000 		.4byte	0
 19236              	.LLST237:
 19237 305b 00000000 		.4byte	.LVL993
 19238 305f 08000000 		.4byte	.LVL994
 19239 3063 0100     		.2byte	0x1
 19240 3065 50       		.byte	0x50
 19241 3066 08000000 		.4byte	.LVL994
 19242 306a 26000000 		.4byte	.LFE53
 19243 306e 0100     		.2byte	0x1
 19244 3070 54       		.byte	0x54
 19245 3071 00000000 		.4byte	0
 19246 3075 00000000 		.4byte	0
 19247              	.LLST238:
 19248 3079 00000000 		.4byte	.LVL993
 19249 307d 0B000000 		.4byte	.LVL995-1
 19250 3081 0100     		.2byte	0x1
 19251 3083 51       		.byte	0x51
 19252 3084 0B000000 		.4byte	.LVL995-1
 19253 3088 26000000 		.4byte	.LFE53
 19254 308c 0400     		.2byte	0x4
 19255 308e F3       		.byte	0xf3
 19256 308f 01       		.uleb128 0x1
 19257 3090 51       		.byte	0x51
 19258 3091 9F       		.byte	0x9f
 19259 3092 00000000 		.4byte	0
 19260 3096 00000000 		.4byte	0
 19261              	.LLST239:
 19262 309a 00000000 		.4byte	.LVL999
 19263 309e 12000000 		.4byte	.LVL1000
 19264 30a2 0100     		.2byte	0x1
 19265 30a4 50       		.byte	0x50
 19266 30a5 12000000 		.4byte	.LVL1000
 19267 30a9 15000000 		.4byte	.LVL1001-1
 19268 30ad 0100     		.2byte	0x1
 19269 30af 51       		.byte	0x51
 19270 30b0 15000000 		.4byte	.LVL1001-1
 19271 30b4 36020000 		.4byte	.LFE54
 19272 30b8 0400     		.2byte	0x4
 19273 30ba F3       		.byte	0xf3
 19274 30bb 01       		.uleb128 0x1
 19275 30bc 50       		.byte	0x50
 19276 30bd 9F       		.byte	0x9f
 19277 30be 00000000 		.4byte	0
 19278 30c2 00000000 		.4byte	0
 19279              	.LLST240:
 19280 30c6 00000000 		.4byte	.LVL999
 19281 30ca 18000000 		.4byte	.LVL1002
 19282 30ce 0200     		.2byte	0x2
 19283 30d0 91       		.byte	0x91
 19284 30d1 74       		.sleb128 -12
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 464


 19285 30d2 18000000 		.4byte	.LVL1002
 19286 30d6 1A000000 		.4byte	.LVL1003
 19287 30da 0100     		.2byte	0x1
 19288 30dc 56       		.byte	0x56
 19289 30dd 1A000000 		.4byte	.LVL1003
 19290 30e1 32000000 		.4byte	.LVL1007
 19291 30e5 0100     		.2byte	0x1
 19292 30e7 54       		.byte	0x54
 19293 30e8 32000000 		.4byte	.LVL1007
 19294 30ec 54000000 		.4byte	.LVL1018
 19295 30f0 0100     		.2byte	0x1
 19296 30f2 53       		.byte	0x53
 19297 30f3 54000000 		.4byte	.LVL1018
 19298 30f7 5E000000 		.4byte	.LVL1020
 19299 30fb 0100     		.2byte	0x1
 19300 30fd 56       		.byte	0x56
 19301 30fe 5E000000 		.4byte	.LVL1020
 19302 3102 62000000 		.4byte	.LVL1022
 19303 3106 0300     		.2byte	0x3
 19304 3108 76       		.byte	0x76
 19305 3109 01       		.sleb128 1
 19306 310a 9F       		.byte	0x9f
 19307 310b 62000000 		.4byte	.LVL1022
 19308 310f 78000000 		.4byte	.LVL1023
 19309 3113 0100     		.2byte	0x1
 19310 3115 56       		.byte	0x56
 19311 3116 78000000 		.4byte	.LVL1023
 19312 311a 7C000000 		.4byte	.LVL1025
 19313 311e 0300     		.2byte	0x3
 19314 3120 76       		.byte	0x76
 19315 3121 01       		.sleb128 1
 19316 3122 9F       		.byte	0x9f
 19317 3123 7C000000 		.4byte	.LVL1025
 19318 3127 26020000 		.4byte	.LVL1081
 19319 312b 0100     		.2byte	0x1
 19320 312d 56       		.byte	0x56
 19321 312e 00000000 		.4byte	0
 19322 3132 00000000 		.4byte	0
 19323              	.LLST241:
 19324 3136 30000000 		.4byte	.LVL1006
 19325 313a 38000000 		.4byte	.LVL1009
 19326 313e 0200     		.2byte	0x2
 19327 3140 30       		.byte	0x30
 19328 3141 9F       		.byte	0x9f
 19329 3142 38000000 		.4byte	.LVL1009
 19330 3146 40000000 		.4byte	.LVL1012
 19331 314a 0200     		.2byte	0x2
 19332 314c 31       		.byte	0x31
 19333 314d 9F       		.byte	0x9f
 19334 314e 40000000 		.4byte	.LVL1012
 19335 3152 44000000 		.4byte	.LVL1013
 19336 3156 0200     		.2byte	0x2
 19337 3158 30       		.byte	0x30
 19338 3159 9F       		.byte	0x9f
 19339 315a 44000000 		.4byte	.LVL1013
 19340 315e 4C000000 		.4byte	.LVL1016
 19341 3162 0200     		.2byte	0x2
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 465


 19342 3164 32       		.byte	0x32
 19343 3165 9F       		.byte	0x9f
 19344 3166 4C000000 		.4byte	.LVL1016
 19345 316a 4E000000 		.4byte	.LVL1017
 19346 316e 0200     		.2byte	0x2
 19347 3170 30       		.byte	0x30
 19348 3171 9F       		.byte	0x9f
 19349 3172 54000000 		.4byte	.LVL1018
 19350 3176 02010000 		.4byte	.LVL1040
 19351 317a 0100     		.2byte	0x1
 19352 317c 57       		.byte	0x57
 19353 317d 14010000 		.4byte	.LVL1044
 19354 3181 26020000 		.4byte	.LVL1081
 19355 3185 0100     		.2byte	0x1
 19356 3187 57       		.byte	0x57
 19357 3188 00000000 		.4byte	0
 19358 318c 00000000 		.4byte	0
 19359              	.LLST242:
 19360 3190 24010000 		.4byte	.LVL1048
 19361 3194 2A010000 		.4byte	.LVL1049
 19362 3198 0200     		.2byte	0x2
 19363 319a 3A       		.byte	0x3a
 19364 319b 9F       		.byte	0x9f
 19365 319c 2A010000 		.4byte	.LVL1049
 19366 31a0 30010000 		.4byte	.LVL1050
 19367 31a4 0200     		.2byte	0x2
 19368 31a6 40       		.byte	0x40
 19369 31a7 9F       		.byte	0x9f
 19370 31a8 42010000 		.4byte	.LVL1053
 19371 31ac E0010000 		.4byte	.LVL1069
 19372 31b0 0100     		.2byte	0x1
 19373 31b2 58       		.byte	0x58
 19374 31b3 00000000 		.4byte	0
 19375 31b7 00000000 		.4byte	0
 19376              	.LLST243:
 19377 31bb 80010000 		.4byte	.LVL1056
 19378 31bf 84010000 		.4byte	.LVL1057
 19379 31c3 0200     		.2byte	0x2
 19380 31c5 30       		.byte	0x30
 19381 31c6 9F       		.byte	0x9f
 19382 31c7 84010000 		.4byte	.LVL1057
 19383 31cb 86010000 		.4byte	.LVL1058
 19384 31cf 0100     		.2byte	0x1
 19385 31d1 55       		.byte	0x55
 19386 31d2 86010000 		.4byte	.LVL1058
 19387 31d6 A6010000 		.4byte	.LVL1062
 19388 31da 0100     		.2byte	0x1
 19389 31dc 50       		.byte	0x50
 19390 31dd A6010000 		.4byte	.LVL1062
 19391 31e1 C2010000 		.4byte	.LVL1064
 19392 31e5 0100     		.2byte	0x1
 19393 31e7 55       		.byte	0x55
 19394 31e8 C2010000 		.4byte	.LVL1064
 19395 31ec C6010000 		.4byte	.LVL1065
 19396 31f0 0100     		.2byte	0x1
 19397 31f2 53       		.byte	0x53
 19398 31f3 C6010000 		.4byte	.LVL1065
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 466


 19399 31f7 C8010000 		.4byte	.LVL1066
 19400 31fb 0100     		.2byte	0x1
 19401 31fd 55       		.byte	0x55
 19402 31fe C8010000 		.4byte	.LVL1066
 19403 3202 CE010000 		.4byte	.LVL1067
 19404 3206 0300     		.2byte	0x3
 19405 3208 75       		.byte	0x75
 19406 3209 7F       		.sleb128 -1
 19407 320a 9F       		.byte	0x9f
 19408 320b CE010000 		.4byte	.LVL1067
 19409 320f 12020000 		.4byte	.LVL1077
 19410 3213 0100     		.2byte	0x1
 19411 3215 55       		.byte	0x55
 19412 3216 00000000 		.4byte	0
 19413 321a 00000000 		.4byte	0
 19414              	.LLST244:
 19415 321e C4000000 		.4byte	.LVL1031
 19416 3222 C8000000 		.4byte	.LVL1032
 19417 3226 0200     		.2byte	0x2
 19418 3228 30       		.byte	0x30
 19419 3229 9F       		.byte	0x9f
 19420 322a C8000000 		.4byte	.LVL1032
 19421 322e E6000000 		.4byte	.LVL1036
 19422 3232 0100     		.2byte	0x1
 19423 3234 55       		.byte	0x55
 19424 3235 E6000000 		.4byte	.LVL1036
 19425 3239 E8000000 		.4byte	.LVL1037
 19426 323d 0100     		.2byte	0x1
 19427 323f 53       		.byte	0x53
 19428 3240 E8000000 		.4byte	.LVL1037
 19429 3244 02010000 		.4byte	.LVL1040
 19430 3248 0100     		.2byte	0x1
 19431 324a 55       		.byte	0x55
 19432 324b 02010000 		.4byte	.LVL1040
 19433 324f 0C010000 		.4byte	.LVL1042
 19434 3253 0100     		.2byte	0x1
 19435 3255 57       		.byte	0x57
 19436 3256 0C010000 		.4byte	.LVL1042
 19437 325a 0E010000 		.4byte	.LVL1043
 19438 325e 0100     		.2byte	0x1
 19439 3260 55       		.byte	0x55
 19440 3261 0E010000 		.4byte	.LVL1043
 19441 3265 14010000 		.4byte	.LVL1044
 19442 3269 0100     		.2byte	0x1
 19443 326b 57       		.byte	0x57
 19444 326c CE010000 		.4byte	.LVL1067
 19445 3270 E2010000 		.4byte	.LVL1070
 19446 3274 0100     		.2byte	0x1
 19447 3276 55       		.byte	0x55
 19448 3277 E2010000 		.4byte	.LVL1070
 19449 327b EC010000 		.4byte	.LVL1072
 19450 327f 0100     		.2byte	0x1
 19451 3281 59       		.byte	0x59
 19452 3282 EC010000 		.4byte	.LVL1072
 19453 3286 F6010000 		.4byte	.LVL1073
 19454 328a 0100     		.2byte	0x1
 19455 328c 58       		.byte	0x58
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 467


 19456 328d F6010000 		.4byte	.LVL1073
 19457 3291 FC010000 		.4byte	.LVL1074
 19458 3295 0100     		.2byte	0x1
 19459 3297 59       		.byte	0x59
 19460 3298 FC010000 		.4byte	.LVL1074
 19461 329c 12020000 		.4byte	.LVL1077
 19462 32a0 0100     		.2byte	0x1
 19463 32a2 58       		.byte	0x58
 19464 32a3 12020000 		.4byte	.LVL1077
 19465 32a7 1C020000 		.4byte	.LVL1079
 19466 32ab 0100     		.2byte	0x1
 19467 32ad 55       		.byte	0x55
 19468 32ae 1C020000 		.4byte	.LVL1079
 19469 32b2 20020000 		.4byte	.LVL1080
 19470 32b6 0100     		.2byte	0x1
 19471 32b8 58       		.byte	0x58
 19472 32b9 20020000 		.4byte	.LVL1080
 19473 32bd 26020000 		.4byte	.LVL1081
 19474 32c1 0100     		.2byte	0x1
 19475 32c3 55       		.byte	0x55
 19476 32c4 00000000 		.4byte	0
 19477 32c8 00000000 		.4byte	0
 19478              	.LLST245:
 19479 32cc 30000000 		.4byte	.LVL1006
 19480 32d0 54000000 		.4byte	.LVL1018
 19481 32d4 0200     		.2byte	0x2
 19482 32d6 30       		.byte	0x30
 19483 32d7 9F       		.byte	0x9f
 19484 32d8 54000000 		.4byte	.LVL1018
 19485 32dc 58000000 		.4byte	.LVL1019
 19486 32e0 0100     		.2byte	0x1
 19487 32e2 54       		.byte	0x54
 19488 32e3 5E000000 		.4byte	.LVL1020
 19489 32e7 26020000 		.4byte	.LVL1081
 19490 32eb 0100     		.2byte	0x1
 19491 32ed 54       		.byte	0x54
 19492 32ee 00000000 		.4byte	0
 19493 32f2 00000000 		.4byte	0
 19494              	.LLST246:
 19495 32f6 6E010000 		.4byte	.LVL1054
 19496 32fa E2010000 		.4byte	.LVL1070
 19497 32fe 0100     		.2byte	0x1
 19498 3300 5C       		.byte	0x5c
 19499 3301 00000000 		.4byte	0
 19500 3305 00000000 		.4byte	0
 19501              	.LLST247:
 19502 3309 1C000000 		.4byte	.LVL1004
 19503 330d 2B000000 		.4byte	.LVL1005-1
 19504 3311 0100     		.2byte	0x1
 19505 3313 51       		.byte	0x51
 19506 3314 30000000 		.4byte	.LVL1006
 19507 3318 DC000000 		.4byte	.LVL1034
 19508 331c 0100     		.2byte	0x1
 19509 331e 51       		.byte	0x51
 19510 331f 14010000 		.4byte	.LVL1044
 19511 3323 1E010000 		.4byte	.LVL1046
 19512 3327 0100     		.2byte	0x1
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 468


 19513 3329 51       		.byte	0x51
 19514 332a 24010000 		.4byte	.LVL1048
 19515 332e 35010000 		.4byte	.LVL1051-1
 19516 3332 0100     		.2byte	0x1
 19517 3334 51       		.byte	0x51
 19518 3335 38010000 		.4byte	.LVL1052
 19519 3339 E2010000 		.4byte	.LVL1070
 19520 333d 0100     		.2byte	0x1
 19521 333f 51       		.byte	0x51
 19522 3340 26020000 		.4byte	.LVL1081
 19523 3344 2B020000 		.4byte	.LVL1082-1
 19524 3348 0100     		.2byte	0x1
 19525 334a 51       		.byte	0x51
 19526 334b 00000000 		.4byte	0
 19527 334f 00000000 		.4byte	0
 19528              	.LLST248:
 19529 3353 82000000 		.4byte	.LVL1026
 19530 3357 92000000 		.4byte	.LVL1027
 19531 335b 0100     		.2byte	0x1
 19532 335d 51       		.byte	0x51
 19533 335e 92000000 		.4byte	.LVL1027
 19534 3362 94000000 		.4byte	.LVL1028
 19535 3366 0100     		.2byte	0x1
 19536 3368 53       		.byte	0x53
 19537 3369 94000000 		.4byte	.LVL1028
 19538 336d 96000000 		.4byte	.LVL1029
 19539 3371 0100     		.2byte	0x1
 19540 3373 51       		.byte	0x51
 19541 3374 96000000 		.4byte	.LVL1029
 19542 3378 BC000000 		.4byte	.LVL1030
 19543 337c 0100     		.2byte	0x1
 19544 337e 53       		.byte	0x53
 19545 337f 14010000 		.4byte	.LVL1044
 19546 3383 16010000 		.4byte	.LVL1045
 19547 3387 0100     		.2byte	0x1
 19548 3389 53       		.byte	0x53
 19549 338a 24010000 		.4byte	.LVL1048
 19550 338e 35010000 		.4byte	.LVL1051-1
 19551 3392 0100     		.2byte	0x1
 19552 3394 53       		.byte	0x53
 19553 3395 38010000 		.4byte	.LVL1052
 19554 3399 84010000 		.4byte	.LVL1057
 19555 339d 0100     		.2byte	0x1
 19556 339f 53       		.byte	0x53
 19557 33a0 90010000 		.4byte	.LVL1059
 19558 33a4 AC010000 		.4byte	.LVL1063
 19559 33a8 0100     		.2byte	0x1
 19560 33aa 53       		.byte	0x53
 19561 33ab DE010000 		.4byte	.LVL1068
 19562 33af 26020000 		.4byte	.LVL1081
 19563 33b3 0100     		.2byte	0x1
 19564 33b5 5A       		.byte	0x5a
 19565 33b6 00000000 		.4byte	0
 19566 33ba 00000000 		.4byte	0
 19567              	.LLST249:
 19568 33be C4000000 		.4byte	.LVL1031
 19569 33c2 14010000 		.4byte	.LVL1044
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 469


 19570 33c6 0100     		.2byte	0x1
 19571 33c8 58       		.byte	0x58
 19572 33c9 00000000 		.4byte	0
 19573 33cd 00000000 		.4byte	0
 19574              		.section	.debug_aranges,"",%progbits
 19575 0000 CC010000 		.4byte	0x1cc
 19576 0004 0200     		.2byte	0x2
 19577 0006 00000000 		.4byte	.Ldebug_info0
 19578 000a 04       		.byte	0x4
 19579 000b 00       		.byte	0
 19580 000c 0000     		.2byte	0
 19581 000e 0000     		.2byte	0
 19582 0010 00000000 		.4byte	.LFB0
 19583 0014 0A000000 		.4byte	.LFE0-.LFB0
 19584 0018 00000000 		.4byte	.LFB1
 19585 001c 16000000 		.4byte	.LFE1-.LFB1
 19586 0020 00000000 		.4byte	.LFB2
 19587 0024 08000000 		.4byte	.LFE2-.LFB2
 19588 0028 00000000 		.4byte	.LFB3
 19589 002c 14000000 		.4byte	.LFE3-.LFB3
 19590 0030 00000000 		.4byte	.LFB4
 19591 0034 12000000 		.4byte	.LFE4-.LFB4
 19592 0038 00000000 		.4byte	.LFB5
 19593 003c 0A000000 		.4byte	.LFE5-.LFB5
 19594 0040 00000000 		.4byte	.LFB6
 19595 0044 1E000000 		.4byte	.LFE6-.LFB6
 19596 0048 00000000 		.4byte	.LFB7
 19597 004c 10000000 		.4byte	.LFE7-.LFB7
 19598 0050 00000000 		.4byte	.LFB11
 19599 0054 18000000 		.4byte	.LFE11-.LFB11
 19600 0058 00000000 		.4byte	.LFB19
 19601 005c 24000000 		.4byte	.LFE19-.LFB19
 19602 0060 00000000 		.4byte	.LFB20
 19603 0064 24000000 		.4byte	.LFE20-.LFB20
 19604 0068 00000000 		.4byte	.LFB25
 19605 006c 64000000 		.4byte	.LFE25-.LFB25
 19606 0070 00000000 		.4byte	.LFB26
 19607 0074 10010000 		.4byte	.LFE26-.LFB26
 19608 0078 00000000 		.4byte	.LFB28
 19609 007c 56000000 		.4byte	.LFE28-.LFB28
 19610 0080 00000000 		.4byte	.LFB51
 19611 0084 0A000000 		.4byte	.LFE51-.LFB51
 19612 0088 00000000 		.4byte	.LFB31
 19613 008c 34000000 		.4byte	.LFE31-.LFB31
 19614 0090 00000000 		.4byte	.LFB8
 19615 0094 54000000 		.4byte	.LFE8-.LFB8
 19616 0098 00000000 		.4byte	.LFB9
 19617 009c 34000000 		.4byte	.LFE9-.LFB9
 19618 00a0 00000000 		.4byte	.LFB29
 19619 00a4 7C000000 		.4byte	.LFE29-.LFB29
 19620 00a8 00000000 		.4byte	.LFB30
 19621 00ac D0020000 		.4byte	.LFE30-.LFB30
 19622 00b0 00000000 		.4byte	.LFB13
 19623 00b4 0A010000 		.4byte	.LFE13-.LFB13
 19624 00b8 00000000 		.4byte	.LFB12
 19625 00bc D0000000 		.4byte	.LFE12-.LFB12
 19626 00c0 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 470


 19627 00c4 B0000000 		.4byte	.LFE16-.LFB16
 19628 00c8 00000000 		.4byte	.LFB15
 19629 00cc CA000000 		.4byte	.LFE15-.LFB15
 19630 00d0 00000000 		.4byte	.LFB14
 19631 00d4 7C000000 		.4byte	.LFE14-.LFB14
 19632 00d8 00000000 		.4byte	.LFB24
 19633 00dc 20000000 		.4byte	.LFE24-.LFB24
 19634 00e0 00000000 		.4byte	.LFB17
 19635 00e4 26010000 		.4byte	.LFE17-.LFB17
 19636 00e8 00000000 		.4byte	.LFB22
 19637 00ec 54000000 		.4byte	.LFE22-.LFB22
 19638 00f0 00000000 		.4byte	.LFB27
 19639 00f4 8C000000 		.4byte	.LFE27-.LFB27
 19640 00f8 00000000 		.4byte	.LFB18
 19641 00fc 4C000000 		.4byte	.LFE18-.LFB18
 19642 0100 00000000 		.4byte	.LFB23
 19643 0104 3A000000 		.4byte	.LFE23-.LFB23
 19644 0108 00000000 		.4byte	.LFB21
 19645 010c 60000000 		.4byte	.LFE21-.LFB21
 19646 0110 00000000 		.4byte	.LFB10
 19647 0114 8C000000 		.4byte	.LFE10-.LFB10
 19648 0118 00000000 		.4byte	.LFB32
 19649 011c 58000000 		.4byte	.LFE32-.LFB32
 19650 0120 00000000 		.4byte	.LFB33
 19651 0124 DC010000 		.4byte	.LFE33-.LFB33
 19652 0128 00000000 		.4byte	.LFB34
 19653 012c 76010000 		.4byte	.LFE34-.LFB34
 19654 0130 00000000 		.4byte	.LFB35
 19655 0134 AE010000 		.4byte	.LFE35-.LFB35
 19656 0138 00000000 		.4byte	.LFB49
 19657 013c 4A000000 		.4byte	.LFE49-.LFB49
 19658 0140 00000000 		.4byte	.LFB50
 19659 0144 3A000000 		.4byte	.LFE50-.LFB50
 19660 0148 00000000 		.4byte	.LFB36
 19661 014c 9C000000 		.4byte	.LFE36-.LFB36
 19662 0150 00000000 		.4byte	.LFB37
 19663 0154 24000000 		.4byte	.LFE37-.LFB37
 19664 0158 00000000 		.4byte	.LFB38
 19665 015c 6E010000 		.4byte	.LFE38-.LFB38
 19666 0160 00000000 		.4byte	.LFB39
 19667 0164 6E000000 		.4byte	.LFE39-.LFB39
 19668 0168 00000000 		.4byte	.LFB40
 19669 016c 1A000000 		.4byte	.LFE40-.LFB40
 19670 0170 00000000 		.4byte	.LFB41
 19671 0174 4C000000 		.4byte	.LFE41-.LFB41
 19672 0178 00000000 		.4byte	.LFB42
 19673 017c 42000000 		.4byte	.LFE42-.LFB42
 19674 0180 00000000 		.4byte	.LFB43
 19675 0184 DA000000 		.4byte	.LFE43-.LFB43
 19676 0188 00000000 		.4byte	.LFB44
 19677 018c AC000000 		.4byte	.LFE44-.LFB44
 19678 0190 00000000 		.4byte	.LFB45
 19679 0194 B0000000 		.4byte	.LFE45-.LFB45
 19680 0198 00000000 		.4byte	.LFB46
 19681 019c 5C010000 		.4byte	.LFE46-.LFB46
 19682 01a0 00000000 		.4byte	.LFB47
 19683 01a4 16010000 		.4byte	.LFE47-.LFB47
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 471


 19684 01a8 00000000 		.4byte	.LFB48
 19685 01ac 54000000 		.4byte	.LFE48-.LFB48
 19686 01b0 00000000 		.4byte	.LFB52
 19687 01b4 1E000000 		.4byte	.LFE52-.LFB52
 19688 01b8 00000000 		.4byte	.LFB53
 19689 01bc 26000000 		.4byte	.LFE53-.LFB53
 19690 01c0 00000000 		.4byte	.LFB54
 19691 01c4 36020000 		.4byte	.LFE54-.LFB54
 19692 01c8 00000000 		.4byte	0
 19693 01cc 00000000 		.4byte	0
 19694              		.section	.debug_ranges,"",%progbits
 19695              	.Ldebug_ranges0:
 19696 0000 00000000 		.4byte	.LFB0
 19697 0004 0A000000 		.4byte	.LFE0
 19698 0008 00000000 		.4byte	.LFB1
 19699 000c 16000000 		.4byte	.LFE1
 19700 0010 00000000 		.4byte	.LFB2
 19701 0014 08000000 		.4byte	.LFE2
 19702 0018 00000000 		.4byte	.LFB3
 19703 001c 14000000 		.4byte	.LFE3
 19704 0020 00000000 		.4byte	.LFB4
 19705 0024 12000000 		.4byte	.LFE4
 19706 0028 00000000 		.4byte	.LFB5
 19707 002c 0A000000 		.4byte	.LFE5
 19708 0030 00000000 		.4byte	.LFB6
 19709 0034 1E000000 		.4byte	.LFE6
 19710 0038 00000000 		.4byte	.LFB7
 19711 003c 10000000 		.4byte	.LFE7
 19712 0040 00000000 		.4byte	.LFB11
 19713 0044 18000000 		.4byte	.LFE11
 19714 0048 00000000 		.4byte	.LFB19
 19715 004c 24000000 		.4byte	.LFE19
 19716 0050 00000000 		.4byte	.LFB20
 19717 0054 24000000 		.4byte	.LFE20
 19718 0058 00000000 		.4byte	.LFB25
 19719 005c 64000000 		.4byte	.LFE25
 19720 0060 00000000 		.4byte	.LFB26
 19721 0064 10010000 		.4byte	.LFE26
 19722 0068 00000000 		.4byte	.LFB28
 19723 006c 56000000 		.4byte	.LFE28
 19724 0070 00000000 		.4byte	.LFB51
 19725 0074 0A000000 		.4byte	.LFE51
 19726 0078 00000000 		.4byte	.LFB31
 19727 007c 34000000 		.4byte	.LFE31
 19728 0080 00000000 		.4byte	.LFB8
 19729 0084 54000000 		.4byte	.LFE8
 19730 0088 00000000 		.4byte	.LFB9
 19731 008c 34000000 		.4byte	.LFE9
 19732 0090 00000000 		.4byte	.LFB29
 19733 0094 7C000000 		.4byte	.LFE29
 19734 0098 00000000 		.4byte	.LFB30
 19735 009c D0020000 		.4byte	.LFE30
 19736 00a0 00000000 		.4byte	.LFB13
 19737 00a4 0A010000 		.4byte	.LFE13
 19738 00a8 00000000 		.4byte	.LFB12
 19739 00ac D0000000 		.4byte	.LFE12
 19740 00b0 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 472


 19741 00b4 B0000000 		.4byte	.LFE16
 19742 00b8 00000000 		.4byte	.LFB15
 19743 00bc CA000000 		.4byte	.LFE15
 19744 00c0 00000000 		.4byte	.LFB14
 19745 00c4 7C000000 		.4byte	.LFE14
 19746 00c8 00000000 		.4byte	.LFB24
 19747 00cc 20000000 		.4byte	.LFE24
 19748 00d0 00000000 		.4byte	.LFB17
 19749 00d4 26010000 		.4byte	.LFE17
 19750 00d8 00000000 		.4byte	.LFB22
 19751 00dc 54000000 		.4byte	.LFE22
 19752 00e0 00000000 		.4byte	.LFB27
 19753 00e4 8C000000 		.4byte	.LFE27
 19754 00e8 00000000 		.4byte	.LFB18
 19755 00ec 4C000000 		.4byte	.LFE18
 19756 00f0 00000000 		.4byte	.LFB23
 19757 00f4 3A000000 		.4byte	.LFE23
 19758 00f8 00000000 		.4byte	.LFB21
 19759 00fc 60000000 		.4byte	.LFE21
 19760 0100 00000000 		.4byte	.LFB10
 19761 0104 8C000000 		.4byte	.LFE10
 19762 0108 00000000 		.4byte	.LFB32
 19763 010c 58000000 		.4byte	.LFE32
 19764 0110 00000000 		.4byte	.LFB33
 19765 0114 DC010000 		.4byte	.LFE33
 19766 0118 00000000 		.4byte	.LFB34
 19767 011c 76010000 		.4byte	.LFE34
 19768 0120 00000000 		.4byte	.LFB35
 19769 0124 AE010000 		.4byte	.LFE35
 19770 0128 00000000 		.4byte	.LFB49
 19771 012c 4A000000 		.4byte	.LFE49
 19772 0130 00000000 		.4byte	.LFB50
 19773 0134 3A000000 		.4byte	.LFE50
 19774 0138 00000000 		.4byte	.LFB36
 19775 013c 9C000000 		.4byte	.LFE36
 19776 0140 00000000 		.4byte	.LFB37
 19777 0144 24000000 		.4byte	.LFE37
 19778 0148 00000000 		.4byte	.LFB38
 19779 014c 6E010000 		.4byte	.LFE38
 19780 0150 00000000 		.4byte	.LFB39
 19781 0154 6E000000 		.4byte	.LFE39
 19782 0158 00000000 		.4byte	.LFB40
 19783 015c 1A000000 		.4byte	.LFE40
 19784 0160 00000000 		.4byte	.LFB41
 19785 0164 4C000000 		.4byte	.LFE41
 19786 0168 00000000 		.4byte	.LFB42
 19787 016c 42000000 		.4byte	.LFE42
 19788 0170 00000000 		.4byte	.LFB43
 19789 0174 DA000000 		.4byte	.LFE43
 19790 0178 00000000 		.4byte	.LFB44
 19791 017c AC000000 		.4byte	.LFE44
 19792 0180 00000000 		.4byte	.LFB45
 19793 0184 B0000000 		.4byte	.LFE45
 19794 0188 00000000 		.4byte	.LFB46
 19795 018c 5C010000 		.4byte	.LFE46
 19796 0190 00000000 		.4byte	.LFB47
 19797 0194 16010000 		.4byte	.LFE47
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 473


 19798 0198 00000000 		.4byte	.LFB48
 19799 019c 54000000 		.4byte	.LFE48
 19800 01a0 00000000 		.4byte	.LFB52
 19801 01a4 1E000000 		.4byte	.LFE52
 19802 01a8 00000000 		.4byte	.LFB53
 19803 01ac 26000000 		.4byte	.LFE53
 19804 01b0 00000000 		.4byte	.LFB54
 19805 01b4 36020000 		.4byte	.LFE54
 19806 01b8 00000000 		.4byte	0
 19807 01bc 00000000 		.4byte	0
 19808              		.section	.debug_line,"",%progbits
 19809              	.Ldebug_line0:
 19810 0000 F20E0000 		.section	.debug_str,"MS",%progbits,1
 19810      0200CC01 
 19810      00000201 
 19810      FB0E0D00 
 19810      01010101 
 19811              	.LASF80:
 19812 0000 5245535F 		.ascii	"RES_WRPRT\000"
 19812      57525052 
 19812      5400
 19813              	.LASF74:
 19814 000a 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 19814      4F4F5F4D 
 19814      414E595F 
 19814      4F50454E 
 19814      5F46494C 
 19815              	.LASF120:
 19816 0021 7075745F 		.ascii	"put_fat\000"
 19816      66617400 
 19817              	.LASF22:
 19818 0029 66735F74 		.ascii	"fs_type\000"
 19818      79706500 
 19819              	.LASF142:
 19820 0031 63736563 		.ascii	"csect\000"
 19820      7400
 19821              	.LASF95:
 19822 0037 63686B5F 		.ascii	"chk_chr\000"
 19822      63687200 
 19823              	.LASF172:
 19824 003f 46617446 		.ascii	"FatFs\000"
 19824      7300
 19825              	.LASF3:
 19826 0045 5F5F7569 		.ascii	"__uint8_t\000"
 19826      6E74385F 
 19826      7400
 19827              	.LASF85:
 19828 004f 76615F6C 		.ascii	"va_list\000"
 19828      69737400 
 19829              	.LASF81:
 19830 0057 5245535F 		.ascii	"RES_NOTRDY\000"
 19830      4E4F5452 
 19830      445900
 19831              	.LASF26:
 19832 0062 6E5F726F 		.ascii	"n_rootdir\000"
 19832      6F746469 
 19832      7200
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 474


 19833              	.LASF102:
 19834 006c 70617468 		.ascii	"path\000"
 19834      00
 19835              	.LASF133:
 19836 0071 6469725F 		.ascii	"dir_register\000"
 19836      72656769 
 19836      73746572 
 19836      00
 19837              	.LASF143:
 19838 007e 72627566 		.ascii	"rbuff\000"
 19838      6600
 19839              	.LASF10:
 19840 0084 6C6F6E67 		.ascii	"long long unsigned int\000"
 19840      206C6F6E 
 19840      6720756E 
 19840      7369676E 
 19840      65642069 
 19841              	.LASF129:
 19842 009b 6469725F 		.ascii	"dir_find\000"
 19842      66696E64 
 19842      00
 19843              	.LASF47:
 19844 00a4 73656374 		.ascii	"sect\000"
 19844      00
 19845              	.LASF65:
 19846 00a9 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
 19846      4E56414C 
 19846      49445F4F 
 19846      424A4543 
 19846      5400
 19847              	.LASF114:
 19848 00bb 66617369 		.ascii	"fasize\000"
 19848      7A6500
 19849              	.LASF119:
 19850 00c2 6E727376 		.ascii	"nrsv\000"
 19850      00
 19851              	.LASF48:
 19852 00c7 6469725F 		.ascii	"dir_sect\000"
 19852      73656374 
 19852      00
 19853              	.LASF34:
 19854 00d0 64697262 		.ascii	"dirbase\000"
 19854      61736500 
 19855              	.LASF166:
 19856 00d8 70617468 		.ascii	"path_old\000"
 19856      5F6F6C64 
 19856      00
 19857              	.LASF9:
 19858 00e1 6C6F6E67 		.ascii	"long long int\000"
 19858      206C6F6E 
 19858      6720696E 
 19858      7400
 19859              	.LASF0:
 19860 00ef 7369676E 		.ascii	"signed char\000"
 19860      65642063 
 19860      68617200 
 19861              	.LASF139:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 475


 19862 00fb 62756666 		.ascii	"buff\000"
 19862      00
 19863              	.LASF75:
 19864 0100 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 19864      4E56414C 
 19864      49445F50 
 19864      4152414D 
 19864      45544552 
 19865              	.LASF31:
 19866 0115 6673697A 		.ascii	"fsize\000"
 19866      6500
 19867              	.LASF30:
 19868 011b 6E5F6661 		.ascii	"n_fatent\000"
 19868      74656E74 
 19868      00
 19869              	.LASF6:
 19870 0124 6C6F6E67 		.ascii	"long int\000"
 19870      20696E74 
 19870      00
 19871              	.LASF126:
 19872 012d 6469725F 		.ascii	"dir_remove\000"
 19872      72656D6F 
 19872      766500
 19873              	.LASF148:
 19874 0138 70757463 		.ascii	"putc_flush\000"
 19874      5F666C75 
 19874      736800
 19875              	.LASF82:
 19876 0143 5245535F 		.ascii	"RES_PARERR\000"
 19876      50415245 
 19876      525200
 19877              	.LASF23:
 19878 014e 6E5F6661 		.ascii	"n_fats\000"
 19878      747300
 19879              	.LASF99:
 19880 0155 73745F63 		.ascii	"st_clust\000"
 19880      6C757374 
 19880      00
 19881              	.LASF69:
 19882 015e 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 19882      4F5F4649 
 19882      4C455359 
 19882      5354454D 
 19882      00
 19883              	.LASF13:
 19884 016f 75696E74 		.ascii	"uint16_t\000"
 19884      31365F74 
 19884      00
 19885              	.LASF73:
 19886 0178 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 19886      4F545F45 
 19886      4E4F5547 
 19886      485F434F 
 19886      524500
 19887              	.LASF64:
 19888 018b 46525F45 		.ascii	"FR_EXIST\000"
 19888      58495354 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 476


 19888      00
 19889              	.LASF33:
 19890 0194 66617462 		.ascii	"fatbase\000"
 19890      61736500 
 19891              	.LASF18:
 19892 019c 44574F52 		.ascii	"DWORD\000"
 19892      4400
 19893              	.LASF144:
 19894 01a2 665F7772 		.ascii	"f_write\000"
 19894      69746500 
 19895              	.LASF21:
 19896 01aa 4653495A 		.ascii	"FSIZE_t\000"
 19896      455F7400 
 19897              	.LASF181:
 19898 01b2 5F5F7661 		.ascii	"__va_list\000"
 19898      5F6C6973 
 19898      7400
 19899              	.LASF162:
 19900 01bc 665F756E 		.ascii	"f_unlink\000"
 19900      6C696E6B 
 19900      00
 19901              	.LASF157:
 19902 01c5 665F7374 		.ascii	"f_stat\000"
 19902      617400
 19903              	.LASF55:
 19904 01cc 46494C49 		.ascii	"FILINFO\000"
 19904      4E464F00 
 19905              	.LASF106:
 19906 01d4 73796E63 		.ascii	"sync_window\000"
 19906      5F77696E 
 19906      646F7700 
 19907              	.LASF7:
 19908 01e0 5F5F7569 		.ascii	"__uint32_t\000"
 19908      6E743332 
 19908      5F7400
 19909              	.LASF27:
 19910 01eb 6373697A 		.ascii	"csize\000"
 19910      6500
 19911              	.LASF177:
 19912 01f1 6469736B 		.ascii	"disk_initialize\000"
 19912      5F696E69 
 19912      7469616C 
 19912      697A6500 
 19913              	.LASF29:
 19914 0201 66726565 		.ascii	"free_clst\000"
 19914      5F636C73 
 19914      7400
 19915              	.LASF16:
 19916 020b 42595445 		.ascii	"BYTE\000"
 19916      00
 19917              	.LASF134:
 19918 0210 6469725F 		.ascii	"dir_read\000"
 19918      72656164 
 19918      00
 19919              	.LASF87:
 19920 0219 70757462 		.ascii	"putbuff\000"
 19920      75666600 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 477


 19921              	.LASF49:
 19922 0221 6469725F 		.ascii	"dir_ptr\000"
 19922      70747200 
 19923              	.LASF39:
 19924 0229 61747472 		.ascii	"attr\000"
 19924      00
 19925              	.LASF128:
 19926 022e 73747265 		.ascii	"stretch\000"
 19926      74636800 
 19927              	.LASF112:
 19928 0236 6D6F6465 		.ascii	"mode\000"
 19928      00
 19929              	.LASF135:
 19930 023b 73796E63 		.ascii	"sync_fs\000"
 19930      5F667300 
 19931              	.LASF122:
 19932 0243 6469725F 		.ascii	"dir_sdi\000"
 19932      73646900 
 19933              	.LASF11:
 19934 024b 756E7369 		.ascii	"unsigned int\000"
 19934      676E6564 
 19934      20696E74 
 19934      00
 19935              	.LASF104:
 19936 0258 70757463 		.ascii	"putc_init\000"
 19936      5F696E69 
 19936      7400
 19937              	.LASF179:
 19938 0262 2E5C6666 		.ascii	".\\ff.c\000"
 19938      2E6300
 19939              	.LASF15:
 19940 0269 55494E54 		.ascii	"UINT\000"
 19940      00
 19941              	.LASF52:
 19942 026e 6674696D 		.ascii	"ftime\000"
 19942      6500
 19943              	.LASF8:
 19944 0274 6C6F6E67 		.ascii	"long unsigned int\000"
 19944      20756E73 
 19944      69676E65 
 19944      6420696E 
 19944      7400
 19945              	.LASF174:
 19946 0286 6469736B 		.ascii	"disk_status\000"
 19946      5F737461 
 19946      74757300 
 19947              	.LASF86:
 19948 0292 6E636872 		.ascii	"nchr\000"
 19948      00
 19949              	.LASF180:
 19950 0297 443A5C64 		.ascii	"D:\\develop\\projects\\SoundChipLogger\\firmware\\l"
 19950      6576656C 
 19950      6F705C70 
 19950      726F6A65 
 19950      6374735C 
 19951 02c5 69626661 		.ascii	"ibfatfs\\libfatfs.cylib\000"
 19951      7466735C 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 478


 19951      6C696266 
 19951      61746673 
 19951      2E63796C 
 19952              	.LASF113:
 19953 02dc 62736563 		.ascii	"bsect\000"
 19953      7400
 19954              	.LASF116:
 19955 02e2 73797365 		.ascii	"sysect\000"
 19955      637400
 19956              	.LASF5:
 19957 02e9 73686F72 		.ascii	"short unsigned int\000"
 19957      7420756E 
 19957      7369676E 
 19957      65642069 
 19957      6E7400
 19958              	.LASF35:
 19959 02fc 64617461 		.ascii	"database\000"
 19959      62617365 
 19959      00
 19960              	.LASF150:
 19961 0305 665F636C 		.ascii	"f_close\000"
 19961      6F736500 
 19962              	.LASF165:
 19963 030d 665F7265 		.ascii	"f_rename\000"
 19963      6E616D65 
 19963      00
 19964              	.LASF97:
 19965 0316 636C7374 		.ascii	"clst\000"
 19965      00
 19966              	.LASF169:
 19967 031b 665F7075 		.ascii	"f_putc\000"
 19967      746300
 19968              	.LASF58:
 19969 0322 46525F49 		.ascii	"FR_INT_ERR\000"
 19969      4E545F45 
 19969      525200
 19970              	.LASF167:
 19971 032d 70617468 		.ascii	"path_new\000"
 19971      5F6E6577 
 19971      00
 19972              	.LASF57:
 19973 0336 46525F44 		.ascii	"FR_DISK_ERR\000"
 19973      49534B5F 
 19973      45525200 
 19974              	.LASF36:
 19975 0342 77696E73 		.ascii	"winsect\000"
 19975      65637400 
 19976              	.LASF94:
 19977 034a 6D656D5F 		.ascii	"mem_cmp\000"
 19977      636D7000 
 19978              	.LASF109:
 19979 0352 73656374 		.ascii	"sector\000"
 19979      6F7200
 19980              	.LASF118:
 19981 0359 737A6266 		.ascii	"szbfat\000"
 19981      617400
 19982              	.LASF127:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 479


 19983 0360 6469725F 		.ascii	"dir_next\000"
 19983      6E657874 
 19983      00
 19984              	.LASF160:
 19985 0369 6E667265 		.ascii	"nfree\000"
 19985      6500
 19986              	.LASF54:
 19987 036f 666E616D 		.ascii	"fname\000"
 19987      6500
 19988              	.LASF171:
 19989 0375 665F7072 		.ascii	"f_printf\000"
 19989      696E7466 
 19989      00
 19990              	.LASF66:
 19991 037e 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 19991      52495445 
 19991      5F50524F 
 19991      54454354 
 19991      454400
 19992              	.LASF183:
 19993 0391 6469736B 		.ascii	"disk_ioctl\000"
 19993      5F696F63 
 19993      746C00
 19994              	.LASF38:
 19995 039c 46415446 		.ascii	"FATFS\000"
 19995      5300
 19996              	.LASF164:
 19997 03a2 665F6D6B 		.ascii	"f_mkdir\000"
 19997      64697200 
 19998              	.LASF51:
 19999 03aa 66646174 		.ascii	"fdate\000"
 19999      6500
 20000              	.LASF145:
 20001 03b0 77636E74 		.ascii	"wcnt\000"
 20001      00
 20002              	.LASF45:
 20003 03b5 66707472 		.ascii	"fptr\000"
 20003      00
 20004              	.LASF96:
 20005 03ba 636C7573 		.ascii	"clust2sect\000"
 20005      74327365 
 20005      637400
 20006              	.LASF93:
 20007 03c5 6D656D5F 		.ascii	"mem_set\000"
 20007      73657400 
 20008              	.LASF37:
 20009 03cd 73697A65 		.ascii	"sizetype\000"
 20009      74797065 
 20009      00
 20010              	.LASF100:
 20011 03d6 6765745F 		.ascii	"get_fileinfo\000"
 20011      66696C65 
 20011      696E666F 
 20011      00
 20012              	.LASF117:
 20013 03e3 6E636C73 		.ascii	"nclst\000"
 20013      7400
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 480


 20014              	.LASF71:
 20015 03e9 46525F54 		.ascii	"FR_TIMEOUT\000"
 20015      494D454F 
 20015      555400
 20016              	.LASF17:
 20017 03f4 574F5244 		.ascii	"WORD\000"
 20017      00
 20018              	.LASF41:
 20019 03f9 73636C75 		.ascii	"sclust\000"
 20019      737400
 20020              	.LASF78:
 20021 0400 5245535F 		.ascii	"RES_OK\000"
 20021      4F4B00
 20022              	.LASF60:
 20023 0407 46525F4E 		.ascii	"FR_NO_FILE\000"
 20023      4F5F4649 
 20023      4C4500
 20024              	.LASF159:
 20025 0412 66617466 		.ascii	"fatfs\000"
 20025      7300
 20026              	.LASF19:
 20027 0418 54434841 		.ascii	"TCHAR\000"
 20027      5200
 20028              	.LASF91:
 20029 041e 73745F64 		.ascii	"st_dword\000"
 20029      776F7264 
 20029      00
 20030              	.LASF68:
 20031 0427 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 20031      4F545F45 
 20031      4E41424C 
 20031      454400
 20032              	.LASF28:
 20033 0436 6C617374 		.ascii	"last_clst\000"
 20033      5F636C73 
 20033      7400
 20034              	.LASF158:
 20035 0440 665F6765 		.ascii	"f_getfree\000"
 20035      74667265 
 20035      6500
 20036              	.LASF103:
 20037 044a 6765745F 		.ascii	"get_ldnumber\000"
 20037      6C646E75 
 20037      6D626572 
 20037      00
 20038              	.LASF42:
 20039 0457 6F626A73 		.ascii	"objsize\000"
 20039      697A6500 
 20040              	.LASF136:
 20041 045f 665F6D6F 		.ascii	"f_mount\000"
 20041      756E7400 
 20042              	.LASF163:
 20043 0467 64636C73 		.ascii	"dclst\000"
 20043      7400
 20044              	.LASF121:
 20045 046d 6765745F 		.ascii	"get_fat\000"
 20045      66617400 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 481


 20046              	.LASF123:
 20047 0475 63726561 		.ascii	"create_chain\000"
 20047      74655F63 
 20047      6861696E 
 20047      00
 20048              	.LASF151:
 20049 0482 665F6C73 		.ascii	"f_lseek\000"
 20049      65656B00 
 20050              	.LASF1:
 20051 048a 756E7369 		.ascii	"unsigned char\000"
 20051      676E6564 
 20051      20636861 
 20051      7200
 20052              	.LASF138:
 20053 0498 665F7265 		.ascii	"f_read\000"
 20053      616400
 20054              	.LASF153:
 20055 049f 69667074 		.ascii	"ifptr\000"
 20055      7200
 20056              	.LASF146:
 20057 04a5 77627566 		.ascii	"wbuff\000"
 20057      6600
 20058              	.LASF2:
 20059 04ab 73686F72 		.ascii	"short int\000"
 20059      7420696E 
 20059      7400
 20060              	.LASF149:
 20061 04b5 665F7379 		.ascii	"f_sync\000"
 20061      6E6300
 20062              	.LASF111:
 20063 04bc 66696E64 		.ascii	"find_volume\000"
 20063      5F766F6C 
 20063      756D6500 
 20064              	.LASF44:
 20065 04c8 666C6167 		.ascii	"flag\000"
 20065      00
 20066              	.LASF130:
 20067 04cd 666F6C6C 		.ascii	"follow_path\000"
 20067      6F775F70 
 20067      61746800 
 20068              	.LASF110:
 20069 04d9 63686563 		.ascii	"check_fs\000"
 20069      6B5F6673 
 20069      00
 20070              	.LASF67:
 20071 04e2 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 20071      4E56414C 
 20071      49445F44 
 20071      52495645 
 20071      00
 20072              	.LASF63:
 20073 04f3 46525F44 		.ascii	"FR_DENIED\000"
 20073      454E4945 
 20073      4400
 20074              	.LASF105:
 20075 04fd 76616C69 		.ascii	"validate\000"
 20075      64617465 
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 482


 20075      00
 20076              	.LASF50:
 20077 0506 64707472 		.ascii	"dptr\000"
 20077      00
 20078              	.LASF70:
 20079 050b 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 20079      4B46535F 
 20079      41424F52 
 20079      54454400 
 20080              	.LASF156:
 20081 051b 665F7265 		.ascii	"f_readdir\000"
 20081      61646469 
 20081      7200
 20082              	.LASF72:
 20083 0525 46525F4C 		.ascii	"FR_LOCKED\000"
 20083      4F434B45 
 20083      4400
 20084              	.LASF24:
 20085 052f 77666C61 		.ascii	"wflag\000"
 20085      6700
 20086              	.LASF14:
 20087 0535 75696E74 		.ascii	"uint32_t\000"
 20087      33325F74 
 20087      00
 20088              	.LASF147:
 20089 053e 70757463 		.ascii	"putc_bfd\000"
 20089      5F626664 
 20089      00
 20090              	.LASF83:
 20091 0547 44524553 		.ascii	"DRESULT\000"
 20091      554C5400 
 20092              	.LASF98:
 20093 054f 6C645F63 		.ascii	"ld_clust\000"
 20093      6C757374 
 20093      00
 20094              	.LASF20:
 20095 0558 63686172 		.ascii	"char\000"
 20095      00
 20096              	.LASF101:
 20097 055d 63726561 		.ascii	"create_name\000"
 20097      74655F6E 
 20097      616D6500 
 20098              	.LASF4:
 20099 0569 5F5F7569 		.ascii	"__uint16_t\000"
 20099      6E743136 
 20099      5F7400
 20100              	.LASF56:
 20101 0574 46525F4F 		.ascii	"FR_OK\000"
 20101      4B00
 20102              	.LASF125:
 20103 057a 70636C73 		.ascii	"pclst\000"
 20103      7400
 20104              	.LASF131:
 20105 0580 6469725F 		.ascii	"dir_alloc\000"
 20105      616C6C6F 
 20105      6300
 20106              	.LASF124:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 483


 20107 058a 72656D6F 		.ascii	"remove_chain\000"
 20107      76655F63 
 20107      6861696E 
 20107      00
 20108              	.LASF77:
 20109 0597 44535441 		.ascii	"DSTATUS\000"
 20109      54555300 
 20110              	.LASF168:
 20111 059f 665F6765 		.ascii	"f_gets\000"
 20111      747300
 20112              	.LASF132:
 20113 05a6 6E656E74 		.ascii	"nent\000"
 20113      00
 20114              	.LASF32:
 20115 05ab 766F6C62 		.ascii	"volbase\000"
 20115      61736500 
 20116              	.LASF88:
 20117 05b3 6C645F77 		.ascii	"ld_word\000"
 20117      6F726400 
 20118              	.LASF182:
 20119 05bb 5F5F6170 		.ascii	"__ap\000"
 20119      00
 20120              	.LASF154:
 20121 05c0 665F6F70 		.ascii	"f_opendir\000"
 20121      656E6469 
 20121      7200
 20122              	.LASF62:
 20123 05ca 46525F49 		.ascii	"FR_INVALID_NAME\000"
 20123      4E56414C 
 20123      49445F4E 
 20123      414D4500 
 20124              	.LASF175:
 20125 05da 6469736B 		.ascii	"disk_write\000"
 20125      5F777269 
 20125      746500
 20126              	.LASF108:
 20127 05e5 6D6F7665 		.ascii	"move_window\000"
 20127      5F77696E 
 20127      646F7700 
 20128              	.LASF89:
 20129 05f1 6C645F64 		.ascii	"ld_dword\000"
 20129      776F7264 
 20129      00
 20130              	.LASF25:
 20131 05fa 6673695F 		.ascii	"fsi_flag\000"
 20131      666C6167 
 20131      00
 20132              	.LASF92:
 20133 0603 6D656D5F 		.ascii	"mem_cpy\000"
 20133      63707900 
 20134              	.LASF140:
 20135 060b 72656D61 		.ascii	"remain\000"
 20135      696E00
 20136              	.LASF53:
 20137 0612 66617474 		.ascii	"fattrib\000"
 20137      72696200 
 20138              	.LASF178:
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 484


 20139 061a 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 20139      4320342E 
 20139      392E3320 
 20139      32303135 
 20139      30333033 
 20140 064d 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 20140      20726576 
 20140      6973696F 
 20140      6E203232 
 20140      31323230 
 20141 0680 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 20141      66756E63 
 20141      74696F6E 
 20141      2D736563 
 20141      74696F6E 
 20142              	.LASF107:
 20143 06a8 77736563 		.ascii	"wsect\000"
 20143      7400
 20144              	.LASF90:
 20145 06ae 73745F77 		.ascii	"st_word\000"
 20145      6F726400 
 20146              	.LASF43:
 20147 06b6 5F464449 		.ascii	"_FDID\000"
 20147      4400
 20148              	.LASF161:
 20149 06bc 665F7472 		.ascii	"f_truncate\000"
 20149      756E6361 
 20149      746500
 20150              	.LASF12:
 20151 06c7 75696E74 		.ascii	"uint8_t\000"
 20151      385F7400 
 20152              	.LASF141:
 20153 06cf 72636E74 		.ascii	"rcnt\000"
 20153      00
 20154              	.LASF170:
 20155 06d4 665F7075 		.ascii	"f_puts\000"
 20155      747300
 20156              	.LASF152:
 20157 06db 6E736563 		.ascii	"nsect\000"
 20157      7400
 20158              	.LASF40:
 20159 06e1 73746174 		.ascii	"stat\000"
 20159      00
 20160              	.LASF76:
 20161 06e6 46524553 		.ascii	"FRESULT\000"
 20161      554C5400 
 20162              	.LASF79:
 20163 06ee 5245535F 		.ascii	"RES_ERROR\000"
 20163      4552524F 
 20163      5200
 20164              	.LASF84:
 20165 06f8 5F5F676E 		.ascii	"__gnuc_va_list\000"
 20165      75635F76 
 20165      615F6C69 
 20165      737400
 20166              	.LASF137:
 20167 0707 665F6F70 		.ascii	"f_open\000"
ARM GAS  C:\Users\honet\AppData\Local\Temp\ccgN2CcD.s 			page 485


 20167      656E00
 20168              	.LASF61:
 20169 070e 46525F4E 		.ascii	"FR_NO_PATH\000"
 20169      4F5F5041 
 20169      544800
 20170              	.LASF155:
 20171 0719 665F636C 		.ascii	"f_closedir\000"
 20171      6F736564 
 20171      697200
 20172              	.LASF59:
 20173 0724 46525F4E 		.ascii	"FR_NOT_READY\000"
 20173      4F545F52 
 20173      45414459 
 20173      00
 20174              	.LASF176:
 20175 0731 6469736B 		.ascii	"disk_read\000"
 20175      5F726561 
 20175      6400
 20176              	.LASF173:
 20177 073b 46736964 		.ascii	"Fsid\000"
 20177      00
 20178              	.LASF46:
 20179 0740 636C7573 		.ascii	"clust\000"
 20179      7400
 20180              	.LASF115:
 20181 0746 74736563 		.ascii	"tsect\000"
 20181      7400
 20182              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
